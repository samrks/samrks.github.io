[{"categories":null,"content":"每一天都是新的开始，Stay Simple，Stay Young","date":"2020-03-06","objectID":"/20200306-%E5%BC%80%E5%8D%9A%E7%BA%AA%E5%BF%B5/","tags":["开博纪念"],"title":"【置顶】开博纪念🥰","uri":"/20200306-%E5%BC%80%E5%8D%9A%E7%BA%AA%E5%BF%B5/"},{"categories":null,"content":"每一天都是新的开始，Stay Simple，Stay Young ","date":"2020-03-06","objectID":"/20200306-%E5%BC%80%E5%8D%9A%E7%BA%AA%E5%BF%B5/:0:0","tags":["开博纪念"],"title":"【置顶】开博纪念🥰","uri":"/20200306-%E5%BC%80%E5%8D%9A%E7%BA%AA%E5%BF%B5/"},{"categories":null,"content":"Yeah！ 每一天都是新的开始，Stay Simple，Stay Young ","date":"2020-03-06","objectID":"/20200306-%E5%BC%80%E5%8D%9A%E7%BA%AA%E5%BF%B5/:1:0","tags":["开博纪念"],"title":"【置顶】开博纪念🥰","uri":"/20200306-%E5%BC%80%E5%8D%9A%E7%BA%AA%E5%BF%B5/"},{"categories":["HTTP"],"content":"本文主要内容围绕 URL ，为后面学 HTTP 做个铺垫 ​ URL 是什么 ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:0:0","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"先导 ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:1:0","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"英语：protocol protocol /ˈproʊtəkɑːl/ 协议、礼节、约定 ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:1:1","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"李爵士发明的三样东西 WWW = URL + HTTP + HTML HTML 前面已经学习了，html + css 本质就是网页 再了解了 URL 和 HTTP ，那么 WWW 我们就基本认识了 本节内容：URL，为后面学习 HTTP 做一下铺垫 ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:1:2","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"什么是 IP 要学习 URL 、HTTP，得先从 IP 讲起（⭐剧透：HTTP 的 P 和 IP 的 P 之间有重要联系） IP：Internet（因特网==互联网，整个人类组成的网络就叫互联网，比WWW更加底层）protocol（协议） 由此可见 IP 也是非常底层的，没有 IP 就不能上网 Internet Protocal 主要约定了两件事： 一、如何定位一台设备 二、如何封装数据报文，以跟其他设备交流 具体内容我们不关心 只要你在互联网中，你就有至少一个独特的IP ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:2:0","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"IP 分为内网和外网 内网和外网是不能直接相通的，只能通过路由器作为网关，来连通 路由器：是一个非常重要的设备，连通了内网和外网 例：比如你在玩 LOL，按了一下Q键（第一个技能），怎么让网线那头的对手被Q到？ Q 通过键盘传到路由器，路由器通过电信服务器传到 QQ 的游戏服务器， QQ 的游戏服务器接收到 Q 键后，就将 Q 键发送到对手那里，对手就被 Q 到了 整个过程是非常复杂的，但非常快，按下Q键立马响应，因为这个复杂的过程是以光速的形式来运行的，所以用户感受不到 ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:2:1","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"如何获取外网 IP 必须有 外网IP 才能和小伙伴打 LOL、王者荣耀… 首先，你得从电信租用带宽，一年一千多。 （然后需要有个猫（调制解调器），猫是用来把信号转换成路由器能理解的信号。现在普遍是光猫，把光信号变成电信号，变成路由器能理解的网络信号） 你买了一个路由器，然后用电脑和手机分别连接路由器广播出来的无线 WIFl。 有线连接和无线WiFi在本质上没有不同，但在实际使用中，无线可能慢于有线连接 有线连接的下载速度可能超过 10M/s，但无线WIFI连接的设备的下载速度可能无法超过 10M/s 只要路由器连上电信的服务器，那么路由器就会有一个「外网 IP」 ，比如 [ 14.17.32.211 ] 就是一个外网 IP。这就是你在互联网中的地址。 访问 https://ip138.com/ 查看当前外网 IP（通常外网IP不要告诉别人，可以准确定位你的位置） 那么你的所有设备，就全都是这一个 外网 IP 那么如何区分是手机设备…还是笔记本呢？这就依靠「内网 IP」来区分了 但是如果你重启路由器，那么你很有「可能」被重新分配一个「外网 IP」，也就是说你的路由器没有「固定的外网 IP」 如果想固定外网IP ，需要花钱每个月五六千，可以得到一个固定的外网IP（在国内购买这些网络资源通常贵于国外） 但是有个问题，你的路由器的外网 IP 如果是 14.17.32.211，那么你的手机和电脑的 IP 又是什么呢？答案是「内网IP」 ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:2:2","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"内网 IP 路由器会在你家里创建一个内网，内网中的设备使用内网IP，一般来说这个IP的格式都是192.168.xxx.xxx。 命令行：ipconfig ，查看当前设备的内网 IP ：192.168.101.10 默认网关中的 IP：192.168.101.1 是路由器的 IP 如果你家足够大，路由器可能功率不够，覆盖不了整个家，用户可能需要买电力猫或再买一个小路由器做中介器之类的手段，来扩大覆盖范围到整个家。 如果家里五六十平米，那路由器基本可以全覆盖。 一般路由会给自己分配一个好记的内网IP，如 192.168.1.1 小米路由器的 IP ，一般都是 192.168.31.1，为了让出一个位置给光猫的 IP 然后路由会给每一个内网中的设备分配一个不同的内网 IP，如电脑是 192.168.1.2，手机是 192.168.1.3，以此类推。 ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:2:3","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"路由器的功能 现在路由器有两个 IP，一个外网 IP（电信分配的）和一个内网 IP（自己分配给自己的） 内网中的设备可以互相访问，但是不能直接访问外网 内网设备想要访问外网，就必须经过路由器中转 外网中的设备可以互相访问，但是无法访问你的内网 外网设备想要把内容送到内网，也必须通过路由器 想从网上（外网）下载内容，会先把内容下载到路由器，路由器再把内容下载到用户的设备上 也就是说内网和外网就像两个隔绝的空间，无法互通，唯一的联通点就是路由器 所以路由器有时候也被叫做「网关] 一夫当关，万夫莫开。一旦把路由器拔了，那就与网络世界断联了 ​ 用 http-server 可以创建一个服务 命令行：http-server . -c-1 第一个地址 192.168.xxx.xxx:8080 ，是给手机访问的（需要手机端调试内容时，就可以使用） 第二个地址 127.0.0.1:8080 ，是给电脑访问的 ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:2:4","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"几个特殊的 IP 分别是 127.0.0.1 表示自己（规定死的） localhost 通过 hosts 指定为自己 0.0.0.0 不表示任何设备 ​ 问：hosts 文件在哪？ 答： 在 Windows 系统中，hosts 位于 C:\\Windows\\System32\\drivers\\etc\\hosts 。在 macOS / Linux系统中，hosts 位于 /etc/hosts hosts 文件，用于指定本机 IP （表示自己） 127.0.0.1 / localhost 是 hosts 中默认的 （表示自己） 也可以在 hosts 文件中添加自定义 任何字符串 来表示自己（文件中的#内容均为注释，可删） 写法如下，定义后，就可以使用这些字符串来访问本地服务 + 127.0.0.1 sam + 127.0.0.1 ryuuks 注意：需要通过 http-server 开启本地服务后，下述地址才可以使用 http://localhost:8080/index.html http://127.0.0.1:8080/index.html http://sam:8080/index.html http://ryuuks:8080/index.html 上述地址，均可以访问到 index.html ​ ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:2:5","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"端口 IP 有了，还需要什么？ 端口 WWW（万维网）= URL + HTTP + HTML URL 就是用来定位服务器的，例如，定位百度的服务器 baidu.com 一台机器可以提供很多服务 每个服务一个号码，这个号码就叫端口号port ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:3:0","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"端口 port 一个比喻 麦当劳提供两个窗口，一号快餐，二号咖啡 你去快餐窗口点咖啡会被拒绝，让你去另一个窗口 你去咖啡窗口点快餐结果一样 在计算机世界也是这样，你要提供不同的服务，就需要有不同的窗口。这个窗口，就是端口 port 一台机器可以提供不同服务 要提供 HTTP 服务最好使用 80 端口 要提供 HTTPS 服务最好使用 443 端口 要提供 FTP 服务最好使用 21 端口 一共有 65535 个端口（基本够用） ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:3:1","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"我怎么知道应该用什么端口 维基百科一个一个列出来了，需要的时候就对应查找 端口 描述 80/TCP,UDP 超文本传输协议（HTTP）或 快速UDP网络连接- 用于传输网页 例如：百度服务器要给用户传输一个网页，那就必须用80端口，用其他端口会有问题 443/TCP 超文本传输安全协议（HTTPS）或QUIC HTTPS 协议传输就必须用 443 端口，用其他端口也会有问题 21/TCP,UDP 文件传输协议（FTP） - 控制端口 80后和早期的90后应该在学校见过FTP协议，传文件都是通过 FTP。95后00后可能没见过FTP了 ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:3:2","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"端口使用还有什么规则 0 到 1023（2的10次方减1）号端口是留给系统使用的 普通用户绝对不能使用 即使是管理员有使用权限，但也需要输入额外的密码才能使用这些端口，所以也不推荐管理员使用 通常使用 8080 端口做开发，真正部署服务器时，拥有服务器权限才能用 80 端口… 你只有拥有了管理员权限后，才能使用这 1024 个端口 其他端口可以给普通用户使用 比如 http-server 默认使用 8080 端口 一个端口如果被占用，你就只能换一个端口 在其他端口开启服务 在 1234 端口开启服务 命令行：hs -c-1 -p 1234（hs：http-server 简写） http://192.168.101.10:1234 http://127.0.0.1:1234 通过访问 http://localhost:1234/index.html 就可以浏览本地页面 可否强行使用 80 端口，开启服务呢？🉑 仅在 windows 上能直接使用这个端口号，在 Linus 和 Mac 中都必须输入密码才能使用，不推荐 命令行：hs -c-1 -p 80 （在 80 端口开启服务） http://192.168.101.10:80 http://127.0.0.1:80 通过访问 http://localhost/index.html 就可以浏览本地页面（80 是默认端口，可省略） 端口被占用的情况，会有如下报错，换个其他的端口号即可（六万多个端口） hs -c-1 -p 80 =\u003e Error: listen EADDRINUSE 0.0.0.0:80 // EADDRINUSE: error address in use 错误地址正在使用中 hs -c-1 -p 1234 =\u003e Error: listen EADDRINUSE 0.0.0.0:1234 // error address in use hs -c-1 -p 2233 =\u003e http://192.168.101.10:2233 =\u003e http://127.0.0.1:2233 ​ ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:3:3","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"IP 和端口缺一不可 总而言之：IP 和 端口 缺一不可 （记住这句话） IP 是用来定位一个设备。 端口是用来定位一个设备的服务。 有了 IP 和端口，就可以定位一个设备提供的服务了。 例如：百度设备提供的网页服务。腾讯设备提供的聊天服务。淘宝设备提供的支付服务 这些服务都可以通过 IP + 端口 ，实现唯一确定 ​ ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:4:0","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"域名是什么 域名是以 .com .net .org … 结尾的字符串，仅此而已。需要花钱购买 如：qq.com 在前面搭建个人博客时，已经注册过域名。 我没有自己的服务器，而是将这个域名映射到（指向） github 的服务器上 github 给我 4 个 IP。用户访问时，会访问到这4台中的任何一台服务器。访问的内容都是一样的 ​ 补充： .com 域名，比较便宜，一年50-80 t.tt，曾经是锤子手机的域名，转手价50W。访问 t.tt 跳转至锤子手机官网：smartisan.com 蔡文胜，2000年抢注十多万个域名，倒手生意。 qiyi.com 是百度旗下爱奇艺的域名 为什么我们需要向国外的人购买域名？发域名的机构也很赚钱。这就是美国人欧洲人赚钱的思维，我发明一套东西，用户都需要使用的，那使用一次就要交一次钱。 比如苹果有很多手机专利。谷歌买了摩托罗拉，摩托罗拉也有很多手机专利。谷歌发明了安卓系统，手机厂商用到安卓系统里面的谷歌服务，也需要给谷歌钱。 中国的 5G 出来了，如果以后世界的 5G 应用是由中国主导，关键技术是中国的，那么中国就可以躺着赚钱。如果中国的 5G 搞起来了，那就不单是 5G，周边的所有产业都会全面超过其他国家（所以川普联合各国抵制） 在互联网，每一个新东西出来，都蕴藏着巨大的商机。 如5G ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:5:0","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"域名就是对 IP 的别称 baidu.com 对应什么 IP 命令行：ping baidu.com 220.181.38.148 // 也有 39.156.69.79 qq.com 对应什么 IP 命令行：ping qq.com 125.39.52.26 知识点 先总结：IP 和 域名 之间，没有什么必然的一对一关系 一个域名可以对应不同 IP 这个叫做均衡负载，防止一台机器扛不住 一个 IP 可以对应不同域名 比如6个人合买一台主机，这台主机服务6个域名 就叫做共享主机，穷开发者会这么做 或者一个公司提供不同的网站，但不想买两台服务器，就把两个网站（两个域名）放在同一台主机上 ​ 通常 ping 同一个域名，不一定会得到同一个 IP。这里涉及 负载均衡 的问题。 假如，一万人同时访问百度，如果只有一个服务器，就要同时接纳一万人。 如果有100万人同时访问，，即使每人只分配1k内存，也需要 100万 k，那么这台服务器肯定容纳不了 解决方法，把这个域名绑定到4个不同的 IP 上，4个 IP 分别位于 华中、华南、华东、华北。 电信有全国服务器，告诉电信，如果用户来自华中，就访问华中服务器…（1/4分流） 如此实现负载均衡。分散负担，不至于让某个服务器因承受不了而宕机。（网站优化策略） ​ 补充： ping 的作者写的一篇文章：The Story of the PING Program 皮卡丘站起来，是皮卡兵。皮卡丘跑起来是什么？答案 😂 ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:5:1","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"域名和 IP 是怎么对应起来的 通过 DNS Domain Name System （域名系统、域名服务） 当你输入 baidu.com 过程 你的 Chrome 浏览器会向电信/联通提供的 DNS 服务器询问 baidu.com 对应什么IP 电信/联通会回答一个 IP（具体过程很复杂，不研究） 这个过程可以用 nslookup 模拟（ns域名，lookup寻找）命令行：nslookup baidu.com 然后 Chrome 才会向对应 IP 的 80 / 443 端口发送请求 请求内容是查看 baidu.com 的首页 baidu 收到请求，就会把你请求的页面的 index.html 发送给你，index.html 中又会请求 css 、js，加载完css、js，就可以看到 baidu.com 的完整页面 ​ 在 network 中可以查看全部请求 Request URL: https://www.baidu.com/（末尾的 / 表示请求的是baidu的根目录） Response：[得到一个\u003chtml\u003e…\u003c/html\u003e]，浏览器就会把这一串 html 渲染出来（中间遇到 link 会请求对应的图片、css、js等文件） ​ 为什么是 80 或 443 端口？ 因为这是规定。 我们在地址栏输入 baidu.com 时，为什么不用写端口号？如 baidu.com:443 （ IP 和端口不是缺一不可吗！） 服务器默认用 80 提供 http 服务 服务器默认用 443 提供 https 服务 你可以在开发者工具里看到具体的端口 61.135.168.125:443 （ 前面就是服务器 IP ，后面就是网页服务的端口） 访问 http 就是 80，访问 https 就是 443 ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:5:2","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"题外话 前端需要懂点域名知识 www www.baidu.com 和 baidu.com 是同一个域名吗？不是 他们是什么关系 com 是顶级域名（com 全写 company 公司，org 非营利性组织） baidu.com 是二级域名（俗称一级域名）父域名 www.baidu.com 是三级域名（俗称二级）子域名 他们是父子关系 github.io 把子域名 xxx.github.io 免费给你使用 所以 github.io（github公司）和 xxx.github.io（个人网站） 可能不是同一家公司，之间没什么关系 所以你应该知道 www.baidu.com 和 baidu.com 可以不是同一家公司，也可以是 www 是多余的吗？是的，非常多余。 早期人们为了表明自己是 www 而加的，实际上没有必要加，因为所有域名本身就存在与 万维网www中，写上www前缀反倒多此一举 ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:5:3","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"如何请求不同的页面 访问不同的路径，就请求到不同的页面，如下（注意：路径后面不加后缀） https://developer.mozilla.org/zh-CN/docs/Web/HTML https://developer.mozilla.org/zh-CN/docs/Web/CSS 工具 使用 Chrome 开发者工具 Network 面板看看区别 只有 Request URL 不同 ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:6:0","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"同一个页面，不同内容 不同的查询参数，返回不同的内容 www.baidu.com/s?wd=hi www.baidu.com/s?wd=hello ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:7:0","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"同一个内容，不同位置 锚点可以做到 https://developer.mozilla.org/zh-CN/docs/Web/CSS#参考书 https://developer.mozilla.org/zh-CN/docs/Web/CSS#教程 注意 锚点看起来有中文，实际不支持中文 #参考书 会变成 #%E5%8F%82%E8%80%83%E4%B9%A6 重新编码 锚点是无法在 Network 面板看到的，因为锚点不会传给服务器。 # 井号后面的内容会被浏览器直接吃掉，并不会传到服务器中 锚点仍在当前页面中，只是位置不同而已，并不需要重新请求数据 注意：一定不要把用户传参拼接到 # 后面，会被浏览器当做锚点内容直接吃掉，服务器就无法获取到参数 ​ ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:8:0","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"一个 URL 的完整内容 协议 + 域名 或 IP + 端口号 + 路径 + 查询字符串 + 锚点 协议：分 HTTP 和 HTTPS 域名：用来表示IP对应的名称的字符串 IP ：用来定位一个设备的字符串（分为4段，最大值255） 端口号：提供一个服务，就要有对用端口号（有六万多个） 路径：就是一个字符串，用来判断用户访问什么网页 查询参数：就是这个网页中，用户要具体看什么内容，可能有分页 锚点：内容已经获取到了，通过锚点定位到用户想要具体查看的内容的位置（实现文档内部的定位） 把上述全部加起来，就是 李爵士发明的 URL （统一资源定位符） URL U：Uniform 统一。国际化标准的 R：Resouce 资源。图片、网页…都是资源 L：Locator 定位符。 例： 就算没写，你也应该知道端口 HTTPS 默认端口 443、HTTP 默认端口 80 ​ ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:9:0","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"HTTP（协议） 前面讲了 IP 协议：是用于表示每个设备的地址 而 HTTP 协议：是用来表示如何传输网页的 HTTP协议，是基于 TCP 和 IP 两个协议 先有 TCP、IP，李爵士基于前人发明的这两个协议，发明了新的 HTTP 协议 ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:10:0","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"curl 命令 curl /kɜːrl/ 使…卷曲 如何用 curl 命令，发出 HTTP 的请求？ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:11:0","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"用 curl 可以发 HTTP 请求 示例1： curl https://www.baidu.com 执行命令，获取到整个文档。（中文默认 utf-8 编码，而控制台默认 GBK 所以中文会乱码） 我们在 Chrome 的地址栏中输入上述网址，Chrome 也是做了同样的事情，获取到这个html文档并解析 ​ 示例2： curl -v http://baidu.com 只有域名没有路径 -v ： verbose /vɜːrˈboʊs/ 啰嗦（效果：会显示更多内容） 请求的内容 我们发出的 HTTP 请求中，只有域名没有路径，则默认请求根路径，会自动补全根路径的斜杠 / 开启代理，使用了一些代理的功能（非必须） 问了DNS：获取到 baidu.com 的 IP 获取到 IP 后，就开始启动 TCP 开始连接到 baidu.com（ 220.181.38.148 这个 IP） 的 80 端口 连接成功，往 baidu.com 发送了这5行内容 GET请求，请求/根路径，使用 HTTP 协议 1.1 版本 因为一个IP（220.181.38.148）可能对应多个域名，说明需要访问的是这个IP上的 baidu.com 这个域名 说明我是用什么来访问的：用 curl 的 7.61.1 版本来访问的 期待返回什么内容：*/* 表示所有内容我都接收 空行（发送一个回车） 表示请求头部分结束 返回的内容 响应头：先忽略 😂 \u003chtml\u003e \u003cmeta …\u003e \u003c/html\u003e meta 中内容，意为请重新访问 http://www.baidu.com 说明 http://baidu.com 这个 URL 被弃用了，只使用这个最早就有的 URL www.baidu.com 通常直接使用 baidu.com 访问百度的人，基本都是程序员，将程序员的流量导到 www 上 上面请求失败，发起第二次请求 curl -v http://www.baidu.com ​ 示例3： curl -s -v -- https://www.baidu.com 会比上面显示的内容更详细 ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:11:1","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"需要理解以下流程 url 会被 curl 工具重写，先请求 DNS 获得 IP 先进行 TCP 连接，TCP 连接成功后，开始发送 HTTP 请求 请求内容看一眼 响应内容看一眼 响应结束后，关闭TCP连接（curl 中没有直接写出来） 真正结束（只有TCP结束才是真正的结束） ​ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:11:2","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["HTTP"],"content":"HTTP HTTP 到底做了什么 规定请求的格式是什么，响应的格式是什么 HTTP 规定了请求怎么写： 如何写第6步中的5行请求 HTTP 规定了响应怎么写： 如何写下面响应的内容 ​ 那么 HTTP 到底是怎么规定请求格式和响应格式的？ 下回分解 ✋ ","date":"2020-08-04","objectID":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/:11:3","tags":["HTTP","笔记"],"title":"前端也得懂点儿 HTTP（上）","uri":"/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/"},{"categories":["CSS 入门"],"content":"CSS is A*s***e!! 🥴 🤢 🤮","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"浏览器的渲染流程、transform、transition、animation ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:0:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"动画的原理 人脑的 bug ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:1:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"动画 定义 由许多静止的画面（帧）， 以一定的速度（如每秒30张）连续播放时， 肉眼因视觉残象产生错觉， 而误以为是活动的画面。 概念 帧：每个静止的画面都叫做帧 播放速度：每秒24帧（影视）或者每秒30帧（游戏） ​ ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:1:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"一个最简单的例子 ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:2:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"将div从左往右移动 http://js.jirengu.com/bagow/1/edit?html,css,js,output JSBin 示例1 通过循环定时器 + 定位 + left 实现动画。控制每隔一小段时间增加 left 值，实现位移 JSBin 示例2 通过延时器 + 添加类名 + transition / transform 实现动画。控制添加类名 原理 每过一段时间（用setlnterval做到）， 将div移动一小段距离， 直到移动到目标地点。 注意性能 需要先搞懂：浏览器的渲染步骤，以及 每个属性会触发什么流程 绿色表示重新绘制（repaint）了 CSS渲染过程依次包含布局、绘制、合成 其中布局和绘制有可能被省略 ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:2:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"前端高手不用 left 做动画 用 transform（变形） JSBin 演示 原理 transform: translateX(0=\u003e300px) 直接修改会被合成，需要等一会修改 transition 过渡属性可以自动脑补中间帧 注意性能 需要先搞懂：浏览器的渲染步骤，以及 每个属性会触发什么流程 transform 优势在于，并没有 relayout（重新布局） 和 repaint（重新绘制）过程 transform 比 left 性能好很多（ 因为 left 会依次经过 relayout、 repaint、composite 3个过程） ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:2:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"如何查看性能 上述 JSBin 示例1/2两种方式，在性能上有什么区别 ？ 查看性能的方式 开启浏览器的【渲染 Rendering 】\u003e 【画图闪烁 Paint flashing】：突出显示需要重新绘制的页面区域（绿色） 如果元素发生的重新渲染（绿）的次数多，则更耗性能 示例1：使用 setInterval ，控制 left 实现动画 （位移全程 demo元素 都呈绿色：说明全程都在进行demo元素的重新渲染绘制） 示例2：添加类名，通过 transition + transform 实现动画 （刷新后，初次渲染呈绿色，移动过程没有发生重新渲染，移动结束的位置重新渲染一次） 总结：显然 ，示例1 更耗性能，全程都需要重新渲染 ​ ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:2:3","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"浏览器的渲染原理 既然讲到这里，提到了性能、渲染，那就深入了解一下 了解浏览器的渲染流程后，再回头看前面2个示例，可能会更好理解它们的不同 ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:3:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"参考文章 Google 团队写的文章（右上角中文） 渲染树构建、布局及绘制 渲染性能 使用 transform 来实现动画 查看CSS各属性触发什么 CSSTriggers.com ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:3:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"浏览器渲染过程 浏览器在获取到 html 和 css 后做了什么？ 步骤 根据 HTML 构建 HTML 树（DOM） 根据 CSS 构建 CSS 树（CSSOM） 将两棵树合并成一颗渲染树（render tree） 根据渲染树，进行 Layout 布局（文档流、盒模型、计算大小和位置） 先定位：某个标签是否在文档流中…（文档流的概念非常重要！！） 定位后，要知道这个标签多高多宽、样式如何… Paint 绘制（填色：把边框颜色、文字颜色、阴影等画出来） Composite 合成（根据层叠关系展示画面） 三棵树 render tree 就是最终用户看到的树 ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:3:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"如何更新样式 ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:4:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"一般我们用 JS 来更新样式 比如 div.style.background='red' 让内联背景变红色 比如 div.style.display='none' 让div消失 比如 div.classList.add('red') （小白才直接加样式，高手从来只加类名） 比如 div.remove()直接删掉节点 ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:4:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"那么这些方法有什么不同吗 有三种不同的渲染方式 详细看下面 ↓↓ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:4:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"三种更新方式 使用 JS 来更新样式，要经过哪些步骤 ？ 下面有3种代码示例，配合开启浏览器渲染功能，清晰看到执行重新绘制（Paint）的元素 注意 JSBin 中最好全屏查看效果，在 iframe 里看可能有问题 第一种，流程全走一遍 div.remove() 会触发当前消失，其他元素 relayout 重新布局 第二种，跳过 layout 说明没有改变元素的位置和大小，不需要变动布局 比如说：只改变背景颜色，直接 repaint + composite 第三种，跳过 layout 和 paint 没有改变位置、大小，也没有改颜色，只需要合成 例如：只改变 transform，则只需 composite 合成 注意必须全屏查看效果，在 iframe 里看有问题 ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:4:3","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"每个属性触发什么流程 CSS变态之处来了：挨个尝试吧 还好，程序员喜欢分享 https://csstriggers.com/ 这个网站已经把所有属性全试过了 Blink：谷歌 Chrome 浏览器的内核（一般只看 Chrome 性能渲染） Gecko：火狐浏览器 Firefox WebKit：苹果 Safari 浏览器 EdgeHTML：微软 Edge 浏览器 现在可以解释 为什么 前端高手不用 left 做动画，而用 transform 做动画了 因为执行 left 会触发3个流程：先布局、再绘制、最后合成 而执行 transform 只会触发 1个流程：只合成 ​ ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:4:4","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"CSS动画优化 可以自己总结一篇博客。面试背不出来，可以让面试官去看博客 CSS 性能优化，除了把 left 变成 transform ，还有什么？ 面试可能考察，但这个问题没什么技术含量，就是背 ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:5:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"没什么技术含量 答案都在 Google写的文章 里，谁看完谁牛 X 优化 JS 的执行 （JavaScript） 缩小样式计算的范围并降低其复杂性 （优化 Style 过程） 避免大型、复杂的布局和布局抖动（优化 Layout 布局过程） 简化绘制的复杂度、减小绘制区域（优化 Paint 绘制过程） 坚持仅合成器的属性和管理层计数（优化 Composite 合成过程） 上述每篇文章中的优化方法，都总结在【==TL;DR==（too long don’t read 太长不看）】部分 每条优化点之间，都没什么规律，就依靠死记硬背（面试问到，可能这些点，如果能答出1个，就得满分） ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:5:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"JS优化 使用 requestAnimationFrame 代替 setTimeout 或 setInterval ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:5:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"CSS优化 使用 will-change 或 translate（transform） ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:5:3","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"没错 没错，完全就是死记硬背！ 如果面试官问，“ CSS 怎么优化 ”？（通常就是问动画怎么优化，性能上更低耗） 动画尽量使用 will-change 或 translate（transform），不直接使用 left JS 控制的动画中，尽量不使用 setTimeout 和 setInterval，而使用 requestAnimationFrame ​ ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:5:4","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"transform 全解 MDN 上讲的非常详细 ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:6:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"transform 四个常用功能 位移 translate（常用） 缩放 scale（常用） 旋转 rotate（做加载动画可能用到） 倾斜 skew（不常用） 经验 一般都需要配合 transition 过渡 inline 元素不支持 transform，需要先变成 block ​ ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:6:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"transform之translate 常用写法 可以写长度length和百分号percentage， ?表示可省略值 translateX(\u003clength-percentage\u003e) （横向） translateY（\u003clength-percentage\u003e) （纵向） translate(\u003clength-percentage\u003e,\u003clength-percentage\u003e?) 可省略第二个值，只写第一个值，默认x轴 translateZ(\u003clength\u003e) （垂直于屏幕的方向） 在三维世界中，才能看出 Z 的变化。 需要配合 perspective 属性，告知浏览器视点的位置 来形成三维。 例：perspective: 1000px 指视点在（位于画面中心）距离屏幕 1000 像素的位置上。 注意：是给父容器设置 perspective \u003cdiv class=\"wrapper\"\u003e \u003cdiv id=\"demo\"\u003e\u003c/div\u003e \u003c/div\u003e \u003cstyle\u003e #demo{ width: 100px; height: 200px; border: 1px solid red; margin: 50px; } #demo:hover{ transform: translateZ(50px); /* 元素在z轴（默认垂直屏幕方向）上的位置 */ } .wrapper{ perspective: 1000px; /* 形成三维构图，标注视点位置 */ border: 1px solid black; } \u003c/style\u003e translate3d(x,y,z) translate3d(50px,50px,200px); 同时设定3个轴上的位置 JSBin 演示 经验 要学会看懂 MDN 的语法格式 translate(-50%，-50%) 可做绝对定位元素的居中 #demo{ position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%) } ​ ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:6:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"transform之scale 常用写法 scaleX(\u003cnumber\u003e) scaleY(\u003cnumber\u003e) scale(\u003cnumber\u003e,\u003cnumber\u003e?) JSBin 演示 经验 用得较少，因为缩放容易出现模糊 border 也会跟随缩放 ​ ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:6:3","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"transform之rotate 常用写法 rotate 默认以 Z轴为中心轴，进行转动 rotate（[\u003cangle\u003e|\u003czero\u003e]) 以Z轴为中心旋转 rotateZ([\u003cangle\u003e|\u003czero\u003e]) 以Z轴为中心旋转 rotateX([\u003cangle\u003e|\u003czero\u003e]) 以X轴为中心旋转 rotateY（[\u003cangle\u003e|\u003czero\u003e]) 以Y轴为中心旋转 rotate3d 太复杂，无法用语言表述 JSBin 演示 经验 一般用于360度旋转制作 loading 用到时再搜索 rotate MDN 看文档 ​ ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:6:4","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"transform之skew 常用写法 skewX([\u003cangle\u003e|\u003czero\u003e]) skewY（[\u003cangle\u003e|\u003czero\u003e]) skew([\u003cangle\u003eI\u003czero\u003e],[\u003cangle\u003e|\u003czero\u003e]?) JSBin 演示 经验 用得较少 用到时再搜 skew MDN 文档 ​ ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:6:5","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"transform 多重效果 组合使用 transform: scale(0.5) translate(-100%, -100%); transform: none; 取消所有 ​ ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:6:6","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"实践：用 transform 做红心 ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:7:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"跳动的心 JSBin ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:7:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"心得 CSS需要你有想象力，而不是逻辑 CSS给出的属性都很简单，但是可以组合得很复杂 \u003c!doctype html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"\u003e \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e \u003ctitle\u003ebeating heart\u003c/title\u003e \u003cstyle\u003e *{ margin: 0; padding: 0; box-sizing: border-box; } #heart{ margin: 100px; position: relative; /*border: 1px solid black;*/ display: inline-block; transition: all .5s ease; } #heart:hover{ transform: scale(1.5); } #heart\u003e.bottom{ width: 50px; height: 50px; background-color: red; /*border: 1px solid red;*/ transform: rotate(45deg); } #heart\u003e.left{ width: 50px; height: 50px; background-color: red; /*border: 1px solid red;*/ border-radius: 50% 0 0 50%; transform: rotate(45deg) translateX(31px); position: absolute; bottom:100%; right: 100%; } #heart \u003e .right { width: 50px; height: 50px; background-color: red; /*border: 1px solid red;*/ border-radius: 50% 50% 0 0; transform: rotate(45deg) translate(0,30px); position: absolute; bottom: 100%; left: 100%; } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id=\"heart\"\u003e \u003cdiv class=\"left\"\u003e\u003c/div\u003e \u003cdiv class=\"right\"\u003e\u003c/div\u003e \u003cdiv class=\"bottom\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e ​ ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:7:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"transition 过渡 学习资料：MDN ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:8:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"作用 补充中间帧 已知开头位置，结尾位置，中间运动轨迹自动补齐 ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:8:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"语法 transition CSS 属性是 transition-property，transition-duration，transition-timing-function 和 transition-delay 的一个简写属性。 JSBin 示例 transition: 属性名 时长 过渡方式 延迟 transition: left 200ms linear 属性名是指要给哪个属性添加过渡效果 可以用 all 代表所有属性：width | height | left | right | margin-right …… transition: all 200ms 可以用逗号分隔两个不同属性 transition: left 200ms, top 400ms 时长 ：支持 秒 s 和 毫秒 ms 单位。0.5s 可以写成 .5s 过渡方式有：linear（线性匀速） | ease（默认值：缓动） | ease-in | ease-out | ease- in-out | cubic-bezier | step-start | step-end | steps 具体含义要靠数学知识 https://cubic-bezier.com/ 测试运动曲线 ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:8:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"注意 不学常态，学变态 并不是所有属性都能过渡 一个元素，切换可见状态 使用 display: none \u003c=\u003e display: block 没法过渡，会闪现、闪隐【元素消失，不占位置】 使用 opacity: 0 \u003c=\u003e opacity: 1 透明度控制可见状态【可实现过渡效果，缺点是元素消失仍占位置】 推荐使用 visibility: hidden \u003c=\u003e visibility: visible （不要问为什么）【缺点没法过渡、元素消失仍占位置】 button.onclick = () =\u003e { demo.classList.add('end'); /* 解决隐藏后仍占位问题：延迟1s后，将元素删除 */ /* 方法一：使用延时器 */ setTimeout(() =\u003e { demo.remove(); } ,1000) /* 方法二: on事件可能有bug，推荐使用事件监听器 */ demo.ontransitionend = () =\u003e { demo.remove(); } /* on事件 */ demo.addEventLisener('transitionend', () =\u003e { demo.remove(); }) /* 事件监听器 */ } display 和 visibility 的区别 https://www.cnblogs.com/zrenj/p/9785835.html background 颜色可以过渡吗？可以 。 查看示例 opacity 透明度可以过渡吗？ 可以 。 查看示例 不推荐用透明度控制显示隐藏，推荐 visibility opacity: 0 \u003c=\u003e opacity: 1 可实现过渡效果，缺点是元素消失仍占位置，可通过 js 控制 remove() 该元素 ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:8:3","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"过渡必须要有起始 起始：指一个属性的开始是一个值，该属性的结尾也有一个值。这样才能实现某属性的属性值的变化过渡，中间过渡的效果浏览器会自动补充 一般只有一次动画，或者两次 一次：指只有进入动画 两次：①进入动画、②离开动画 比如 hover 和 非 hover 状态的过渡，就是两次动画 ​ ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:8:4","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"如果除了起始，还有中间点，怎么办 例如：从红色，先变黄色，最后再变绿色，怎么实现 有如下两种办法 ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:9:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"方法① 使用两次 transform 流程： .a === transform ===\u003e .b 然后 .b === transform ===\u003e .c 如何知道到了中间点呢？ 用 setTimeout 或者监听 transitionend 事件。 给元素添加新的类名：执行第二段 transform 效果。 注意：第二段 transform 中必须包含第一段动画效果，不然执行第二段动画可能还原初始位置，有 bug，可自行测试。 JSBin 示例 ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:9:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"方法② 使用 animation 声明关键帧 添加动画 JSBin 示例 ​ ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:9:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"animation 动画 ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:10:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"提问 如何让动画停在最后一帧？ 搜索 css animation stop at end 网友给出的答案是：加个 forwards animation: xxx 1.5s forwards; JSBin 演示 ​ ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:10:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"@keyframes 完整语法 标准写法 搜索 keyframes MDN 讲得很清楚 一种写法是 from to ：只支持两种状态 另一种写法是百分数：支持添加 n 个帧状态 ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:10:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"animation 缩写语法 animation MDN animation 属性是 animation-name，animation-duration, animation-timing-function，animation-delay，animation-iteration-count，animation-direction，animation-fill-mode 和 animation-play-state 属性的一个简写属性形式。 Jirengu 视频讲解 JSBin 演示 animation: 时长 | 过渡方式 | 延迟 | 次数 | 方向 | 填充模式 | 是否暂停 | 动画名 ; /* 位置任意 */ 时长：1s 或者 1000ms 过渡方式：跟 transition 取值一样，如 linear 。默认是 ease 先快后慢 延迟时间：1s 或 1000ms 次数：3 或者 2.4 或者 infinite（无限次） 方向：reverse | alternate（交替，非常适合做加载动画） | alternate-reverse 填充模式：none | forwards（保持在动画终点位置） | backwards | both 是否暂停：paused | running pauseBtn.onclick = () =\u003e { demo.style.animationPlayState = 'paused' } /* 点击按钮，暂停demo元素的动画 */ 更多属性值的效果，需要自己尝试。JSBin 演示 以上所有属性都有对应的单独属性 **animation** 只是这些单独属性的**缩写**，上述效果可以通过单独的属性设置\r ​ ​ ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:10:3","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"实践：用 animation 做红心 JSBin 示例 \u003c!doctype html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"\u003e \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e \u003ctitle\u003ebeating heart-animation\u003c/title\u003e \u003cstyle\u003e * { margin: 0; padding: 0; box-sizing: border-box; } @keyframes beating { 0% {transform: scale(1)} /*25% {transform: scale(1.25)}*/ /*50% {transform: scale(1.5)}*/ /*75% {transform: scale(1.25)}*/ 100% {transform: scale(1.5)} } #heart { /*border: 1px solid black;*/ display: inline-block; position: relative; margin: 100px; } #heart:hover { animation: beating .5s ease infinite alternate; } #heart \u003e .left { position: absolute; bottom: 50px; left: -50px; width: 50px; height: 50px; /*border: 1px solid red;*/ background: red; border-radius: 50%; transform: rotate(45deg) translateX(43px); } #heart \u003e .right { position: absolute; bottom: 50px; right: -50px; width: 50px; height: 50px; /*border: 1px solid red;*/ background: red; border-radius: 50%; transform: rotate(45deg) translateY(45px); } #heart \u003e .bottom { width: 50px; height: 50px; /*border: 1px solid red;*/ background: red; transform: rotate(45deg); } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id=\"heart\"\u003e \u003cdiv class=\"left\"\u003e\u003c/div\u003e \u003cdiv class=\"right\"\u003e\u003c/div\u003e \u003cdiv class=\"bottom\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-08-02","objectID":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/:11:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——动画","uri":"/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/"},{"categories":["CSS 入门"],"content":"CSS is A*s***e!! 🥴 🤢 🤮","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"复习盒模型、div 的分层、新属性 position 详解、层叠上下文 ​ ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:0:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"布局和定位的区别 区别大了 布局是屏幕平面上的 定位是垂直于屏幕的 ​ ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:1:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"CSS 定位 还得从文档流和盒模型说起（两个非常重要的概念） ​ ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:2:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"复习盒模型 margin 外边距、border 边框、padding 内边距、content 内容 background 背景 ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:3:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"问两个问题 背景的范围是从哪到哪？ 【A】border 内边沿围成的区域 ？【B】border 外边沿围成的区域 ？ 如何验证自己的猜想？ border 半透明试试，答案是【B】 注意：在浏览器的元素样式中，可通过 【alt + 上下方向键】，对半透明数值进行 0.1 的 ± 调整 从左边看一个 div，是什么样子？ 元素是有层叠关系的，脑内模拟一个三维立体结构，从左边看一个 div，是什么样子？ background 在文字后面然后呢？ 如何验证自己的猜想？用代码证明即可。 \u003cdiv class=\"demo\"\u003e \u003cspan class=text\u003e你好\u003c/span\u003e \u003c/div\u003e \u003cstyle\u003e .demo{ box-sizing: border-box; border: 5px solid red; width: 100px; height: 100px; background: blue; } .text{ font-size: 100px; /* 让字足够大，测试字能否覆盖住border */ color: green; } \u003c/style\u003e 结论： 文字在最上层，中间是 border，最底层是 background 背景 ​ ​ ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:3:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"代码验证：一个 div 的分层 三维立体模型 （SketchUp） 先给出结论（三维图），再在下面进行代码验证 ​ ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:4:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"块级子元素与内联子元素的分层位置 让块级元素与内联元素，出现重叠，就可以判断哪个层级更高 \u003cstyle\u003e .demo{ background: rgb(120,184,211); width: 200px; height: 200px; border: 15px solid red; padding: 10px; } .childDiv{ background: white; height: 50px; margin-top: -10px; /* 测试块级元素与文字的分层位置，将div向上移动，与文字重叠，看是否会遮挡文字 */ } \u003c/style\u003e \u003cdiv class=\"demo\"\u003e 文字内容 \u003cdiv class=\"childDiv\"\u003e\u003c/div\u003e \u003c/div\u003e 如上，“文字内容” 和 div.childDiv 属于同级关系 结论： 块级元素位于文字下层 ​ ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:4:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"浮动子元素与内联子元素的分层位置 \u003cstyle\u003e .demo{ ... } .float{ float: left; background: white; height: 50px; width: 50px; margin-right: -10px; /* 测试浮动元素与文字的分层位置，将浮动元素向右移动，与文字重叠，看是否会遮挡文字 */ } \u003c/style\u003e \u003cdiv class=\"demo\"\u003e 文字内容 \u003cdiv class=\"float\"\u003e\u003c/div\u003e \u003c/div\u003e 结论： 浮动元素位于文字下层 ​ ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:4:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"浮动子元素与块级子元素的分层位置 \u003cstyle\u003e .demo{...} .float{...} .childDiv{ height: 50px; background: orange; margin-top: -10px; } \u003c/style\u003e \u003cdiv class=\"demo\"\u003e 文字内容 \u003cdiv class=\"float\"\u003e\u003c/div\u003e \u003cdiv class=\"childDiv\"\u003e\u003c/div\u003e \u003c/div\u003e 结论： 浮动内容（脱离文档流），高于 childDiv（普通文档流元素），低于文字 所以，==脱离文档流==，实际上就是从普通文档流中跳出，比文档流的层级稍微高一点 ​ ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:4:3","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"结论 文字内容层级最高，代码写在下面的文字内容，会覆盖上面的 只有浮动元素会脱离文档流（从普通文档流中跳出），比普通文档流的层级稍高 ​ ​ ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:4:4","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"新属性 position ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:5:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"position 取值 static 默认值，当前元素待在文档流里 relative 相对定位，升起来，但不脱离文档流 absolute 绝对定位，定位基准是相对于祖先里的非 static 祖先进行定位 fixed 固定定位，定位基准是 viewport 视口 有诈：后来 css 出的 transform 属性，使 fixed 无法相对 viewport 视口定位，这就是 CSS 的不正交 sticky 粘滞定位，不好描述直接举例 ↓↓ 特别适合做导航：正常状态会存在于文档流中，当向下滚动到 sticky 元素且 sticky 元素即将移出视口时，sticky 元素会始终保持在视口顶部，不会随文档流继续滚动。 兼容性特别差，可以在 caniuse 中查询。 （黄色是需要加前缀or部分支持） ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:5:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"经验 如果你写了 absolute，一般都得补一个 relative 如果你写了 absolute 或 fixed，一定要补 top 和 left sticky 兼容性很差，主要用于面试装逼 ​ ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:5:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"position: relative 使用场景 用于做位移（很少用），将两个元素对齐 用于给 absolute 元素做爸爸 配合 z-index z-index: auto 默认值，不创建新层叠上下文 z-index: 0/1/2 z-index: -1/-2 经验 写 z-index: 9999 的都是 菜B 要学会管理 z-index ​ ​ ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:5:3","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"position: absolute 使用场景 脱离原来的位置，另起一层，比如对话框的关闭按钮，通常是通过绝对定位实现的 鼠标提示 \u003cdiv style=\"height:100px;\"\u003e\u003c/div\u003e \u003cbutton\u003e 点击 \u003cspan class=\"tips\"\u003e提示内容\u003c/span\u003e \u003c/button\u003e \u003cstyle\u003e button{ position: relative; } button span{ position: absolute; border: 1px solid red; white-space: nowrap; bottom: calc(100% + 10px); left: 50%; transform: translateX(-50%); } button span{ display: none; } button:hover span{ display: inline-block; } /* 鼠标悬浮时，显示span */ \u003c/style\u003e 配合 z-index 经验 很多 菜B 都以为 absolute 是相对于 relative 定位的 absolute 是相对于 祖先元素中最近的一个定位元素 只要 position 属性值不是 static 的元素，就是定位元素 某些浏览器上，如果写了 absolute，不写 top / left / bottom / right 会位置错乱 （4个至少写2个） .demo{ position: absolute; top: 0; left: 0; } 善用 left: 100% （效果通常是该元素会出现在定位元素的最右边） 善用 left: 50%; + 加负 margin （负宽度的一半）：实现居中 也可以用 left: 50%; + transform: translateX(-50%); 实现，优点是不需要自己计算宽度的一半 ​ ​ ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:5:4","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"position: fixed fixed 是相对于【视口】定位的 视口，就是浏览器中普通用户能看到的部分（不包括滚动条） 使用场景 烦人的广告 回到顶部按钮 配合 z-index 经验 如果 fixed 元素所在的容器，具有某些属性，可能会导致 fixed 元素不再相对于视口定位。 .container{ position: relative; } .container \u003e .fixed{ position: fixed; left: 10px; bottom: 10px; } .container{ transform: scale(0.9); } /* 此时fixed元素就不再相对于视口定位 */ 总结：不要把 fixed 元素放到 具有 transform 属性的容器中，可能会产生奇怪的bug（不正交：调这个元素却影响了另一个元素） 手机上尽量不要用这个属性，坑很多，无穷无尽的bug。不信你搜索一下「 移动端 fixed 」 用了，可能就开始996了。一个bug可能引出10个bug ​ ​ ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:5:5","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"层叠上下文 ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:6:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"div分层 与 position 任意一个元素的 position 取值非 static 时，就成为了定位元素。定位元素的层级，立马超越内联文字，成为最上层元素（跑到所有元素最上层） z-index，默认是 auto 所有定位元素，会以内联文字层为底层，随着 z-index 递增，层级也会递增 如果 z-index 为负值，则层级比 background 还低 （可以无限向下，但是不能低于层叠上下文，也就是不能低于 html ，低于html还有什么意义） ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:6:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"什么是层叠上下文 也叫堆叠上下文 层叠上下文，会把所有元素包起来。 默认的层叠上下文，是 html 元素，html 就是会把所有元素包起来 其他元素，也会因为拥有某些属性而变成层叠上下文（导致 z-index 需要重新计算） ​ 比喻 层叠上下文对 z-index 的影响 每个层叠上下文就是一个新的小世界（作用域） 这个小世界里面的 z-index 跟外界无关 处在同一个小世界的 z-index 才能比较 JSBin 示例 a 和 b2 处于同一个层叠小世界，由 container 创造的，如果 container 没有设定 z-index，那么 a 和 b2 就同处于 html 的作用域里面，是具有可比性的。 ​ 哪些不正交的属性可以创建层叠上下文 最简单的就是定位元素设置 z-index = 0 ，就会创建一个层叠上下文 MDN文档有写 文档根元素 html 自成一个层叠上下文 z-index 不为 auto 的定位元素，会开启一个小世界（作用域） 元素的 opacity 小于1，就会创建一个层叠上下文（因为 opacity 会影响内部所有元素） position: fixed; 一定会创建层叠上下文 … 需要记忆的有： z-index=0时会创建层叠上下文 flex元素内部会形成层叠上下文 opacity 不为1 ，就会创建层叠上下文 具有 transform 的元素，会形成一个 层叠上下文 知道这些知识的面试官也不太多，不用花时间背 忘了就搜「 层叠上下文 MDN 」 你说 CSS 为什么不单独创建一个属性做这个事 例如： xxxdisabled: true; /* true就创建层叠上下文，false就不创建；css并没有这种直接功能开关*/ 这就是css的难学之处，互相交叉影响，错综复杂（不正交） ​ ​ ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:6:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"负 z-index 与层叠上下文的关系 JSBin 示例 .demo 的 z-index = -1，会使 demo 出现在文档流的 bg 的后面 z-index 是默认 auto 时，不具有层叠上下文 记住 ：负 z-index 逃不出 层叠上下文的小世界 \u003cdiv class=\"container\"\u003e \u003cdiv class=\"demo\"\u003e\u003c/div\u003e \u003c/div\u003e .container{ background: rgba(0,255,255,0.5); height: 200px; position: relative; /* z-index 是默认 auto 时，不具有层叠上下文，所以添加z-index=0，创建层叠上下文 */ z-index: 0; /* 注释这行看看 */ } .container \u003e .demo{ width: 50px; height: 50px; background: red; position: absolute; z-index: -1; /* 因为上面z-index:0创建了层叠上下文，所以demo无法逃出这个小世界，不可能比container低 */ } 图一：当 container 不是层叠上下文（也就是没有 z-index: 0; ）时，demo 是 z-index = -1 存在于容器bg之下 图二：当 container 创建层叠上下文，demo 就无法跳出容器之外 ​ 总结： z-index = -1 不一定存在于容器的背景之下。当这个容器是一个层叠上下文时，就不可能存在于容器之外 ","date":"2020-07-29","objectID":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/:6:3","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——定位","uri":"/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/"},{"categories":["CSS 入门"],"content":"CSS is A*s***e!! 🥴 🤢 🤮","date":"2020-07-26","objectID":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（下）","uri":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/"},{"categories":["CSS 入门"],"content":"CSS 布局篇（下）：Grid 布局。 ​ ","date":"2020-07-26","objectID":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/:0:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（下）","uri":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/"},{"categories":["CSS 入门"],"content":"如何在两套布局中切换 一个css中，写两种布局，使用 @media 媒体查询来切换 ​ ","date":"2020-07-26","objectID":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/:1:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（下）","uri":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/"},{"categories":["CSS 入门"],"content":"Grid 布局 Grid 布局兼容性并不好，在一两年内都可能不会非常广泛的使用（现在可以不用学的那么仔细） 但功能确实非常强大 flex 更擅长 一维布局，要么横着布局，要么竖着布局 一维布局用 Flex ​ ","date":"2020-07-26","objectID":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/:2:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（下）","uri":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/"},{"categories":["CSS 入门"],"content":"二维布局用 Grid 以下内容主要来自 CSS Tricks 的一篇文章 A Complete Guide to Grid 查看本地代码 ​ ","date":"2020-07-26","objectID":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/:3:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（下）","uri":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/"},{"categories":["CSS 入门"],"content":"Grid 也分 container 和 items 分别记忆 ","date":"2020-07-26","objectID":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/:3:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（下）","uri":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/"},{"categories":["CSS 入门"],"content":"成为 container .container{ display: grid | inline-grid; } ","date":"2020-07-26","objectID":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/:3:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（下）","uri":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/"},{"categories":["CSS 入门"],"content":"行和列 类似 table 表格（grid 被称为新时代的表格） .container{ display: grid; grid-tamplate-columns: 40px 50px auto 50px 40px; /* 每列宽度（有n个值对应生成n列） */ /* 第1列 第2列 第3列 第4列 第5列 */ grid-tamplate-rows: 25% 100px auto; /* 每行高度（有n个值对应生成n行） */ /* 第1行 第2行 第3行 */ } [1] [2] [3] … [6] 指的是线的序号。用于划分 items 的范围（具体使用见 items 部分 ） ​ 缩写 grid-template grid-template是grid-template-rows（行高）和grid-template-columns（列宽）的缩写形式。 比如说，grid-template: 50% 50% / 200px;将创建一个具有两行的网格，每一行占据50%，以及一个200像素宽的列。 /* 需要包括你的花园上部的60%，以及左侧的200像素。 */ #garden { display: grid; grid-template: 60% 40% / 200px calc(100% - 200px) ; /* 行高↑↑ 列宽↑↑ */ } #water { grid-column: 1; grid-row: 1; } /* 你的花园看起来很棒。现在，你在花园的底部留下了50像素的小路，其他的空间用来种植胡萝卜。 不幸的是，胡萝卜地的20%已经杂草丛生了，最后一次用CSS网格布局来规划你的花园吧！ */ #garden { display: grid; grid-template: calc(100% - 50px) 50px/20% 80% } ​ ","date":"2020-07-26","objectID":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/:3:3","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（下）","uri":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/"},{"categories":["CSS 入门"],"content":"指定 items 布局 第一步 搭出大框架：几行几列 有几个区域，就建立几个 items \u003cstyle\u003e * { margin: 0; padding: 0; box-sizing: border-box; } .container { display: grid; grid-template-columns: 40px 50px auto 50px 40px; /* 5列（auto会撑满该行余下空间） */ grid-template-rows: 100px 300px 100px; /* 3行（每行高度累加，成为container的总高度） */ border: 3px solid red; } .a, .b, .c, .d, .e { border: 3px solid black; } \u003c/style\u003e \u003cdiv class=\"container\"\u003e \u003c!-- emmet快捷键: 键入.a+.b+.c+.d ——\u003e tab 创建出5个div，class分别为abcde --\u003e \u003cdiv class=\"a\"\u003e\u003c/div\u003e \u003c!--第1行, 第1列--\u003e \u003cdiv class=\"b\"\u003e\u003c/div\u003e \u003c!--第1行, 第2列--\u003e \u003cdiv class=\"c\"\u003e\u003c/div\u003e \u003c!--第1行, 第3列--\u003e \u003cdiv class=\"d\"\u003e\u003c/div\u003e \u003c!--第1行, 第4列--\u003e \u003cdiv class=\"e\"\u003e\u003c/div\u003e \u003c!--第1行, 第5列--\u003e \u003c/div\u003e container 中的子元素，与列数一一对应。且默认只占据第一行。所以添加 border 后 效果如下图所示 第二步 给每个 item 指定区域、设置范围 grid-xxx-start / grid-xxx-end grid-row-start、grid-row-end grid-column-start、grid-column-end .a{ grid-row-start: 1; /* a从哪条线开始 */ grid-row-end: 3; /* a到哪条线结束 */ /* 指定的两条【线】的中间区域，就是a所占的【行】 */ grid-column-start: 1; grid-column-end: 2; /* 指定的两条【线】的中间区域，就是a所占的【列】 */ } grid-row / grid-column grid-row：grid-row-start / grid-row-end; grid-column: grid-column-start / grid-column-end; /* 上面写法，可以缩写成 ↓ */ .a{ grid-row: 1/3 ; grid-column: 1/2 ; } grid-area grid-area属性接受4个由’/‘分开的值：grid-row-start, grid-column-start, grid-row-end, 最后是 grid-column-end。 ​ 起始行 ↑↑ 起始列 ↑↑ 终止行 ↑↑ 终止列 ↑↑ /* 再进一步缩写 */ .a{ grid-area: 1/1/3/2 ; } 最终效果 ​ 可以给线起名字 但没必要，代码太麻烦。就按照序号就很好 取名结果：如图↘ item可以设置范围，直接用线的名称 .item-a{ grid-column-start: 2; grid-column-end: five; grid-row-start: rowl-start; grid-row-end: 3; } ​ ​ ","date":"2020-07-26","objectID":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/:3:4","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（下）","uri":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/"},{"categories":["CSS 入门"],"content":"fr ：单位【份】 容器属性 全称 free space 自由空间 \u003cdiv class=\"container\"\u003e \u003cdiv class=\"a\"\u003ea\u003c/div\u003e \u003cdiv class=\"b\"\u003eb\u003c/div\u003e \u003cdiv class=\"c\"\u003ec\u003c/div\u003e \u003cdiv class=\"d\"\u003ed\u003c/div\u003e \u003cdiv class=\"e\"\u003ee\u003c/div\u003e \u003c!-- \u003cdiv class=\"f\"\u003ef\u003c/div\u003e --\u003e \u003c/div\u003e \u003cstyle\u003e * {margin: 0;padding: 0;box-sizing: border-box;} .container { display: grid; grid-template-columns: 1fr 1fr 1fr; /* fr=份，与flex的份类似：共3列每列占1份，也就是均分 */ grid-template-rows: 1fr 1fr; /* 共2行，每行占1份，均分 */ border: 3px solid red; min-height: 500px; } .a, .b, .c, .d, .e { border: 3px solid black; } .e{ grid-column-start: 2; /* 再单独定义e版块占两列空间 */ grid-column-end: 4; background-color: #ccc; } \u003c/style\u003e ​ 变形 .container { display: grid; grid-template-rows: 1fr 3fr; /* 2行：第2行占3份 */ grid-template-columns: 1fr 2fr 1fr; /* 3列：第2列占2份 */ ... } ​ 平均布局 grid-gap fr 主要用于实现平均布局 容器属性：grid-gap 用于控制间距 \u003cdiv class=\"container\"\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003c!-- 应用下面grid布局样式，可实现任意添加.image，都可以实现一排4个、间距12px的布局 --\u003e \u003c/div\u003e \u003cstyle\u003e *{ margin: 0; padding: 0; box-sizing: border-box; } .container{ margin-right: auto; margin-left: auto; margin-top: 30px; outline: 5px solid red; width: 800px; /* 开启grid布局 */ display: grid; grid-template-columns: 1fr 1fr 1fr 1fr; /* 格子布局：1排4个 */ grid-template-rows: 1fr 1fr; grid-gap: 12px; /* 计算每项边距，自动计算位置，四边上的会紧贴 */ } .container\u003ediv{ border: 2px solid black; background-color: #ccc; height: 191px; /* 宽800px，1排4个产品，计算得出：每个产品可占宽191px，则间距为12px */ width: 191px; } \u003c/style\u003e ​ ","date":"2020-07-26","objectID":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/:3:5","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（下）","uri":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/"},{"categories":["CSS 入门"],"content":"分区 grid template-areas 名字很长，但非常好用 \u003cdiv class=\"container\"\u003e \u003cheader\u003eheader\u003c/header\u003e \u003caside\u003easide\u003c/aside\u003e \u003cmain\u003emain\u003c/main\u003e \u003cdiv class=\"ad\"\u003ead\u003c/div\u003e \u003cfooter\u003efooter\u003c/footer\u003e \u003c/div\u003e \u003cstyle\u003e .container { min-height: 100vh; /* 最小高度为占满整个屏幕 */ display: grid; grid-template-rows: 60px auto 60px; /* 行高 */ grid-template-columns: 190px auto 100px; /* 列宽 */ /* 布局：以版块名称直接写出布局、位置 */ grid-template-areas: \"header header header\" \"aside main ad\" \". footer .\"; /* 空格通常会写一个不存在的名称，如【.】点 */ grid-gap: 10px; /* 设置空隙 */ } .container \u003e * { border: 2px solid red } .container \u003e header {grid-area: header;} /* 版块命名 */ .container \u003e aside {grid-area: aside;} .container \u003e aside {grid-area: aside;} .container \u003e main {grid-area: main;} .container \u003e .ad {grid-area: ad;} .container \u003e footer {grid-area: footer;} \u003c/style\u003e grid-gap 设置间距 grid-gap：通用间距 grid-row-gap : 行间距 grid-column-gap： 列间距 .container{ ... grid-gap: 10px; } .container{ ... grid-row-gap: 20px; /* 行间距 */ grid-column-gap: 10px; /* 列间距 */ } ​ ​ ","date":"2020-07-26","objectID":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/:3:6","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（下）","uri":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/"},{"categories":["CSS 入门"],"content":"实践 ","date":"2020-07-26","objectID":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/:4:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（下）","uri":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/"},{"categories":["CSS 入门"],"content":"布局 Grid 尤其适合不规则布局 ","date":"2020-07-26","objectID":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/:4:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（下）","uri":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/"},{"categories":["CSS 入门"],"content":"经验 等到 Grid 普及了，前端对CSS的要求会进一步降低 目前你简单尝试一下 Grid 就可以了 ","date":"2020-07-26","objectID":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/:4:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（下）","uri":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/"},{"categories":["CSS 入门"],"content":"示例 第一步：根据设计图，划分行列需求，给每块区域命名 第二步：书写【容器】样式 \u003cdiv class=\"container\"\u003e \u003cheader\u003eheader\u003c/header\u003e \u003cdiv class=\"image bigImage\"\u003ebig\u003c/div\u003e \u003cdiv class=\"image smallImage\"\u003esmall\u003c/div\u003e \u003cdiv class=\"image smallImage\"\u003esmall\u003c/div\u003e \u003cdiv class=\"image smallImage\"\u003esmall\u003c/div\u003e \u003cdiv class=\"image middleImage\"\u003emiddle\u003c/div\u003e \u003cdiv class=\"image middleImage\"\u003emiddle\u003c/div\u003e \u003cdiv class=\"image middleImage\"\u003emiddle\u003c/div\u003e \u003c/div\u003e \u003cstyle\u003e * { margin: 0; padding: 0; box-sizing: border-box; } .container { display: grid; grid-template-rows: 50px 200px repeat(4, 100px); /* 重复4个120px，可以使用repeat()缩写语法 */ grid-template-columns: 240px 240px; grid-template-areas: \"header header\" \"big mid1\" \"big mid2\" \"sm1 mid2\" \"sm2 mid3\" \"sm3 mid3\"; } \u003c/style\u003e 第三步：指定每项的名称（所属） .container \u003e * { border: 2px solid black; } .container \u003e header {grid-area: header;} .container \u003e .image:nth-child(2) {grid-area: big;} .container \u003e .image:nth-child(3) {grid-area: sm2;} .container \u003e .image:nth-child(4) {grid-area: sm3;} .container \u003e .image:nth-child(5) {grid-area: mid1;} .container \u003e .image:nth-child(6) {grid-area: mid2;} .container \u003e .image:nth-child(7) {grid-area: mid3;} ​ ​ ","date":"2020-07-26","objectID":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/:4:3","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（下）","uri":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/"},{"categories":["CSS 入门"],"content":"游戏 https://cssgridgarden.com/#zh-cn 忘记用法时，可以通过游戏来快速回忆 ​ grid-area grid-area属性接受4个由’/‘分开的值：grid-row-start, grid-column-start, grid-row-end, 最后是 grid-column-end。 ​ 起始行 ↑↑ 起始列 ↑↑ 终止行 ↑↑ 终止列 ↑↑ #garden { display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%; } #water-1 { grid-area: 1 / 4 / 6 / 5; } #water-2 { grid-area: 2 / 3 / 5 / 6; } ​ order 如果网格项不是以grid-area、grid-column、grid-row 等显示的，它们会自动按照它们在源程序中出现的位置摆放。同样我们也可以使用order属性来重写它的顺序，这也是网格布局优于表格布局的好处之一。 默认情况下，所有的网格项的order都是0，但是顺序也可以被任意设置为正数或者负数，就像z-index一样。 ​ fr 与 px 结合 #garden { display: grid; grid-template-columns: 50px 1fr 1fr 1fr 50px; grid-template-rows: 20% 20% 20% 20% 20%; } #water { grid-area: 1 / 1 / 6 / 2; } #poison { grid-area: 1 / 5 / 6 / 6; } #garden { display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 1fr 1fr 1fr 1fr calc(100% - 50px); } #water { grid-column: 1 / 6; grid-row: 5 / 6; } ","date":"2020-07-26","objectID":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/:4:4","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（下）","uri":"/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/"},{"categories":["CSS 入门"],"content":"CSS is A*s***e!! 🥴 🤢 🤮","date":"2020-07-25","objectID":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（上）","uri":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/"},{"categories":["CSS 入门"],"content":"CSS 布局篇（上）： Float 布局、Flex 布局 。 ​ ​ Float 示例代码 https://jsbin.com/vobenim/edit?html,css,output Flex 示例代码 https://jsbin.com/biluwan/edit?html,css,output Flex 青蛙游戏 https://flexboxfroggy.com/#zh-cn ​ ","date":"2020-07-25","objectID":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/:0:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（上）","uri":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/"},{"categories":["CSS 入门"],"content":"布局是什么 把页面分成一块一块，按左中右、上中下等排列 ","date":"2020-07-25","objectID":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/:1:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（上）","uri":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/"},{"categories":["CSS 入门"],"content":"布局分类 两种 固定宽度布局，一般宽度为960/1000/1024px （淘宝pc） 不固定宽度布局，主要靠文档流的原理来布局（常用在移动端、响应式，会跟随设备宽度变化） 还记得吗 文档流本来就是自适应的，不需要加额外的样式 第三种布局 响应式布局 意思就是PC上固定宽度，手机上不固定宽度 也就是一种混合布局 ​ ","date":"2020-07-25","objectID":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/:1:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（上）","uri":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/"},{"categories":["CSS 入门"],"content":"布局的两种思路 从大到小 先定下大局 然后完善每个部分的小布局 从小到大 先完成小布局 然后组合成大布局 两种均可 新人推荐用第二种，因为小的简单 老手一般用第一种，因为熟练有大局观 ​ ","date":"2020-07-25","objectID":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/:1:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（上）","uri":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/"},{"categories":["CSS 入门"],"content":"布局需要用到哪些属性 不多哔哔，直接给你所有套路 以前经常说 DIV+CSS 布局，但是现在已经无意于用 DIV 了，就说用 CSS 布局 main、header、footer、nav、aside … 这些标签的出现，已经可以代替 div 了 需要兼容 IE9 吗 不用，只做手机页面（闲鱼），阿里巴巴在顺应手机时代 很老的手机产品要兼容吗？兼容最新浏览器吗？ ​ ​ ","date":"2020-07-25","objectID":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/:1:3","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（上）","uri":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/"},{"categories":["CSS 入门"],"content":"Float 布局 float 主要是针对 IE 的，而现在公司基本不需要兼容 IE6789。 ","date":"2020-07-25","objectID":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/:2:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（上）","uri":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/"},{"categories":["CSS 入门"],"content":"步骤 子元素上加 float: left 和 width 在父元素上加 .clearfix（清除浮动的影响） \u003c!-- header中没有文档流元素，子元素都浮动了(脱离文档流) ，所以header的高度为0 --\u003e \u003c!-- 添加 clearfix 后，可以清除浮动的影响 --\u003e \u003cheader class=\"clearfix\"\u003e \u003cdiv class=\"logo\"\u003eXDML\u003c/div\u003e \u003cnav\u003e导航\u003c/nav\u003e \u003c/header\u003e \u003cstyle\u003e .logo{float: left;...} /* 脱离文档流 */ nav{float: left;...} \u003c/style\u003e .clearfix:after{ content: ''; display: block; clear: both; } /* 请背过 clearfix 的写法 */ ","date":"2020-07-25","objectID":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/:2:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（上）","uri":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/"},{"categories":["CSS 入门"],"content":"经验 有经验者会留一些空间或者最后一个不设 width （或者可以给个 max-width: xxxpx;） 不需要做响应式，因为手机上没有IE，而这个布局是专门为 IE 准备的 IE6/7 存在双倍 margin bug（给浮动元素设置 margin: 10px 在 IE6/7 中实际距离会变成 margin: 20px 的效果） 解决办法有两个 一是将错就错，针对 IE6/7 把 margin 减半 .logo{ float: left; margin-top: 10px; /* 其他浏览器 只能识别这句，无法识别下面属性 */ _margin-top: 5px; /* IE6/7在属性前加 下划线 或 星号 都能识别 */ } 二是神来一笔，再加一个 display: inline-block .logo{ float: left; margin-top: 10px; display: inline-block; /* 微软说：IE6/7遇到margin乘2的bug，就添加这句 */ } 为什么可以这样？你问我，我问谁… ​ ","date":"2020-07-25","objectID":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/:2:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（上）","uri":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/"},{"categories":["CSS 入门"],"content":"实践 不同布局 用 float 做两栏布局（如顶部条） 用 float 做三栏布局（如内容区） 用 float 做四栏布局（如导航） 用 float 做平均布局（如产品列表展示区）—— 负margin 曾经淘宝的前端发明了双飞翼布局，不要学，已过时代码 经验 加上头尾，即可满足所有PC页面需求 手机页面傻子才用float float要程序员自己计算宽度，不灵活 float用来应付IE足以 技术总结 JSbin 演示，总结如下 outline 现象描述：计算宽度时，内部3个元素的宽度和=300，外层容器=300，但是还会把最后一个元素挤下去，说明子元素的宽度超出容器的宽度。 原因可能是，虽然设定容器宽度为 300，但是容器添加了边框 border : 1像素，所以容器的内容区域的宽度实际只有 298 px。(仅限 border-box 情况) 解决： 把容器的边框删了 改用 outline: 1px solid red; outline 是在外侧的，不占内部区域，但是outline 样式上会有点奇怪 改用 背景颜色 标识区域 居中 /* margin: 0 auto; 下面两句的写法更好，这句还覆盖了margin上下的距离，css原则是不要写多余的 */ margin-left: auto; margin-right: auto; 只有==块级元素==，才能使用 margin … auto，实现居中。 float实现平均布局 添加一个 父元素 x ，进行 ==负margin== 操作（这个词基本都是高手才懂） 注意：添加 父元素后，clearfix 的位置也需要相应移动到，浮动元素的直属父级上 \u003cdiv class=\"imageList\"\u003e \u003cdiv class=\"x clearfix\"\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003c!--\u003cdiv class=\"image\"\u003e\u003c/div\u003e--\u003e \u003c!--\u003cdiv class=\"image\"\u003e\u003c/div\u003e--\u003e \u003c/div\u003e \u003c/div\u003e \u003cstyle\u003e .imageList { outline: 1px solid green; width: 800px; margin-left: auto; margin-right: auto; margin-top: 10px; } .imageList \u003e .x \u003e .image { width: 191px; height: 191px; background-color: #555; border: 1px solid red; float: left; margin-bottom: 10px; margin-right: 12px; } .imageList \u003e .x { margin-right: -12px; } \u003c/style\u003e ​ ​ ","date":"2020-07-25","objectID":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/:2:3","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（上）","uri":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/"},{"categories":["CSS 入门"],"content":"缩写 html、css （√） navigator —\u003e nav （√） 不能缩写未经约定、达成统一的单词 content —\u003e cnt （x） container 也可以缩写成 cnt 容易误会，所以不要用 ​ ​ ","date":"2020-07-25","objectID":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/:3:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（上）","uri":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/"},{"categories":["CSS 入门"],"content":"Flex 布局 教程（来自 CSS Tricks) 把教程过一遍，然后忘掉 完成 Flex青蛙游戏 开始用flex！ ","date":"2020-07-25","objectID":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/:4:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（上）","uri":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/"},{"categories":["CSS 入门"],"content":"容器 container 有哪些属性 container ：表示容器，一般用于做父元素 items ：表示容器里面的、直接的子元素，就称为 items（项） 以下都是 container 的样式 ​ 让一个元素变成 flex 容器 只有下面两种写法： .container{ display: flex; /* 或 display: inline-flex; */ } ​ 改变 items 流动方向（主轴） 默认，所有项都会挤在主轴，主轴占满会平均压缩每项宽度，以保证在主轴存放下所有项 .container{ display: flex; border: 1px solid red; flex-direction: row; /* 【默认值】横向（从左到右） */ flex-direction: column; /* 纵向（从上到下） */ flex-direction: row-reverse; /* 横向反向（从右到左） */ flex-direction: column-reverse; /* 纵向反向（从上到下） */ } ​ 改变折行 .container{ display: flex; border: 1px solid red; flex-direction: row; /* 默认横向 */ flex-wrap: wrap-reverse; /* 反向折行, 效果如下图，基本没用 */ } flex-direction和flex-wrap两个属性经常会一起使用，所以有缩写属性flex-flow。这个缩写属性接受两个属性的值，两个值中间以空格隔开。 举个例子，你可以用flex-flow: row wrap去设置行并自动换行。 ​ ​ 主轴对齐方式 默认主轴是 横轴 除非你改变了 flex-direction 方向 .container { justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly; } space-around： 每项左右两边的空间一样 space-evenly：每项间距一样 space-between：把空间放到中间，元素分布两边 ​ 次轴对齐 默认次轴是 纵轴 .container{ align-items: stretch [默认值] | flex-start | flex-end | center | baseline（不需要） } stretch【默认值】 默认所有 items 的高度 与 高度最高的 item 保持一致 如下图，3个 item 都与 2 号 item 一样高 flex-start flex-end center ​ 多行分布 很少用到 默认平均分 ： align-content: stretch (如图) .container{ display: flex; border: 1px solid red; flex-wrap: wrap; height：400px； align-content: flex-start; /* 全部集中到顶部 */ align-content: flex-end; /* 全部集中到底部 */ align-content: center; /* 全部集中到中间 */ align-content: space-between; align-content: space-around; } ​ ​ ","date":"2020-07-25","objectID":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/:4:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（上）","uri":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/"},{"categories":["CSS 入门"],"content":"flex item 有哪些属性 以下都是 item 的属性 item 上加 order 默认 order 为 0 指定 order 后，item 会按照 order 顺序从小到大排列（可以指定为负数） \u003cdiv class=\"container\"\u003e \u003cdiv class=\"item\"\u003e1\u003c/div\u003e \u003cdiv class=\"item\"\u003e2\u003c/div\u003e \u003cdiv class=\"item\"\u003e3\u003c/div\u003e \u003cdiv class=\"item\"\u003e4\u003c/div\u003e \u003c/div\u003e \u003cstyle\u003e .container{ display: flex; border: 1px solid red; } .item{ width:50px; height:50px; border: 1px solid green; } .item:first-child{ order: 100; } /* 最后 */ .item:nth-child(2){ order: 2; } .item:nth-child(3){ order: 3; } .item:last-child{ order: 1; } /* 最前 */ \u003c/style\u003e ​ item 上加 flex-grow 用于分配多余的空间（控制变胖） flex-grow： 默认为 0. 就是 item 宽度由内容撑开，没内容的话宽度就是0，不会占用多余的空间 给 item 设置 flex-grow 值为 n （\u003e0），就是将分配多余空间给当前 item 占 n 份。 如果一共有3个item，那就平均分配多余空间，每个 item 占 n/3. 当我们不给 item 设置宽度时，item 的宽度是能有多窄有多窄（宽度由内容撑开） 实现宽度能有多宽有多宽，就给 item 添加 flex-grow .item{ flex-grow: 1; /* 每一个 item 平均分配宽度，来占满多余的空间（不是占满整行空间） */ } 需求：从多余的空间中，给2,3 的宽度占 2 份; 给 1,4 占 1 份 空间 .container{ display: flex; border: 1px solid red; } .item{ height:50px; border: 1px solid green; } .item:first-child{ flex-grow: 1; } .item:nth-child(2){ flex-grow: 2; } .item:nth-child(3){ flex-grow: 2; } .item:last-child{ flex-grow: 1; } 经验 当 3 栏布局，如下 只给【导航】设置 flex-grow: 1（实现导航宽度的响应式），logo、头像固定宽度 \u003cdiv class=\"container\"\u003e \u003cdiv class=\"item\"\u003elogo\u003c/div\u003e \u003cdiv class=\"item\"\u003e导航\u003c/div\u003e \u003cdiv class=\"item\"\u003e头像\u003c/div\u003e \u003c/div\u003e \u003cstyle\u003e .container{ display: flex; border: 1px solid red; } .item{ height:50px; border: 1px solid green; } .item:nth-child(2){ flex-grow: 1; } \u003c/style\u003e ​ flex-shrink 控制如何变瘦 当界面不断变窄，无法存放每项的给定宽度时，每项都需要变窄，flex-shrink 就控制谁瘦的多，谁瘦的少 默认是1（所有item平均收缩，要缩一起缩） 一般写 flex-shrink: 0; 防止变瘦（被设置为 0 的这一项，就算空间不够时，也不会收缩。要缩别找我） .item{ width: 150px; /* 合计宽度最小450px */ height:50px; border: 1px solid green; flex-grow: 1; /* 每项会均分多余空间 */ } .item:first-child{ flex-shrink: 1; } .item:nth-child(2){ flex-shrink: 50; /* 2 的收缩比例较大 */ } .item:last-child{ flex-shrink: 1; } 当宽度缩小达到450px以内，每项宽度不足，此时每项会开始收缩， flex-shrink 值越大，则收缩的越大，flex-shrink 值越小，越不会受到收缩的影响 如下图，宽度收缩450px以内，【导航】最先开始发生了较大的收缩，因为设定了较大的 flex-shrink 值 【logo】和【头像】版块，基本不收缩 ​ flex-basis 控制基准宽度 用法： 默认是 auto（与 item 的 width 值保持一致） 指定宽度：flex-basis: 100px; 相当于指定了 width 值 这个属性比较迷：不是很重要的属性 可以直接用 width 来代替这个属性 ​ 缩写成 flex flex 相当于 flex-grow flex-shrink flex-basis 习惯上我一般不写缩写，容易记错位置 flex 只有以下 4 种形式的写法 .item:first-child{ flex: 1 1 100px; /* grow-1，shrink-1，宽100px */ } .item:nth-child(2){ flex: 1 100 100px; /* grow-1，shrink-100，宽100px */ } .item:last-child{ flex: 1 1 100px; /* grow-1，shrink-1，宽100px */ } 上述，3个item，宽度为100px grow撑开时每个item平均占满所有多余空间 宽度不足时，2 号主要进行收缩 ​ align-self 定制 align-items 用的很少 默认在垂直方向上，都是顶端对齐的 align-self 可以让某一个 item，在垂直方向上，特例独行的展示（指定一个特别的对齐方式） 实现：单独设置，最后一个 item 底部对齐 ​ ​ ","date":"2020-07-25","objectID":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/:4:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（上）","uri":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/"},{"categories":["CSS 入门"],"content":"重点 记住这些代码 display: flex 开启flex布局 flex-direction: row / column 主轴是横向还是纵向 flex-wrap: wrap 空间不足时是否换行 just-content: center / space-between 主轴方向上的对齐方式：居中/分开 align-items: center 次轴方向上的对齐方式：居中，顶，底 工作中基本只用这些 ​ ​ ","date":"2020-07-25","objectID":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/:4:3","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（上）","uri":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/"},{"categories":["CSS 入门"],"content":"实践 不同布局 用 flex 做两栏布局 用 flex 做三栏布局 用 flex 做四栏布局 用 flex 做平均布局 —— 负 margin 用 flex 组合使用，做更复杂的布局 JSBin 代码 经验 永远不要把 width 和 height 写死，除非特殊说明 PC端通常可以写死。移动端不能写死，需要适配各种尺寸：平板/手机… 用 min-width / max-width / min-height / max-height flex 可以基本满足所有需求 flex 和 margin-xxx : auto 配合有意外的效果——例：左右布局 ​ 什么叫写死 写死 width:100px 不写死 width: 50% max-width: 100px width: 30vw （屏幕宽度的百分之30） min-width: 80% 特点：不使用 px，或者加 min max 前缀 css 最忌讳把宽高写死 ​ 技术总结 左右布局 表示两栏布局-贴左、贴右：可通过以下两句中的任意一句来实现 margin-xxx: auto 更灵活 \u003cstyle\u003e .header { display: flex; border:1px solid black; /*justify-content: space-between; ---------------二者任选其一----------------------*/ } ul { /* margin-left: auto; -------------------------二者任选其一【推荐】------------------*/ display: flex; border: 1px solid green; } ul \u003e li { border: 1px solid red; } \u003c/style\u003e \u003cheader class=\"header\"\u003e \u003cdiv class=\"logo\"\u003e \u003cimg alt=\"\" src=\"./logo.png\"\u003e \u003c/div\u003e \u003cul\u003e \u003cli\u003e首页\u003c/li\u003e \u003cli\u003e课程\u003c/li\u003e \u003cli\u003e优惠\u003c/li\u003e \u003cli\u003e关于\u003c/li\u003e \u003c/ul\u003e \u003c/header\u003e 产品展示格子布局 失败方案 \u003cdiv class=\"imageList\"\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003c/div\u003e .imageList{ border: 1px solid red; width: 800px; margin-right: auto; margin-left: auto; margin-top: 10px; display: flex; flex-wrap: wrap; justify-content: space-between; /* 会导致产品不足数的行 --\u003e 错位 */ } .image{ width: 191px; height: 191px; background-color: #ccc; margin-bottom: 10px; border: 1px solid green; } ​ 负margin方案 \u003cdiv class=\"imageList\"\u003e \u003c!-- 可以命名为 inner 或者 wrapper --\u003e \u003cdiv class=\"x\"\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003cdiv class=\"image\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e .imageList { outline: 1px solid red; /* 注意：边框去掉或者放在外面，否则占据宽度 */ width: 800px; margin-right: auto; margin-left: auto; margin-top: 10px; } .imageList \u003e .x { display: flex; flex-wrap: wrap; margin-right: -12px; /* 负margin */ } .image { width: 191px; height: 191px; background-color: #ccc; margin-bottom: 10px; border: 1px solid green; margin-right: 12px; /* 每个的间距 */ } ","date":"2020-07-25","objectID":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/:4:4","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——布局（上）","uri":"/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/"},{"categories":["CSS 入门"],"content":"CSS is A*s***e!! 🥴 🤢 🤮","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"熬夜总结 – CSS 基础篇 。🤞🏻 Nobody knows CSS than me !! 🤗 ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:0:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"CSS 的历史 ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:1:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"CSS 是谁发明的 李爵士的挪威同事赖先生，首先提出 CSS Håkon Wium Lie （挪威语） ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:1:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"赖先生的生平 生平 1991年获得MIT媒体实验室视觉研究理学硕士学位 1994年提出CSS概念而闻名 1999年任Opera的CTO（首席技术官，不分前端后端、只要是技术就负责） 2005年他写公开信给比尔盖茨问为什么IE不支持Web标准，盖茨说IE 7马上发布，他写了 Acid2 用来验证 2006年通过了博士论文答辩 2006年他倡议 Web 网页应使用通用字体格式 2007年他倡议浏览器可以支持video标签 观点 微软的IE常常成为他的批评对象 他也是Web打印概念的倡导者，用HTML和CSS写书 ​ ​ ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:1:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"CSS 的牛 X 之处在哪？ CSS（Cascading Style Sheets）：==层叠==样式表 样式层叠 可以多次对同一选择器进行样式声明 选择器层叠 可以用不同选择器对同一个元素进行样式声明 文件层叠 可以用多个文件进行层叠 这些特性使得 CSS 极度灵活 这也为 CSS 后来被吐槽留下了隐患 ​ ​ ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:1:3","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"CSS 的版本 ⭐目前使用最广泛的css版本：css 2.1 版本 2004-2011年间不断更新，没有具体发布时间 版本 时间 重点 CSS 1 1996年 不用管 CSS 2 1998年 添加定位、z-index、media，不用管 **CSS 2.1 ** 2004~2011年 使用最广泛的版本（IE支持） CSS 3 1999年开始起草 现代版本，分模块（IE 8 部分支持） CSS 4* 分模块升级 ​ ​ ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:1:4","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"浏览器对CSS的支持（兼容性） 怎么知道，哪些浏览器，支持哪些特性？ 方法一：几十种浏览器全部跑一遍 方法二：使用 caniuse.com 红色：不支持flex 黄色：部分支持 绿色：完全支持 caniuse.com 使用方法 请收藏此网站 输入你关心的样式，比如 border-radius 或 filter 查看大部分浏览器的支持情况 如果想看更多，点击 Show All 下方会详细说明兼容 bug 有哪些（翻译成中文） 这个网站是怎么运作的 网站主一开始自己测试了一部分浏览器 社区的前端工程师帮助测试各种各样的浏览器 UC 浏览器和 QQ 浏览器当然主要是中国开发者测试 大家把测试结果提交到 GitHub 上 这就是开发者社区的力量、 什么是社区？ 社区不是一个准确存在的概念，大家你帮我我帮你，互相学习，互相分享，就形成了社区。 是一种弱联系。 社区通过汇集的力量将事情给解决好 ​ ​ ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:1:5","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"CSS 是艺术 就像画画、折纸 你需要用感性思维来理解 CSS ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:2:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"不要用理性思维 即不要问「为什么会这样」，而是说「原来是这样」 浏览器说是怎么样，就是怎么样 当然有极少情况是浏览器出错了 ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:2:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"为什么 color: red 能让字变红 不要问「为什么」 要说「原来是这样」 所见即所学 ​ ​ ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:2:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"体系化学习 有生之年都不太可能把css所有知识学完，因为它太、多、了。只文档可能就有几百页，目录全看一遍都很累：css标准文档（google 搜 css spec） 不是把所有知识都学完，而是在一个新知识点到来的时候，马上学会它。这才是学习CSS体系化最重要的手段 体系化学习 CSS 和 HTML 的过程完全一致 ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:3:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"学一门语言必须学会什么 语法（怎么写代码） css 语法非常简单 [如何调试](#如何调试 CSS)（怎么知道自己代码写错了） node-w3c-validator -i index.html // 查错 在哪查资料（其实就是为了抄代码） MDN 标准制定者是谁 尝试所有方法仍不能解决问题的话，就必须看标准文档了 ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:3:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"如何学 Copy - 抄文档、抄老师 Run - 放在自己的机器上运行成功 Modify - 加入一点自己的想法，然后重新运行 ​ ​ ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:3:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"语法 超级简单 语法一：样式语法 选择器 { 属性名: 属性值; /*注释*/ } 注意事项 不学常态，学变态 所有符号都是英文符号，如果写错了，浏览器会警告（样式会被划掉） 区分大小写，a 和 A 是不同的东西（特别是大小写很相似的字母，很容易错） 没有 // 注释，只有 /* 注释 */ 这种形式 最后一个分号可以省略，但建议不要省略 任何地方写错了，都不会报错，浏览器会直接忽略 那我怎么知道自己写没写错呢？一会说 语法二：at 语法 @charset \"UTF-8\"; /* 声明字符编码，必须放在第一行 */ @import url(2.css); /* 导入一个额外的css文件 */ @media (min-width: 100px) and (max-width: 200px) { /* 媒体查询 */ 语法一 } 注意事项 @charset 必须放在第一行 前两个 at 语法必须以分号 ; 结尾 @charset \"UTF-8\"; @import url(2.css); @media 语法会单独教学 charset 是字符集的意思，但 UTF-8 是字符编码 encoding（并不是字符集），这是历史遗留问题 最早只有 ASCII 这一种字符集（英文），这个字符集的编码形式就是它自己 后来中国人发现 ASCII 不能表示中文，所以就发明了 GB2312，由中国国家标准局（国标局）发行，GB 就是国家标准的缩写。 GB2312 是一个支持中文简体汉字的字符集。它对应的编码形式，是它自己 后来日本、韩国的文字，我们的 GB2312 也表示不了。国标局还没开始动作，微软先一步发明 GBK，k表示扩展。GBK 可以同时表示 中文、日文、韩文（CJK） 后来中国发现还需要和更多国家建立联系，国标库根本就搞不定，就有一个叫 Unicode 的组织，给全球制作了一个字符集，叫做 Unicode（万国码）。这个码包含非常多国家，特别长，所以必须采用不同的编码形式。 编码形式包含：UTF8/UTF16/UTF32 （选择任意一个即可） 从 Unicode开始字符集和编码形式就不统一了，之前都是统一的 html 1993年左右发明，css 发明于1996年左右，Unicode在1996年之后发明。 charset 原本后面写一个【字符集的名字】，写 GBK/GB2312 ….这种，对应编码形式也是同名的。但是Unicode发明后，字符集名称和编码形式不统一了，所以我们为了表明自己使用的是 Unicode 的那种编码形式，就只能将Unicode的编码形式，写在表示字符集的 charset 的位置。 ==【这就是这个历史问题的发展经过】== 字符集 编码形式 ASCII ASCII GB2312 GB2312 GBK GBK Unicode UTF8/UTF16/UTF32 问： @charset “UTF-8” 指的是什么？ 回答 ：字符集（charset） 是错误的 “UTF-8”指定的不是字符集 charset，而是指定的【 文件编码 】 虽然charset本身是字符集的意思，但后面的 utf-8 指的是 Unicode字符集的**【编码形式】**的一种。这是一个历史遗留问题 ​ ​ ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:3:3","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"如何调试 CSS 方法 使用 W3C 验证器（在线 / 命令行工具）不用试了 node-w3c-validator -i index.html // 可能需要先安装java环境，才能运行 node-w3c-validator Java环境安装、配置 使用 VSCode 看颜色 使用 WebStorm 看颜色 使用开发者工具看警告 浏览器预览页面，右键检查，查看Element中，一般会给出问题警告。有问题的css会被划删除线 如何使用开发者工具 找到你脑中的标签 看它是否有选择器 看它的样式是否被划掉 看它的样式是否有警告 Border 调试法 步骤 怀疑某个元素有问题 就给这个元素加 border border 展示效果没出现？说明选择器错了或者语法错了 通常是 border 上面的代码有问题（因为上面代码执行遇到问题，就会影响下面样式的输出） border 出现了？看看边界是否符合预期 说明选择器没有错、border以上的代码没有错 可以继续往下测试、查找错误 bug 解决了才可以把 border 删掉 记住 CSS 的 border 调试法 就相当于 JS 的 log 调试法 我会再每节课重复这个调试法 ​ 新人常见错误 低级错误 选择器拼写错误 属性名拼写错误 属性值拼写错误 大小写错误 没写分号 中文冒号 没写反花括号 没加单位 非低级错误 没有非低级错误 ​ ​ ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:3:4","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"在哪查资料 网站推荐 Google 搜索关键词时加 MDN CSS tricks（英文），专门收集 css 小技巧的网站 使用方式：在google 搜 [技术名词] css tricks https://css-tricks.com/snippets/css/a-guide-to-flexbox/ 张鑫旭的博客：可能是中国花时间最多来学css的人 使用方式：搜 [技术名词] 张鑫旭 书籍推荐 不推荐买任何书 CSS 和 HTML 一样，以练为主 ​ ​ ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:3:5","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"在哪搜练习素材 PSD Freepik 搜索 PSD web 英文（下载免费的 psd） 如果下载慢，就把域名加入翻墙插件 中文免费 PSD 网站较少，需要多搜一下 365PSD 里的 UI 套件还行 效果图（不提供下载） dribbble.com 顶级设计师社区 可以用肉眼模仿它 商业网站 直接模仿你常去的网站 ​ ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:3:6","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"不要沉迷临摹 每个类型的临摹一两个即可 PC 网站、手机网站、UI 套件 再多无益 ​ ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:3:7","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"遇到查不到的问题，怎么办 遇到查不到的问题，应该去哪里查文档？ ——找标准制定者 李爵士、赖先生 W3C 搜索 CSS spec 可以找到 CSS 最新标准 没人能看完它 你可以看看 CSS 2.1 标准的中文版 正确学 css ，应该是遇到问题，再查资料 ​ ​ ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:3:8","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"基本概念 ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:4:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"要理解几个重要的概念 文档流 Normal Flow 块、内联、内联块 margin 合并 两种盒模型（border-box 更符合人类思维） ​ ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:4:1","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"文档流 文档流的英文名称叫做 Normal Flow 文档流方向：默认，内联元素从左到右，块级元素从上到下 emmet: span{第$个span元素}*6 + tab ​ ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:4:2","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"块、内联、内联块 将元素分为：内联元素、块级元素。是一种已经过时的分法。 在新的 HTML5 标准中，元素不分内联、块级。所有元素都可以是内联元素，所有元素都可以是块级元素。 看样式：如果 display:inline， 就是内联元素。如果 display: block 就是块级元素。 内联块：不会出现如【内联元素首尾可以在不同行】的情况，内联块会同行展示，但是又保有 block 的一个特点：不会跨两行（这就是inline和inline-block在流动方向上相似又稍微不同的点） 流动方向 inline 元素从左到右，到达最右边才会换行 block 元素从上到下，每一个都另起一行 inline-block 也是从左到右 宽度 inline 元素 宽度为 内部 inline 元素的和。 不接受用 width 指定宽度。加了也不变化 不要在 inline元素内部，再写 block 元素。它的计算可能乱套的，出现后果自负 block 元素 默认自动计算宽度，可用 width 指定 width: 200px; （200像素）、width: 20em; （20个字宽） 不指定宽度，宽度默认是 width: auto。不是 width: 100%，是能有多宽就占多宽，最大可以占 100% 如下图，每个div元素都有边框，【div默认宽度】=100%-边框宽度。如果【设置div宽度为100%】，那么相当于，整行宽度= div宽度100%+边框宽度，所以会多出边框宽度的一小块位置 ==经验之谈==：给任何元素都尽量，不要设置 width: 100% 的样式。大部分情况写了就等于 bug。 inline-block 元素 结合前两者特点，可用 width 默认情况，与 inline 一致 但是又可以用 width 指定宽度，这一点又与 block 一致 高度 inline 高度 由 line-height（行高） 间接确定，跟 height 无关 （设置height无效） 如下图，为什么外层的 绿div 没有包住 红span、被撑高呢？ 因为 span 的高度，不是【内容高+padding】决定的。padding 改变的不是 span 的实际高度，只是改变了可视的高度。div 框的高度才是 span 的实际高度。 span 的实际高度，由 行高 间接确定。如下图，虽然span的红框仍然没变，但是 div高度变化了。而div包裹的高度才是 span 的实际高度（只需关注外层div高度即可，红框的高度并不是span实际高度） “间接” 怎么理解？ 即使设置行高100px，span的高度也有可能不是100px高 设置不同的字体，会改变 span 的实际高度。经测试：↓↓ 默认，微软雅黑字体、行高是100px的话，实际高度就是100px。 改成宋体、行高是100px，span 的实际高度变成 101px。 改成 monospace(等宽字体)、行高是100px。 实际高度变成 102px 具体知识点叫做：行盒 （可以看文章，能看懂就看，面试官可能都看不懂，前期可以不用研究这么深） block 高度 默认高度，由内部所有 文档流元素 的高度总和 决定的。（由默认行高间接决定） 内层div是脱离文档流的元素，外层div就无法计算上它的高度 后面会介绍：如何脱离文档流、脱离后去哪里了 同时也可以自定义设置 height 高度。这种情况，就忽略内部元素高度。 如果div中没有任何内容，高度为0。区别于span，span中没有内容，也有高度，由 默认的 line-height 决定。 inline-block 高度 默认高度的计算，跟 block 一样。 也可以自定义设置 height。 ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:4:3","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"overflow 溢出 当内容大于容器 当内容的宽度或高度大于容器的，会溢出 可用 overflow 来设置是否显示滚动条 auto 是灵活设置 scroll 是永远显示（基本不用） hidden 是直接隐藏溢出部分 visible 是直接显示溢出部分（默认值） overflow 可以分为 overflow-x 和 overflow-y，通常只用overflow。x和y可能最终效果会与实际需求有差 示例 \u003cdiv style=\"width: 10em; height: 200px;\"\u003e内容......\u003c/div\u003e overflow: visible; /* 默认 */ overflow: hidden; /* 超出部分隐藏 */ overflow: scroll; /* 超出部分可滚动预览，很少有人用。因为内容没溢出时，仍显示滚动条，非常丑 */ overflow: auto; /* 超出时显示滚动条，不超出不显示 */ 横向滚动条 \u003cdiv style=\"width: 10em; height: 200px;\"\u003e 内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容 \u003cdiv style=\"width:1000px;\"\u003e 内容 \u003c/div\u003e \u003c/div\u003e \u003cstyle\u003e div{ border: 1px solid green; overflow: auto; } span{ border: 1px solid red; } \u003c/style\u003e 内部文档流元素宽度超出外层父元素，就会出现横向滚动条 同时原本的内容，不会因为宽度被内部元素撑开而平铺显示，仍会只显示在第一屏中 ​ ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:4:4","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"脱离文档流 回忆一下 block 高度由内部文档流元素决定，可以设 height 这句话的意思是不是说，有些元素可以不在文档流中 哪些元素脱离文档流 脱离文档流的元素，那么它所在的容器，就不会把它计算进高度中 脱离文档流，就是从普通文档流中跳出，比普通文档流的层级稍高 float position: absolute / fixed 怎么让元素不脱离文档流 不要用上面属性不就不脱离了 ​ ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:4:5","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"盒模型 content box \u0026 border box css 盒模型分为两种：一种是 content-box ，一种是 border-box 二者的区别是： content-box 的宽度，只包含 content 部分 border-box 的宽度，包含 border、padding 和 content 分别是 content-box 内容盒 - 内容，就是盒子的边界 border-box 边框盒 - 边框，才是盒子的边界 公式 content-box width = 内容宽度 border-box width = 内容宽度 + padding + border 哪个好用 border-box 好用 同时指定 padding、width、border 就知道为什么了 ​ ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:4:6","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"margin合并 哪些情况会合并 兄弟 margin 合并 上方元素的 margin-bottom，会和下方元素的 margin-top 重合 父子 margin 合并 给子元素添加 margin-top，效果会作用在父元素上（bf：嵌套崩塌） 第一个子元素的 margin-top，会和 最后一个子元素的 margin-bottom，效果会作用在父元素的 margin-top/bottom 或 和父元素的 margin-top/bottom 重合 记住：只有上下会重叠，左右从来不重叠 如何阻止合并 不要问为什么，CSS 很多效果是试出来了，无法解释清楚 父子合并用 padding / border 挡住 可以用很小的 padding/border 来挡住，让父子的margin无法穿透并重叠 父子合并用 overflow: hidden 挡住 父子合并用 display: flex，不知道为什么，试出来的 兄弟合并是符合预期的 兄弟合并可以用 display: inline-block 消除 总之要一条一条死记。 而且 CSS 的属性逐年增多，每年都可能有新的 为什么css 难学？ 不正交 因为很多没有道理，需要死记硬背的点。 为什么 display: inline-block 可以消除 margin 合并。 并没有 enable-margin-callapse: false 这种选项，翻译一下就知道它是用来单独控制margin合并的。 无法知道 现在写的这句 css，到底会影响哪些属性 什么叫正交？ 当我们调节显示器的亮度时，显示器的对比度不会改变。 而 css 是不正交的，因为我们在写某一个属性时，可能就会改变其他属性的状态、效果 ​ ​ ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:4:7","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"基本单位 长度单位 px 像素 em 相对于自身 font-size 的倍数 百分数 整数 rem：等你把 em 滚瓜烂熟了再问 rem vw 和 vh 其他长度单位都用得很少，不用了解 颜色 十六进制 #FF6600 或者 #F60 #000 也支持最后添加 alpha。 #FF660000 全透明、 #FF6600FF 不透、 #FF660088 半透。但兼容性不确定 RGBA 颜色 rgb(0,0,0) 或者 rgba(0,0,0,1) hsl 颜色 hsl(360,100%,100%)：色相、饱和度、明度 hsla(360,100%,100%, 0.5) ​ ​ ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:4:8","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["CSS 入门"],"content":"实践：做一个彩虹 \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e \u003ctitle\u003eJS Bin\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"rainbow\"\u003e \u003cdiv\u003e \u003cdiv\u003e \u003cdiv\u003e \u003cdiv\u003e \u003cdiv\u003e \u003cdiv\u003e \u003cdiv\u003e \u003cdiv\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e * { box-sizing: border-box; margin: 0; padding: 0; } body{ background: white; } .rainbow { height: 200px; overflow: hidden; } .rainbow div { overflow: hidden; } .rainbow \u003e div { width: 400px; height: 400px; background: red; border-radius: 50%; } .rainbow \u003e div\u003e div { background: hsl(60, 80%, 50%); height: 380px; margin: 10px; border-radius: 50%; } .rainbow \u003e div\u003e div \u003e div { background: hsl(120, 80%, 50%); height: 360px; margin: 10px; border-radius: 50%; } .rainbow \u003e div\u003e div \u003e div \u003e div { background: hsl(180, 80%, 50%); height: 340px; margin: 10px; border-radius: 50%; } .rainbow \u003e div\u003e div \u003e div \u003e div \u003ediv { background: hsl(240, 80%, 50%); height: 320px; margin: 10px; border-radius: 50%; } .rainbow \u003e div\u003e div \u003e div \u003e div \u003ediv \u003e div { background: hsl(300, 80%, 50%); height: 300px; margin: 10px; border-radius: 50%; } .rainbow \u003e div\u003e div \u003e div \u003e div \u003ediv \u003e div \u003e div { background: hsl(330, 80%, 50%); height: 280px; margin: 10px; border-radius: 50%; } .rainbow \u003e div\u003e div \u003e div \u003e div \u003ediv \u003e div \u003e div \u003e div { background: hsl(330, 80%, 100%); height: 260px; margin: 10px; border-radius: 50%; } ","date":"2020-07-25","objectID":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/:5:0","tags":["CSS","笔记"],"title":"Re：从零开始の CSS 学习笔记——基础篇","uri":"/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"categories":["HTML 入门"],"content":"❤️ 🧡 💛 💚 💙 💜","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"记录几个标签的简单用法，然后忘掉 🤪 ​ ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:0:0","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"a 标签 特别常用，但很多人不会用 😳😳 属性 href target download rel=noopener 面试可能会问 作用 跳转外部页面 跳转内部锚点 跳转到邮箱或电话等 ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:1:0","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"href href 是 Hypertext REFerence 超链接 发音 ：应该读 H-Ref /ˈeit∫.rɛf/ href 的取值 网址 https://google.com http://google.com //google.com 【推荐写这种形式】 network 会先请求 http://google.com → http://www.google.com → https://www.google.com 结束 路径 使用 hs 开启服务的目录，就是 /a/b/c 的根目录 双击打开文件，访问的路径是硬盘的根目录 file /a/b/c 以及 a/b/c index.html 以及 ./index.html \u003ca href=\"/a/b/c.html\"\u003ec.html\u003c/a\u003e \u003ca href=\"./index.html\"\u003eindex.html\u003c/a\u003e 伪协议 javascript:代码; \u003ca href=\"javascript:alert(1);\"\u003e\u003c/a\u003e \u003c!--执行js操作：弹出1--\u003e \u003ca href=\"javascript:;\"\u003e\u003c/a\u003e \u003c!--只有这种是什么都不做--\u003e \u003ca href=\"\"\u003ehref为空，页面会刷新\u003c/a\u003e \u003c!--如果有input会被清空--\u003e \u003ca href=\"#\"\u003e#不刷新，但页面会滚动到顶部\u003c/a\u003e 补充：编译器中 p{$}*30 + tab ，会生成 30 个 p 标签，内容 1-30 mailto:邮箱 移动端，通常会直接呼出发邮件的界面，并自动填写收件人邮箱 \u003ca href=\"mailto:ryuukousen@gmail.com\"\u003e给他发邮件\u003c/a\u003e tel:手机号 移动端，直接呼出拨号盘，并自动填写号码 \u003ca href=\"tel:13912345678\"\u003e\u003c/a\u003e id 锚点 跳转到指定标签 href=#xxx \u003ca href=\"#xxx\"\u003e查看aaa\u003c/a\u003e ... \u003cp id='xxx'\u003eaaa\u003c/p\u003e ... ​ ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:1:1","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"target 在哪个页面打开窗口 内置名字 _blank ：新窗口 _top ：顶级窗口（结合 iframe） _parent ：父级窗口（结合 iframe） _self ：当前窗口（默认值） 程序员命名 window 的 name \u003ca href=\"//google.com\" target=\"asdf\"\u003egoogle\u003c/a\u003e \u003ca href=\"//baidu.com\" target=\"asdf\"\u003ebaidu\u003c/a\u003e target=asdf，表示如果有这个asdf窗口就在这个窗口打开google，如果没有就创建一个新的窗口命名为asdf 控制台输出 window.name 可知当前窗口的名称 iframe 的 name 可以写一个搜索引擎的集合或切换，goodbai 谷歌已经禁用了在 iframe 中引入 \u003ca href=\"//google.com\" target=\"asd\"\u003egoogle\u003c/a\u003e \u003ca href=\"//baidu.com\" target=\"qwe\"\u003ebaidu\u003c/a\u003e \u003ciframe src=\"\" name=asd\u003e\u003c/iframe\u003e \u003ciframe src=\"\" name=qwe\u003e\u003c/iframe\u003e ​ ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:1:2","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"download 绝大多数浏览器不支持，chrome 不支持 \u003ca href=\"//google.com\" download\u003e下载页面\u003c/a\u003e 作用 不是打开页面，而是下载页面 问题 不是所有浏览器都支持，尤其是手机浏览器可能不支持 ​ ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:1:3","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"iframe 内嵌窗口 已经很少使用了，还有些老系统再用。新的方式是通过 ajax 实现 \u003ciframe name=\"a\" src=\"a-target-iframe.html\" frameborder=\"0\"\u003e\u003c/iframe\u003e ​ ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:2:0","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"table ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:3:0","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"相关标签 thead、tbody、tfoot，即使开发时换了顺序，浏览器识别时仍会按照 head body foot 的顺序解析渲染 table thead tbody tfoot tr td th 一个表头的表格 \u003ctable\u003e \u003cthead\u003e \u003c!-- tr: table row 行--\u003e \u003ctr\u003e \u003c!-- th: table head 表头--\u003e \u003cth\u003e英语\u003c/th\u003e \u003cth\u003e翻译\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003c!-- td: table data 数据 --\u003e \u003ctd\u003ehyper\u003c/td\u003e \u003ctd\u003e超级\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003etarget\u003c/td\u003e \u003ctd\u003e目标\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003ereference\u003c/td\u003e \u003ctd\u003e引用、链接\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003ctfoot\u003e \u003ctr\u003e \u003ctd\u003e空\u003c/td\u003e \u003ctd\u003e空\u003c/td\u003e \u003c/tr\u003e \u003c/tfoot\u003e \u003c/table\u003e 两个表头的表格 \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003e\u003c/th\u003e \u003cth\u003e小红\u003c/th\u003e \u003cth\u003e小明\u003c/th\u003e \u003cth\u003e小颖\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003cth\u003e数学\u003c/th\u003e \u003ctd\u003e61\u003c/td\u003e \u003ctd\u003e85\u003c/td\u003e \u003ctd\u003e92\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003cth\u003e语文\u003c/th\u003e \u003ctd\u003e61\u003c/td\u003e \u003ctd\u003e85\u003c/td\u003e \u003ctd\u003e92\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003cth\u003e英语\u003c/th\u003e \u003ctd\u003e61\u003c/td\u003e \u003ctd\u003e85\u003c/td\u003e \u003ctd\u003e92\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003ctfoot\u003e \u003ctr\u003e \u003cth\u003e总分\u003c/th\u003e \u003ctd\u003e200\u003c/td\u003e \u003ctd\u003e200\u003c/td\u003e \u003ctd\u003e200\u003c/td\u003e \u003c/tr\u003e \u003c/tfoot\u003e \u003c/table\u003e ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:3:1","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"相关样式 table-layout auto【默认】：根据单元格中的内容数量，计算单元格宽度 fixed：单元格宽度尽量平均 inherit initial unset border-spacing 设定每个单元格的间隙 \u003cstyle\u003e table{ width: 600px; table-layout: auto; border-spaceing: 10px; } td,th{ border: 1px solid blue; } \u003c/style\u003e border-collapse 通常用于 去掉单元格间隙 \u003cstyle\u003e table{ width: 600px; table-layout: auto; border-collapse: collapse; /* 去掉单元格间隙 */ border-spaceing: 0; /* 去掉单元格间隙 */ } td,th{ border: 1px solid blue; } \u003c/style\u003e 下面这两句常被写进 reset.css 中 border-collapse: collapse; /* 去掉单元格间隙 */ border-spaceing: 0; /* 去掉单元格间隙 */ ​ ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:3:2","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"img 标签 ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:4:0","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"作用 发出 get 请求，展示一张图片 ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:4:1","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"属性 alt：全称是可替换的，当图片加载失败，会显示 alt 的值 height：只设置 height ，宽度自适应 width：只设置 width ，高度自适应 同时设定，height 和 width，图片可能变形 永远不要让图片变形 src：全称 source ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:4:2","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"事件 onload/onerror \u003cimg id=\"xxx\" width=\"400\" src=\"dog.jpg\" alt=\"一只狗子\"\u003e \u003cscript\u003e xxx.onload = function(){ console.log(\"图片加载成功\"); } xxx.onerror=function(){ console.log(\"图片加载失败\"); xxx.src = \"/404.jpg\"; // 挽救：图片加载失败，展示404图，放在项目中 } \u003c/script\u003e ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:4:3","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"响应式 max-width:100% \u003cstyle\u003e *{ margin:0; padding:0; box-sizing: border-box; } img{ max-width: 100%; /* 图片是响应式的，尺寸永远满足各种窗口大小 */ } \u003c/style\u003e ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:4:4","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"可替换元素 https://developer.mozilla.org/zh-CN/docs/Web/CSS/Replaced_element 考试可能会问，被问概率30% ​ ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:4:5","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"form 标签 ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:5:0","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"作用 发 get 或 post 请求，然后刷新页面 ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:5:1","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"属性 \u003cform action=\"/xxx\" method=\"POST\"\u003e \u003cinput type=text /\u003e \u003cinput type=submit /\u003e \u003c/form\u003e action 默认需要给一个 action ，就是发送请求的目标地址（HTTP相关）、请求某一个页面的页面地址 需要有后台给我们提供这个地址 method method 属性控制用 GET 还是 POST 来发送请求 autocomplete 自动填写 autocomplete: on / off target 提交到哪个页面：新开页面、当前页面、iframe 与 a 标签写法一致 _blank top ：顶级窗口（结合 iframe） _parent ：父级窗口（结合 iframe） _self ：当前窗口（默认值） window.name \u003ciframe name=xxx\u003e\u003c/iframe\u003e \u003cform action=\"/xxx\" method=\"POST\" autocomplete=\"off\" target=\"a\"\u003e \u003cinput type=text /\u003e \u003cinput type=submit /\u003e \u003c/form\u003e \u003ciframe name=\"a\" src=\"a-target-iframe.html\" frameborder=\"0\"\u003e\u003c/iframe\u003e ​ ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:5:2","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"事件 onsubmit：用户点击提交会触发这个事件 ​ ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:5:3","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"type=submit form 中的 button 如果没有指定 type 类型，默认是 type=submit 的，点击 button 就会提交 form 表单。如果指定了其他类型，例如 type=button，按钮就不能提交表单。 一个 form 表单中，必须要有一个 type=submit 的 input 或 button ，才能提交表单。 ​ 修改submit按钮文字 \u003cinput type=\"submit\" /\u003e \u003cinput type=\"submit\" value=\"搞起\" /\u003e ​ submit 按钮的 input 和 button 的区别 \u003cinput type=\"submit\" value=\"搞起\" /\u003e \u003cbutton type=\"submit\"\u003e搞起\u003cbutton\u003e 区别是： input按钮中，不能再添加内容 button按钮中还可以再添加标签内容 \u003cbutton\u003e \u003cstrong\u003e搞起\u003c/strong\u003e \u003cimg src=\"dog.jpg\" alt=\"狗子\"\u003e \u003c/button\u003e ​ ​ ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:5:4","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"input 标签 ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:6:0","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"作用 让用户输入内容 ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:6:1","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"属性 类型 type: button/checkbox/email/file/hidden/ number/password/radio/ search/submit/tel/text \u003cinput type=\"text\" /\u003e \u003cinput type=\"color\" /\u003e \u003cinput type=\"password\" /\u003e \u003cinput type=\"radio\" name=\"gender\" /\u003e男 \u003c!--同一组，取相同的name--\u003e \u003cinput type=\"radio\" name=\"gender\" /\u003e女 \u003cinput type=\"checkbox\" name=\"hobby\" /\u003e唱 \u003c!--同一组，取相同的name--\u003e \u003cinput type=\"checkbox\" name=\"hobby\" /\u003e跳 \u003cinput type=\"checkbox\" name=\"hobby\" /\u003erap \u003cinput type=\"checkbox\" name=\"hobby\" /\u003e篮球 \u003cinput type=\"file\" multiple/\u003e 看不见我吧：\u003cinput type=\"hidden\"\u003e \u003c!-- 通常用于js自动获取并填入 --\u003e \u003ctextarea style=\"resize: none;width:50%;height:50px\"\u003e\u003c/textarea\u003e \u003c!--禁止改变大小--\u003e \u003cselect name=\"\" id=\"\"\u003e \u003coption value=\"\"\u003e-请选择-\u003c/option\u003e \u003coption value=\"1\"\u003e星期一\u003c/option\u003e \u003coption value=\"2\"\u003e星期二\u003c/option\u003e \u003c/select\u003e 其他 （js内容） name/autofocus/checked/disabled/ maxlength/pattern/value/placeholder ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:6:2","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"事件 （js内容） onchange ：用户改变内容触发 onfocus：用户聚焦时触发 onblur ：用户失焦时触发 ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:6:3","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"验证器 （js内容） HTML5新增功能：自带验证 例： \u003cinput type=\"text\" require/\u003e \u003cinput type=\"password\" require/\u003e ​ ​ ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:6:4","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"其他输入标签 ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:7:0","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"标签 （js内容） select + option textarea label ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:7:1","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"注意事项 一般不监听 input 的 click 事件 form 里面的 input 都要有 name form 里要放一个 type=submit 才能触发 submit 事件 ​ ​ ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:7:2","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"补充工具：开启 http 服务 ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:8:0","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"http-server 安装 yarn global add http-server 使用 http-server . -c-1 http-server -c-1 hs -c-1 -c 缓存，-c-1 不要缓存 . 可以省略 http-server 可缩写成 hs 按住ctrl + 点击打开任意链接。地址栏追加 html 文件名，即可浏览 ctrl + C 中断服务器 ​ ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:8:1","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"parcel 操作更简便 好像有bug ：ctrl + c 无法中断 yarn global add parcel // 安装 parcel a-href.html // 使用 ","date":"2020-07-18","objectID":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/:8:2","tags":["HTML","标签","笔记"],"title":"HTML 标签の简单记录","uri":"/20200718-html%E6%A0%87%E7%AD%BE%E3%81%AE%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"},{"categories":["HTML 入门"],"content":"😎💋","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"HTML (HyperText Markup Language) 不是一门编程语言，而是一种用来告知浏览器如何组织页面的标记语言。😎💋 HTML 可复杂、可简单，一切取决于开发者。 它由一系列的元素（elements）组成，这些元素可以用来包围不同部分的内容，使其以某种方式呈现或者工作。 一对标签（ tags）可以为一段文字或者一张图片添加超链接，将文字设置为斜体，改变字号，等等。 ​ ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:0:0","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"HTML 是谁发明的 HTML 之父 ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:1:0","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"1990年左右诞生 Tim Berners-Lee，称之为李爵士 2004年，英女皇他颁发大英帝国爵级司令勋章 2017年，被颁发图灵奖 ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:1:1","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"李爵士做了啥？ 自己写了第一个浏览器 自己写了第一个服务器 用自己写的浏览器访问了自己写的服务器 发明了WWW，同时发明了HTML、HTTP和URL ​ ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:1:2","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"HTML 起手式怎么写 快捷键：感叹号 ! + tab \u003c!DOCTYPE html\u003e ← 文档类型 \u003chtml lang=\"en\"\u003e ← 页面根标签 \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e ← 文件的字符编码 \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e ← 防止页面缩放 \u003cmeta http-equiv\"X-UA-Compatible\" content=\"ie=edge\"\u003e ← 如果在IE打开，告诉IE使用最新内核（IE11） \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003c/body\u003e \u003c/html\u003e DOCTYPE：文档类型 浏览器支持很多种文档类型（HTML、XHTML…）。 \u003c!DOCTYPE html\u003e 表示告诉浏览器开始写HTML了。 html 标签是根标签 必须要写（如果没写也会自动加上） 可以把 lang 的属性值改为 zh-CN head 和 body 标签，虽然是 html 的子元素，但一般格式上不缩进 head 标签里面存放看不见的元素 viewport 视口、视窗 ​ ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:2:0","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"章节标签 章节标签，通常用于表示文章、书的层级（就是内容框架） 标题 h1~h6 章节 section 文章 article 段落 p 头部 header 脚部 footer 主要内容 main 旁支内容 aside 划分 div \u003cbody\u003e \u003cheader\u003e顶部广告\u003c/header\u003e \u003cdiv\u003e \u003cmain\u003e \u003ch1\u003e文章标题\u003c/h1\u003e \u003csection\u003e \u003ch2\u003e第一章\u003c/h2\u003e \u003cp\u003e 一段话一段话一段话一段话一段话一段话一段话一段话一段话一段话一段话 \u003c/p\u003e \u003csection\u003e \u003ch3\u003e1.1 节\u003c/h3\u003e \u003cp\u003e一段话\u003c/p\u003e \u003c/section\u003e \u003csection\u003e \u003ch3\u003e1.2 节\u003c/h3\u003e \u003cp\u003e一段话\u003c/p\u003e \u003c/section\u003e \u003c/section\u003e \u003c/main\u003e \u003caside\u003e 参考资料 1 2 3 \u003c/aside\u003e \u003c/div\u003e \u003cfooter\u003e\u0026copy; xxx版权所有\u003c/footer\u003e \u003c/body\u003e ​ ​ ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:3:0","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"全局属性 任何标签都可以有的属性 ​ ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:4:0","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"class ： 类名 \u003cstyle\u003e ← style标签也有contenteditable 属性，可以被编辑 [class=middle]{ /* 早期写法--缺点：当一个标签存在多个类名，就无法通过匹配单个类名来找到这个标签 */ background: black; color: white; } .middle{ /* 简写 */ background: black; color: white; } \u003c/style\u003e ​ ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:4:1","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"contenteditable ：让标签可以被编辑 style标签，也有 contenteditable 属性，可以被编辑 可以将 style 标签放到 body里面，然后添加 style { display : block; } ，style 标签中的样式内容就会显示在浏览器中，然后给style标签添加contenteditable 属性，就可以在浏览器总直接修改样式，并实时刷新 \u003cbody\u003e \u003cstyle contenteditable\u003e style{ display: block; } .xxx{ border: 10px solid orange; } \u003c/style\u003e \u003cp class=\"xxx\" contenteditable\u003e这段话可以直接在浏览器中编辑修改内容\u003c/p\u003e \u003c/body\u003e contenteditable\" contenteditable ​ ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:4:2","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"hidden ：让标签隐藏 \u003ch1 class=\"title\" hidden\u003e\u003c/h1\u003e .title{ display: block /* 直接添加属性hidden而隐藏的元素，可以通过设置样式 display: block，再显示回来 */ } ​ ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:4:3","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"id ：全局唯一 id 用来表示【全局唯一的标签】 id 的全局唯一性没有保障，就算有两个重复的 id，HTML 也不会提示我写错了 class足够了，不到万不得已不要用 id ，因为 id 重复使用也不会报错，可能误导开发者 \u003cheader id=\"xxx\"\u003e\u003c/header\u003e \u003cdiv id=\"xxx\"\u003e\u003c/div\u003e #xxx{ /* 此时设置的样式会同时对两个id=xxx元素生效，id被重复使用不会报错，那id的唯一性就毫无意义了 */ } id 中有很多不能使用的词：parent、self、top … 控制台输入 window. 弹出属性列表中所有的词都不能用，因为这些词是 window 已经有的全局属性 \u003cheader id=\"top\"\u003e\u003c/header\u003e \u003cscript\u003e top.style.border=\"10px solid red\" // 直接调用不能获取到top元素，与window对象中的全局属性重名 var ele = document.getElementById(\"top\") // 通过这种方式可以获取到 top 元素，但单词略复杂 \u003c/script\u003e ​ ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:4:4","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"style ：行内样式 \u003cdiv style=\"border: 10px solid red\" id=\"a\"\u003e\u003c/div\u003e js 中写 a.style.border = \"100px solid green\" 会覆盖 div元素中的行内样式 ​ ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:4:5","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"tabindex ：顺序 在浏览页面时，网页中按钮都只通过键盘 tab 控制切换选中。而这里的 tabindex 属性就是控制，切换的顺序 被选中的会有一圈不明显的蓝色边框 \u003ca tabindex=1\u003e首页\u003c/a\u003e \u003cp tabindex=3\u003e一段话\u003c/p\u003e \u003cfooter tabindex=2\u003e\u0026copy;版权所有\u003c/footer\u003e tabindex 可以是正数，不必是连续的 tabindex 可以是 0，表示最后才被 tab 访问 tabindex 可以是 -1，表示不可被 tab 访问 ​ ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:4:6","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"title ：鼠标指向时显示的内容 单行文字溢出，使用省略号 将鼠标移动到这段文字上时，应该能展示出全部文字内容，包括溢出隐藏的部分 \u003cp class=\"xxx\" title=\"显示一段超长的话\"\u003e一段超长的话\u003c/p\u003e \u003cstyle\u003e .xxx { text-overflow: ellipsis; /* 超出部分用省略号 */ overflow: hidden; /* 超出隐藏 */ white-space: nowrap; /* 不换行 */ } \u003c/style\u003e ​ ​ ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:4:7","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"内容标签 ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:5:0","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"ol+li ordered list + list item ol ：有序列表 ol 不能含有 li 之外的任何元素、字符 ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:5:1","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"ul+li unordered list + list item ul ：无序列表 ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:5:2","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"dl+dt+dd description list + term + data dl ：description list —— 描述列表 dt ：description term —— 描述项 dd ：猜测是 description data —— 描述信息 ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:5:3","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"pre preview 的缩写 用的较少 html 特点：HTML 代码里的多处空格、回车、tab 等内容，默认会被转化为一个空格 pre 的作用是，可以保留开发者键入的空白位置（pre 有默认样式，很丑，如下） pre\" pre ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:5:4","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"code 等宽字体 用 code 标签包裹的内容，字符是等宽的。但默认内容在同行展示，无法换行 使用 pre 可以让 code 的内容换行 code \u0026 pre+code\" code \u0026 pre+code ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:5:5","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"hr 水平分割线 horizontal ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:5:6","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"br break 的缩写 换行 ​ ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:5:7","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"a anchor 的缩写 超链接 href target 国内开发习惯使用 _blank 在新标签打开链接。 国外开发通常不写 target，他们觉得会让浏览器网页越开越多（他们习惯：通过鼠标中间点击打开新标签页，默认左键点击同屏跳转） ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:5:8","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"em emphasis 的缩写 emphasis 意为强调，效果字体斜体 ​ ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:5:9","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"strong 字体加粗 表示重要 ​ ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:5:10","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"q quote 的缩写 quote 意为引用 quote标签：内联，行内，不换行 ​ ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:5:11","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["HTML 入门"],"content":"blockquote 引用 块级，换行 quote \u0026 blockquote\" quote \u0026 blockquote ","date":"2020-07-17","objectID":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/:5:12","tags":["HTML","笔记"],"title":"HTML 入门笔记","uri":"/20200717-html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"},{"categories":["工具类"],"content":"最近 Typora 有了更新，终于支持图床功能了 🎉！新增了原生对 PicGo-Core 的调用，可以自动上传 markdown 内的图片，尝鲜一波！","date":"2020-07-16","objectID":"/20200716-typora%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/","tags":["Typora","图片","“SM.MS”"],"title":"Typora 如何上传图片？（图床）","uri":"/20200716-typora%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"},{"categories":["工具类"],"content":"​ Typora 是一款简单、高效而且优雅的 Markdown 编辑器，它提供了一种所见即所得的全新的 Markdown 写作体验。它把源码编辑和效果预览两者合二为一，在输入 Markdown 代码的时候即时生成预览效果。Typora 的一切都围绕纯粹的生产效率而设计。 Typora一直是我最喜欢的 markdown 编辑器，写博客、记笔记的首选软件。相信大部分朋友也在使用 Typora 这款软件。 但是 Typora 之前是不支持图床功能的，只能通过第三方插件实现图片自动上传的功能。不过最近 Typora 有了更新，终于支持图床功能了，新增了原生对 PicGo-Core 的调用，可以自动上传 markdown 内的图片，赶紧尝鲜一波。 ​ ","date":"2020-07-16","objectID":"/20200716-typora%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/:0:0","tags":["Typora","图片","“SM.MS”"],"title":"Typora 如何上传图片？（图床）","uri":"/20200716-typora%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"},{"categories":["工具类"],"content":"1. 安装 PicGo-Core 因为Typora已经原生支持PicGo-Core, 所以只需要在软件内下载一下就可以了(PS: 下面这张图就是用的自动上传, 很方便) 首先点击上面红色1的位置，选择 PicGo-Core，再点3（不要问我2去哪儿了….就当他不存在），并等待下载完成。 ​ ","date":"2020-07-16","objectID":"/20200716-typora%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/:1:0","tags":["Typora","图片","“SM.MS”"],"title":"Typora 如何上传图片？（图床）","uri":"/20200716-typora%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"},{"categories":["工具类"],"content":"2. 安装 smms 插件 直接点击红色5的位置，根据文本内容找到 PicGo-Core 的程序目录 注意，上图中我们只需关心红框中的路径下的 picgo.exe 文件，其他信息都不管 找到目录后，我们在picgo的目录下启动命令行，执行如下命令，并等待安装成功 .\\picgo.exe install smms-user ​ ","date":"2020-07-16","objectID":"/20200716-typora%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/:2:0","tags":["Typora","图片","“SM.MS”"],"title":"Typora 如何上传图片？（图床）","uri":"/20200716-typora%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"},{"categories":["工具类"],"content":"3. 配置 PicGo-Core 安装完成之后点击红色4的位置（红标顺序不代表点击顺序），打开 PicGo-Core 的配置文件，按照下面的格式无脑全选替换就行 { \"picBed\": { \"current\": \"smms-user\", \"uploader\": \"smms-user\", \"smms-user\": { \"Authorization\": \"这里替换成你自己的\" }, \"transformer\": \"path\" }, \"picgoPlugins\": { \"picgo-plugin-smms-user\": true } } 没有 Authorization 的自己去这里申请一个： https://sm.ms/home/apitoken 申请前需要注册一个账号，这个没啥难度，就不细说了。 ​ ","date":"2020-07-16","objectID":"/20200716-typora%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/:3:0","tags":["Typora","图片","“SM.MS”"],"title":"Typora 如何上传图片？（图床）","uri":"/20200716-typora%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"},{"categories":["工具类"],"content":"4. 体验效果 保存配置之后，我们直接在 Typora 内粘贴一张图片，就会自动提示上传中 或者在已有的本地图片上面按右键，也可以弹出上传图片的按钮，整个操作非常便捷。 ","date":"2020-07-16","objectID":"/20200716-typora%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/:4:0","tags":["Typora","图片","“SM.MS”"],"title":"Typora 如何上传图片？（图床）","uri":"/20200716-typora%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"},{"categories":["个人博客的创建之路"],"content":"个人博客绑定域名","date":"2020-07-15","objectID":"/20200715-%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/","tags":["域名","部署"],"title":"博客之路02：💰个人博客绑定域名","uri":"/20200715-%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"},{"categories":["个人博客的创建之路"],"content":"买个域名玩玩！ ","date":"2020-07-15","objectID":"/20200715-%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/:0:0","tags":["域名","部署"],"title":"博客之路02：💰个人博客绑定域名","uri":"/20200715-%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"},{"categories":["个人博客的创建之路"],"content":"个人博客绑定域名 ","date":"2020-07-15","objectID":"/20200715-%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/:1:0","tags":["域名","部署"],"title":"博客之路02：💰个人博客绑定域名","uri":"/20200715-%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"},{"categories":["个人博客的创建之路"],"content":"购买域名 namesilo （方便、无需填写个人真实信息）和阿里云（中文、可能需要实名填写详细信息） namesilo 进入官网，搜索并选中需求的域名（domain），进行注册 支付，使用支付宝，需设置支付宝邮箱 购买成功后，等待跳转。邮箱也会收到购买成功的邮件。 每年需要续费，不续费，会有一个保护期，保护期过了，域名就重新开放购买 点击 Manage my Domains 【管理我的域名】。 初次进入可能需要填写基本信息。点击 create my new account。只要保证当前账户邮箱是真实的即可 在域名管理页面，点击蓝色圆形按钮，可以进入 【Manage DNS】 管理DNS页面 ​ 阿里云 进入官网，注册一个账户，国内账户通常需要提供真实的手机号/姓名/身份证等。 在【域名与网站】选项卡中，选择【域名注册】；或者直接在搜索框进入【域名 控制台】选择【域名注册】 搜索域名，加入清单，结算 个人 or 企业 填写 [个人] 信息 支付 ​ ","date":"2020-07-15","objectID":"/20200715-%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/:1:1","tags":["域名","部署"],"title":"博客之路02：💰个人博客绑定域名","uri":"/20200715-%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"},{"categories":["个人博客的创建之路"],"content":"配置 GitHub Pages 添加域名 找到 github pages 中的 custom domain ，添加域名，SAVE 保存 仓库会多出一个 CNAME 文件，记录配置的域名 注意：不勾选 Enforce HTTPS。现在不用开启 HTTPS（不开启比较方便测试） 勾选后，所有与当前仓库相关的页面，可能都需要变成 https，可能还需要申请免费证书之类的，hin麻烦 ​ ","date":"2020-07-15","objectID":"/20200715-%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/:1:2","tags":["域名","部署"],"title":"博客之路02：💰个人博客绑定域名","uri":"/20200715-%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"},{"categories":["个人博客的创建之路"],"content":"配置 DNS 最终效果是，让 4个A记录出现在域名的DNS管理页面中，就搞定了 配置四条 A 记录 找到 github pages 中的 custom domain ，点击 Learn more ，找到【配置 apex 域】 找到 4 个IP，配置到域名中 185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153 namesilo 配置 A 记录 （点击蓝色圆形按钮）进入某个域名的管理页面，点击选择 A 会生成一个配置，然后依次将4个IP 多填入提交，生成4条配置。只保留这4条配置，将其他默认存在的配置删除即可，默认提供的配置都是没用的 阿里云 配置 A 记录 基本同 namesilo 在域名DNS解析中，添加 4 条 A 记录 IP 下拉框选择 @ ​ 测试DNS是否配置成功 打开命令行，运行nslookup liubingxuan.xyz 命令行能打印出4条A记录的IP，就说明配置的DNS生效了 刚配置完可能没法立即生效，需要等待（可能半小时、一天或更久，只能等，听天由命😢 ） Windows 用户：nslookup 域名 Mac 用户：dig + noall + answer 域名 A 记录可能要很久才会生效，等就好了 ​ ","date":"2020-07-15","objectID":"/20200715-%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/:1:3","tags":["域名","部署"],"title":"博客之路02：💰个人博客绑定域名","uri":"/20200715-%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"},{"categories":["个人博客的创建之路"],"content":"无法访问域名 如果全部配置成功，但仍无法访问域名、进入博客或者博客乱码，就只能放弃域名方案 😭。。。 把仓库中的 CNAME（自定义域名） 删掉。settings中 custom domain 也删掉。 ","date":"2020-07-15","objectID":"/20200715-%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/:1:4","tags":["域名","部署"],"title":"博客之路02：💰个人博客绑定域名","uri":"/20200715-%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"},{"categories":["语法"],"content":"这里是文章描述，本文用于测试一些 Markdown 语法和样式展现","date":"2020-07-14","objectID":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/","tags":["测试","markdown","语法"],"title":"测试 Markdown 语法","uri":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/"},{"categories":["语法"],"content":"本文用于测试一些 Markdown 语法和样式展现 ​ ","date":"2020-07-14","objectID":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/:0:0","tags":["测试","markdown","语法"],"title":"测试 Markdown 语法","uri":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/"},{"categories":["语法"],"content":"文章摘要 \u003c!--more--\u003e [more注释]之前的内容，会作为文章摘要显示在主页。尽量不要包含代码块、图片、表格等模块。如果 [more注释] 之前的内容为空，则将自动添加 description 内容为文章摘要，显示在主页中。 ​ ","date":"2020-07-14","objectID":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/:1:0","tags":["测试","markdown","语法"],"title":"测试 Markdown 语法","uri":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/"},{"categories":["语法"],"content":"文章置顶 weight: 1 // Front-matter ​ ","date":"2020-07-14","objectID":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/:2:0","tags":["测试","markdown","语法"],"title":"测试 Markdown 语法","uri":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/"},{"categories":["语法"],"content":"常用语法 主题文档链接 ​ 反引号 ==高亮== ​ 加粗 ​ 斜体 下划线 这是一个链接哦。 ​ ","date":"2020-07-14","objectID":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/:3:0","tags":["测试","markdown","语法"],"title":"测试 Markdown 语法","uri":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/"},{"categories":["语法"],"content":"markdown 支持 emoji 在 config.toml 中开启/关闭 emoji 支持 表情包大全：https://hugoloveit.com/zh-cn/emoji-support/ 冒号joy冒号 冒号jack_o_lantern冒号 冒号heart冒号 😂 🎃 ❤️ ​ ","date":"2020-07-14","objectID":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/:4:0","tags":["测试","markdown","语法"],"title":"测试 Markdown 语法","uri":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/"},{"categories":["语法"],"content":"有序列表 有序列表1 无序列表 无序列表 有序列表2 有序列表3 ​ ","date":"2020-07-14","objectID":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/:5:0","tags":["测试","markdown","语法"],"title":"测试 Markdown 语法","uri":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/"},{"categories":["语法"],"content":"无序列表 无序列表 无序列表 无序列表 无序列表 在这里添加一个脚注 1 无序列表 无序列表 ​ ","date":"2020-07-14","objectID":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/:6:0","tags":["测试","markdown","语法"],"title":"测试 Markdown 语法","uri":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/"},{"categories":["语法"],"content":"复选框 - [x] Write the press release - [x] Update the website - [ ] Contact the media Write the press release Update the website Contact the media ​ ","date":"2020-07-14","objectID":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/:7:0","tags":["测试","markdown","语法"],"title":"测试 Markdown 语法","uri":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/"},{"categories":["语法"],"content":"代码块 console.log(\"test\") \u003cdiv class=\"box\" style=\"color:red;\"\u003e\u003c/div\u003e body{ font-size: 20px; } ​ ","date":"2020-07-14","objectID":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/:8:0","tags":["测试","markdown","语法"],"title":"测试 Markdown 语法","uri":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/"},{"categories":["语法"],"content":"内置 Shortcodes 语法支持 ","date":"2020-07-14","objectID":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/:9:0","tags":["测试","markdown","语法"],"title":"测试 Markdown 语法","uri":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/"},{"categories":["语法"],"content":"横幅 This is a tip 一个 danger 横幅 This is a tip 一个 note 横幅 This is a tip 一个 tip 横幅 ​ ","date":"2020-07-14","objectID":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/:9:1","tags":["测试","markdown","语法"],"title":"测试 Markdown 语法","uri":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/"},{"categories":["语法"],"content":"图片 Iceland (figure) ​ 点击图片放大，点击空白缩小↘ Iceland (image)\" Iceland (image) ​ ","date":"2020-07-14","objectID":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/:9:2","tags":["测试","markdown","语法"],"title":"测试 Markdown 语法","uri":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/"},{"categories":["语法"],"content":"二级标题 ","date":"2020-07-14","objectID":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/:10:0","tags":["测试","markdown","语法"],"title":"测试 Markdown 语法","uri":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/"},{"categories":["语法"],"content":"三级标题 四级标题 五级标题 六级标题 ​ 这是一段脚注 https://xxx 这是一段脚注 ↩︎ ","date":"2020-07-14","objectID":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/:10:1","tags":["测试","markdown","语法"],"title":"测试 Markdown 语法","uri":"/20200714-markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/"},{"categories":["个人博客的创建之路"],"content":"如何用 hugo 搭建个人博客","date":"2020-07-13","objectID":"/20200713-%E6%90%AD%E5%BB%BAhugo%E5%8D%9A%E5%AE%A2/","tags":["搭建","Hugo","博客"],"title":"博客之路01：如何用 hugo 搭建个人博客","uri":"/20200713-%E6%90%AD%E5%BB%BAhugo%E5%8D%9A%E5%AE%A2/"},{"categories":["个人博客的创建之路"],"content":"第一篇正式博文，我想给大家分享下我的博客的创建过程吧！🥇 ​ Hugo 是由 Go 语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。 ​ ","date":"2020-07-13","objectID":"/20200713-%E6%90%AD%E5%BB%BAhugo%E5%8D%9A%E5%AE%A2/:0:0","tags":["搭建","Hugo","博客"],"title":"博客之路01：如何用 hugo 搭建个人博客","uri":"/20200713-%E6%90%AD%E5%BB%BAhugo%E5%8D%9A%E5%AE%A2/"},{"categories":["个人博客的创建之路"],"content":"安装 Hugo 官方教程 英文 Mac 安装方式 brew install hugo hugo version Windows 安装方式 去 Hugo releases 页面 下载 hugo_xxx_Windows- 64bit.zip 解压，把 hugo.exe 放到 D:\\Software\\hugo\\hugo.exe 把 D:\\Software\\hugo\\ 加到 PATH 重启终端，运行 hugo version 查看版本 ​ ","date":"2020-07-13","objectID":"/20200713-%E6%90%AD%E5%BB%BAhugo%E5%8D%9A%E5%AE%A2/:1:0","tags":["搭建","Hugo","博客"],"title":"博客之路01：如何用 hugo 搭建个人博客","uri":"/20200713-%E6%90%AD%E5%BB%BAhugo%E5%8D%9A%E5%AE%A2/"},{"categories":["个人博客的创建之路"],"content":"快速搭建博客 官方文档教程，必看！ ","date":"2020-07-13","objectID":"/20200713-%E6%90%AD%E5%BB%BAhugo%E5%8D%9A%E5%AE%A2/:2:0","tags":["搭建","Hugo","博客"],"title":"博客之路01：如何用 hugo 搭建个人博客","uri":"/20200713-%E6%90%AD%E5%BB%BAhugo%E5%8D%9A%E5%AE%A2/"},{"categories":["个人博客的创建之路"],"content":"准备、提交 新建 blog 目录，运行 hugo new site xxx.github.io-generator ， xxx 为 github 用户名 。会在当前目录中创建 xxx.github.io-generator 文件夹（博客生成器） 进入博客生成器目录，git init 选择并下载主题 ，放到 themes 目录下 git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 遇到报错 ↘ fatal: unable to access 'https://github.com/dillonzq/LoveIt.git/': error setting certificate verify locations: CAfile: D:/Software/Git/mingw64/ssl/certs/ca-bundle.crt CApath: none 解决办法：使用 git clone 出现 fatal: unable to access 'https://github.com/...' ，执行代码 ​↓ git config --system http.sslverify false // 把证书校验禁用 然后，将主题添加到站点配置中：echo 'theme = \"LoveIt\"' \u003e\u003e config.toml // 主题目录的名称 创建新文章：hugo new posts/first_post.md D:\\blog\\xxx.github.io-generator\\content\\posts\\first_post.md created 编辑文章后，修改 draft: false。draft : true 表示处于草稿状态，此时Hugo不会真正发布它 初次创建博客或修改主题，需将主题文档中给出的配置，粘贴到 config.toml 文件中。 baseURL 配置成 http://[用户名].github.io/ hugo server -D 建立本地访问 https://localhost:1313 预览博客 hugo 创建一个新的目录 public/，这就是需要提交到 github，最终生成线上博客的目录 根目录下，新建 .gitignore 文件，添加 /public/。使得 /public 可以自成一个仓库 进入public cd public，git init git add . git commit ​ ","date":"2020-07-13","objectID":"/20200713-%E6%90%AD%E5%BB%BAhugo%E5%8D%9A%E5%AE%A2/:2:1","tags":["搭建","Hugo","博客"],"title":"博客之路01：如何用 hugo 搭建个人博客","uri":"/20200713-%E6%90%AD%E5%BB%BAhugo%E5%8D%9A%E5%AE%A2/"},{"categories":["个人博客的创建之路"],"content":"第一次部署 登录 github，创建博客专用仓库，仓库名必须为 ： [用户名].github.io 。 进入 public 目录，git remote add origin xxx git push -u origin master 进入 github 博客仓库的 Settings，找到 GitHub Pages ，选择 master ，保存 通过 http://[用户名].github.io 就能访问博客 ​ ","date":"2020-07-13","objectID":"/20200713-%E6%90%AD%E5%BB%BAhugo%E5%8D%9A%E5%AE%A2/:2:2","tags":["搭建","Hugo","博客"],"title":"博客之路01：如何用 hugo 搭建个人博客","uri":"/20200713-%E6%90%AD%E5%BB%BAhugo%E5%8D%9A%E5%AE%A2/"},{"categories":["个人博客的创建之路"],"content":"以后的部署 在 xxx.github.io-creator 目录（注意确保自己不在 public 目录）里运行 hugo new posts/第二篇博客.md 运行 code posts/第二篇博客.md 对文件进行编辑，注意不要把文件原本的内容 front matter 给删了，直接在后面另起一行写新内容。 hugo server -D 建立本地访问 https://localhost:1313 预览博客 运行 hugo -D，得到新的 public 目录 进入 public 目录 cd public，执行一下操作 git add . 注意有一个点 git commit -m update git push -f 其中 -f 是强制上传的意思 等待几分钟后，你的博客就会出现第二篇文章了！ 通过 http://[用户名].github.io 访问博客 ​ ","date":"2020-07-13","objectID":"/20200713-%E6%90%AD%E5%BB%BAhugo%E5%8D%9A%E5%AE%A2/:2:3","tags":["搭建","Hugo","博客"],"title":"博客之路01：如何用 hugo 搭建个人博客","uri":"/20200713-%E6%90%AD%E5%BB%BAhugo%E5%8D%9A%E5%AE%A2/"},{"categories":["个人博客的创建之路"],"content":"备份博客生成器 generator 程序员永远都会留备份 新建仓库 xxx.github.io-generator 将本地 xxx.github.io-generator 目录，git init，git add . ，git commit -m backup，git remote add origin xxx，git push -u origin master 即可 如果在执行 add 时，提示我们需要执行 rm 操作，可能是因为主题目录下已经存在 .git 文件，主题目录本身就是一个本地仓库了，那和 generator 目录会形成一个嵌套子目录的关系，that’s not good . 我们需要把主题目录下的 .git 文件删除 ","date":"2020-07-13","objectID":"/20200713-%E6%90%AD%E5%BB%BAhugo%E5%8D%9A%E5%AE%A2/:3:0","tags":["搭建","Hugo","博客"],"title":"博客之路01：如何用 hugo 搭建个人博客","uri":"/20200713-%E6%90%AD%E5%BB%BAhugo%E5%8D%9A%E5%AE%A2/"}]
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>个人博客的创建之路 - 分类 - Sam&#39;s Garage</title>
        <link>http://samrks.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B9%8B%E8%B7%AF/</link>
        <description>个人博客的创建之路 - 分类 - Sam&#39;s Garage</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ryuukousen@gmail.com (Sam)</managingEditor>
            <webMaster>ryuukousen@gmail.com (Sam)</webMaster><lastBuildDate>Sun, 15 Mar 2020 22:40:49 &#43;0800</lastBuildDate><atom:link href="http://samrks.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B9%8B%E8%B7%AF/" rel="self" type="application/rss+xml" /><item>
    <title>博客之路4：hugo 添加评论系统 Valine</title>
    <link>http://samrks.github.io/blog-comments-valine-leancloud/</link>
    <pubDate>Sun, 15 Mar 2020 22:40:49 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/blog-comments-valine-leancloud/</guid>
    <description><![CDATA[<p>hugo 博客添加评论系统 Valine</p>
<blockquote>
<p>Valine - 一款快速、简洁且高效的无后端评论系统。</p>
<p>Valine 诞生于2017年8月7日，是一款基于Leancloud的快速、简洁且高效的无后端评论系统。
理论上支持但不限于静态博客，目前已有Hexo、Jekyll、Typecho等博客程序在使用Valine。</p>
</blockquote>
<p>所以，理论上它也是支持 <strong>Hugo</strong> 的， 实践证明，确实如此。其特性如下：</p>
<ul>
<li>快速</li>
<li>安全</li>
<li>Emoji 😉</li>
<li>无后端实现</li>
<li>MarkDown 全语法支持</li>
<li>轻量易用(~15kb gzipped)</li>
<li>文章阅读量统计 v1.2.0-beta1+</li>
</ul>
<p>下面就讲一下如何一步步添加 <a href="https://valine.js.org/" target="_blank" rel="noopener noreffer">Valine</a> 支持的。</p>
<p><strong>Tips:</strong></p>
<ul>
<li>整个过程，是以Loveit主题为例的，其它主题操作大同小异。</li>
<li>配置之前应该先阅读<a href="https://valine.js.org/quickstart.html" target="_blank" rel="noopener noreffer">Valine快速开始</a></li>
</ul>
<p>​</p>
<h2 id="leancloud相关配置">Leancloud相关配置</h2>
<p>评论系统依赖于leancloud，所以需要先在leancloud中进行相关的准备工作。</p>
<ul>
<li>
<p>登录 或 注册 <a href="https://leancloud.app/" target="_blank" rel="noopener noreffer">LeanCloud（国际版）</a>
必须验证邮箱和手机号</p>
</li>
<li>
<p>成功后，进入后台点击左上角的创建应用：</p>
<p></p>
</li>
<li>
<p>创建好应用，进入应用，点击【组件】</p>
<p></p>
</li>
<li>
<p>左边栏找到【设置】，然后点击【应用Key】，此时记录出现的 App ID 和 App Key，后面配置文件中会用到：</p>
<p></p>
</li>
<li>
<p>因为评论和文章阅读数统计依赖于存储，所以还需要建立两个新的存储 Class
左边栏找到并点击【存储】，点击【创建Class】
创建两个存储Class，分别命名为: <code>Counter</code> 和 <code>Comment</code>；</p>
<p><strong>仅修改 ACL 的 write 权限</strong></p>
<p></p>
</li>
<li>
<p>还需要为应用添加安全域名，左边栏点击【设置】，找到【安全中心】，点击后会看到【安全域名】设置框，输入博客使用的域名，点击保存即可：</p>
<p></p>
</li>
</ul>
<p>​</p>
<h2 id="configtoml-添加参数">config.toml 添加参数</h2>
<p>添加 <strong>Valine</strong> 参数项：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-toml" data-lang="toml"><span class="p">[</span><span class="nx">params</span><span class="p">.</span><span class="nx">page</span><span class="p">.</span><span class="nx">comment</span><span class="p">.</span><span class="nx">valine</span><span class="p">]</span>
  <span class="nx">enable</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">appId</span> <span class="p">=</span> <span class="s2">&#34;xxxxxxxxxxxxxxxxxxxxxx&#34;</span>
  <span class="nx">appKey</span> <span class="p">=</span> <span class="s2">&#34;xxxxxxxxxxx&#34;</span>
  <span class="nx">placeholder</span> <span class="p">=</span> <span class="s2">&#34;说点什么吧...（提醒：填写邮箱，若有人回复您，您将及时收到提醒邮件！）&#34;</span>
  <span class="nx">avatar</span> <span class="p">=</span> <span class="s2">&#34;mp&#34;</span>
  <span class="nx">meta</span><span class="p">=</span> <span class="s2">&#34;&#34;</span>
  <span class="nx">pageSize</span> <span class="p">=</span> <span class="mi">10</span>
  <span class="nx">lang</span> <span class="p">=</span> <span class="s2">&#34;&#34;</span>
  <span class="nx">visitor</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="nx">recordIP</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">highlight</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">enableQQ</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="nx">serverURLs</span> <span class="p">=</span> <span class="s2">&#34;&#34;</span>
  <span class="c"># LoveIt 新增 | 0.2.6 emoji 数据文件名称, 默认是 &#34;google.yml&#34;</span>
  <span class="c"># (&#34;apple.yml&#34;, &#34;google.yml&#34;, &#34;facebook.yml&#34;, &#34;twitter.yml&#34;)</span>
  <span class="c"># 位于 &#34;themes/LoveIt/assets/data/emoji/&#34; 目录</span>
  <span class="c"># 可以在你的项目下相同路径存放你自己的数据文件:</span>
  <span class="c"># &#34;assets/data/emoji/&#34;</span>
  <span class="nx">emoji</span> <span class="p">=</span> <span class="s2">&#34;apple.yml&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>上面几项内容的含义，这里简单一说，具体还是要看 <a href="https://valine.js.org/configuration.html" target="_blank" rel="noopener noreffer">Valine官网中配置相关的内容</a>：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>enable</td>
<td>这是用于主题中配置的，不是官方Valine的参数，<strong>true</strong>时控制开启此评论系统</td>
</tr>
<tr>
<td>appId</td>
<td>这是在 <a href="https://leancloud.cn/" target="_blank" rel="noopener noreffer">leancloud</a> 后台应用中获取的，也就是上面提到的 <strong>App ID</strong></td>
</tr>
<tr>
<td>appKey</td>
<td>这是在 <a href="https://leancloud.cn/" target="_blank" rel="noopener noreffer">leancloud</a> 后台应用中获取的，也就是上面提到的 <strong>App Key</strong></td>
</tr>
<tr>
<td>notify</td>
<td>用于控制是否开启邮件通知功能，具体参考<a href="https://github.com/xCss/Valine/wiki/Valine-%e8%af%84%e8%ae%ba%e7%b3%bb%e7%bb%9f%e4%b8%ad%e7%9a%84%e9%82%ae%e4%bb%b6%e6%8f%90%e9%86%92%e8%ae%be%e7%bd%ae" target="_blank" rel="noopener noreffer">邮件提醒配置</a></td>
</tr>
<tr>
<td>verify</td>
<td>用于控制是否开启评论验证码功能</td>
</tr>
<tr>
<td>avatar</td>
<td>用于配置评论项中用户头像样式，有多种选择：mm, identicon, monsterid, wavatar, retro, hide。详细参考：<a href="https://valine.js.org/avatar.html" target="_blank" rel="noopener noreffer">头像配置</a></td>
</tr>
<tr>
<td>placehoder</td>
<td>评论框的提示符</td>
</tr>
<tr>
<td>visitor</td>
<td>控制是否开启文章阅读数的统计功能, 详情阅读<a href="https://valine.js.org/visitor.html" target="_blank" rel="noopener noreffer">文章阅读数统计</a></td>
</tr>
</tbody>
</table>
<h2 id="完善评论通知--">完善评论通知  ⭐️⭐️</h2>
<p><strong>Valine</strong> 评论邮件提醒功能不太健全，通知邮件中没有文章直达链接，<strong>Valine</strong> 官网中提供了评论系统第三方功能扩展<a href="https://github.com/zhaojun1998/Valine-Admin" target="_blank" rel="noopener noreffer">Valine</a>链接，按照链接中的说明，非常详细的步骤，一步步很容易实现完备的评论系统后台管理以及邮件提醒功能，部分高级配置<a href="https://github.com/zhaojun1998/Valine-Admin/blob/master/%e9%ab%98%e7%ba%a7%e9%85%8d%e7%bd%ae.md#%e8%87%aa%e5%ae%9a%e4%b9%89%e9%82%ae%e4%bb%b6%e6%9c%8d%e5%8a%a1%e5%99%a8" target="_blank" rel="noopener noreffer">点我</a>了解，这里简单列举步骤如下：</p>
<ol>
<li>
<p>进入leancloud，【<strong>云引擎</strong>】【<strong>部署项目</strong>】【<strong>git</strong>】</p>
<p>填写仓库地址： <a href="https://github.com/zhaojun1998/Valine-Admin">https://github.com/zhaojun1998/Valine-Admin</a></p>
<p>填写分支： master</p>
<p></p>
</li>
<li>
<p>此外，你需要设置云引擎的环境变量以提供必要的信息，点击云引擎的设置页，设置如下信息：</p>
<p><strong>必选参数</strong></p>
<ul>
<li>
<p><code>SITE_NAME</code> : 网站名称。</p>
</li>
<li>
<p><code>SITE_URL</code> : 网站地址, <strong>最后不要加 <code>/</code> 。</strong></p>
</li>
<li>
<p><code>SMTP_USER</code> : SMTP 服务用户名，一般为邮箱地址。</p>
</li>
<li>
<p><code>SMTP_PASS</code> : SMTP 密码，一般为授权码，而不是邮箱的登陆密码，请自行查询对应邮件服务商的获取方式</p>
</li>
<li>
<p><code>SMTP_SERVICE</code> : 邮件服务提供商，支持 <code>QQ</code>、<code>163</code>、<code>126</code>、<code>Gmail</code>、<code>&quot;Yahoo&quot;</code>、<code>......</code> ，全部支持请参考 : <a href="https://nodemailer.com/smtp/well-known/#supported-services" target="_blank" rel="noopener noreffer">Nodemailer Supported services</a>。 &mdash; <em>如这里没有你使用的邮件提供商，请查看<a href="https://github.com/zhaojun1998/Valine-Admin/blob/master/%e9%ab%98%e7%ba%a7%e9%85%8d%e7%bd%ae.md#%e8%87%aa%e5%ae%9a%e4%b9%89%e9%82%ae%e4%bb%b6%e6%9c%8d%e5%8a%a1%e5%99%a8" target="_blank" rel="noopener noreffer">自定义邮件服务器</a></em></p>
</li>
<li>
<p><code>SENDER_NAME</code> : 寄件人名称。</p>
<p></p>
</li>
</ul>
</li>
<li>
<p>设置完环境变量，必须<strong>重新部署</strong>，邮件提醒功能才会生效</p>
</li>
<li>
<p><strong>云引擎</strong> —— <strong>设置</strong> —— <strong>云引擎域名</strong>（如：jackma），保存</p>
<ol>
<li>然后进入 <strong>存储</strong> —— <strong>_User</strong> 添加一个用户，只需 User，password，email 三个信息即可。（为了安全考虑，此 <code>email</code> 必须为配置中的 <code>SMTP_USER</code> 或 <code>TO_EMAIL</code>， 否则不允许登录）</li>
<li>此时可以使用定义的主机域名登录<strong>后台管理系统</strong>了，地址为：<a href="" rel="">[云引擎域名jackma].avosapps.us</a>，用户名为刚设置的邮箱。</li>
</ol>
</li>
<li>
<p><strong>LeanCloud 休眠策略</strong></p>
<ol>
<li>
<p>首先需要添加环境变量，<code>ADMIN_URL : 云引擎域名</code>，如：https://jackma.avosapps.us（重启生效）</p>
</li>
<li>
<p>然后点击【云引擎】【定时任务】【创建定时任务】，按照图片上填写：<code>0 0/20 7-23 * * ?</code></p>
<p></p>
</li>
<li>
<p>添加后，要记得<strong>点击启用</strong></p>
<p>启用成功后，每 20 分钟在【云引擎】的 - 应用【日志】中可以看到提示</p>
<p></p>
</li>
</ol>
</li>
<li>
<p>登录上面主机域名进入后台瞅一瞅：</p>
<p></p>
</li>
<li>
<p>我自己沙发了一条评论</p>
<ol>
<li>
<p>日志提示：</p>
<p></p>
</li>
<li>
<p>进入后台后可以看到：</p>
<p></p>
</li>
<li>
<p>同时，我也收到了通知邮件：</p>
<p></p>
</li>
</ol>
</li>
</ol>
<p>至此完成了 <strong>Valine</strong> 评论系统的添加和完善，喝杯咖啡☕️庆祝一下！</p>
<p>​</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://valine.js.org/" target="_blank" rel="noopener noreffer">Valine</a></li>
<li><a href="https://github.com/zhaojun1998/Valine-Admin" target="_blank" rel="noopener noreffer">Valine-Admin</a></li>
<li><a href="https://github.com/zhaojun1998/Valine-Admin/blob/master/%e9%ab%98%e7%ba%a7%e9%85%8d%e7%bd%ae.md#leancloud-%e4%bc%91%e7%9c%a0%e7%ad%96%e7%95%a5" target="_blank" rel="noopener noreffer">leancloud-休眠策略</a></li>
<li><a href="https://www.smslit.top/2018/07/08/hugo-valine/" target="_blank" rel="noopener noreffer">hugo博客添加评论系统Valine</a></li>
<li><a href="https://co5.me/2019/190818-valine.html" target="_blank" rel="noopener noreffer">将 Valine 切换至 leancloud 国际版</a></li>
</ul>]]></description>
</item><item>
    <title>Hugo 集成 Algolia 搜索</title>
    <link>http://samrks.github.io/blog-search-algolia/</link>
    <pubDate>Fri, 13 Mar 2020 21:36:27 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/blog-search-algolia/</guid>
    <description><![CDATA[<p>hugo 搜索功能 Algolia</p>
<h2 id="前言">前言</h2>
<p><a href="https://gohugo.io/" target="_blank" rel="noopener noreffer">Hugo</a>是由 Steve Francis 大神(<a href="http://spf13.com/">http://spf13.com/</a>)基于<code>Go</code>语言开发的静态网站构建工具。没错你现在看到的本博客就是基于<code>Hugo</code>的，使用 Hugo 创建一个网站是非常简单的，基本上没有什么门槛，官方还提供了大量的主题供你选择，你只需要专心写的文章就行。不过有个问题是搜索，我们知道搜索属于动态行为了，如何给静态网站增加搜索功能呢？当然我们可以使用<code>Google</code>的站内搜索功能，Hugo 官方也提供了一些开源的和商业的解决方案，今天我们要介绍的就是一个非常优秀的商业解决方案：<a href="https://www.algolia.com/" target="_blank" rel="noopener noreffer">Algolia</a>。</p>
<h2 id="注册">注册</h2>
<ol>
<li>
<p>前往官方网站https://www.algolia.com/ 使用 GitHub 或 Google 帐号登录。</p>
</li>
<li>
<p>登录完成后根据提示信息填写一些基本的信息即可。</p>
</li>
<li>
<p>注册完成后前往 <a href="https://www.algolia.com/dashboard" target="_blank" rel="noopener noreffer">Dashboard</a>，我们可以发现 Algolia 会默认给我们生成一个 app。</p>
<ul>
<li>默认的 app 可以在 settings → Applications 中重命名</li>
</ul>
</li>
<li>
<p>选择 Indices，添加一个新的索引，我这里命名为<code>blog</code>，创建成功后，我们可以看到提示中还没有任何记录。</p>
<p></p>
</li>
<li>
<p>Algolia 为我们提供了三种方式来增加记录：手动添加、上传 json 文件、API。</p>
</li>
</ol>
<h2 id="修改-configtoml-配置">修改 config.toml 配置</h2>
<p>以下内容，基于 Loveit 主题测试生效</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-toml" data-lang="toml"><span class="p">[</span><span class="nx">params</span><span class="p">.</span><span class="nx">algolia</span><span class="p">]</span>
  <span class="nx">appId</span> <span class="p">=</span> <span class="s2">&#34;你的Application ID&#34;</span>
  <span class="nx">indexName</span> <span class="p">=</span> <span class="s2">&#34;你的索引名字&#34;</span>
  <span class="nx">searchOnlyKey</span> <span class="p">=</span> <span class="s2">&#34;你的Search-Only API Key&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>执行 hugo，会自动生成 <code>public/index.json</code> 用于索引</p>
<h2 id="上传索引文件">上传索引文件</h2>
<p>生成索引文件之后，我们需要上传到 Algolia 的服务器。</p>
<h3 id="手动上传">手动上传</h3>
<p>这一步是可选的，不过还是建议跟着做一下。</p>
<p>点击侧栏 <code>Indices</code> ，点击 <code>Upload record(s)</code> 按钮上传上一步生成的 <code>index.json</code> 文件。
</p>
<p>上传成功之后，我们就可以马上尝试搜索了：</p>
<p></p>
<p>可以看到搜索的关键词有相应的匹配结果，说明我们生成的索引文件是正确的。</p>
<h3 id="自动上传">自动上传</h3>
<p>每次写完博文都手动上传索引文件无疑是痛苦的、无意义的重复劳动。</p>
<p>因此我们需要把上传索引文件的操作自动化，在自动部署的时候顺便完成即可。</p>
<p>这里我们采用npm包 <a href="https://www.npmjs.com/package/atomic-algolia" target="_blank" rel="noopener noreffer">atomic-algolia</a> 来完成上传操作。</p>
<ul>
<li>
<p>安装 atomic-algolia 包</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">atomic</span><span class="o">-</span><span class="nx">algolia</span> <span class="o">--</span><span class="nx">save</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>修改根目录下的 <code>package.json</code> 文件（没有就新建），在 <code>scripts</code> 下添加 <code>&quot;algolia&quot;: &quot;atomic-algolia&quot;</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;test&#34;</span><span class="p">:</span> <span class="s2">&#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;</span><span class="p">,</span>
    <span class="nt">&#34;algolia&#34;</span><span class="p">:</span> <span class="s2">&#34;atomic-algolia&#34;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>注意 <code>&quot;test&quot;</code> 那一行末尾有个英文逗号，不要漏了。</p>
</li>
<li>
<p>根目录下新建 <code>.env</code> 文件，内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">ALGOLIA_APP_ID</span><span class="o">=</span><span class="nx">你的Application</span> <span class="nx">ID</span>
<span class="nx">ALGOLIA_INDEX_NAME</span><span class="o">=</span><span class="nx">你的索引名字</span>
<span class="nx">ALGOLIA_INDEX_FILE</span><span class="o">=</span><span class="kr">public</span><span class="o">/</span><span class="nx">index</span><span class="p">.</span><span class="nx">json</span>
<span class="nx">ALGOLIA_ADMIN_KEY</span><span class="o">=</span><span class="nx">你的Admin</span> <span class="nx">API</span> <span class="nx">Key</span>
</code></pre></td></tr></table>
</div>
</div><p>注意替换你自己 Algolia 索引的信息。
另外特别注意 <code>ALGOLIA_ADMIN_KEY</code> 可以用来管理你的索引，所以尽量不要提交到公共仓库。可以添加到 <code>.gitignore</code> 中</p>
</li>
<li>
<p>上传索引的命令
你可以本地执行 <code>npm run algolia</code> 查看运行效果：
<a href="https://i.loli.net/2020/02/23/C6u38blAWG7Xnke.png" target="_blank" rel="noopener noreffer"></a>
可以看到我们成功添加了记录。</p>
</li>
<li>
<p>后续，可以把下面的命令加到你的部署脚本中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">npm</span> <span class="nx">run</span> <span class="nx">algolia</span> <span class="c1">// 在hugo命令后面执行
</span></code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ul>
<h2 id="参考资料">参考资料</h2>
<ol>
<li><a href="https://edward852.github.io/post/hugo%E6%B7%BB%E5%8A%A0algolia%E6%90%9C%E7%B4%A2%E6%94%AF%E6%8C%81/#%E4%B8%8A%E4%BC%A0%E7%B4%A2%E5%BC%95%E6%96%87%E4%BB%B6" target="_blank" rel="noopener noreffer">Hugo添加Algolia搜索支持</a></li>
<li><a href="https://github.com/chrisdmacrae/atomic-algolia" target="_blank" rel="noopener noreffer">atomic-algolia 插件</a></li>
<li><a href="https://www.qikqiak.com/post/hugo-integrated-algolia-search/" target="_blank" rel="noopener noreffer">Hugo 集成 Algolia 搜索</a></li>
</ol>]]></description>
</item><item>
    <title>博客之路2：💰个人博客绑定域名</title>
    <link>http://samrks.github.io/blog-buy-setup-a-domain/</link>
    <pubDate>Thu, 12 Mar 2020 15:52:18 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/blog-buy-setup-a-domain/</guid>
    <description><![CDATA[<p>买个域名玩玩！</p>
<h2 id="个人博客绑定域名">个人博客绑定域名</h2>
<h3 id="购买域名">购买域名</h3>
<blockquote>
<p>namesilo （方便、无需填写个人真实信息）和阿里云（中文、可能需要实名填写详细信息）</p>
</blockquote>
<h4 id="namesilohttpswwwnamesilocom"><a href="https://www.namesilo.com/" target="_blank" rel="noopener noreffer">namesilo</a></h4>
<ul>
<li>
<p>进入<a href="https://www.namesilo.com" target="_blank" rel="noopener noreffer">官网</a>，搜索并选中需求的域名（domain），进行注册</p>
<p></p>
<p></p>
</li>
<li>
<p>支付，使用支付宝，需设置<a href="https://custweb.alipay.com/account/index.htm" target="_blank" rel="noopener noreffer">支付宝邮箱</a></p>
</li>
<li>
<p>购买成功后，等待跳转。邮箱也会收到购买成功的邮件。</p>
<ul>
<li>每年需要续费，不续费，会有一个保护期，保护期过了，域名就重新开放购买</li>
</ul>
</li>
<li>
<p>点击 <strong><code>Manage my Domains </code></strong>【管理我的域名】。</p>
<ul>
<li>初次进入可能需要填写基本信息。点击 create my new account。只要保证当前账户邮箱是真实的即可</li>
</ul>
</li>
<li>
<p>在域名管理页面，点击蓝色圆形按钮，可以进入 【Manage DNS】 管理DNS页面</p>
</li>
</ul>
<p>​</p>
<h4 id="阿里云httpswwwaliyuncom"><a href="https://www.aliyun.com" target="_blank" rel="noopener noreffer">阿里云</a></h4>
<ol>
<li>进入<a href="https://www.aliyun.com/" target="_blank" rel="noopener noreffer">官网</a>，注册一个账户，国内账户通常需要提供真实的手机号/姓名/身份证等。</li>
<li>在【域名与网站】选项卡中，选择【域名注册】；或者直接在<u>搜索框</u>进入【域名 控制台】选择【域名注册】</li>
<li>搜索域名，加入清单，结算
<ul>
<li>个人 or 企业</li>
<li>填写 [个人] 信息</li>
<li>支付</li>
</ul>
</li>
</ol>
<p>​</p>
<h3 id="配置-github-pages">配置 GitHub Pages</h3>
<ul>
<li>
<p>添加域名</p>
<ul>
<li>找到 github pages 中的 custom domain ，添加域名，SAVE 保存</li>
<li>仓库会多出一个 CNAME 文件，记录配置的域名</li>
</ul>
</li>
<li>
<p>注意：不勾选 Enforce HTTPS。现在不用开启 HTTPS（不开启比较方便测试）</p>
<ul>
<li>勾选后，所有与当前仓库相关的页面，可能都需要变成 https，可能还需要申请免费证书之类的，hin麻烦</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="配置-dns">配置 DNS</h3>
<blockquote>
<p>最终效果是，让 4个A记录出现在域名的DNS管理页面中，就搞定了</p>
</blockquote>
<h4 id="配置四条-a-记录">配置四条 A 记录</h4>
<ol>
<li>
<p>找到 github pages 中的 custom domain ，点击 <strong><code>Learn more</code></strong>  ，找到【<a href="https://docs.github.com/cn/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain" target="_blank" rel="noopener noreffer">配置 apex 域</a>】</p>
</li>
<li>
<p>找到 4 个IP，配置到域名中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mf">185.199.108.153</span>
<span class="mf">185.199.109.153</span>
<span class="mf">185.199.110.153</span>
<span class="mf">185.199.111.153</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h5 id="namesilo-配置-a-记录">namesilo 配置 A 记录</h5>
<ul>
<li>
<p>（点击蓝色圆形按钮）进入某个域名的管理页面，点击选择 A</p>
<ul>
<li>
<p></p>
</li>
<li>
<p>会生成一个配置，然后依次将4个IP 多填入提交，生成4条配置。只保留这4条配置，将其他默认存在的配置删除即可，默认提供的配置都是没用的</p>
<p></p>
</li>
</ul>
</li>
</ul>
<h5 id="阿里云-配置-a-记录">阿里云 配置 A 记录</h5>
<blockquote>
<p>基本同 namesilo</p>
<ul>
<li>在域名DNS解析中，添加 4 条 A 记录 IP</li>
<li>下拉框选择 @</li>
</ul>
</blockquote>
<p>​</p>
<h4 id="测试dns是否配置成功">测试DNS是否配置成功</h4>
<blockquote>
<p>打开命令行，运行<code>nslookup liubingxuan.xyz</code></p>
<ul>
<li>命令行能打印出4条A记录的IP，就说明配置的DNS生效了</li>
<li>刚配置完可能没法立即生效，需要等待（可能半小时、一天或更久，只能等，听天由命😢 ）</li>
</ul>
</blockquote>
<ul>
<li>Windows 用户：nslookup 域名</li>
<li>Mac 用户：dig + noall + answer 域名</li>
<li>A 记录可能要很久才会生效，等就好了</li>
</ul>
<p>​</p>
<h3 id="无法访问域名">无法访问域名</h3>
<blockquote>
<p>如果全部配置成功，但仍无法访问域名、进入博客或者博客乱码，就只能放弃域名方案 😭。。。</p>
<ul>
<li>把仓库中的 CNAME（自定义域名） 删掉。settings中 custom domain 也删掉。</li>
</ul>
</blockquote>]]></description>
</item><item>
    <title>使用Hugo &#43; GitHub Pages 搭建个人博客</title>
    <link>http://samrks.github.io/blog-start-a-hugo/</link>
    <pubDate>Sat, 07 Mar 2020 00:05:01 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/blog-start-a-hugo/</guid>
    <description><![CDATA[<p>第一篇正式博文，我想给大家分享下我的博客的创建过程吧！🥇</p>
<p>​</p>
<blockquote>
<p>Hugo 是由 Go 语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。</p>
</blockquote>
<p>​</p>
<h2 id="安装-hugo">安装 Hugo</h2>
<ul>
<li>
<p><a href="https://gohugo.io/getting-started/installing" target="_blank" rel="noopener noreffer">官方教程</a>  英文</p>
</li>
<li>
<p>Mac 安装方式</p>
<ul>
<li>
<p>brew install hugo</p>
</li>
<li>
<p>hugo version</p>
</li>
</ul>
</li>
<li>
<p>Windows 安装方式</p>
<ul>
<li>去 <a href="https://github.com/gohugoio/hugo/releases" target="_blank" rel="noopener noreffer">Hugo releases 页面</a> 下载 hugo_xxx_Windows- 64bit.zip</li>
<li>解压，把 hugo.exe 放到 D:\Software\hugo\hugo.exe</li>
<li>把 D:\Software\hugo\ 加到 PATH</li>
<li>重启终端，运行 <strong><code>hugo version</code></strong> 查看版本</li>
</ul>
</li>
</ul>
<p>​</p>
<h2 id="快速搭建博客">快速搭建博客</h2>
<blockquote>
<p><a href="https://gohugo.io/getting-started/quick-start/" target="_blank" rel="noopener noreffer">官方文档教程</a>，必看！</p>
</blockquote>
<h3 id="准备提交">准备、提交</h3>
<ol>
<li>
<p>新建 blog 目录，运行 <strong><code>hugo new site xxx.github.io-generator </code></strong>  ， xxx 为 github 用户名 。会在当前目录中创建 xxx.github.io-generator 文件夹（博客生成器）</p>
</li>
<li>
<p>进入博客生成器目录，<strong><code>git init</code></strong></p>
</li>
<li>
<p>选择并下载<a href="https://themes.gohugo.io/" target="_blank" rel="noopener noreffer">主题</a> ，放到 themes 目录下 <strong><code>git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt</code></strong></p>
<ul>
<li>
<p>遇到报错 ↘</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">fatal</span><span class="o">:</span> <span class="nx">unable</span> <span class="nx">to</span> <span class="nx">access</span> <span class="s1">&#39;https://github.com/dillonzq/LoveIt.git/&#39;</span><span class="o">:</span> <span class="nx">error</span> <span class="nx">setting</span> <span class="nx">certificate</span> <span class="nx">verify</span> <span class="nx">locations</span><span class="o">:</span>
  <span class="nx">CAfile</span><span class="o">:</span> <span class="nx">D</span><span class="o">:</span><span class="err">/Software/Git/mingw64/ssl/certs/ca-bundle.crt</span>
  <span class="nx">CApath</span><span class="o">:</span> <span class="nx">none</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>解决办法：使用 git clone 出现 <code>fatal: unable to access 'https://github.com/...'</code> ，执行代码 ​↓</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">git</span> <span class="nx">config</span> <span class="o">--</span><span class="nx">system</span> <span class="nx">http</span><span class="p">.</span><span class="nx">sslverify</span> <span class="kc">false</span>   <span class="c1">// 把证书校验禁用 
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>然后，将主题添加到站点配置中：<strong><code>echo 'theme = &quot;LoveIt&quot;' &gt;&gt; config.toml</code></strong>   // 主题目录的名称</p>
</li>
<li>
<p>创建新文章：<strong><code>hugo new  posts/first_post.md </code></strong></p>
<p><code>D:\blog\xxx.github.io-generator\content\posts\first_post.md</code> created</p>
</li>
<li>
<p>编辑文章后，修改 <strong><code>draft: false</code></strong>。draft : true 表示处于草稿状态，此时Hugo不会真正发布它</p>
</li>
<li>
<p>初次创建博客或修改主题，需将主题文档中给出的配置，粘贴到 <strong><code>config.toml</code></strong> 文件中。</p>
<p>baseURL 配置成 <strong><code>http://[用户名].github.io/</code></strong></p>
</li>
<li>
<p><strong><code>hugo server -D</code></strong>  建立本地访问 https://localhost:1313 预览博客</p>
</li>
<li>
<p><strong><code>hugo</code></strong>   创建一个新的目录  public/，这就是需要提交到 github，最终生成线上博客的目录</p>
</li>
<li>
<p>根目录下，新建 <strong><code>.gitignore</code></strong> 文件，添加 <strong><code>/public/</code></strong>。使得 /public 可以自成一个仓库</p>
</li>
<li>
<p>进入public <strong><code>cd public</code></strong>，<strong><code>git init</code></strong>   <strong><code>git add .</code></strong>    <strong><code>git commit</code></strong></p>
</li>
</ol>
<p>​</p>
<h3 id="第一次部署">第一次部署</h3>
<ol>
<li>登录 github，创建博客专用仓库，仓库名必须为 ： <strong><code>[用户名].github.io</code></strong> 。</li>
<li>进入 public 目录，<strong><code>git remote add origin xxx</code></strong></li>
<li><strong><code>git push -u origin master</code></strong></li>
<li>进入 github 博客仓库的 <a href="https://github.com/xxx/xxx.github.io/settings" target="_blank" rel="noopener noreffer">Settings</a>，找到 GitHub Pages ，选择 master ，保存</li>
<li>通过 <a href="http://xxx.github.io" target="_blank" rel="noopener noreffer">http://[用户名].github.io</a> 就能访问博客</li>
</ol>
<p>​</p>
<h3 id="以后的部署">以后的部署</h3>
<ol>
<li>在 xxx.github.io-creator 目录（注意确保自己不在 public 目录）里运行 <code>hugo new posts/第二篇博客.md</code></li>
<li>运行 <code>code posts/第二篇博客.md</code> 对文件进行编辑，注意不要把文件原本的内容 front matter 给删了，直接在后面另起一行写新内容。</li>
<li><strong><code>hugo server -D</code></strong>  建立本地访问 https://localhost:1313 预览博客</li>
<li>运行 <strong><code>hugo -D</code></strong>，得到新的 public 目录</li>
<li>进入 public 目录 <strong><code>cd public</code></strong>，执行一下操作
<ol>
<li><strong><code>git add .</code></strong> 注意有一个点</li>
<li><strong><code>git commit -m update</code></strong></li>
<li><strong><code>git push -f</code></strong> 其中 -f 是强制上传的意思</li>
</ol>
</li>
<li>等待几分钟后，你的博客就会出现第二篇文章了！
<ul>
<li>通过 <a href="http://xxx.github.io" target="_blank" rel="noopener noreffer">http://[用户名].github.io</a> 访问博客</li>
</ul>
</li>
</ol>
<p>​</p>
<h2 id="备份博客生成器-generator">备份博客生成器 generator</h2>
<blockquote>
<p>程序员永远都会留备份</p>
</blockquote>
<ul>
<li>
<p>新建仓库 xxx.github.io-generator</p>
</li>
<li>
<p>将本地 xxx.github.io-generator 目录，<code>git init</code>，<code>git add .</code> ，<code>git commit -m backup</code>，<code>git remote add origin xxx</code>，<code>git push -u origin master</code>  即可</p>
<ul>
<li>如果在执行 add 时，提示我们需要执行 rm 操作，可能是因为主题目录下已经存在 .git 文件，主题目录本身就是一个本地仓库了，那和 generator 目录会形成一个嵌套子目录的关系，that&rsquo;s not good . 我们需要把主题目录下的 .git 文件删除</li>
</ul>
</li>
</ul>]]></description>
</item></channel>
</rss>

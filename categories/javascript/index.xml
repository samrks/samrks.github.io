<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>JavaScript - 分类 - Sam&#39;s Garage</title>
        <link>http://samrks.github.io/categories/javascript/</link>
        <description>JavaScript - 分类 - Sam&#39;s Garage</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ryuukousen@gmail.com (Sam)</managingEditor>
            <webMaster>ryuukousen@gmail.com (Sam)</webMaster><lastBuildDate>Mon, 07 Sep 2020 23:08:13 &#43;0800</lastBuildDate><atom:link href="http://samrks.github.io/categories/javascript/" rel="self" type="application/rss+xml" /><item>
    <title>JS 对象分类——原型 &amp; 类</title>
    <link>http://samrks.github.io/javascript-constructor-prototype-vs-class/</link>
    <pubDate>Mon, 07 Sep 2020 23:08:13 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-constructor-prototype-vs-class/</guid>
    <description><![CDATA[<p>「构造函数」「原型」「new 操作符」「类 class」</p>
<p>​</p>
<h2 id="对象需要分类吗">对象需要分类吗？</h2>
<blockquote>
<p>这是一个值得思考的问题</p>
</blockquote>
<p>我们来做一个小程序</p>
<ul>
<li>输出各种形状的面积和周长</li>
</ul>
<p>​</p>
<h2 id="一个正方形--square">一个正方形  Square</h2>
<p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">square</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="nx">width</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span> 
  <span class="nx">getArea</span><span class="p">(){</span> 
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>   <span class="c1">// 先简单的把this理解成当前对象，在「函数篇」会重新学习this 
</span><span class="c1"></span>  <span class="p">}</span><span class="err">，</span> 
  <span class="nx">getLength</span><span class="p">(){</span> 
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>分析</p>
<ul>
<li>声明一个「正方形」对象</li>
<li>「正方形」拥有三个属性：边长、面积、周长</li>
</ul>
<p>​</p>
<h2 id="一打正方形-">一打正方形 💡</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">square1</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="nx">width</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span> 
  <span class="nx">getArea</span><span class="p">(){</span> 
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
  <span class="p">}</span><span class="err">，</span> 
  <span class="nx">getLength</span><span class="p">(){</span> 
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">square2</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="nx">width</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span> 
  <span class="nx">getArea</span><span class="p">(){</span> 
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
  <span class="p">}</span><span class="err">，</span> 
  <span class="nx">getLength</span><span class="p">(){</span> 
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">square3</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
<span class="p">...</span>
<span class="kd">let</span> <span class="nx">square12</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>写12遍。这样写代码的，要么是新人，要么是傻子。</p>
<ul>
<li>这么写非常累，如果修改，需要逐个修改，非常非常麻烦</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="用-for-循环实现浪费内存">用 for 循环实现（浪费内存）</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">squareList</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">12</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>  <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>       <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>    <span class="nx">width</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nx">getArea</span><span class="p">(){</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
    <span class="p">},</span>
    <span class="nx">getLength</span><span class="p">(){</span> 
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>如果 width 不全是 5，怎么实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">squareList</span> <span class="o">=</span> <span class="p">[]</span>
<span class="kd">let</span> <span class="nx">widthList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>   <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">12</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">width</span><span class="o">:</span> <span class="nx">widthList</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>    <span class="nx">getArea</span><span class="p">(){</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
    <span class="p">},</span>
    <span class="nx">getLength</span><span class="p">(){</span> 
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="分析">分析</h4>
<ul>
<li>虽然实现了需求，但上面写法仍属于「垃圾代码」，浪费了太多内存，自己画 <strong>内存图</strong> 就知道了</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">squareList</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">getArea</span> <span class="o">===</span> <span class="nx">squareList</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">getArea</span>   <span class="c1">// false
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">&lt;</span><span class="nx">img</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&#34;https://i.loli.net/2020/09/03/kQiTnhXL92HNabF.jpg&#34;</span> <span class="nx">alt</span><span class="o">=</span><span class="s2">&#34;内存图-循环过程&#34;</span> <span class="o">/&gt;</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>会画内存图的人， 比其他人理解的更好</p>
<ul>
<li>内存中，一共创建了 24 个函数，其中 22 个都是多余重复的</li>
</ul>
</blockquote>
<p></p>
<p>​</p>
<h3 id="借助原型-">借助原型 √</h3>
<blockquote>
<p>将12个正方形对象的共有属性放到原型里</p>
</blockquote>
<p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">squareList</span> <span class="o">=</span> <span class="p">[]</span> 
<span class="kd">let</span> <span class="nx">widthList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span> 
<span class="kd">let</span> <span class="nx">squarePrototype</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="nx">getArea</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="p">},</span> 
  <span class="nx">getLength</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span> <span class="p">}</span>
<span class="p">}</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">12</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
  <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">squarePrototype</span><span class="p">)</span> <span class="c1">// 每一个正方形都以squarePrototype为原型，共享方法
</span><span class="c1"></span>  <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">widthList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
<span class="p">}</span> 
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">squareList</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">getArea</span> <span class="o">===</span> <span class="nx">squareList</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">getArea</span>   <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p></p>
<h4 id="分析-1">分析</h4>
<blockquote>
<p>有人指出创建一个正方形的代码分散在两个地方很不优雅，于是我们用一个函数把这两部分联系起来</p>
</blockquote>
<ul>
<li>还是垃圾代码！创建square的代码太分散了！</li>
<li>在上面基础上，应该再把代码抽离到一个函数里，实现调用函数 就可以创建正方形 —— 封装函数</li>
</ul>
<p>​</p>
<h3 id="抽离到函数封装">抽离到函数（封装）⭐️</h3>
<blockquote>
<ul>
<li>将创建正方形的代码，整合到一个 function 中</li>
<li>直接调用 function 即可创建出对应个数的正方形对象</li>
</ul>
</blockquote>
<p>这种过程就叫做「封装」</p>
<ul>
<li>把细节写到一个函数里，调用函数、传参，就搞定了</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">squareList</span> <span class="o">=</span> <span class="p">[]</span>
<span class="kd">let</span> <span class="nx">widthList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span> 

<span class="kd">function</span> <span class="nx">createSquare</span><span class="p">(</span><span class="nx">width</span><span class="p">){</span> <span class="c1">// 此函数叫做「构造函数」详见一下版块
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">squarePrototype</span><span class="p">)</span>   <span class="c1">// 以 squarePrototype 为原型创建空对象 
</span><span class="c1"></span>  <span class="nx">obj</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span> 
  <span class="k">return</span> <span class="nx">obj</span> 
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">squarePrototype</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="nx">getArea</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="p">}</span> 
  <span class="nx">getLength</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span> <span class="p">}</span> 
<span class="p">}</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">12</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
  <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">createSquare</span><span class="p">(</span><span class="nx">widthList</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>  <span class="c1">// 这下创建 square 很简单了吧！
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="构造函数-">构造函数 ⭐️</h2>
<ul>
<li>就是可以构造出对象的函数</li>
</ul>
<h3 id="函数和原型结合进一步封装">函数和原型结合（进一步封装）⭐️</h3>
<blockquote>
<p>进一步封装</p>
<ul>
<li>squarePrototype 原型 和 creatSquare 函数，还是分散的</li>
<li>能不能组合在一起？</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">squareList</span> <span class="o">=</span> <span class="p">[]</span> 
<span class="kd">let</span> <span class="nx">widthList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span> 
<span class="kd">function</span> <span class="nx">createSquare</span><span class="p">(</span><span class="nx">width</span><span class="p">){</span>  <span class="c1">// 构造函数：用于创建 square 对象
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">createSquare</span><span class="p">.</span><span class="nx">squarePrototype</span><span class="p">)</span> 
  <span class="c1">// 先使用后定义？NO，这里并未执行，执行时已经定义完了
</span><span class="c1"></span>  <span class="nx">obj</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span> 
  <span class="k">return</span> <span class="nx">obj</span> 
<span class="p">}</span>
<span class="nx">createSquare</span><span class="p">.</span><span class="nx">squarePrototype</span> <span class="o">=</span> <span class="p">{</span> <span class="c1">// 把原型放到构造函数上，结合够紧密了吗？
</span><span class="c1"></span>  <span class="nx">getArea</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="p">},</span>
  <span class="nx">getLength</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span> <span class="p">},</span> 
  <span class="nx">constructor</span><span class="o">:</span> <span class="nx">createSquare</span> <span class="c1">// 再把构造函数放到原型上，方便通过原型找到构造函数 
</span><span class="c1"></span>	<span class="c1">// 原型和构造函数互相引用，非常紧密
</span><span class="c1"></span>  <span class="c1">// 可以通过createSquare函数，找到原型squarePrototype。也可以拿到原型，方便的找到createSquare函数
</span><span class="c1"></span><span class="p">}</span> 
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">12</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
  <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">createSquare</span><span class="p">(</span><span class="nx">widthList</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">constructor</span><span class="p">)</span> <span class="c1">// ƒ createSquare(width){...}
</span><span class="c1"></span>  <span class="c1">// 打印 constructor 可以知道谁构造了 squareList[0→11] 对象：你妈是谁？
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>函数上面也可以用「点 . 」？</p>
<ul>
<li>因为函数属于对象</li>
</ul>
<blockquote>
<p>此时，代码已经没有进一步优化的空间了</p>
<ul>
<li>这段代码几乎完美</li>
<li>为什么不固定下来，让每个JS开发者直接用呢?</li>
<li>这时 JS 就有了 new 操作符 来帮我们实现</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="new-操作符-">new 操作符 ⭐️</h3>
<blockquote>
<p>让我们感受JS之父的爱</p>
<ul>
<li>JS 之父创建了 new 关键字，可以让我们可以再少写几行代码</li>
<li><a href="https://zhuanlan.zhihu.com/p/23987456" target="_blank" rel="noopener noreffer">JS 的 new 到底是干什么的？</a>⚡️⚡️⚡️⚡️（必读！！！）</li>
</ul>
</blockquote>
<h4 id="函数和原型结合重写">函数和原型结合（重写）⭐️⭐️</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">squareList</span> <span class="o">=</span> <span class="p">[]</span> 
<span class="kd">let</span> <span class="nx">widthList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span> 

<span class="kd">function</span> <span class="nx">Square</span><span class="p">(</span><span class="nx">width</span><span class="p">){</span>  <span class="c1">// 构造函数
</span><span class="c1"></span>  <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span> 
<span class="p">}</span>

<span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="p">}</span> 
<span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getLength</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span> <span class="p">}</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">12</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
  <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Square</span><span class="p">(</span><span class="nx">widthList</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">constructor</span><span class="p">)</span> 
<span class="p">}</span>
<span class="c1">// 多美，几乎没有一句多余的废话 
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>每个函数创建时，都自带有prototype属性，这是JS之父故意的</p>
</li>
<li>
<p>每个prototype都自带有constructor属性，也是故意的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(){}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">f1</span><span class="p">)</span>
<span class="nx">f1</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nx">f1</span>   <span class="c1">// true   // 函数原型上的constructor等于函数本身
</span></code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ul>
<p>​</p>
<h4 id="对比">对比</h4>
<p></p>
<ul>
<li>上面的代码被简化为下面的代码</li>
<li>唯一的区别是要用 new 来调用</li>
</ul>
<p></p>
<h4 id="细节">细节</h4>
<ul>
<li>
<p>creatSquare  =&gt;  Square 函数名变了</p>
</li>
<li>
<p>之前需要创建对象，让对象的原型指向拥有 getArea 和 getLength 的那个对象 。
现在这句话不用写了，new 会帮我们实现</p>
</li>
<li>
<p>用 this 代表新的对象（this 会指向临时对象）</p>
</li>
<li>
<p>return obj 也不用写了，new 会帮我们实现（函数原本三行，压缩成一行，其他 new 会帮我们实现）</p>
</li>
<li>
<p>现在，把 getArea 和 getLength 通过「点方法」挨个添加到 prototype 上，不能直接给 prototype 赋新值，会导致丢失原本的 constructor（可以用 Object.assign 批量添加）</p>
</li>
<li>
<p>最后，声明新对象时，用 new Square(width)</p>
</li>
</ul>
<p>​</p>
<h2 id="总结-">总结 ⚡️⚡️⚡️</h2>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/23987456" target="_blank" rel="noopener noreffer">JS 的 new 到底是干什么的？</a>⚡️⚡️⚡️⚡️（必读！！！）</p>
</blockquote>
<h3 id="new-x-自动做了四件事情">new X() 自动做了四件事情</h3>
<ol>
<li>
<p>自动创建空对象</p>
</li>
<li>
<p>自动为空对象关联原型，原型地址指定为 <code>X.prototype</code></p>
</li>
<li>
<p>自动将空对象作为 this 关键字运行构造函数</p>
<ul>
<li>this 就是我们new构造函数创建的对象</li>
</ul>
</li>
<li>
<p>自动 return this</p>
</li>
</ol>
<p>——这就是 JS 之父的爱</p>
<h3 id="构造函数-x">构造函数 X</h3>
<ul>
<li>X 函数本身负责给对象本身添加属性</li>
<li><code>X.prototype</code> 对象负责保存对象的共用属性</li>
</ul>
<h3 id="原型与共有属性的关系">原型与共有属性的关系</h3>
<blockquote>
<p>因为 JS 引擎按照「堆栈」来分配内存、存储数据
根据「堆栈」的规则，简单类型在「栈区 Stack」存储，复杂类型在「堆区 Heap」存储</p>
<ul>
<li>X.prototype 的值是，原型的地址
<ul>
<li>因为原型是一个对象，对象是以「堆」的形式存储，所以严格来说，X.prototype的值是：原型的地址</li>
</ul>
</li>
</ul>
<ul>
<li>这个地址，对应到计算机中的那一坨内存，才是原型本身</li>
<li>而原型中，有很多属性/方法：toString、valueOf … 它们就是「共有属性」（原创的词）</li>
<li>共有属性的集合就是原型</li>
</ul>
<blockquote>
<p>如果会画内存图，会理解的更清楚   ↓↓↓</p>
</blockquote>
</blockquote>
<p></p>
<p>​</p>
<p>​</p>
<h2 id="示例">示例</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">Dog</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span> 
	<span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>  
	<span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s1">&#39;white&#39;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">kind</span> <span class="o">=</span> <span class="s1">&#39;萨摩耶&#39;</span>    <span class="c1">// this 就是我们new构造函数创建的对象
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">Dog</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">say</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;汪汪&#39;</span><span class="p">)</span> <span class="p">}</span>    <span class="c1">// 共用函数
</span><span class="c1"></span><span class="nx">Dog</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">run</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;狗在跑&#39;</span><span class="p">)</span> <span class="p">}</span>

<span class="kd">let</span> <span class="nx">dog1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dog</span><span class="p">(</span><span class="s1">&#39;小白&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">Dog</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="s1">&#39;狗&#39;</span>   <span class="c1">// 共用的不一定都是函数, 也可以共用属性。
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">dog2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dog</span><span class="p">(</span><span class="s1">&#39;小黑&#39;</span><span class="p">)</span>
<span class="nx">dog1</span><span class="p">.</span><span class="nx">x</span> <span class="c1">// &#39;狗&#39;
</span><span class="c1"></span><span class="nx">dog2</span><span class="p">.</span><span class="nx">x</span> <span class="c1">// &#39;狗&#39;
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="题外话代码规范">题外话：代码规范</h2>
<h3 id="大小写">大小写</h3>
<ul>
<li>所有构造函数（专门用于创建对象的函数）首字母大写</li>
<li>所有被构造出来的对象，首字母小写</li>
</ul>
<h3 id="词性">词性</h3>
<ul>
<li>new 后面的函数（构造函数），使用名词形式。 如 <code>new Person()</code>、<code>new Object()</code></li>
<li>普通函数，一般使用动词开头。如 <code>createSquare(5)</code>、<code>createElement('div')</code></li>
<li>其他规则以后再说</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="总结一个非常重要的公式-">总结一个非常重要的公式 💋</h2>
<blockquote>
<p>也是 JS 里唯一的一个公式</p>
</blockquote>
<p>很多前端对于原型的理解是通过画图，实际上是可以通过公式来表示的
只有方方的课才能看到，若愚的课也没有</p>
<h3 id="如何确定一个对象的原型">如何确定一个对象的原型</h3>
<p>为什么</p>
<ul>
<li><code>let obj = new Object()</code>的原型是 <code>Object.prototype </code></li>
<li><code>let arr = new Array()</code>的原型是 <code>Array.prototype </code></li>
<li><code>let square = new Square()</code>的原型是 <code>Square.prototype </code></li>
<li><code>let fn = new Function()</code>的原型是 <code>Function.prototype</code></li>
</ul>
<blockquote>
<p>可以总结出，一个对象通过 new XXX 创建出来，那么 XXX.prototype 就是这个对象的原型</p>
</blockquote>
<p>因为 new 操作故意这么做的</p>
<p></p>
<p>​</p>
<h3 id="结论">结论</h3>
<blockquote>
<p>你是谁构造的
你的原型就是谁的 prototype 属性
对应的对象</p>
</blockquote>
<ul>
<li>很多前端会说 prototype 就是原型</li>
<li>实际上、严格来说，prototype 只是存了个地址，不是对象。</li>
<li>prototype 地址对应的那块内存、内存中所有共有属性的集合，才是原型对象本身</li>
</ul>
<blockquote>
<p>⚡️⚡️⚡️⚡️ 原型公式 ⚡️⚡️⚡️</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">对象</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">其构造函数</span><span class="p">.</span><span class="nx">prototype</span>
</code></pre></td></tr></table>
</div>
</div></blockquote>
<p>​</p>
<h3 id="例-">例 💋</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">X</span><span class="p">(</span><span class="nx">width</span><span class="p">){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span>
<span class="p">}</span>
<span class="nx">X</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="p">}</span>
<span class="nx">X</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getLength</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span> <span class="p">}</span>
<span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">X</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">X</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>构造函数的原型：<code>X.prototype </code> 是 #309</li>
<li>构造出的对象 a 和 b 的原型 ：<code> a.__proto__</code> 和 <code>b.__proto__</code> 也是 #309</li>
</ul>
<p></p>
<p>补充：#109 结构</p>
<p></p>
<p>​</p>
<h3 id="参考资料">参考资料</h3>
<p><a href="https://www.zhihu.com/question/56770432/answer/315342130" target="_blank" rel="noopener noreffer">JS 中 <code>__proto__</code> 和 <code>prototype</code> 存在的意义是什么？</a></p>
<p>​</p>
<h3 id="做几个题">做几个题</h3>
<blockquote>
<p>来理解公式：<strong><code>对象.__proto__ === 其构造函数.prototype</code></strong></p>
</blockquote>
<h4 id="难度1">难度1</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">{}</span>
</code></pre></td></tr></table>
</div>
</div><p>请问：</p>
<ol>
<li>
<p>x的原型是什么？  Object.prototype</p>
</li>
<li>
<p><code>x.__proto__</code>的值是什么？  Object.prototype</p>
</li>
<li>
<p>上面两个问题是等价的吗？</p>
</li>
<li>
<p>请用内存图画出x的所有属性</p>
</li>
</ol>
<p>答：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// x的原型
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// x.__proto__
</span><span class="c1"></span><span class="nx">x</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>   <span class="c1">// true  二者是等价的
</span><span class="c1"></span><span class="nx">x</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">window</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// true  「window.」可省略
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h4 id="难度2">难度2</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">Square</span><span class="p">(</span><span class="nx">width</span><span class="p">){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">square</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Square</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>  <span class="err">⚡️⚡️⚡️</span>
</code></pre></td></tr></table>
</div>
</div><p>请问：</p>
<ol>
<li>square的原型是什么？</li>
<li><code>square.__proto__</code>的值是什么？</li>
<li>请用内存图画出 square 的所有属性</li>
</ol>
<p>答：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// square的原型
</span><span class="c1"></span><span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// square.__proto__   
</span><span class="c1">// 1/2两个问题是等价的（带入公式理解）
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h4 id="难度3">难度3</h4>
<p>请问：</p>
<ol>
<li>Object.prototype 是哪个函数构造出来的？</li>
<li>Object.prototype 的原型是什么？</li>
<li><code>Object.prototype.__proto__</code> 值是什么?</li>
<li>请用内存图画出上述内容</li>
</ol>
<p>答：</p>
<ol>
<li>
<p>未知，Object.prototype 是默认就存在的，没有谁把它构造出来</p>
</li>
<li>
<p>没有原型</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="kc">null</span>   <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<p>​</p>
<p>​</p>
<h2 id="构造函数prototypenew">构造函数、prototype、new</h2>
<blockquote>
<p>通过 Square 的例子，已经可以基本理解了</p>
</blockquote>
<p><strong>构造函数</strong></p>
<ul>
<li>用来创建对象的函数，就是构造函数（特点：首字母大写）</li>
</ul>
<p>​</p>
<p><strong>prototype</strong></p>
<ul>
<li>
<p>不论构造函数、还是普通函数，每一个函数（对象）都有一个 prototype，用来存放共有属性</p>
</li>
<li>
<p>每个对象都有原型，但除了「根对象 Object.prototype」比较特殊，Object.prototype 这个对象的原型为空 null</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span><span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span><span class="p">}</span>
<span class="nx">add</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// 不仅是构造函数，普通函数也有 prototype
</span><span class="c1"></span><span class="k">delete</span> <span class="nx">add</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// false  而且删不掉，仍然存在
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<p><strong>new</strong>：会帮我们做四件事情（省略了很多代码）</p>
<ol>
<li>创建一个临时对象</li>
<li>把这个对象指向一个原型</li>
<li>把这个对象作为 this 来运行这个构造函数</li>
<li>return this</li>
</ol>
<p>​</p>
<h2 id="square-最终版存疑">Square 最终版（存疑）</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">Square</span><span class="p">(</span><span class="nx">width</span><span class="p">){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span>
<span class="p">}</span>
<span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
<span class="p">}</span>
<span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getLength</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">square</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Square</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="nx">square</span><span class="p">.</span><span class="nx">width</span>         <span class="c1">// 5
</span><span class="c1"></span><span class="nx">square</span><span class="p">.</span><span class="nx">getArea</span><span class="p">()</span>     <span class="c1">// 25
</span><span class="c1"></span><span class="nx">square</span><span class="p">.</span><span class="nx">getLength</span><span class="p">()</span>   <span class="c1">// 20
</span></code></pre></td></tr></table>
</div>
</div><p>为什么说存疑：因为还有一个更简化的版本，后面再讲</p>
<p>​</p>
<p>​</p>
<h2 id="圆形-circle">圆形 Circle</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span>
<span class="p">}</span>
<span class="nx">Circle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getLength</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span>
<span class="p">}</span>
<span class="nx">Circle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">c1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="nx">c1</span><span class="p">.</span><span class="nx">radius</span>        <span class="c1">// 10
</span><span class="c1"></span><span class="nx">c1</span><span class="p">.</span><span class="nx">getLength</span><span class="p">()</span>   <span class="c1">// 31.41592653589793
</span><span class="c1"></span><span class="nx">c1</span><span class="p">.</span><span class="nx">getArea</span><span class="p">()</span>     <span class="c1">// 314.1592653589793
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="长方形-rectangle">长方形 Rectangle</h2>
<p>两个参数：宽、高</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">Rect</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span>
<span class="p">}</span>
<span class="nx">Rect</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">height</span>
<span class="p">}</span>
<span class="nx">Rect</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getLength</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="k">return</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">r1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Rect</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="nx">r1</span><span class="p">.</span><span class="nx">width</span>
<span class="nx">r1</span><span class="p">.</span><span class="nx">height</span>
<span class="nx">r1</span><span class="p">.</span><span class="nx">getLength</span><span class="p">()</span>
<span class="nx">r1</span><span class="p">.</span><span class="nx">getArea</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="对象需要分类吗-1">对象需要分类吗？🧐</h2>
<blockquote>
<p>回到最初的问题</p>
</blockquote>
<blockquote>
<h3 id="答案是-需要分类">答案是 需要分类</h3>
</blockquote>
<p>因为不同的对象有不同的功能，某些对象具有相同功能，某些对象具有不同功能</p>
<h3 id="理由一">理由一</h3>
<ul>
<li>有很多对象拥有一样的属性和行为</li>
<li>需要把它们分为同一类</li>
<li>如 square1 和 square2
如 圆1、圆2、圆3，都是圆
如 长方形1、长方形2，都是长方形
…</li>
<li>这样创建类似对象的时候就很方便
<ul>
<li>直接 new 一个 Square、new Circle、new Rect … 然后传参，就能创建出相应图形的对象</li>
<li>就不需要【 <code>let square1 = {…}; let square2 = {…} </code> 然后把所有属性写一遍】，这样会很麻烦</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="理由二">理由二</h3>
<ul>
<li>
<p>但是还有很多对象拥有其他的属性和行为</p>
</li>
<li>
<p>所以就需要不同的分类</p>
</li>
<li>
<p>比如 Square / Circle / Rect 就是不同的分类</p>
</li>
<li>
<p>Array / Function 也是不同的分类</p>
</li>
<li>
<p>而 <strong>Object 创建出来的对象，是最没有特点的对象</strong>（没有什么额外更多的功能，相对比较普通）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">{}</span>   <span class="c1">// 等价于  let x = new Object()
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="类型-vs-类">类型 vs. 类</h2>
<blockquote>
<p>「 类型  &amp;  类 」有什么区别 ？</p>
</blockquote>
<h3 id="类型">类型</h3>
<ul>
<li>类型是 JS 数据的分类，有 7 种</li>
<li>四基两空一对象
<ol>
<li>string</li>
<li>number</li>
<li>boolean</li>
<li>symbol</li>
<li>null</li>
<li>undefined</li>
<li>object</li>
</ol>
</li>
</ul>
<h3 id="类">类</h3>
<ul>
<li><strong>类是针对于对象的分类，有无数种</strong>
<ul>
<li>Object 创建出来的对象，是最没有特点的对象</li>
<li>只要觉得需要再创建一个分类，就再写一个 构造函数，new 出来新的分类对象</li>
</ul>
</li>
<li><strong>常见的有 Array、Function、Date(日期)、RegExp(正则) 等</strong></li>
</ul>
<p>​</p>
<h2 id="有特色的类-">有特色的类 ⭐️</h2>
<blockquote>
<p>上面提到 Object 创建的的对象，是最没有特色的类</p>
<p>那什么是有特色的的类？举两个例子：数组对象、函数对象</p>
<p>（在其他语言中，数组、函数可能都不是对象，但在 JS 中，数组/函数 都属于对象）</p>
</blockquote>
<h3 id="数组对象">数组对象</h3>
<h4 id="定义一个数组">定义一个数组</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="c1">// 简写
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="c1">// 元素为 1,2,3  // arr [1,2,3]
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>  <span class="c1">// 长度为 3   // arr [empty×3]
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="数组对象的自身属性">数组对象的自身属性</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="c1">// arr的自身属性有 4 个： &#39;0&#39;/&#39;1&#39;/&#39;2&#39;/&#39;length&#39;
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注意，属性名没有数字，只有字符串</p>
</blockquote>
<ul>
<li>属性名：&lsquo;0&rsquo;/&lsquo;1&rsquo;/&lsquo;2&rsquo;  ，都是字符串</li>
<li>灰色属性，是不能被遍历到的：如 <code>length</code>、<code>__proto__</code></li>
</ul>
<p></p>
<p></p>
<h4 id="数组对象的共用属性">数组对象的共用属性</h4>
<blockquote>
<ol>
<li>共有属性非常多，都存储在数组对象的 <code>__proto__</code> 中</li>
</ol>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;push&#39;</span><span class="o">/</span><span class="s1">&#39;pop&#39;</span><span class="o">/</span><span class="s1">&#39;shift&#39;</span><span class="o">/</span><span class="s1">&#39;unshift&#39;</span><span class="o">/</span><span class="s1">&#39;join&#39;</span>  <span class="p">......</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<blockquote>
<ol start="2">
<li>数组对象 比 普通对象，多一层 原型</li>
</ol>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>            <span class="c1">// true
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span>     <span class="c1">// true
</span><span class="c1"></span>          
<span class="nx">arr</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<blockquote>
<ol start="3">
<li>调用共有属性时，采用<strong>就近原则</strong>
<ul>
<li>在 arr 自身的原型上找到这个属性时，就不会再去 对象原型 上找</li>
</ul>
</li>
</ol>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">toString</span> <span class="o">==</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">toString</span>  <span class="c1">// false
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">toString</span> <span class="o">==</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">toString</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<blockquote>
<ol start="4">
<li>各个【共有属性】，用法都在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array#" target="_blank" rel="noopener noreffer">MDN</a>，基本与其英文原意相关
<ul>
<li>后面会有单独课程 教这些 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener noreffer">API</a>。所谓的 API  就是【数组有哪些函数、对象有哪些函数】</li>
</ul>
</li>
</ol>
</blockquote>
<ul>
<li>推  push() 方法，将一个或多个元素添加到数的末尾，并返回该数组的新长度。</li>
<li>弹 pop()方法，从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。</li>
<li>提档 shift() 方法，从数组中删除第一个元素，并返回该元素的值。</li>
<li>降档 unshift() 方法，将一个或多个元素添加到数组的开头，并返回该数组的新长度。（修改原数组）</li>
<li>联结 join() 方法，将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。</li>
<li>联结 concat() 方法，用于<strong>合并两个或多个数组</strong>。此方法不会更改现有数组，而是<strong>返回一个新数组</strong>。</li>
<li>…</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> 
<span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="c1">// 4  返回数组的新长度
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1,2,3,0]
</span><span class="c1"></span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span>  <span class="c1">// 0   返回被删除的元素的值
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1,2,3]
</span><span class="c1"></span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span>  <span class="c1">// 1   返回被删除的元素的值
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [2,3]
</span><span class="c1"></span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="c1">//  3   返回数组的新长度
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [0,2,3]
</span><span class="c1"></span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;哈&#39;</span><span class="p">)</span> <span class="c1">//  &#34;0哈2哈3&#34;  直接返回字符串
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="nx">arr3</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">arr1</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">arr2</span><span class="p">)</span> <span class="c1">// [1, 1, 2, 2]
</span><span class="c1"></span><span class="nx">arr1</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">arr2</span><span class="p">,</span> <span class="nx">arr3</span><span class="p">)</span>  <span class="c1">// [1, 1, 2, 2, 3, 3]
</span><span class="c1"></span>
<span class="p">...</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="函数对象">函数对象</h3>
<h4 id="定义一个函数">定义一个函数</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span><span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span><span class="p">}</span>   <span class="c1">// 声明函数 fn
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">fn2</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span><span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span><span class="p">}</span>  <span class="c1">// 声明函数 fn，并赋给变量fn2
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">fn3</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span> 
<span class="kd">let</span> <span class="nx">fn4</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;return x+y&#39;</span><span class="p">)</span>  <span class="c1">// 声明的是匿名函数，并将它赋给 fn4
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn1</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;fn1&#39;</span><span class="p">}</span>   <span class="c1">// 声明函数 fn
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">fn2</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;fn2&#39;</span><span class="p">}</span>  <span class="c1">// 声明函数 fn，并赋给变量fn2
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">fn3</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="s1">&#39;fn3&#39;</span>  <span class="c1">// 声明函数 fn3
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">fn4</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;return `fn4`&#39;</span><span class="p">)</span> <span class="c1">// 声明的是匿名函数，并将它赋给 fn4
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="函数对象自身属性">函数对象自身属性</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;name&#39;</span> <span class="o">/</span> <span class="s1">&#39;length&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p></p>
<p>​</p>
<h4 id="函数对象共用属性">函数对象共用属性</h4>
<blockquote>
<p>共有属性非常多，都存储在函数对象的 <code>__proto__</code> 中</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;call&#39;</span> <span class="o">/</span> <span class="s1">&#39;apply&#39;</span> <span class="o">/</span> <span class="s1">&#39;bind&#39;</span>    <span class="nx">这三个属性是重点</span>
</code></pre></td></tr></table>
</div>
</div><p>后面会有单独课程介绍函数</p>
<p>​</p>
<p>​</p>
<h2 id="js-终极一问谁构造了ta">JS 终极一问：谁构造了ta</h2>
<h3 id="window-是谁构造的">window 是谁构造的</h3>
<ul>
<li>
<p>Window</p>
</li>
<li>
<p>可以通过 constructor 属性看出构造者</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nx">Window</span>           <span class="c1">// true
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">Window</span><span class="p">.</span><span class="nx">prototype</span>   <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ul>
<h3 id="windowobject-是谁构造的">window.Object 是谁构造的</h3>
<ul>
<li>
<p>window.Function</p>
</li>
<li>
<p>==<strong>因为所有函数都是 window.Function 构造的</strong>==</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nb">window</span><span class="p">.</span><span class="nb">Function</span>         <span class="c1">// true
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">window</span><span class="p">.</span><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ul>
<h3 id="windowfunction-是谁构造的">window.Function 是谁构造的</h3>
<ul>
<li>
<p>window.Function</p>
</li>
<li>
<p>因为所有函数都是 window.Function 构造的</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nb">Function</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nb">window</span><span class="p">.</span><span class="nb">Function</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>自己构造的自己？并不是这样，这是「上帝(浏览器)」的安排</p>
</li>
<li>
<p>浏览器构造了 Function，然后指定它的构造者是自己</p>
</li>
</ul>
<h2 id="es6-class-语法-">ES6 ：class 语法 💋</h2>
<blockquote>
<p>JS 构造对象目前有两种方式，一种是用【构造函数+prototype】，一种是用【class】</p>
</blockquote>
<h3 id="prototype-是过时的-">prototype 是过时的 ？</h3>
<blockquote>
<p>非常遗憾，下面代码（构造函数）被某些前端认为是过时的</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">Square</span><span class="p">(</span><span class="nx">width</span><span class="p">){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span>
<span class="p">}</span>
<span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
<span class="p">}</span>
<span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getLength</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>学习资料：<a href="https://zhuanlan.zhihu.com/p/35279244" target="_blank" rel="noopener noreffer">你可以不会 class，但是一定要学会 prototype</a></p>
</blockquote>
<h3 id="es6-class-语法">ES6 ：class 语法</h3>
<blockquote>
<p>class 是用来声明一个类，类是用来创建对象的，不讲究什么内存共用</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">Square</span><span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">width</span><span class="p">){</span>   <span class="c1">// constructor中写对象里的属性
</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span>
  <span class="p">}</span>
  <span class="nx">getArea</span><span class="p">(){</span>    <span class="c1">// 对象里的函数
</span><span class="c1"></span>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
  <span class="p">}</span>
  <span class="nx">getLength</span><span class="p">(){</span>  <span class="c1">// 对象里的函数
</span><span class="c1"></span>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>注意：方法不能写成 <code>getLength: function(){ ... }</code>  这种形式</p>
<h3 id="class-语法引入了更多概念">class 语法引入了更多概念</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">Square</span><span class="p">{</span>
  <span class="kr">static</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span>   <span class="c1">// static表示x属于Square，调用需采用 Square.x 的写法 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>  <span class="nx">width</span> <span class="o">=</span> <span class="mi">0</span>      <span class="c1">// 初始化 width 的值 // &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">width</span><span class="p">){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span>
  <span class="p">}</span>
  <span class="nx">getArea</span><span class="p">(){</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
  <span class="p">}</span>
  <span class="nx">getLength</span><span class="p">(){</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
  <span class="p">}</span>
  <span class="nx">get</span> <span class="nx">area2</span><span class="p">(){</span>  <span class="c1">// 只读属性：调用时直接Square.area2就会执行，无需括号 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>class 引入更多的语法，这些语法多来自 Java世界 或 c#世界（跟 JS 以前的世界是格格不入的）</p>
<p>​</p>
<h3 id="用-class-重写-circle">用 class 重写 Circle</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">Circle</span><span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">radius</span><span class="p">){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span>
  <span class="p">}</span>
  <span class="nx">getArea</span><span class="p">(){</span>
    <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span>
  <span class="p">}</span>
  <span class="nx">getLength</span><span class="p">(){</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="nx">circle</span><span class="p">.</span><span class="nx">radius</span>
<span class="nx">circle</span><span class="p">.</span><span class="nx">getArea</span><span class="p">()</span>
<span class="nx">circle</span><span class="p">.</span><span class="nx">getLength</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="用-class-重写-rectangle">用 class 重写 Rectangle</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">Rectangle</span><span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span>
  <span class="p">}</span>
  <span class="nx">getArea</span><span class="p">(){</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">height</span>
  <span class="p">}</span>
  <span class="nx">getLength</span><span class="p">(){</span>
    <span class="k">return</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">rect</span> <span class="o">=</span> <span class="nx">neww</span> <span class="nx">Rectangle</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="nx">rect</span><span class="p">.</span><span class="nx">width</span>
<span class="nx">rect</span><span class="p">.</span><span class="nx">height</span>
<span class="nx">rect</span><span class="p">.</span><span class="nx">getArea</span><span class="p">()</span>
<span class="nx">rect</span><span class="p">.</span><span class="nx">getLenght</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="易混淆语法">易混淆语法</h3>
<p><strong>语法1：</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">Person</span><span class="p">{</span>
  <span class="nx">sayHi</span><span class="p">(</span><span class="nx">name</span><span class="p">){}</span>
<span class="p">}</span>
<span class="c1">// 等价于
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">Person</span><span class="p">(){}</span>
<span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHi</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">){}</span>
</code></pre></td></tr></table>
</div>
</div><p><strong>语法2：</strong></p>
<p>注意冒号变成了等于号</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">Person</span><span class="p">{</span>
  <span class="nx">sayHi</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">)=&gt;{}</span> <span class="c1">// 注意，一般我们不在这个语法里使用普通函数，多用箭头函数
</span><span class="c1"></span><span class="p">}</span>
<span class="c1">// 等价于
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">Person</span><span class="p">(){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">sayHi</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">)=&gt;{}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="不要强求完全转换成-es5">不要强求完全转换成 ES5</h3>
<p>大部分 class 语法都可以转为 ES5 语法，但并不是 100% 能转，有些 class 语法你意思理解就行，不需要强行转换为 ES5。</p>
<h2 id="原型好还是类好">原型好，还是类好？</h2>
<blockquote>
<p>都是用来给对象分类的</p>
</blockquote>
<p>目前，先推荐用 class</p>
<ul>
<li>
<p>但是 class 的语法知识比较复杂，还需要再多花点时间学习
（关于类和对象的新语法有 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="noopener noreffer">页面1</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer#ECMAScript_6%E6%96%B0%E6%A0%87%E8%AE%B0" target="_blank" rel="noopener noreffer">页面2</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener noreffer">页面3</a>）</p>
</li>
<li>
<p>原型的知识，上面👆已经全部讲过了</p>
</li>
</ul>]]></description>
</item><item>
    <title>JS 对象的基本用法</title>
    <link>http://samrks.github.io/javascript-crud-of-object-prototype/</link>
    <pubDate>Wed, 02 Sep 2020 21:50:44 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-crud-of-object-prototype/</guid>
    <description><![CDATA[<p>「增」「删」「改」「查」「原型」</p>
<h2 id="回顾">回顾</h2>
<h3 id="七种数据类型">七种数据类型</h3>
<ul>
<li>number、string、booleansymbol</li>
<li>undefined、null</li>
<li>object</li>
</ul>
<p>四基(本类型)两空一对象</p>
<p>(bigInt)</p>
<h3 id="五个-falsy-值">五个 falsy 值</h3>
<ul>
<li>null、undefined</li>
<li>0、NaN</li>
<li><code>''</code> （空字符串）</li>
</ul>
<p>​</p>
<h2 id="js-对象">JS 对象</h2>
<blockquote>
<p>是学习 JS 的三座大山之一</p>
<ul>
<li>
<p>对象（原型）</p>
</li>
<li>
<p>this</p>
</li>
<li>
<p>AJAX</p>
</li>
</ul>
</blockquote>
<p>​</p>
<h2 id="对象-object">对象 object</h2>
<blockquote>
<p>对象的基础知识</p>
</blockquote>
<blockquote>
<p>object ，是第七种数据类型，唯一 一种「复杂类型」</p>
<p>其他六种（numbe、string、boolean、symbol、null、undefined），叫做「简单类型」。因为这六种不包含其他任何东西，而 object 对象包含其他内容</p>
</blockquote>
<h3 id="定义">定义</h3>
<ul>
<li>无序的数据集合</li>
<li>键值对的集合</li>
</ul>
<h3 id="写法">写法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">对象名</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">key</span><span class="o">:</span> <span class="nx">value</span>    <span class="c1">// 属性名/键名 :  属性值
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>对象的写法，与 block（代码块）类似，只是碰巧都有 { } 。</li>
<li>要注意区分 { }  是对象，还是代码块</li>
</ul>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="o">:</span> <span class="mi">18</span> <span class="p">}</span>   <span class="c1">// 不论&#39;name&#39;/&#39;age&#39;(属性名)是否有引号，它都只能是字符串
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">({</span><span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">})</span>    <span class="c1">// 正规写法
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span> <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="o">:</span> <span class="mi">18</span> <span class="p">})</span>  <span class="c1">// 创建匿名对象
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>JS 既然可以通过<strong><code>字面量</code></strong>方式创建对象，为什么还要有第二种 <strong><code>new Object()</code></strong> 的方式创建 ?
<ul>
<li>实际上<strong>第二种 <code>new Object()</code> 才是正规创建对象的写法</strong>，第一种属于简化版</li>
<li>因为简化了代码，所以通常都是用第一种写法</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="细节">细节</h3>
<ul>
<li>
<p>==<strong>键名是字符串</strong>==，不是标识符，可以包含任意字符</p>
<blockquote>
<p>只要是<strong>字符串</strong>就行：空串、空格串、emoji 、数字字符串 … （任何一个 Unicode 能表达的串都 ok ）</p>
<p>标识符 规则：（变量）不能以数字开头</p>
</blockquote>
</li>
<li>
<p>属性名的引号可省略，省略之后需按照标识符的规则命名，特例：允许纯数字的键名</p>
</li>
<li>
<p><strong>就算引号省略了，键名也还是字符串（重要）</strong></p>
</li>
</ul>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;&#39;</span><span class="o">:</span> <span class="mi">1</span> <span class="p">}</span>
<span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">2</span><span class="o">:</span> <span class="mi">123</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;fff&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="o">:</span><span class="mi">12</span> <span class="p">}</span>
<span class="kd">var</span> <span class="nx">obj3</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;  &#39;</span><span class="o">:</span> <span class="mi">2</span> <span class="p">}</span>
<span class="kd">var</span> <span class="nx">obj4</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;👍&#39;</span><span class="o">:</span> <span class="s1">&#39;zan&#39;</span> <span class="p">}</span>


<span class="c1">// Object.keys(对象名)  获取对象中的 key名 组成的数组
</span><span class="c1"></span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj1</span><span class="p">)</span>  <span class="c1">// [&#34;&#34;] // 空串也是字符串，合法
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj2</span><span class="p">)</span>  <span class="c1">// [&#34;2&#34;, &#34;name&#34;, &#34;age&#34;]
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj3</span><span class="p">)</span>  <span class="c1">// [&#34;  &#34;]
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj4</span><span class="p">)</span>  <span class="c1">// [&#34;👍&#34;]
</span><span class="c1"></span>
<span class="c1">// 所以不论怎么写，key 都是字符串
</span></code></pre></td></tr></table>
</div>
</div><h4 id="属性名">属性名</h4>
<blockquote>
<p>每个 key 都是对象的属性名（property）</p>
</blockquote>
<h4 id="属性值">属性值</h4>
<blockquote>
<p>每个 value 都是对象的属性值</p>
</blockquote>
<p>​</p>
<h3 id="奇怪的属性名">奇怪的属性名</h3>
<p>所有属性名会自动变成字符串</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="mi">1</span><span class="o">:</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span>       <span class="c1">// &#34;1&#34;
</span><span class="c1"></span>  <span class="mf">3.2</span><span class="o">:</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span>     <span class="c1">// &#34;3.2&#34;
</span><span class="c1"></span>  <span class="mi">1</span><span class="nx">e2</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>    <span class="c1">// &#34;100&#34;
</span><span class="c1"></span>  <span class="mi">1</span><span class="nx">e</span><span class="o">-</span><span class="mi">2</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// &#34;0.01&#34;
</span><span class="c1"></span>  <span class="mf">.234</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// &#34;0.234&#34;
</span><span class="c1"></span>  <span class="mh">0xFF</span><span class="o">:</span> <span class="kc">true</span>    <span class="c1">// &#34;255&#34;
</span><span class="c1"></span><span class="p">};</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// [&#34;1&#34;, &#34;100&#34;, &#34;255&#34;, &#34;3.2&#34;, &#34;0.01&#34;, &#34;0.234&#34;]
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>JS 可能会自动换算「属性名」，所以如果不想被自动换算，给属性名加上「引号」即可解决</p>
</blockquote>
<h4 id="细节-1">细节</h4>
<ul>
<li><strong><code>Object.keys(obj)</code></strong> 可以得到 obj 的所有 key 组成的数组</li>
<li>这个 API 需要会使用</li>
</ul>
<h4 id="变量作属性名">「变量」作属性名</h4>
<p>如何用变量做属性名</p>
<ul>
<li>
<p>之前都是用<strong>常量</strong>做属性名（所有不是变量的都是常量）</p>
</li>
<li>
<p><strong><code>let p1 = 'name'</code></strong></p>
</li>
<li>
<p><strong><code>let obj = { p1 : 'sam'}</code></strong> 这样写，属性名为 <strong><code>'p1'</code></strong></p>
</li>
<li>
<p><strong><code>let obj = { [p1] : 'sam' }</code></strong> 这样写，属性名为 <strong><code>'name'</code></strong>    （ ES 6 ）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">aa</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>  <span class="c1">// 想用变量a作为属性名
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">aa</span><span class="o">:</span> <span class="mi">1111</span> <span class="p">}</span>     <span class="c1">// {aa: 1111}
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;aa&#39;</span><span class="o">:</span> <span class="mi">1111</span> <span class="p">}</span>   <span class="c1">// {aa: 1111}
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="p">[</span><span class="nx">aa</span><span class="p">]</span><span class="o">:</span> <span class="mi">1111</span> <span class="p">}</span>   <span class="c1">// {xxx: 1111}  // ES6之后
</span></code></pre></td></tr></table>
</div>
</div><p>ES6之前，实现变量作属性名  ↓↓ ，需两行代码实现。ES6之后一行 ↑↑ 即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">aa</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span> 
<span class="nx">obj</span><span class="p">[</span><span class="nx">aa</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1111</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// {xxx: 1111}
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>对比</p>
<ul>
<li>
<p>不加 <i class="far fa-square fa-fw"></i> 的属性名会自动变成字符串</p>
</li>
<li>
<p>加了 <i class="far fa-square fa-fw"></i> 则会当做变量求值</p>
</li>
<li>
<p>值如果不是字符串，则会自动变成字符串</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">[</span><span class="mi">1</span><span class="o">+</span><span class="mi">2</span><span class="o">+</span><span class="mi">3</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">:</span> <span class="s1">&#39;十&#39;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// { 10: &#34;十&#34; }
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// [ &#34;10&#34; ]
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h3 id="对象的隐藏属性原型-">对象的隐藏属性（原型 💡）</h3>
<p>隐藏属性</p>
<ul>
<li>JS 中，每一个对象 都有一个 隐藏属性  <code>__proto__</code></li>
<li>这个隐藏属性，储存着其 <strong>共有属性组成的对象</strong>的地址</li>
<li>这个<strong>共有属性组成的对象</strong>，叫做原型</li>
<li>也就是说，隐藏属性 储存着 原型的地址
<ul>
<li><code>__proto__</code> 存储了一个地址，这个地址所代表的内存空间中的对象，叫做原型 / 共有属性</li>
</ul>
</li>
</ul>
<p>代码示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="c1">// 居然不报错
</span></code></pre></td></tr></table>
</div>
</div><p>因为 obj 的隐藏属性<strong>对应的对象</strong>（原型 / 共有属性）上有 toString()</p>
<p>​</p>
<blockquote>
<p>举个栗子：什么叫共有属性</p>
<ul>
<li>将共有的属性，提取出来单独存储成一个对象。最大的好处，就是<strong>省内存</strong></li>
<li>每次声明一个 chinese 时，无需重复写入：国籍、肤色、发色 … 等 chinese 公共的属性，直接用一个<strong>特定属性</strong>（–proto–），<strong>存储</strong>共有属性所在的<strong>内存地址</strong>即可</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">chinese1</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;小兰&#39;</span> <span class="p">}</span>
<span class="kd">var</span> <span class="nx">chinese2</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;小红&#39;</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<h3 id="超纲知识">超纲知识</h3>
<blockquote>
<p>前面提到，对象中所有的 key 都是字符串</p>
</blockquote>
<blockquote>
<p>实际上，ES 6 中稍微做了调整：<strong>除了字符串，symbol 也能做属性名</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">Symbol</span><span class="p">()</span>
<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这有什么用呢？</p>
<ul>
<li>目前，屁用都没用，很久很久以后可能会有用（方方从没用过）</li>
<li>在学习「迭代」时会用到（但前端不流行迭代，所以根本没机会用）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="增删改查">增删改查</h2>
<blockquote>
<p>「增删改查」对象的属性</p>
</blockquote>
<h3 id="删除属性">删除属性</h3>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete" target="_blank" rel="noopener noreffer">delete 操作符</a>：用于删除对象的某个属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">delete</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">xxx</span>
<span class="k">delete</span> <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;xxx&#39;</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>作用：删除 obj 的 xxx 属性</li>
<li>请区分「属性值为 undefined」和「不含属性名」</li>
</ul>
<h4 id="不含属性名">不含属性名</h4>
<p>直接删除属性名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">}</span>
<span class="k">delete</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">name</span>  <span class="c1">// 或 delete obj[&#39;name&#39;]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// {age: 18}
</span><span class="c1">// console.log(obj.name) // undefined
</span></code></pre></td></tr></table>
</div>
</div><p>判断是否删除成功</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;xxx&#39;</span> <span class="k">in</span> <span class="nx">obj</span> <span class="o">===</span> <span class="kc">false</span>   <span class="c1">// 返回 true 说明该属性名已被删除 
</span><span class="c1"></span><span class="err">（</span><span class="nx">不能省略引号</span><span class="err">）</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="含有属性名但是值为-undefined">含有属性名，但是值为 undefined</h4>
<p>仅删除属性值，保留属性名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;xxx&#39;</span> <span class="k">in</span> <span class="nx">obj</span> <span class="o">&amp;&amp;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">xxx</span> <span class="o">===</span> <span class="kc">undefined</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">}</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="kc">undefined</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// {name: undefined, age: 18}
</span><span class="c1">// console.log(obj.name) // undefined
</span></code></pre></td></tr></table>
</div>
</div><h4 id="注意-objxxx--undefined">注意 obj.xxx === undefined</h4>
<ul>
<li>
<p><code>obj.xxx === undefined</code> 不能断定 &lsquo;xxx&rsquo; 是否为 obj 的属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
<span class="kd">let</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="kc">undefined</span><span class="p">}</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">x</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="c1">// true
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">x</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="c1">// true   所以说 这句话无法判断出 x 到底是不是 obj 的属性
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>用 in 和 hasOwnProperty 可以判断</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
<span class="kd">let</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="kc">undefined</span><span class="p">}</span>
<span class="s1">&#39;x&#39;</span> <span class="k">in</span> <span class="nx">obj</span>   <span class="c1">// false
</span><span class="c1"></span><span class="s1">&#39;x&#39;</span> <span class="k">in</span> <span class="nx">obj2</span>  <span class="c1">// true
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">)</span>    <span class="c1">// false
</span><span class="c1"></span><span class="nx">obj2</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">)</span>   <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="类比">类比</h4>
<ul>
<li>你有没有卫生纸？</li>
<li>A: 没有 // 不含属性名</li>
<li>B: 有，但是没带 // 含有属性名，但是值为 undefined</li>
</ul>
<blockquote>
<h4 id="程序员就是这么严谨">程序员就是这么严谨</h4>
<ul>
<li>「没有」和「undefined」是两个概念</li>
<li>没有就是没有，undefined 就是 undefined</li>
<li>绝不含糊</li>
<li>需要细心，发现细微的区别</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="查看所有属性读属性">查看所有属性（读属性）</h3>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="查看自身所有属性">查看自身所有属性</h4>
<blockquote>
<p>无法打印【共有属性 <code>__proto__</code>】</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>     <span class="c1">// [&#34;name&#34;, &#34;age&#34;]
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>   <span class="c1">// [&#34;sam&#34;, 18] 
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">entries</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// [Array(2), Array(2)]  =&gt; 0:[&#34;name&#34;, &#34;sam&#34;]  1:[&#34;age&#34;, 18]
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="查看自身共有属性">查看自身+共有属性</h4>
<blockquote>
<p>dir 指以目录的形式，可以查看到【共有属性 <code>__proto__</code>】</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>   <span class="c1">// 查看 obj内容 及 共有属性 【推荐】
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span>      
<span class="c1">// 也可以直接打印共有属性（但不推荐此法，因为隐藏属性的命名是不固定的，不同浏览器可能规定不同）
</span></code></pre></td></tr></table>
</div>
</div><p>或者自己依次用 Object.keys 打印出 <code>obj.__proto__</code></p>
<h4 id="判断一个属性是自身的还是共有的">判断一个属性是自身的还是共有的</h4>
<blockquote>
<p>判断一个属性是否是某个对象的属性，可以用 <code>in</code>  ，但是 in 无法区分是自身的还是共有的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s2">&#34;name&#34;</span> <span class="k">in</span> <span class="nx">obj</span>      <span class="c1">// true
</span><span class="c1"></span><span class="s2">&#34;toString&#34;</span> <span class="k">in</span> <span class="nx">obj</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;toString&#39;</span><span class="p">)</span>   <span class="c1">// false
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span>       <span class="c1">// true
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;age&#39;</span><span class="p">)</span>        <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="原型">原型</h3>
<blockquote>
<p>原型，就是隐藏属性 所指向的对象</p>
</blockquote>
<h4 id="每个对象都有原型">每个对象都有原型</h4>
<ul>
<li>原型里存着对象的共有属性</li>
<li>比如 obj 的原型就是一个对象
<ul>
<li><code>obj.__proto__ </code>存着这个原型对象的地址</li>
<li>这个原型对象里有 toString / constructor / valueOf 等属性</li>
</ul>
</li>
</ul>
<h4 id="对象的原型也是对象">对象的原型也是对象</h4>
<blockquote>
<p>既然每个对象都有原型，且原型也是对象，那么可以推出：原型上也有原型</p>
</blockquote>
<ul>
<li>所以对象的原型上也有原型</li>
<li>obj = { } 空对象的原型即为所有对象的原型</li>
<li>这个原型包含所有对象的共有属性，是<strong>对象的根</strong></li>
<li>这个原型也有原型，<strong>是 null</strong>     【/nʌl/】
<ul>
<li>原型为 null 的对象，就是对象的根</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">)</span>  <span class="c1">// 原型对象（根对象）
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">)</span>   <span class="c1">// null  原型上的原型
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="查看属性">查看属性</h3>
<h4 id="两种方法查看属性">两种方法查看属性</h4>
<ul>
<li>
<p>**中括号语法：obj[&lsquo;key&rsquo;] **</p>
</li>
<li>
<p>点语法：obj.key</p>
</li>
<li>
<p>坑新人语法：obj[key]      // 中括号里是变量，【变量 key】 值一般不等于【字符串 &lsquo;key&rsquo;】</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">}</span>
<span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>   <span class="c1">// &#39;sam&#39;
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">name</span>      <span class="c1">// &#39;sam&#39;
</span><span class="c1"></span><span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>     <span class="c1">// undefined
</span><span class="c1"></span>    
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>   <span class="c1">// &#34;&#34;
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;age&#39;</span>
<span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>    <span class="c1">// 18   // 等同于 obj[&#39;age&#39;]
</span></code></pre></td></tr></table>
</div>
</div><p>变态</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;na&#39;</span><span class="o">+</span><span class="s1">&#39;me&#39;</span><span class="p">]</span>   <span class="c1">// &#39;sam&#39;
</span><span class="c1"></span>    
<span class="nx">obj</span><span class="p">[</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)]</span>   
<span class="c1">// name   // 先执行log命令，打印内容
</span><span class="c1">// undefined   // log 函数的返回值为 undefined，相当于执行 obj[undefined] =&gt; undefined
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h4 id="请优先使用中括号语法">请优先使用中括号语法</h4>
<ul>
<li>【点语法】会误导你，让你以为 key 不是字符串</li>
<li>等你确定不会弄混两种语法，再改用点语法</li>
</ul>
<blockquote>
<p>obj.name 等价于 obj[&lsquo;name&rsquo;]
obj.name 不等价于 obj[name]</p>
<p>简单来说，obj.name 这里的 <strong>name 是字符串，而不是变量</strong></p>
</blockquote>
<blockquote>
<p>let name = &lsquo;sam&rsquo;
此时 obj[name] 等价于 obj[&lsquo;sam&rsquo;] ，而不是 obj[&lsquo;name&rsquo;] 和 obj.name</p>
</blockquote>
<p>​</p>
<h4 id="考题">考题</h4>
<blockquote>
<p>区分变量<code> name</code> 和 常量字符串 <code>'name'</code></p>
</blockquote>
<p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">list</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;gender&#39;</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span><span class="mi">18</span><span class="p">,</span> <span class="nx">gender</span><span class="o">:</span><span class="s1">&#39;man&#39;</span><span class="p">}</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="o">???</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 使得 person 的所有属性被打印出来
</span></code></pre></td></tr></table>
</div>
</div><p>选项</p>
<ol>
<li>console.log(person.name)      ✘          // sam sam sam</li>
<li><strong>console.log(person[name])</strong>    ✔     // sam 18 man</li>
</ol>
<blockquote>
<p>区分 name 和 &lsquo;name&rsquo; 为什么这么重要</p>
<ul>
<li>因为如果你现在不搞清楚，那么你在学 Vue 的时候，会更加迷惑</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="修改或增加属性写属性">修改或增加属性（写属性）</h3>
<h4 id="直接赋值">直接赋值</h4>
<blockquote>
<p>直接赋值，name 属性已存在，就相当于修改属性值；name 属性不存在，就会新增这个属性，值为 sam</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">}</span> <span class="c1">// name 是字符串
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span> <span class="c1">// name 是字符串 ✔
</span><span class="c1"></span><span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span>  <span class="c1">// ✔
</span><span class="c1"></span>
<span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span> <span class="c1">// 错，因name为变量，值不一定等于&#39;name&#39;
</span><span class="c1"></span>
<span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;na&#39;</span><span class="o">+</span><span class="s1">&#39;me&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span>  <span class="c1">// ✔
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">key</span> <span class="o">=</span> <span class="s1">&#39;name&#39;</span><span class="p">;</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span>
<span class="kd">let</span> <span class="nx">key</span> <span class="o">=</span> <span class="s1">&#39;name&#39;</span><span class="p">;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">key</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span> <span class="c1">// 错，因为obj.key等价于obj[&#39;key&#39;]，相当于给obj增加了key属性 值为sam
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="批量赋值">批量赋值</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">}</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;123&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span> <span class="nx">gender</span><span class="o">:</span> <span class="s1">&#39;man&#39;</span><span class="p">})</span> 
<span class="c1">// name 属性已存在，就相当于修改属性值；name 属性不存在，就会新增这个属性，值为&#39;123&#39;
</span><span class="c1"></span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// {name:&#39;123&#39;, age: 18, gender: &#39;man&#39;}
</span></code></pre></td></tr></table>
</div>
</div><p>assign ：赋值的意思</p>
<p>Object.assign() ：是 ES6 新出的 API</p>
<p>​</p>
<p>​</p>
<h3 id="修改或增加共有属性">修改或增加共有属性</h3>
<blockquote>
<p>JS 特性：</p>
<ul>
<li>读取时，可以读取到（原型上的）共有属性。</li>
<li>写入时，只写在自己身上，不会影响（原型）共有属性</li>
</ul>
</blockquote>
<h4 id="无法通过自身修改或增加共有属性">无法通过自身修改或增加共有属性</h4>
<blockquote>
<p>原型上的属性，无法通过自身直接修改</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{},</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1">// 共有 toString 方法
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>    <span class="c1">// 只会在改 obj 自身属性，不会覆盖共用的 toString 方法
</span><span class="c1"></span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">toString</span>     <span class="c1">// &#39;xxx&#39;
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>   <span class="c1">// 报错 obj.toString is not a function
</span><span class="c1"></span>
<span class="nx">obj2</span><span class="p">.</span><span class="nx">toString</span>    <span class="c1">// ƒ toString() { [native code] }   还是在原型上的方法
</span><span class="c1"></span><span class="nx">obj2</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>  <span class="c1">// &#34;[object Object]&#34;
</span></code></pre></td></tr></table>
</div>
</div><h4 id="偏要修改或增加原型上的属性">偏要修改或增加原型上的属性</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span> <span class="c1">// 不推荐用 __proto__
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span> 
<span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">toString</span><span class="p">)</span>

<span class="c1">// obj.__proto__ 存的地址，等价于 window.Object.prototype 存的地址
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">window</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>这是 JS 非常危险的特型，一旦修改，会使得原型上的属性非常不可信 —— JS 的脆弱性</li>
<li><strong>一般来说，不要修改原型</strong>，会引起很多问题：代码崩溃/异常…</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="修改隐藏属性">修改隐藏属性</h3>
<h4 id="不推荐使用--__proto__-修改原型">不推荐使用 <code> __proto__</code> 修改原型</h4>
<p>例1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;sam&#39;</span><span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>   <span class="c1">// {name:&#34;sam&#34;, __proto__: Object}
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="kc">null</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>   <span class="c1">// {name:&#34;sam&#34;}    没有proto原型了，变成非常纯净的对象，不能调用任何功能
</span></code></pre></td></tr></table>
</div>
</div><p>例2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;sam&#39;</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">person2</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;jack&#39;</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">common</span> <span class="o">=</span> <span class="p">{</span><span class="nx">kind</span><span class="o">:</span> <span class="s1">&#39;human&#39;</span><span class="p">,</span> <span class="s1">&#39;国籍&#39;</span><span class="o">:</span> <span class="s1">&#39;中国&#39;</span><span class="err">，</span> <span class="nx">hairColor</span><span class="o">:</span> <span class="s1">&#39;black&#39;</span><span class="p">}</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">common</span>
<span class="nx">person2</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">common</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>上述，使用 <code> __proto__</code> 直接修改原型，不推荐，性能非常低</p>
</blockquote>
<p>​</p>
<h4 id="推荐使用-objectcreate-修改对象的原型">推荐使用 Object.create 修改对象的原型</h4>
<blockquote>
<p>规范的修改对象的原型，使用 Object.create  【功能：用于指定原型】</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;sam&#39;</span><span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// { __proto__:{name:&#39;sam&#39;} } 
</span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>用法 ↓</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">common</span> <span class="o">=</span> <span class="p">{</span><span class="nx">kind</span><span class="o">:</span> <span class="s1">&#39;human&#39;</span><span class="p">,</span> <span class="s1">&#39;国籍&#39;</span><span class="o">:</span> <span class="s1">&#39;中国&#39;</span><span class="err">，</span> <span class="nx">hairColor</span><span class="o">:</span> <span class="s1">&#39;black&#39;</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">common</span><span class="p">)</span>  <span class="c1">// 以common为原型对象，创建obj
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span> <span class="c1">// 点方法，挨个添加属性，或 批量修改/添加属性 Object.assign(obj,{ ... })
</span><span class="c1"></span><span class="p">...</span> 
</code></pre></td></tr></table>
</div>
</div><p>Object.create()  第二个参数，写法比较麻烦</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">common</span><span class="p">,</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="p">{</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span> <span class="p">}</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>  <span class="c1">// {name:&#39;sam&#39;, __proto__: Object}  =&gt; 
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>规范的写法：大概是，要改就一开始就改；别后来再改，如<code>person.__proto__ = common</code>  影响性能</p>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="总结">总结</h2>
<h3 id="删">删</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">delete</span> <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
<span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">obj</span> <span class="c1">// false  // in 用于判断某个对象中是否含这个属性，缺点：无法区分是自身的，还是原型上共有的
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span>  <span class="c1">// false  // 只有对象自身含有这个属性，才会返回 true
</span></code></pre></td></tr></table>
</div>
</div><h3 id="查">查</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// 目录形式，详细
</span><span class="c1"></span><span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="c1">// 记住这里的 name 是字符串
</span><span class="c1"></span><span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>  <span class="c1">// 记住这里的 name 是变量
</span></code></pre></td></tr></table>
</div>
</div><h3 id="改">改</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">改自身</span> <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;jack&#39;</span>
<span class="nx">批量改自身</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span><span class="nx">age</span><span class="o">:</span><span class="mi">18</span><span class="p">,</span> <span class="p">...})</span>
                          
<span class="nx">改某个共有属性</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">[</span><span class="s1">&#39;toString&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>  <span class="c1">// 强烈不推荐
</span><span class="c1"></span><span class="nx">改某个共有属性</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="s1">&#39;toString&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>

<span class="nx">换原型</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">common</span>  <span class="c1">// 强烈不推荐
</span><span class="c1"></span><span class="nx">换原型</span> <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">common</span><span class="p">)</span>

<span class="c1">// 注：所有 proto 代码都是强烈不推荐写的。学习时可以用用，但是工作中不要用
</span></code></pre></td></tr></table>
</div>
</div><h3 id="增">增</h3>
<p>基本同上，已有属性则改；没有属性则增。</p>
<blockquote>
<ul>
<li>查：属于读，可以读到原型链</li>
<li>改 和 增：属于写，只能改自身，不能改到原型</li>
</ul>
</blockquote>]]></description>
</item><item>
    <title>JS 的数据类型🧐</title>
    <link>http://samrks.github.io/javascript-something-about-data-type/</link>
    <pubDate>Thu, 27 Aug 2020 01:45:54 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-something-about-data-type/</guid>
    <description><![CDATA[<p>「如何存数字&amp;字符」「JS 的数据类型」「64位浮点数 」「变量声明 var / let / const」「类型转换」</p>
<p>​</p>
<h2 id="数据为什么需要类型">数据为什么需要类型</h2>
<h3 id="数字与字符串">数字与字符串</h3>
<blockquote>
<p>都是一，为什么要分 <code>1</code> 和 <code>'1'</code></p>
</blockquote>
<p>功能不同</p>
<ul>
<li>数字是数字，字符串是字符串，要严谨</li>
<li>数字能加减乘除，字符串不行</li>
<li>字符串能表示电话号码，数字不行</li>
</ul>
<p>存储形式不同</p>
<ul>
<li><strong>JS中，数字 number 是用64位浮点数的形式存储的</strong></li>
<li>JS中，字符串是用类似 UTF8 形式存储的（UCS-2)</li>
</ul>
<h2 id="如何存数字">如何存数字</h2>
<blockquote>
<p>进制转二进制即可</p>
</blockquote>
<h3 id="二进制">二进制</h3>
<p>10转2</p>
<ul>
<li>31变成二进制：</li>
<li>经过一番尝试：</li>
<li>所以31（十进制）= 01111（二进制）</li>
<li>不是套公式吗？程序员从来不套公式 🙃</li>
</ul>
<p>2转10</p>
<ul>
<li>
<p>100011变成十进制</p>
</li>
<li>
<p>每一位乘以2的N次方，然后加起来即可</p>
<p></p>
</li>
</ul>
<h3 id="用十六进制表示二进制">用十六进制表示二进制</h3>
<ul>
<li>
<p>为什么用十六进制，因为二进制写起来太慢了：011110001011010</p>
</li>
<li>
<p>记住 8 4 2 1 对应 X X X X</p>
</li>
<li>
<p><strong>从右往左</strong>每四位改写成一位：<font color="red">011</font><font color="green">1100</font><font color="orange">0101</font><font color="blue">1010</font></p>
<p></p>
</li>
<li>
<p>得到 3，12，5，10；</p>
</li>
<li>
<p>16进制中，把大于9的数字改为ABCDEF</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">0123456789</span> <span class="nx">A</span>  <span class="nx">B</span>  <span class="nx">C</span>  <span class="nx">D</span>  <span class="nx">E</span>  <span class="nx">F</span>
           <span class="mi">10</span> <span class="mi">11</span> <span class="mi">12</span> <span class="mi">13</span> <span class="mi">14</span> <span class="mi">15</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>于是得到 3C5A，你也可以用计算器的程序员模式</p>
<p></p>
</li>
<li>
<p>HEX表示16进制，BIN表示2进制</p>
</li>
<li>
<p>OCT表示8进制，DEC表示10进制</p>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="如何存字符">如何存字符</h2>
<blockquote>
<p>转成数字即可（但字符有几万个，数字只有0-9），解决办法就是把所有字符都编号</p>
<p>注意，<code>&quot;1&quot;</code> 不能用 <code>1</code> 来表示</p>
</blockquote>
<h3 id="用-0--127-表示所有符号">用 0 ~ 127 表示所有符号</h3>
<p>（2^7^ = 128）</p>
<ul>
<li>0 表示结束字符</li>
<li>10 表示换行</li>
<li>13 表示回车</li>
<li>32 表示空格</li>
<li>33 到 47 表示标点</li>
<li><strong>48 到 57 表示数字符号</strong>（存 0 用 48 表示）</li>
<li>65 到 90 表示大写字母（存 A 用 65 表示）</li>
<li>97 到 122 表示小写字母（存 a 用 97 表示）</li>
<li>127 表示删除键</li>
</ul>
<p></p>
<h3 id="中文怎么表示">中文怎么表示？</h3>
<blockquote>
<p>1990-1995年左右，中国开始有人买得起电脑了</p>
</blockquote>
<p>简单，还是编号</p>
<p><em><strong>中国国家标准局</strong></em>来编，名称为「国标23121」</p>
<p>​</p>
<h4 id="用-0000--ffff-表示汉字">用 0000 ~ FFFF 表示汉字</h4>
<blockquote>
<p>用两个字节，表示一个汉字（一个字节是8个0/1位）</p>
</blockquote>
<ul>
<li>一个 16 进制数是4个0/1位</li>
<li>FFFF 就是 4x4=16 位，也就是两个字节</li>
<li>最多收录 2^16=65536 个字符</li>
<li>但只收录了6000多常用汉字、西文字母和日文假名（没有收录生僻字、繁体字、韩文…）
<ul>
<li>
<p>「你」的 GB2312 编号为 C4E3</p>
</li>
<li>
<p>「牛」的 GB2312 编号为 C5A3</p>
<p></p>
</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="生僻字">生僻字</h3>
<blockquote>
<p>随着计算机的普及，政府、学习开始采用计算机管理录入信息</p>
</blockquote>
<p><strong>中国人的名字里有生僻字！</strong></p>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">李瓛</span> <span class="p">=&gt;</span> <span class="nx">李</span><span class="o">*</span>
<span class="nx">陶喆</span> <span class="p">=&gt;</span> <span class="nx">陶吉吉</span>
</code></pre></td></tr></table>
</div>
</div><p>怎么表示生僻字、繁体字、韩文呢，之前的忘了编进去</p>
<blockquote>
<p>微软出手了，推出了一个国标扩展，简称 GBK</p>
</blockquote>
<p>​</p>
<h4 id="gbk-国标扩httpszhwikipediaorgwikie6b189e5ad97e58685e7a081e689a9e5b195e8a784e88c83">GBK <a href="https://zh.wikipedia.org/wiki/%E6%B1%89%E5%AD%97%E5%86%85%E7%A0%81%E6%89%A9%E5%B1%95%E8%A7%84%E8%8C%83" target="_blank" rel="noopener noreffer">国标扩</a></h4>
<ul>
<li>含 21886 个汉字和图形符号</li>
<li>收录了中日韩使用的几乎所有汉字</li>
<li>完全兼容 GB2312</li>
</ul>
<p>依然使用 16 位（两字节）</p>
<ul>
<li>后来国标局推出 GB18030 想取代 GBK</li>
<li>但 GB18030 不兼容 GB2312，导致没人使用 GB18030，而是一直使用国标扩</li>
</ul>
<p></p>
<p>​</p>
<h3 id="泰文藏文">泰文、藏文</h3>
<p></p>
<blockquote>
<p>继续编号，这回一次性解决全世界需求</p>
<p>—— 推出 万国码 Unicode 字符集</p>
</blockquote>
<p>​</p>
<h3 id="万国码-unicode">万国码 Unicode</h3>
<p>优点</p>
<ul>
<li>
<p>已收录13万字符（大于16位），全世界通用</p>
</li>
<li>
<p>以后还会继续扩充，不会停止</p>
</li>
<li>
<p>最新版(2019)只添加了一个字 —— 令和的合体字 （日本的新元号）</p>
<ul>
<li>
<p>日文有很多合体字。如，「株式会社」被合成一个字；元号也都被合成一个字</p>
<p></p>
</li>
</ul>
</li>
</ul>
<p>缺点</p>
<ul>
<li>两个字节不够用，每个字符要用三个及以上字节</li>
<li>这样所有文件都扩大50%，不划算</li>
<li>那怎么办？
<ul>
<li>虽然用Unicode，但存的时候偷懒，这样行不行</li>
<li>UTF-8 就被发明出来了，还真行</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="utf-8">UTF-8</h3>
<blockquote>
<p>Unicode 是字符集，UTF-8是编码形式</p>
</blockquote>
<h4 id="鸡贼的存法">鸡贼的存法</h4>
<blockquote>
<p>英文用 1 个字节存，中文用 3 个字节存</p>
</blockquote>
<p>存储「a」</p>
<ul>
<li>a 对应的 Unicode 编号为 97，十六进制为61</li>
<li>Unicode 直接存：<font color="blue">00000000</font><font color="red">000000000</font>1100001</li>
<li>UTF-8 偷懒存法：01100001</li>
<li>UTF-8 使得所有字母，从三字节变一字节，比 GBK 还省</li>
</ul>
<p>存储「你」</p>
<ul>
<li>你 对应的 Unicode 编号为 4F60（16位）</li>
<li>Unicode 直接存：<font color="blue">00000000</font><font color="red">01001111</font>01100000</li>
<li>UTF-8 偷懒存法：<font color="blue">11100100</font><font color="red">10111101</font>10100000</li>
<li>还是三字节，没有省，但是字母都能省一点</li>
</ul>
<p>UTF-8 中的 8 的意思是</p>
<ul>
<li>最少可用 8 位，存一个字符。（可能用 8/16/24 位存一个字符）</li>
</ul>
<h4 id="utf-8-的规则">UTF-8 的规则</h4>
<blockquote>
<p>这一块看不懂就跳过，反正不考。记住去餐馆排队的比喻即可</p>
</blockquote>
<p>以「你a」为例</p>
<ul>
<li>11100100 10111101 10100000 01100001</li>
<li>如何知道上述内容表示什么字符？</li>
<li>读 8 位信息 1110<font color="orange">0100</font></li>
<li><strong>发现开头有3个1，就认为这个字符有3个八位</strong></li>
<li>于是再往后读两个 8 位信息 10<font color="orange">111101</font> 10<font color="orange">100000</font>
<ul>
<li>10 表示当前这8位是跟着前面一起的</li>
</ul>
</li>
<li>前面的 10 不要，其他合起来，得 <font color="orange">0100 111101 100000</font></li>
<li><strong>前面补8个0</strong>，这就还原为 Unicode 的「你」了：
00000000<font color="red">01001111</font><font color="green">01100000</font></li>
<li>再读 8 位信息 01100001</li>
<li><strong>发现开头是 0，就认为这个字符只占 8 位</strong></li>
<li><strong>前面补16个0</strong>，这就还原为 Unicode 的「a」 了：
0000000000000000<font color="red">01100001</font></li>
</ul>
<blockquote>
<p>上面 4 个字节，存了两个字符。UTF-8 平均每个字符需要 2 个字节</p>
<p>Unicode 每个字符至少占 3 个字节，UTF-8 的存储方法更节省空间</p>
</blockquote>
<p>​</p>
<h3 id="终于搞清如何存字符了">终于搞清如何存字符了</h3>
<blockquote>
<p>全世界的字符，都是先把字符进行编号，然后存下编号（10进制变2进制）</p>
</blockquote>
<p>​</p>
<h2 id="数字1-和-字符1-的区别">数字1 和 字符1 的区别</h2>
<blockquote>
<p>功能不同：数字1 可以进行运算，加减乘除…  （ 字符只能相加 =&gt; 拼接字符 ）</p>
<p>存储形式不同：数字是转为二进制直接存储，字符需要经过编码变成数字再存储</p>
</blockquote>
<p>数字1 ，最终存的是 1    </p>
<p>字符1 ，最终存的是 49</p>
<p>​</p>
<blockquote>
<p>既然字符也是存的数字，那么计算机怎么知道存的是字符还是数字呢？</p>
</blockquote>
<p>答：计算机并不知道这段0/1是字符还是数字。</p>
<ul>
<li>但计算机可以通过看文件格式判断，如果是 .txt 那就全都是字符串，如果在 Excel 中存一个1 ，就是数字1</li>
<li>计算机并不知道用户存的0/1到底什么意思，但可以通过其他辅助信息得知（如后缀）或者其他方式约定（比如在文件开头约定：0表示数字，1表示字符串，2表示布尔值…这种方式）。</li>
<li>http 只支持字符串，在 html 中写一个1，就是字符串1</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="js-中的数据类型-">JS 中的数据类型 💡</h2>
<p>7 种（大小写无所谓）</p>
<ol>
<li>数字 number</li>
<li>字符串 string</li>
<li>布尔 bool</li>
<li>符号 symbol（JS 从 ruby 抄的，基本没人用）</li>
<li>空 undefined</li>
<li>空 null</li>
<li>对象 object</li>
</ol>
<ul>
<li><strong>总结：四基两空一对象</strong></li>
<li>bigint（新增第8种）</li>
</ul>
<p>以下不是数据类型</p>
<ul>
<li>数组、函数、日期、正则…</li>
<li>它们都是特殊的对象 object，所以它们都属于object</li>
</ul>
<p>​</p>
<h3 id="数字-number">数字 number</h3>
<blockquote>
<p>number 是由64位(0/1)浮点数组成的</p>
<ul>
<li>JS 的 number 全都是以小数（浮点数）的形式存储的，没有单独的整数</li>
</ul>
</blockquote>
<h4 id="写法">写法</h4>
<ul>
<li>整数写法 1</li>
<li>小数写法 0.1</li>
<li>科学计数法 1.23e4  （1.23×10^4^ ）</li>
<li>八进制写法（用得少）
<ul>
<li>0 或 00 或 0o 开头，就是 8进制</li>
<li>0123 或 00123 或 0o123</li>
</ul>
</li>
<li>十六进制写法  0x3F 或 0X3F （用得少）
<ul>
<li>0x 或 0X 开头</li>
</ul>
</li>
<li>二进制写法  0b11 或 0B11（用得少）
<ul>
<li>0b 或 0B 开头</li>
</ul>
</li>
</ul>
<h4 id="特殊值">特殊值</h4>
<ol>
<li>
<p>正0和负0</p>
<ul>
<li>
<p>0分三种：0、+0、-0</p>
</li>
<li>
<p>都是 0，基本没什么区别</p>
</li>
<li>
<p>只在一种情况有区别（要严谨）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">1</span><span class="o">/</span><span class="mi">0</span> <span class="nx">或</span> <span class="mi">1</span><span class="o">/+</span><span class="mi">0</span>   <span class="p">=&gt;</span> <span class="kc">Infinity</span>
<span class="mi">1</span><span class="o">/-</span><span class="mi">0</span>          <span class="p">=&gt;</span> <span class="o">-</span><span class="kc">Infinity</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>无穷大</p>
<ul>
<li>Infinity、+Infinity、-Infinity</li>
</ul>
</li>
<li>
<p>无法表示的数字</p>
<ul>
<li>
<p>NaN (Not a Number)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">0</span><span class="o">/</span><span class="mi">0</span>  <span class="p">=&gt;</span>  <span class="kc">NaN</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>但 NaN 仍是一个数字</p>
</li>
<li>
<p>NaN 永远不会和另一个 NaN 相等</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kc">NaN</span> <span class="o">==</span> <span class="kc">NaN</span>    <span class="c1">// false
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ol>
<h4 id="64位浮点数">64位浮点数</h4>
<blockquote>
<h4 id="网道教程httpswangdoccomjavascripttypesnumberhtml"><a href="https://wangdoc.com/javascript/types/number.html" target="_blank" rel="noopener noreffer">网道教程</a></h4>
<p>JavaScript 内部，<strong>所有数字</strong>都是以64位浮点数形式储存，即使整数也是如此。所以，1与1.0是相同的，是同一个数。 <strong><code>1 === 1.0 // true</code></strong></p>
<p>这就是说，JavaScript 语言的底层根本没有整数，所有数字都是小数（64位浮点数）。容易造成混淆的是，某些运算只有整数才能完成，此时 JavaScript 会自动把64位浮点数，转成32位整数，然后再进行运算，参见《运算符》一章的“位运算”部分。</p>
<p>由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mf">0.1</span> <span class="o">+</span> <span class="mf">0.2</span> <span class="o">===</span> <span class="mf">0.3</span>
<span class="c1">// false
</span><span class="c1"></span>
<span class="mf">0.3</span> <span class="o">/</span> <span class="mf">0.1</span>
<span class="c1">// 2.9999999999999996
</span><span class="c1"></span>
<span class="p">(</span><span class="mf">0.3</span> <span class="o">-</span> <span class="mf">0.2</span><span class="p">)</span> <span class="o">===</span> <span class="p">(</span><span class="mf">0.2</span> <span class="o">-</span> <span class="mf">0.1</span><span class="p">)</span>
<span class="c1">// false
</span></code></pre></td></tr></table>
</div>
</div><p>根据国际标准 IEEE 754，JavaScript 浮点数的64个二进制位，从最左边开始，是这样组成的。</p>
<ul>
<li>第1位：符号位，0表示正数，1表示负数
第2位到第12位（共11位）：指数部分
第13位到第64位（共52位）：小数部分（即有效数字）</li>
</ul>
<p>符号位决定了一个数的正负，指数部分决定了数值的大小，小数部分决定了数值的精度。</p>
<p>&hellip;</p>
</blockquote>
<blockquote>
<p>为什么说【 number 是由 64位(0/1)浮点数组成的】 ？</p>
<p>（看↓图）一共（1+11+52）64 位，就可以表示 js 中的所有数字，包括小数、NaN …</p>
</blockquote>
<p>JS数字的存储形式</p>
<ul>
<li>浮点就是浮动的点，意思就是小数点会乱动</li>
<li>123.456  可以表示为  1.23456 × 10^2^  ，也可以表示为  12345.6 × 10^-2^（0.01）</li>
<li>如果小数点可以浮动，那就是<strong>浮点数</strong></li>
<li>也有<u>定点数</u>，就是指 有效数位、指数数位 都是固定的（少用）</li>
</ul>
<p>​</p>
<p></p>
<p>​</p>
<p>64位存储一个 number</p>
<ul>
<li>符号占1位
<ul>
<li>浮点数的第一位，0表示正号，1表示负号。「+0」的第一位是 0，「-0」的第一位是 1</li>
</ul>
</li>
<li>指数占11位
<ul>
<li>指的是 10 的 n 次方，把这个 n 存到这11位里（11位可以存2048，因为有正负所以范围是 -1023~1024）</li>
</ul>
</li>
<li>有效数字占52位（开头的 1. 省略）
<ul>
<li>10进制的小数，第一位永远可以为 1.xxx  ，如 0.123  =&gt; 1.23 × 10^-1^</li>
</ul>
</li>
</ul>
<p>​</p>
<p>例：存 0.5</p>
<ul>
<li>
<p>先将0.5转为二进制（看0.5是多少个二分之一，凑）=&gt;  <font color="red">1.0 × 2^-1^  </font></p>
</li>
<li>
<p>0.5是1个二分之一，所以 0.5 的二进制是 <font color="red">0.1</font></p>
</li>
<li>
<p>0.1存成64位形式  =&gt;   <font color="red">1.0 × 2^-1^ </font></p>
<table>
<thead>
<tr>
<th>正：0，负：1</th>
<th>指数部分（有正负）</th>
<th>有效数字（省掉第一个1.）</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>-1</td>
<td>0</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>​</p>
<p>例：存 0.625</p>
<ul>
<li>
<p>看0.625有多少个二分之一（转为二进制，凑一下）</p>
</li>
<li>
<p>0.625 = 0.5 + 0.125 = 1/2 + 1/8 = <font color="red">1×2^-1^ + 1×2^-3^ </font></p>
</li>
<li>
<p>所以 0.625 表示成 二进制就是 <font color="red">0.101</font></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mf">0.101</span>
  <span class="err">↑</span> <span class="err">↑</span>
 <span class="o">-</span><span class="mi">1</span> <span class="o">-</span><span class="mi">3</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>0.101存成 64位形式  =&gt;  <font color="red">1.01 × 2^-1^ </font></p>
<table>
<thead>
<tr>
<th>正：0，负：1</th>
<th>指数部分（有正负）</th>
<th>有效数字（省掉第一个1.）</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>-1</td>
<td>01</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>​</p>
<h4 id="范围和精度">范围和精度</h4>
<p>范围（忽略符号位）</p>
<ul>
<li>指数拉满、有效数字拉满，得到最大二进制数字</li>
<li>Number.MAX_VALUE: 1.7976931348623157e+308</li>
<li>指数负方向拉满、有效数字最小 1，得到最小值</li>
<li>Number.MIN_VALUE: 5e-324</li>
</ul>
<p>精度（有效数字）</p>
<ul>
<li>最多只能到 52 + 1 个二进制位表示有效数字</li>
<li>2^53^ 对应的十进制是 9 后面 15 个零</li>
<li>所以 15 位有效数字都能精确表示</li>
<li>16 位有效数字如果小于 90 开头，也能精确表示</li>
<li>9110000000000001 就存不下来</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="字符串-string">字符串 string</h3>
<blockquote>
<p>字符串 string 在 JS 中，每个字符占两个字节（定长）。是阉割版的 UTF8。</p>
<ul>
<li>因为 1995 年发布 JS ，当时 Unicode 并未流行，甚至还没有推出第一个可用版本。</li>
</ul>
</blockquote>
<h4 id="写法-1">写法</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">-</span> <span class="nx">单引号</span> <span class="s1">&#39;你好&#39;</span>
<span class="o">-</span> <span class="nx">双引号</span> <span class="s2">&#34;你好&#34;</span>
<span class="o">-</span> <span class="nx">反引号</span> <span class="sb">`你好`</span>  <span class="p">(</span><span class="nx">ES6</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>注意</p>
<ul>
<li>引号不属于字符串的一部分，就像书名号不属于书名的一部分一样</li>
<li>如果要在单引号里面包含单引号怎么办?</li>
</ul>
<p><strong>错误写法</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;it&#39;</span><span class="nx">s</span> <span class="nx">ok</span><span class="err">&#39;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>JS 引擎会认为  <code>'it'</code>  就结束了，后面的看不懂，可能就会报错</li>
<li>Chrome 中这种写法如果不报错，那就是 Chrome 的误导💩🤬</li>
</ul>
<p><strong>正确写法</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;it\&#39;s ok&#39;</span>  <span class="c1">// 这就是转义
</span><span class="c1"></span><span class="s2">&#34;it&#39;s ok&#34;</span>
<span class="sb">`it&#39;s ok`</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="转义">转义</h4>
<p>用另一种写法表示你想要的东西</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">\&#39;       表示 &#39;
\&#34;       表示 &#34;
\n       表示 换行
\r       表示 回车
\t       表示 tab制表符
\\       表示 \
\uFFFF   表示对应的 Unicode 字符
\xFF     表示前256个 Unicode 字符（16进制）
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;\u4f60&#39;</span>  <span class="p">=&gt;</span>  <span class="s2">&#34;你&#34;</span>
<span class="s1">&#39;\x31&#39;</span>    <span class="p">=&gt;</span>  <span class="s2">&#34;1&#34;</span>   <span class="err">（</span><span class="mi">10</span><span class="nx">进制的49转16进制为</span> <span class="mi">31</span><span class="err">）</span>
<span class="s1">&#39;\x32&#39;</span>    <span class="p">=&gt;</span>  <span class="s2">&#34;2&#34;</span>
<span class="s1">&#39;\x33&#39;</span>    <span class="p">=&gt;</span>  <span class="s2">&#34;3&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="多行字符串">多行字符串</h4>
<p>如果你想要在字符串里<strong>回车</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">s</span><span class="o">=</span><span class="sb">`这样是
</span><span class="sb">可以的
</span><span class="sb">用【反引号】很容易做到`</span>
</code></pre></td></tr></table>
</div>
</div><p>以前没有反引号的时候</p>
<ul>
<li>写起来很麻烦，是比较古老的知识，想了解可以看<a href="https://wangdoc.com/javascript/types/string.html" target="_blank" rel="noopener noreffer">阮一峰的网道教程</a></li>
</ul>
<p>​</p>
<h4 id="字符串的属性">字符串的属性</h4>
<blockquote>
<p>“ 等等，对象才有属性，为什么字符串也有属性 ”</p>
<ul>
<li>记住一点：只有对象才有属性，字符串、数字、布尔是没有属性这么一说的</li>
<li>那为什么这里讲「字符串的属性」？（源于对象，学完对象才能解答）</li>
</ul>
</blockquote>
<h5 id="字符串的长度">字符串的长度</h5>
<ul>
<li>
<p>string.length</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;123&#39;</span><span class="p">.</span><span class="nx">length</span>    <span class="c1">// 3 
</span><span class="c1"></span><span class="s1">&#39;\n\t\r&#39;</span><span class="p">.</span><span class="nx">length</span> <span class="c1">// 3 （1个换行、1个tab、1个回车）
</span><span class="c1"></span><span class="s1">&#39;\\\\\\&#39;</span><span class="p">.</span><span class="nx">length</span> <span class="c1">// 3 （2个反斜杠表示1个\）
</span><span class="c1"></span><span class="s1">&#39;&#39;</span><span class="p">.</span><span class="nx">length</span>       <span class="c1">// 0 （空字符串）
</span><span class="c1"></span><span class="s1">&#39; &#39;</span><span class="p">.</span><span class="nx">length</span>      <span class="c1">// 1 （1个空格字符串）
</span><span class="c1"></span><span class="s1">&#39;  &#39;</span><span class="p">.</span><span class="nx">length</span>     <span class="c1">// 2 （2个空格字符串）
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h5 id="字符串的下标">字符串的下标</h5>
<p>通过下标读取字符</p>
<ul>
<li>
<p>string[index]</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">s</span><span class="o">=</span><span class="s1">&#39;hello&#39;</span>
<span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  <span class="c1">// &#34;h&#34;
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>注意 index 从0开始</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="nx">是第一个字符</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>注意 index 不到 length</p>
<p>一个字符串的最大 index 为 length - 1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">s</span><span class="o">=</span><span class="s1">&#39;hello&#39;</span>
<span class="nx">s</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="c1">// undefined  居然不报错 
</span><span class="c1"></span><span class="nx">s</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="c1">// &#39;o&#39;
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h4 id="base64-转码">base64 转码</h4>
<p>window.btoa</p>
<ul>
<li>正常字符串转为Base64编码的字符串</li>
</ul>
<p>window.atob</p>
<ul>
<li>Base64 编码的字符串转为原来的字符串</li>
</ul>
<p>一般用来隐藏招聘启事里的简历</p>
<ul>
<li>
<p>邮箱：YWJjZGVmZ0BnbWFpbC5jb20=</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">编码</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">btoa</span><span class="p">(</span><span class="s1">&#39;abcdefg@gmail.com&#39;</span><span class="p">)</span>   <span class="c1">// YWJjZGVmZ0BnbWFpbC5jb20=
</span><span class="c1"></span><span class="nx">解码</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">atob</span><span class="p">(</span><span class="s1">&#39;YWJjZGVmZ0BnbWFpbC5jb20=&#39;</span><span class="p">)</span>  <span class="c1">// abcdefg@gmail.com
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>有时候也用来自欺欺人</p>
<ul>
<li>所谓的「加密」，也就能骗过一部分外行</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="布尔-boolean">布尔 boolean</h3>
<blockquote>
<p>真或假</p>
<p>只有两个值：true /  false   （全都小写）</p>
</blockquote>
<h4 id="下列运算符会得到-bool-值">下列运算符会得到 bool 值</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">否定运算</span>  <span class="o">!</span><span class="nx">value</span>
<span class="nx">相等运算</span>  <span class="mi">1</span><span class="o">==</span><span class="mi">2</span><span class="err">、</span><span class="mi">1</span><span class="o">!=</span><span class="mi">2</span><span class="err">、</span><span class="mi">3</span><span class="o">===</span><span class="mi">4</span><span class="err">、</span><span class="mi">3</span><span class="o">!==</span><span class="mi">4</span>
<span class="nx">比较运算</span>  <span class="mi">1</span><span class="o">&gt;</span><span class="mi">2</span><span class="err">、</span><span class="mi">1</span><span class="o">&gt;=</span><span class="mi">2</span><span class="err">、</span><span class="mi">3</span><span class="o">&lt;</span><span class="mi">4</span><span class="err">、</span><span class="mi">3</span><span class="o">&lt;=</span><span class="mi">4</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="if-配-bool">if 配 bool</h4>
<p>if 语句常常需要判断真假</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nx">value</span><span class="p">){...}</span> <span class="k">else</span> <span class="p">{...}</span>
</code></pre></td></tr></table>
</div>
</div><p>问题来了</p>
<ul>
<li>如果 value 是 bool 值还好说</li>
<li>如果 value 不是 bool 值咋办，谁真谁假
<ul>
<li>1 是真还是假，0 是真还是假</li>
<li><code>'1' </code>是真还是假，<code>'0'</code> 是真还是假</li>
</ul>
</li>
</ul>
<h4 id="五个-falsy-值">五个 falsy 值</h4>
<p>falsy 就是相当于 false，但又不是 false 的值</p>
<p>分别是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kc">undefined</span> 
<span class="kc">null</span>  
<span class="mi">0</span>  
<span class="kc">NaN</span>
<span class="s1">&#39;&#39;</span>     <span class="c1">// &#39;&#39;和&#39; &#39;不是一个玩意再次声明，请保持严谨  
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>整个 JavaScript 中，除了上述 5 个 falsy 值 和 false 本身（6个假值）之外</p>
<p>其他任何值都是【真值】，包括数组、函数、对象…</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="undefined-和-null">undefined 和 null</h3>
<blockquote>
<p>两种空类型，空空如也</p>
</blockquote>
<h4 id="为什么有两个空">为什么有两个空</h4>
<ul>
<li>这就是 JS 的原创（💩）之处</li>
<li>其他任何一种语言，都只有一个空类型</li>
</ul>
<h4 id="区别">区别</h4>
<p>没有本质区别</p>
<p>细节一</p>
<ul>
<li>如果一个变量声明了，但没有赋值，那么默认值就是 undefined，而不是 null</li>
</ul>
<p>细节二</p>
<ul>
<li>如果一个函数，没有写 return，那么默认 return undefined，而不是 null</li>
</ul>
<p>细节三</p>
<ul>
<li>前端程序员习惯上，把非对象的空值写为 undefined，把对象的空值写为 null</li>
<li>但仅仅是习惯上而已</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="symbol-符号">symbol 符号</h3>
<blockquote>
<p>不怎么常用的数据类型（大概率完全不会用到）</p>
<p>直接看<a href="https://zhuanlan.zhihu.com/p/22652486" target="_blank" rel="noopener noreffer">文章</a>吧</p>
</blockquote>
<p>更详细更权威的知识参考下面的自学链接。</p>
<p>自学链接：</p>
<p>MDN： <a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="noopener noreffer">Symbol - JavaScript</a></p>
<p>阮一峰：<a href="https://link.zhihu.com/?target=http%3A//es6.ruanyifeng.com/%23docs/symbol" target="_blank" rel="noopener noreffer">ECMAScript 6入门</a></p>
<p>​</p>
<p>​</p>
<h3 id="bigint-20206-新增">bigint （2020.6 新增）</h3>
<blockquote>
<p>2020 年 6 月 JS 新增了一种类型：bigint</p>
<p>关于 bigint 的详细介绍，请看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt" target="_blank" rel="noopener noreffer">MDN</a>。</p>
</blockquote>
<p>目前 bigint 用得很少。面试也基本不考，工作中也较少用到。因为太新了。</p>
<p>​</p>
<p>​</p>
<h2 id="变量声明-var--let--const--">变量声明 var / let / const  ⭐️</h2>
<blockquote>
<p>强烈推荐阅读：《<a href="https://zhuanlan.zhihu.com/p/28140450" target="_blank" rel="noopener noreffer">我用了两个月的时间才理解 let</a>》</p>
</blockquote>
<h3 id="三种声明方式">三种声明方式</h3>
<ol>
<li><code>var a=1</code></li>
<li><code>let a=1</code></li>
<li><code>const a=1</code></li>
<li><code>a=1</code></li>
</ol>
<h4 id="区别-1">区别</h4>
<ol>
<li>var 是过时的、不好用的方式</li>
<li>let 是新的，更合理的方式</li>
<li>const 是声明时必须赋值，且不能再改的方式</li>
<li>最后这种方式是错误的，不准这样声明</li>
</ol>
<h4 id="var-变量提升">var 变量提升</h4>
<ul>
<li>押题时再讲，有兴趣可以提前看<a href="https://wangdoc.com/javascript/basic/grammar.html#%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87" target="_blank" rel="noopener noreffer">网道教程</a></li>
</ul>
<p>​</p>
<h3 id="var-声明">var 声明</h3>
<p>直接跳过</p>
<ul>
<li>我们写代码不用 var</li>
<li>面试押题前单独讲解</li>
</ul>
<p>​</p>
<h3 id="let-声明">let 声明</h3>
<p>规则（特点）</p>
<ol>
<li>遵循<strong>块作用域</strong>，即：使用范围不能超出 { }</li>
<li>不能重复申明</li>
<li>可以赋值，也可以不赋值</li>
<li>必须先声明，再使用。否则报错</li>
<li>全局声明的 let 变量，不会变成 window 的属性</li>
<li>for 循环配合 let 有奇效</li>
</ol>
<p>例 1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 遵循块作用域，使用范围不能超出{}
</span><span class="c1"></span><span class="p">{</span>
  <span class="kd">let</span> <span class="nx">b</span><span class="o">=</span><span class="mi">1</span>  <span class="c1">// let声明的b只能作用在声明的这个{}里面
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>   <span class="c1">// 1
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>   <span class="c1">// Uncaught ReferenceError: b is not defined // 报错：b未被定义
</span></code></pre></td></tr></table>
</div>
</div><p>例 2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">2</span> <span class="c1">// Uncaught SyntaxError: Identifier &#39;a&#39; has already been declared  // 报错：标识符a已被声明
</span></code></pre></td></tr></table>
</div>
</div><p>不能重复声明：在同一个作用域，只能有一个 a</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="p">{</span>
  <span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">2</span>   <span class="c1">// 这样是可以的。因为a是在{}中的，与{}块外面的a不算重复声明
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>例 3</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span>   <span class="c1">// 声明时可以赋值，也可以不赋值
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>  <span class="c1">// undefined
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="kc">true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>例 4</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 必须先声明，再使用，否则报错
</span><span class="c1"></span><span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>  <span class="c1">// Uncaught ReferenceError: Cannot access &#39;b&#39; before initialization
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">b</span><span class="o">=</span><span class="mi">1</span>
<span class="p">}</span>
<span class="c1">// 报错：不能访问 b 在初始化之前
</span></code></pre></td></tr></table>
</div>
</div><p>例 5</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 全局声明的 let 变量，不会变成 window 的属性
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">abc</span><span class="o">=</span><span class="s1">&#39;abc&#39;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">abc</span><span class="p">)</span>  <span class="c1">// undefined
</span><span class="c1"></span>
<span class="kd">var</span> <span class="nx">abc</span> <span class="o">=</span> <span class="s1">&#39;abc&#39;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">abc</span><span class="p">)</span>  <span class="c1">// &#39;abc&#39;  
</span><span class="c1">// 这其实是 var 的 bug 。为什么声明变量会变成 window 上的属性？这是var强加的
</span><span class="c1">// let就改掉这个bug了，let就是单纯声明变量，不做多余操作
</span></code></pre></td></tr></table>
</div>
</div><p>例 6</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="mi">0</span><span class="p">)</span>   <span class="c1">// 5 5 5 5 5
</span><span class="c1"></span><span class="p">}</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="mi">0</span><span class="p">)</span>   <span class="c1">// 0 1 2 3 4 
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="const-声明">const 声明</h3>
<p>规则</p>
<ul>
<li>
<p>跟 let 相同的点</p>
<ul>
<li>遵循 { } 块作用域</li>
<li>不能重复声明</li>
<li>先声明后使用</li>
<li>不会变成 window 属性</li>
</ul>
</li>
<li>
<p>跟 let 只有一条不同：<strong>声明时就要赋值，赋值后不能改</strong></p>
<p>const 声明的是一个 只读变量，也叫做「常量」</p>
</li>
</ul>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// const声明变量，声明时不赋值，就会报错
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">i</span>  
<span class="c1">// Uncaught SyntaxError: Missing initializer in const declaration // 报错：const声明中缺少初始化
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 声明后，又重新赋值，会报错
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="mi">100</span> 
<span class="nx">i</span><span class="o">=</span><span class="mi">101</span> <span class="c1">// Uncaught TypeError: Assignment to constant variable // 报错：赋值给常量
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// for循环中，修改变量值，会报错
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// Uncaught TypeError: Assignment to constant variable // 报错：赋值给常量
</span><span class="c1"></span>  <span class="nx">setTimeout</span><span class="p">(()=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="mi">0</span><span class="p">)</span>  <span class="c1">// 2
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h3 id="指定值同时也指定了类型">指定值，同时也指定了类型</h3>
<blockquote>
<p>变量声明</p>
<ul>
<li>指定了<strong>值</strong>，同时也指定了<strong>类型</strong></li>
<li>但是值和类型都可以随意变化</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>  <span class="c1">// number类型
</span><span class="c1"></span><span class="nx">a</span><span class="o">=</span><span class="mi">2</span>
<span class="nx">a</span><span class="o">=</span><span class="s1">&#39;字符串&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="name-和-name-的区别">name 和 &lsquo;name&rsquo; 的区别</h2>
<h3 id="name-是变量">name 是变量</h3>
<ul>
<li>变量，意味着「值」「类型」可变，可能是 &lsquo;name&rsquo;，也可能是 &lsquo;hello&rsquo;</li>
<li>变量，存在内存的「不知道什么区」</li>
</ul>
<h3 id="name-是字符串常量">&lsquo;name&rsquo; 是字符串、常量</h3>
<ul>
<li>「常量」就是不变量</li>
<li>&lsquo;name&rsquo; 只能是 &lsquo;name&rsquo; ，不能是其他值</li>
<li>字符串，存在「Stack 区」</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="类型转换--">类型转换  ⚡️</h2>
<h3 id="number--string">number =&gt; string</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">String</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>  <span class="c1">// 前端通常不会用这种写法，太麻烦了
</span><span class="c1"></span><span class="nx">n</span> <span class="o">+</span> <span class="s1">&#39;&#39;</span>     <span class="c1">// 前端都是用这种
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nx">n</span><span class="p">))</span>  <span class="c1">// 1 [黑色字符串]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span>       <span class="c1">// 1 [黑色字符串]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="o">+</span><span class="nx">n</span><span class="p">)</span>       <span class="c1">// 1 [黑色字符串]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>          <span class="c1">// 1 [蓝色数字]
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>JS bug</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">String</span><span class="p">(</span><span class="mi">1000000</span><span class="p">)</span>  <span class="c1">// &#34;1000000&#34;
</span><span class="c1"></span><span class="nb">String</span><span class="p">(</span><span class="mi">1000000000000</span><span class="p">)</span>  <span class="c1">// &#34;1000000000000&#34;
</span><span class="c1"></span><span class="nb">String</span><span class="p">(</span><span class="mi">1000000000000000000000000</span><span class="p">)</span>   <span class="c1">// &#34;1e+24&#34; （0变多，就变成科学计数法的字符串了）
</span><span class="c1">// 后来JS补救了：即使0变多，也不会转成科学计数法
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h3 id="string--number">string =&gt; number</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Number</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
<span class="nb">parseInt</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="o">/</span>  <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
<span class="nx">s</span><span class="o">-</span><span class="mi">0</span> <span class="o">/</span> <span class="o">+</span><span class="nx">s</span>    <span class="c1">// 前端都是用这种最省事的写法
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="s1">&#39;123&#39;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Number</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span>     <span class="c1">// 123 [蓝色数字] 
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span>   <span class="c1">// 123 [蓝色数字] 虽然显示的是整数，实际上是小数，number只有一种64位浮点数
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span> <span class="c1">// 123 [蓝色数字]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s</span><span class="o">-</span><span class="mi">0</span><span class="p">)</span>           <span class="c1">// 123 [蓝色数字]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">+</span><span class="nx">s</span><span class="p">)</span>            <span class="c1">// 123 [蓝色数字]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>             <span class="c1">// 123 [黑色字符串]
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>JS bug</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// ES6之前，parseInt()自动识别：看到0开头就认为是8进制
</span><span class="c1"></span><span class="nb">parseInt</span><span class="p">(</span><span class="s1">&#39;0123&#39;</span><span class="p">)</span>  <span class="c1">// 83  (8进制的0123转为10进制 =&gt; 83)  // 1*8^2+2*8^1+3*8^0=83
</span><span class="c1"></span>    
<span class="c1">// ES6之后，parseInt()默认就是10进制
</span><span class="c1"></span><span class="nb">parseInt</span><span class="p">(</span><span class="s1">&#39;0123&#39;</span><span class="p">)</span>  <span class="c1">// 123
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h3 id="x--bool">x =&gt; bool</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Boolean</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
<span class="o">!!</span><span class="nx">x</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 把1/0变成布尔类型
</span><span class="c1"></span><span class="nb">Boolean</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>   <span class="c1">// true
</span><span class="c1"></span><span class="nb">Boolean</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>   <span class="c1">// false
</span><span class="c1"></span>    
<span class="c1">// 上述方法，前端从来不用，太麻烦
</span><span class="c1">// 前端直接用 !! （两次取反） 这种方法因为比较装B，所以在前端界比较流行
</span><span class="c1"></span>    
<span class="o">!!</span><span class="mi">1</span>          <span class="c1">// true
</span><span class="c1"></span><span class="o">!!</span><span class="s1">&#39;aaa&#39;</span>      <span class="c1">// true      （ !!aaa 不加引号就是变量，这里变量需要先声明才能使用）
</span><span class="c1"></span>    
<span class="kd">var</span> <span class="nx">obj</span><span class="o">=</span><span class="p">{};</span> <span class="o">!!</span><span class="nx">obj</span>        <span class="c1">// true
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">foo</span><span class="p">(){};</span> <span class="o">!!</span><span class="nx">foo</span>  <span class="c1">// true
</span><span class="c1"></span>    
    
<span class="o">!!</span><span class="mi">0</span>          <span class="c1">// false
</span><span class="c1"></span><span class="o">!!</span><span class="kc">NaN</span>        <span class="c1">// false
</span><span class="c1"></span><span class="o">!!</span><span class="s1">&#39;&#39;</span>         <span class="c1">// false
</span><span class="c1"></span><span class="o">!!</span><span class="kc">null</span>       <span class="c1">// false
</span><span class="c1"></span><span class="o">!!</span><span class="kc">undefined</span>  <span class="c1">// false
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">!!</span><span class="nx">abc</span>  <span class="c1">// abc is not defined
</span><span class="c1"></span>    
<span class="kd">var</span> <span class="nx">abc</span>
<span class="o">!!</span><span class="nx">abc</span>   <span class="c1">// false
</span><span class="c1"></span>    
<span class="kd">var</span> <span class="nx">abc</span><span class="o">=</span><span class="mi">123</span>
<span class="o">!!</span><span class="nx">abc</span>   <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h3 id="x--string">x =&gt; string</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">String</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> 
<span class="nx">x</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kc">true</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>   <span class="c1">// &#34;true&#34;
</span><span class="c1"></span><span class="kc">false</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>  <span class="c1">// &#34;false&#34;
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>JS bug</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mf">1.</span><span class="nx">toString</span><span class="p">()</span>   <span class="c1">// 报错，js读到「1.」认为这是个小数，后面应该跟着数字，结果读到「t」，就直接报错
</span><span class="c1">// 解决办法
</span><span class="c1"></span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">()</span>   <span class="c1">// &#34;1&#34;
</span><span class="c1"></span><span class="mi">1</span> <span class="p">.</span><span class="nx">toString</span><span class="p">()</span>    <span class="c1">// &#34;1&#34;
</span><span class="c1"></span><span class="mf">1.</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>    <span class="c1">// &#34;1&#34;   // 合法。js读到「1.」认为是 1.0
</span><span class="c1"></span><span class="mf">1.0</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>   <span class="c1">// &#34;1&#34;
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h3 id="补充js-秘密花园">补充：JS 秘密花园</h3>
<blockquote>
<p>Google 搜索 「<a href="https://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="noopener noreffer">JS 秘密花园</a>」，里面就讲了 JS 的各种奇葩事情</p>
</blockquote>]]></description>
</item><item>
    <title>JS 的基本语法⚙️</title>
    <link>http://samrks.github.io/javascript-basic-syntax/</link>
    <pubDate>Mon, 24 Aug 2020 22:15:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-basic-syntax/</guid>
    <description><![CDATA[<p>内容包括「什么是表达式和语句」「标识符的规则」「 if else 语句」「 while for 语句」「 label 」</p>
<h2 id="推荐书籍">推荐书籍</h2>
<ol>
<li>适合入门《<a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener noreffer">网道 JavaScript 教程</a>》</li>
<li>适合进阶《<a href="https://book.douban.com/subject/26351021/" target="_blank" rel="noopener noreffer">你不知道的 JavaScript（上卷）</a>》</li>
</ol>
<h2 id="js-语法-">JS 语法 ⭐️</h2>
<blockquote>
<p>开始学习</p>
</blockquote>
<h3 id="表达式与语句">表达式与语句</h3>
<p>表达式</p>
<ul>
<li>1+2 表达式的值为 3</li>
<li>add(1,2) 表达式的值为函数的<strong>返回值</strong></li>
<li>console.log 表达式的值为函数本身（因为没加括号）</li>
<li>console.log(3) 表达式的值为多少？（<strong>面试</strong>)
<ul>
<li>表达式的值就是函数的返回值 ，log函数的返回值为 undefined</li>
<li>所以 console.log(3) 表达式的值为 undefined</li>
</ul>
</li>
</ul>
<p>语句</p>
<ul>
<li>var a=1 是一个语句</li>
</ul>
<p>二者的区别</p>
<ul>
<li>表达式一般都有值，语句可能有也可能没有</li>
<li>语句一般会改变环境（声明、赋值）</li>
<li>上面两句话并不是绝对的</li>
</ul>
<h3 id="大小写敏感">大小写敏感</h3>
<p>不要写错</p>
<ul>
<li>var a 和 var A 是不同的</li>
<li>object 和 Object 是不同的</li>
<li>function 和 Function 是不同的</li>
<li>具体含义后面说</li>
</ul>
<h3 id="空格">空格</h3>
<p>大部分空格没有实际意义</p>
<ul>
<li>
<p><code>var    a    =    1</code> 和 <code>var a=1</code> 没有区别</p>
</li>
<li>
<p>加回车，大部分时候也不影响</p>
</li>
<li>
<p>只有一个地方不能加回车，那就是 return 后面</p>
<ul>
<li>
<p>return 后面不加东西，js 会自动补充成  return undefined</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="k">return</span> <span class="mi">3</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="k">return</span> <span class="p">[</span><span class="kc">undefined</span><span class="p">]</span>    <span class="c1">// return 和 3 之间加了一个回车，js会自动补充为 return undefined
</span><span class="c1"></span>  <span class="mi">3</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>  </p>
</li>
</ul>
<ul>
<li>唯独 return 后面不能加回车，其他多离谱的回车都没问题</li>
</ul>
</li>
</ul>
<h3 id="标识符">标识符</h3>
<h4 id="规则">规则</h4>
<ul>
<li>
<p>第一个字符，可以是 <code>Unicode 字母</code> /  <code>$</code> / <code>_</code>  /  <code>中文</code></p>
</li>
<li>
<p>后面的字符，除了上面所说，还可以有数字</p>
</li>
<li>
<p>注意，首位不能是数字</p>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="mi">9</span><span class="nx">$</span>
<span class="nx">Uncaught</span> <span class="nx">SyntaxError</span><span class="o">:</span> <span class="nx">Invalid</span> <span class="nx">or</span> <span class="nx">unexpected</span> <span class="nx">token</span> <span class="c1">// SyntaxError意为语法错误，token理解成字符串
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="变量名是标识符">变量名是标识符</h4>
<p>以下都是合法的标识符用法</p>
<ul>
<li><code>var _ = 1 </code></li>
<li><code>var $ = 2 </code></li>
<li><code>var ______= 6 </code></li>
<li><code>var 你好 = 'hi'</code></li>
<li>其他标识符用到再说</li>
</ul>
<h3 id="注释">注释</h3>
<blockquote>
<p>谣言：“ 写代码要多写注释。”</p>
<p>注释，分为：好的注释、不好的注释</p>
</blockquote>
<h4 id="不好的注释">不好的注释</h4>
<blockquote>
<p>不好的注释：告诉别人我写了什么</p>
</blockquote>
<ol>
<li>
<p>把代码翻译成中文</p>
<p>可能埋没了重要的注释。有用的信息和噪音的比例（信噪比）要低</p>
<p></p>
</li>
<li>
<p>过时的注释</p>
</li>
<li>
<p>发泄不满的注释</p>
</li>
</ol>
<h4 id="好的注释">好的注释</h4>
<blockquote>
<p>好的注释：告诉别人为什么我要这么写</p>
</blockquote>
<ol>
<li>
<p>踩坑注解</p>
</li>
<li>
<p>为什么代码会写得这么奇怪，遇到什么 bug</p>
<ul>
<li>遇到某个 bug，代码非得这么奇怪的写，才能避开这个 bug（这种也需要注释出来）</li>
</ul>
</li>
</ol>
<h3 id="区块-block">区块 block</h3>
<ul>
<li>
<p>把代码包在一起</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
  <span class="kd">let</span> <span class="nx">b</span><span class="o">=</span><span class="mi">2</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>常常与 if / for / while 合用</p>
</li>
</ul>
<h2 id="if-语句">if 语句</h2>
<blockquote>
<p>如果 … 那么 …</p>
</blockquote>
<h3 id="语法">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span><span class="nx">语句1</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">语句2</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>{ } 在语句只有一句的时候可以省略，不建议这样做</li>
</ul>
<h3 id="变态情况">变态情况</h3>
<ul>
<li>
<p>(表达式) 里可以非常变态，如 a=1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">2</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a是1&#39;</span><span class="p">)</span>   <span class="c1">// 最终打印这句，因为 = 是赋值，=== 才是判断是否相等
</span><span class="c1"></span><span class="p">}</span><span class="k">else</span><span class="p">{</span>
  <span class="nx">console</span><span class="mf">.1</span><span class="nx">og</span><span class="p">(</span><span class="s1">&#39;a不是1&#39;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>语句1 里可以非常变态，如嵌套的 if else</p>
</li>
<li>
<p>语句2 里可以非常变态，如嵌套的 if else</p>
</li>
<li>
<p>缩进也可以很变态，如面试题常常下套</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>上述代码执行结果为：</p>
<p>因为不写 { } 时，只默认<strong>第一个语句</strong>是跟随 if 条件的，有一个**无形的 { } **括住了第一句，相当于下面效果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>注：<strong>js 中是没有【行】的概念</strong>，即使两句写在一行，结果不变，仍是只括住<strong>第一个语句</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">);</span> <span class="p">}</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>如果用 逗号分隔呢？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span> <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a???&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li>逗号，表示这句话没结束。所以默认两个 console 就变成一个语句了（效果如上）</li>
<li>分号；表示这句话结束了。</li>
</ul>
</li>
</ul>
<h3 id="使用最没有歧义的写法">使用最没有歧义的写法</h3>
<h4 id="最推荐使用的写法">最推荐使用的写法</h4>
<blockquote>
<p>永远不要省略花括号 { }，即使只有一个语句。这是最不会产生歧义的写法</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
	<span class="nx">语句</span>
<span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
  <span class="nx">语句</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
  <span class="nx">语句</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="次推荐使用的写法">次推荐使用的写法</h4>
<blockquote>
<p>该写法，只在函数里有用</p>
<p>基于函数 return 的特点：执行 return ，函数就结束了，不再往下执行</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">表达式</span>
  <span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">表达式</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">表达式</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="switch-语句">switch 语句</h2>
<blockquote>
<p>if…else…升级版</p>
<p>JS 的 switch 语句设计的不算精致，但确实在某些情况时，比 if…else… 好用</p>
</blockquote>
<h3 id="语法-1">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">switch</span><span class="p">(</span><span class="nx">fruit</span><span class="p">){</span> 
  <span class="k">case</span> <span class="s2">&#34;banana&#34;</span><span class="err">：</span>
    <span class="c1">//...
</span><span class="c1"></span>    <span class="k">break</span><span class="err">；</span> 
  <span class="k">case</span> <span class="s2">&#34;apple&#34;</span><span class="o">:</span>
    <span class="c1">//...
</span><span class="c1"></span>    <span class="k">break</span><span class="err">；</span> 
  <span class="k">default</span><span class="o">:</span>
    <span class="c1">//...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="break">break</h3>
<ol>
<li>
<p>**大部分时候，省略 break 你就完蛋了 **</p>
<ul>
<li>当条件符合 banana 时，执行某些语句 …  ，遇到 break 跳出 switch</li>
<li>如果没有 break，就会向下跳过<code>case 'apple'</code>，直接执行 apple 的语句 …</li>
<li>看起来很鸡肋</li>
</ul>
</li>
<li>
<p><strong>少部分时候，可以利用 break</strong></p>
<ul>
<li>
<p>最早为什么这么设计 break 呢？</p>
</li>
<li>
<p>是为了方便「 满足多个条件（case）时 」的判断</p>
<ul>
<li>如下，case 1 可以默认贯穿到 case 3  （初衷是好的）</li>
</ul>
<p>​       </p>
</li>
</ul>
</li>
<li>
<p><a href="https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html" target="_blank" rel="noopener noreffer">Swift</a> 的 switch case 语句设计，完爆 JS 的 switch case  （apple 出的语言）</p>
<ul>
<li>执行完一个 case，默认跳出，无需 break</li>
<li>多条件判断：可以直接在一个 case 下写多个条件句 ，无需去掉 break 来表示贯穿</li>
<li>综上，JS 出现的太早了，没有抄到一个好的 switch case</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">switch</span> <span class="nx">some</span> <span class="nx">value</span> <span class="nx">to</span> <span class="nx">consider</span> <span class="p">{</span>
<span class="k">case</span> <span class="nx">value</span> <span class="mi">1</span><span class="o">:</span>
    <span class="nx">respond</span> <span class="nx">to</span> <span class="nx">value</span> <span class="mi">1</span>
<span class="k">case</span> <span class="nx">value</span> <span class="mi">2</span><span class="p">,</span>
     <span class="nx">value</span> <span class="mi">3</span><span class="o">:</span>
    <span class="nx">respond</span> <span class="nx">to</span> <span class="nx">value</span> <span class="mi">2</span> <span class="nx">or</span> <span class="mi">3</span>
<span class="k">default</span><span class="o">:</span>
    <span class="nx">otherwise</span><span class="p">,</span> <span class="k">do</span> <span class="nx">something</span> <span class="k">else</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ol>
<h2 id="问号冒号三元表达式">问号冒号（三元）表达式</h2>
<blockquote>
<p><strong><code>表达式1 ? 表达式2 : 表达式3 </code></strong>    表达式</p>
<p>最简单的 if…else… 的写法，能用问号冒号就不用 if…else…</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 求两个数的最大值
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">)</span> <span class="k">return</span> <span class="nx">a</span><span class="p">;</span>
  <span class="k">else</span> <span class="k">return</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">a</span><span class="o">&gt;</span><span class="nx">b</span> <span class="o">?</span> <span class="nx">a</span><span class="o">:</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="c1">// 求绝对值
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">abs</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">n</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">?</span> <span class="nx">n</span><span class="o">:</span> <span class="o">-</span><span class="nx">n</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="-短路逻辑">&amp;&amp; 短路逻辑</h2>
<p>与运算</p>
<blockquote>
<ul>
<li>A &amp;&amp; B &amp;&amp; C &amp;&amp; D
<ul>
<li>取第一个假值，后面就不看了</li>
<li>如果ABC都为真，就取 D。</li>
</ul>
</li>
<li>一般整句表达式的值，不会出现取 true / false，而是取 ABCD 中的一个</li>
<li>只要整个表达式中，有一个是假，整个式子就是假</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">b</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span>  <span class="c1">// 理解：a&amp;&amp;b 等价于，如果a是真，就执行b，否则就什么都不执行
</span><span class="c1"></span>  <span class="nx">b</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span> 
  
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">5</span> <span class="o">&amp;&amp;</span> <span class="mi">5</span>
<span class="kc">false</span>
<span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">5</span>
<span class="mi">5</span>
<span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;前面全对了&#39;</span><span class="p">)</span>
<span class="nx">前面全对了</span>
<span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">5</span><span class="o">&lt;</span><span class="mi">0</span>
<span class="kc">false</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">f1</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;f1存在&#39;</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 上下效果等价：如果 window.f1为 true ，就会执行 conosole.log(&#39;f1存在&#39;)
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">f1</span> <span class="o">&amp;&amp;</span> <span class="nx">conosole</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;f1存在&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>前端中，如果能写成 &amp;&amp; 的语句，就不写 if…else… 语句</p>
</blockquote>
<h3 id="最常见的用法">最常见的用法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">fn</span> <span class="o">&amp;&amp;</span> <span class="nx">fn</span><span class="p">()</span>  <span class="c1">// 如果 fn 存在就执行 fn
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>  
<span class="c1">// 如果console存在，就判断console.log是否存在，也存在，就执行打印 hi
</span><span class="c1"></span><span class="cm">/* 这么写有什么意义？
</span><span class="cm">   因为 IE 没有 console，如果用 IE 就不执行 console，不然 IE 会报错 */</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="-短路逻辑-1">|| 短路逻辑</h2>
<p>或运算</p>
<blockquote>
<ul>
<li>
<p>A || B || C || D</p>
<ul>
<li>
<p>取第一个真值，后面就都不看了。</p>
</li>
<li>
<p>如果ABC都为假，就取 D</p>
</li>
</ul>
</li>
<li>
<p>一般整句表达式的值，不会出现取 true / false，而是取 ABCD 中的一个</p>
</li>
<li>
<p>只要整个表达式中，有一个是真，整个式子就是 真</p>
</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">a</span><span class="o">||</span><span class="nx">b</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">){</span>  <span class="c1">// 理解：a||b 等价于，如果a不是真，就执行b，否则就什么都不执行
</span><span class="c1"></span>  <span class="nx">b</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
  
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>如果能写成 || 的语句，就不写 if…else…</p>
</blockquote>
<h3 id="最常见的用法-1">最常见的用法</h3>
<p>例：前端中经常有一个种写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">||</span> <span class="mi">100</span> 

<span class="c1">// 理解：如果a存在就什么都不做，否则 a=100
</span><span class="c1"></span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span>  <span class="c1">// 自己赋给自己，相当于什么都不做
</span><span class="c1"></span><span class="p">}</span><span class="k">else</span><span class="p">{</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="mi">100</span>  <span class="c1">// 保底值
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="总结条件语句">总结：条件语句</h2>
<ul>
<li>if … else…
<ul>
<li>if…else…的逻辑是最常用的，但是很多情况并不使用它。代码简短时，会用更简便的代码替代这种写法</li>
</ul>
</li>
<li>switch case
<ul>
<li>不能少了 break</li>
</ul>
</li>
<li>A ? B : C
<ul>
<li>相当常用（A若为真，执行B，A若为假，执行C）</li>
</ul>
</li>
<li>A &amp;&amp; B
<ul>
<li>相当常用，举例：fn &amp;&amp; fn()    （ fn 存在就执行 fn ）</li>
</ul>
</li>
<li>A || B
<ul>
<li>相当常用，举例： A = A || B    （A 存在时就什么都不执行，A 不存在时 B 就是 A 的保底值）</li>
</ul>
</li>
</ul>
<h2 id="while-循环">while 循环</h2>
<blockquote>
<p>用的不多</p>
</blockquote>
<h3 id="语法-2">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">while</span> <span class="p">(</span><span class="nx">表达式</span><span class="p">)</span> <span class="p">{</span> <span class="nx">语句</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>判断表达式的真假</li>
<li>当表达式为真，执行语句，执行完再判断表达式的真假</li>
<li>直到遇到表达式为假，跳出循环，执行后面的语句</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1">// 初始化
</span><span class="c1"></span><span class="k">while</span><span class="p">(</span><span class="nx">a</span> <span class="o">!==</span> <span class="mi">10</span><span class="p">){</span>   <span class="c1">// 判断条件
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>   <span class="c1">// 循环体
</span><span class="c1"></span>  <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span><span class="o">+</span><span class="mi">1</span>  <span class="c1">// 增长(为最终能跳出循环)
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>共需要四部分： 1. 初始化  2. 判断条件  3. 循环体  4. 增长</li>
</ul>
<h3 id="其他">其他</h3>
<ul>
<li>do &hellip; while 用得不多，自行了解</li>
</ul>
<h3 id="while-变态情况死循环">while 变态情况：死循环</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">while</span><span class="p">(</span><span class="nx">a</span><span class="o">!==</span><span class="mi">1</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="mf">0.1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>原因：浮点数不精确，导致死循环</p>
<p></p>
<h2 id="for-循环">for 循环</h2>
<blockquote>
<p>for循环 是 while循环 的语法糖</p>
</blockquote>
<h3 id="语法糖">语法糖</h3>
<ul>
<li>for 是 while 循环的方便写法
<ul>
<li>写 while 时需要四部分： 1. 初始化  2. 判断条件  3. 循环体  4. 增长</li>
<li>for 将 while 的写法升级、整合，如下
<ol>
<li>语句1 是用来初始化的</li>
<li>表达式2  是判断条件</li>
<li>语句3 是自增</li>
<li>循环体</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="语法-3">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="nx">语句1</span><span class="p">;</span><span class="nx">表达式2</span><span class="p">;</span><span class="nx">语句3</span><span class="p">){</span>
  <span class="nx">循环体</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ol>
<li>先执行语句1</li>
<li>然后判断表达式2
<ul>
<li>如果为真，执行循环体，然后再执行语句3</li>
<li>如果为假，直接退出循环，执行后面的语句</li>
</ul>
</li>
</ol>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>   <span class="c1">// 0 1 2 3 4
</span><span class="c1"></span><span class="p">}</span>
<span class="c1">// i 5
</span></code></pre></td></tr></table>
</div>
</div><h3 id="变态">变态</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// 5 5 5 5 5
</span><span class="c1"></span>    <span class="c1">// console.log(i + &#39;随机数&#39; + Math.random())  
</span><span class="c1"></span>  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// i 5
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>9 是 Chrome 的 bug。</p>
<p>5个5是正解。</p>
<p>每轮循环触发 setTimeout 相当于设置一个闹钟命令：过一会再执行 setTimeout 中的语句。而过一会之后，for循环已经走完，i 变为 5。然后闹钟到点，依次执行每轮触发的 setTimeout 中的语句，也就是执行 5轮 <code>console.log( i )</code> ，就会打印 5 个 5</p>
<h4 id="解决">解决</h4>
<p>把 var 替换成 let</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// 0 1 2 3 4 
</span><span class="c1"></span>  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="语法变形">语法变形</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="nx">语句1</span><span class="p">;</span><span class="nx">表达式2</span><span class="p">;</span><span class="nx">语句3</span><span class="p">){</span>
  <span class="nx">循环体</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>省略 语句 1 ，可在 for 循环外面定义变量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>    <span class="c1">// 0 1 2 3 4
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>省略 表达式 2 ，会进入死循环</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(;</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>    <span class="c1">// 0 1 2 3 4 5 6...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>省略 语句 2 &amp; 3 ，会进入死循环</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(;</span> <span class="p">;</span> <span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>    <span class="c1">// 0 0 0 0 0 0 0...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="break-和-continue">break 和 continue</h3>
<blockquote>
<p>break 退出所有循环</p>
<p>continue 退出当前一次循环</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">1</span><span class="p">){</span> <span class="c1">// 遇到奇数轮次，退出整个for循环
</span><span class="c1"></span>    <span class="k">break</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 1
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">1</span><span class="p">){</span> <span class="c1">// 遇到奇数轮次，跳过当次循环
</span><span class="c1"></span>    <span class="k">continue</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 0 2 4 6 8
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="label-语法">label 语法</h2>
<blockquote>
<p>用的很少，面试会考（概率5%）</p>
<p>这个知识点，除了用来做面试题之外，毫无用处</p>
</blockquote>
<h3 id="语法-4">语法</h3>
<p>label 语法：在任何情况下，写一个[标识符](# 标识符)，后面写一个代码块 { }（通常包含多句代码），或一句代码</p>
<h4 id="代码块">代码块</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">foo</span><span class="o">:</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">break</span> <span class="nx">foo</span><span class="p">;</span>   <span class="c1">// 跳出foo这个代码块
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;本行不会输出&#39;</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="一句代码">一句代码</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">foo</span><span class="o">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="面试">面试</h3>
<p>1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>   <span class="c1">// 表示代码块只有一行，叫做 1
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>3</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>  <span class="c1">// 一个代码块，第一行是一个标签，标签内容是 1，没有什么实际意义
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>问上面是什么</p>
<p>答： 是一个代码块（属于 label 语法），里面有一个标签 foo，语句就是一个 1</p>
<p>为什么不是一个对象？</p>
<p>答：如果写成下面形式，a 就是对象了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>如果单纯写一个代码块（如下），那就是一个 label，语句为 1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>JavaScript 的发展历史</title>
    <link>http://samrks.github.io/javascript-history/</link>
    <pubDate>Wed, 12 Aug 2020 21:13:23 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-history/</guid>
    <description><![CDATA[<p>简单了解「学 JS 的基本要求」，重点了解「JS 的诞生与历史」</p>
<p>​</p>
<h2 id="一些链接">一些链接</h2>
<ul>
<li>《<a href="https://www.bilibili.com/video/av15989846/" target="_blank" rel="noopener noreffer">Code Rush</a>》纪录片，记录了 Firefox 开源的过程，里面有 JS 之父的采访</li>
<li><a href="https://www.bilibili.com/video/av3745910/" target="_blank" rel="noopener noreffer">Chrome 的广告</a>，让你了解 Chrome 有多快</li>
<li><a href="https://www.jianshu.com/p/4eb60e47b4bf" target="_blank" rel="noopener noreffer">淘宝天猫不再支持 IE 6/7</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/24091492" target="_blank" rel="noopener noreffer">淘宝天猫不再支持 IE 8</a></li>
<li><a href="http://index.baidu.com/v2/main/index.html#/trend/%e5%89%8d%e7%ab%af?words=%e5%89%8d%e7%ab%af" target="_blank" rel="noopener noreffer">百度指数</a></li>
</ul>
<p>【JavaScript 诞生】相关文章：</p>
<ol>
<li><a href="https://zh.wikipedia.org/wiki/JavaScript#%e5%8e%86%e5%8f%b2" target="_blank" rel="noopener noreffer">JavaScript 的历史</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html" target="_blank" rel="noopener noreffer">JavaScript 诞生记</a>⭐</li>
<li><a href="http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html" target="_blank" rel="noopener noreffer">JavaScript 的10个设计缺陷</a></li>
</ol>
<p>​</p>
<h2 id="前端的门槛">前端的门槛</h2>
<blockquote>
<p>从 JavaScript 开始，你需要绞尽脑汁了</p>
</blockquote>
<p>​</p>
<h2 id="学-js-的基本要求">学 JS 的基本要求</h2>
<h3 id="软要求">软要求</h3>
<blockquote>
<p>对大脑的要求</p>
</blockquote>
<h4 id="一逻辑能力">一、逻辑能力</h4>
<p>逻辑分很多种：抽象逻辑、符号逻辑、三段论逻辑（最常用）…</p>
<p><strong>三段论逻辑</strong></p>
<p>示例</p>
<ul>
<li>JS的数据类型有 number / string / null / undefined / bool / symbol / object 【大前提】</li>
<li>JS的函数不是  number / string / null / undefined / bool / symbol 中的任意一种</li>
<li>所以，JS的函数是object 【根据前两句话，能推出第三句】</li>
</ul>
<p>好处</p>
<ul>
<li>写代码基本就是在<strong>编写逻辑</strong></li>
</ul>
<p>​</p>
<h4 id="二质疑自己的能力">二、质疑自己的能力</h4>
<blockquote>
<p>程序员不要相信人类，包括你自己</p>
</blockquote>
<p>质疑自己、推翻自己</p>
<p></p>
<ul>
<li>出现 bug ，先质疑自己、再质疑机器</li>
<li>大脑中有6个知识点，通过这6个知识点，写出一个bug，可能某个知识点记错了，不要纠结，不要认死理，懂得质疑和推翻自己。直接把错误的知识点从大脑中擦掉，灌入正确的知识点，来更新你的知识</li>
</ul>
<p><strong>回想一下</strong></p>
<p>你犯了多少错误</p>
<ul>
<li>拼错单词</li>
<li>多写了空格、少写了空格</li>
<li>把 O 看成 0，把 0 写成 O</li>
<li>把 iOS 写成 IOS 或者 ios</li>
</ul>
<blockquote>
<p>这不是粗心大意，这是人类不可克服的问题，通过 <strong>double check</strong> 可以缓解</p>
<ul>
<li>正着核对一遍，再反着核对一遍</li>
</ul>
</blockquote>
<p>​</p>
<h4 id="三抽象思维">三、抽象思维</h4>
<blockquote>
<p>高级程序员必备能力</p>
</blockquote>
<p><strong>什么是抽象能力</strong></p>
<p>举例</p>
<ul>
<li>
<p>你订了一份报纸</p>
</li>
<li>
<p>你关注了偶像明星蔡徐坤的微博</p>
</li>
<li>
<p>你用JS监听了一个按钮的点击事件</p>
<blockquote>
<p>对程序员来说，这三件事是一件事，拥有共同的模式：发布订阅模式。</p>
<p>这就是抽象，<strong>把事物的特征进行快速总结</strong>。</p>
<p>多练，初级程序员至少锻炼1年，才能具备这种抽象思维。</p>
<p>具备看到一个事物，就能把它抽离成代码示例的能力。</p>
</blockquote>
</li>
</ul>
<p>好处</p>
<ul>
<li>抽象思维，使你的代码能解决更多的问题</li>
<li>而不是兵来将挡、水来土掩，一个一个解决
<ul>
<li>新手程序员，遇到一个问题就写一段代码</li>
<li>高级程序员，将所有可能问题汇总，写一大坨代码解决全部问题</li>
<li>比如 Vue 和 React 的作者（一套框架解决问题）</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="硬要求">硬要求</h3>
<blockquote>
<p>客观上的要求</p>
</blockquote>
<h4 id="一足够的代码量">一、足够的代码量</h4>
<ul>
<li>达到 1000 行 - 新手</li>
<li>达到 10000 行 - 熟手（至少做过1个比较复杂的项目，常规项目都能做）</li>
<li>达到 50000 行 - 专业选手（至少做过2-3个比较复杂的项目，可能3-5年，看996时间积累）</li>
<li><strong>只能靠时间积累</strong></li>
</ul>
<p><strong>如何统计自己的代码行数</strong></p>
<ul>
<li>安装 <code>yarn global add cloc</code></li>
<li><code>cloc --vcs=git .</code></li>
<li>可以用来统计一个仓库里的有效代码</li>
</ul>
<p>注意</p>
<ul>
<li>如果仓库里有 node_modules 目录等不相关内容</li>
<li>需要把 /node_modules/ 写入 .gitignore 文件</li>
</ul>
<p>​</p>
<h4 id="二了解足够多的概念">二、了解足够多的概念</h4>
<blockquote>
<p>不仅要会写，还要会<del>扯</del>说（面试）</p>
</blockquote>
<p><strong>概览</strong></p>
<p>常用常考</p>
<ul>
<li>
<p>闭包、原型类、继承、MVC、Flux、高阶函数、前端工程化</p>
<blockquote>
<p>只会用，不会说，面试就完了</p>
</blockquote>
</li>
</ul>
<p>如何积累</p>
<ul>
<li>在课程中提炼
<ul>
<li>就是记笔记</li>
<li>面试如果能完整说出来，就是满分。新手能说出一般也达到要求了，面试新手就看思路对不对，不需要百分百实现</li>
</ul>
</li>
<li>在大脑中思考
<ul>
<li>JS需要思考清楚，这些代码到底是在做什么。为什么这样设计、为什么这样用</li>
<li>学JS，必须把疑问直接搞定，不能一直留着，不然会有越来越多的 bug</li>
</ul>
</li>
<li>在博客上总结
<ul>
<li>思考清楚了，一定要总结、记下来</li>
<li>用于面试</li>
</ul>
</li>
<li>在代码中实践</li>
</ul>
<p>​</p>
<h4 id="三有足够的踩坑经验">三、有足够的踩坑经验</h4>
<blockquote>
<p>你以为是工作经验吗？</p>
</blockquote>
<p><strong>踩坑经验</strong></p>
<p>何谓专家</p>
<ul>
<li>**“ 该领域内所有的错误都犯完的人，就是专家 ” **</li>
</ul>
<p>如何踩坑</p>
<ul>
<li>做项目，而且是个人项目</li>
<li>个人项目的意思是<strong>所有代码都是你一个人写的</strong>
<ul>
<li>团队合作的大项目，基本上只有两个人做，其他人都是打酱油的</li>
</ul>
</li>
<li>这样你才能<strong>全方位踩坑</strong></li>
</ul>
<p>​</p>
<h3 id="总结">总结</h3>
<p>软要求</p>
<ul>
<li>逻辑能力</li>
<li>质疑自己的能力</li>
<li>抽象能力</li>
</ul>
<p>硬要求</p>
<ul>
<li>足够多的代码（至少5000行，大项目1000-2000行，小项目200行左右）</li>
<li>足够多的概念</li>
<li>足够多的踩坑经验（记下来自己遇到过什么坑）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="javascript-的历史">JavaScript 的历史</h2>
<blockquote>
<p>历史和特点</p>
</blockquote>
<h3 id="发明人">发明人</h3>
<p>李爵士发明 HTML</p>
<p>赖先生发明 CSS</p>
<p><strong>布兰登发明 JS</strong></p>
<p>​</p>
<h4 id="布兰登的生平">布兰登的生平</h4>
<p></p>
<ul>
<li>生平1961年生于美国</li>
<li>物理学转数学与计算机学位</li>
<li>工作七年，负责操作系统与网络开发</li>
<li>又工作三年，负责微内核与电子信号处理相关工作</li>
<li>1995年进入网景公司，为其浏览器开发了 JS 功能</li>
<li>1998年协助成立 Mozilla.org，担任首席架构师</li>
<li>网景死亡（被收购）后，他成立了 Mozilla 基金会，Firefox 就是这个基金会维护的，有<a href="https://www.bilibili.com/video/av15989846/" target="_blank" rel="noopener noreffer">纪录片</a>记录了这一过程</li>
<li>2014年晋升为 Mozilla 的 CEO，十天后，被赶下台
<ul>
<li>原因是他曾捐助过反同性恋的法案（只有异性可结婚）</li>
</ul>
</li>
<li>2015年成立 Brave 公司，开发保护用户隐私的浏览器</li>
</ul>
<p>​</p>
<h3 id="总结-1">总结</h3>
<p>牛逼的程序员</p>
<ul>
<li>从来不会只学一门编程语言</li>
<li>不怕被辞退，总能找到事做</li>
<li>很容易创业，比外行人靠谱得多</li>
<li>可以干到 50 岁以上（基本上都是创办公司或很有钱了）</li>
</ul>
<p>JavaScript</p>
<ul>
<li>诞生之初，只是一个不起眼的小功能</li>
<li>同时 JS 有很多 bug，我们学习的时候要注意辨别</li>
</ul>
<p>​</p>
<h3 id="javascript-的诞生">JavaScript 的诞生</h3>
<p>布莱登临危受命</p>
<ul>
<li>公司要求给浏览器添加一个脚本功能</li>
<li>公司要求这个脚本必须蹭 Java 的流量</li>
<li>布莱登花十天设计了 JS 的最初版本（不是实现）</li>
</ul>
<p>JS的命名</p>
<ul>
<li>Mocha 摩卡 =&gt; LiveScript =&gt; JavaScript</li>
<li>Java 既是编程语言，也是一种咖啡</li>
<li>浏览器一开始同时就支持 Java 和 JavaScript</li>
<li>后来，JS 胜了（在浏览器上），Java就逐渐退出了浏览器平台</li>
</ul>
<p>​</p>
<h3 id="浏览器大战">浏览器大战</h3>
<blockquote>
<p>背景：1995年，网景推出 JS 功能，用户纷纷叫好，因为可以在页面上节省流量。</p>
<ul>
<li>当时的网速非常慢 2~3k/s，用户填写一个表单，点击提交按钮，等待一分钟才刷新页面，反馈结果。</li>
<li>有了 JS 功能之后，点击按钮，马上反馈用户表单信息是否正确，所以用户非常喜欢。</li>
<li>注意：此时的 JavaScript 只是网景提供的一个<strong>功能</strong>，并不是语言</li>
</ul>
</blockquote>
<p>微软的跟进</p>
<ul>
<li>1996年8月 IE 3 发布，支持 JScript（微软实现的JS）</li>
<li>浏览器大战开始，每家浏览器的脚本不太一样</li>
</ul>
<p>网景的反击</p>
<ul>
<li>1996年11月，网景向 ECMA 提交语言标准，由于版权问题，JS 语言标准不叫 JavaScript，叫 ECMAScript</li>
<li>ECMA 发音：ai ke ma</li>
</ul>
<p>​</p>
<h3 id="网景之死">网景之死</h3>
<p>被收购</p>
<ul>
<li>微软的 IE 浏览器由于捆绑进了 Windows，很快超越</li>
<li>1998年，网景浏览器节节败退，公司陷入内忧外患</li>
<li>同年，公司打算搏一搏，将浏览器<strong>开源</strong>（Firefox）</li>
<li>最终，市场并没有因为开源而重新青睐网景</li>
<li>年底，[美国在线 AOL] 宣布开始收购网景</li>
<li>收购后，网景团队里的程序员纷纷被解雇</li>
<li>布莱登在之后一直协助维护 Firefox 的运营</li>
</ul>
<p>​</p>
<h3 id="ie-6-如日中天">IE 6 如日中天</h3>
<p>你想象不到 IE 6 多么火</p>
<ul>
<li>2001年，IE 6 随着 Windows XP 一起发布</li>
<li>2004年，IE 6 全球市场占用率 80% 以上</li>
<li>然而，这款浏览器却不兼容 W3C 标准（主要是 CSS)</li>
<li>IE 6 也不断爆出安全漏洞</li>
<li>Firefox 打算涅槃重生，重新打败 IE</li>
<li>2005年，IE 7 发布，但打不过 IE 6</li>
<li>2006年，主流浏览器为 IE 6 和 Firefox</li>
<li>2010年，中国的大部分浏览器还是 IE 6</li>
<li>由于盗版 Windows XP 在中国的风行，在很多年里，IE 6 始终占据中国浏览器市场，是前端开发者的恶魔</li>
</ul>
<p>​</p>
<h3 id="ie-6-神奇的-bug">IE 6 神奇的 bug</h3>
<p>下面代码会让 IE 6 直接崩溃，当场死机</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span> 
  <span class="o">*</span> <span class="p">{</span> <span class="k">position</span><span class="p">:</span> <span class="kc">relative</span> <span class="p">}</span> 
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span> 
<span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span> 
  <span class="p">&lt;</span><span class="nt">input</span><span class="p">&gt;</span> 
<span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>补充：</p>
<ul>
<li>「<code>*{  }</code> 星号性能低下」的谣言，就是从 IE6 这个 bug ，开始传出来的</li>
<li>实际上星号没有这个问题，这是 IE6 自己有问题</li>
<li>如果现在还有人说「星号性能低下」，不要反驳他，八九年前的事情现在还在说
<ul>
<li>星号套星号…可能有问题，但是<strong>一个星号，是绝对不会有问题的</strong></li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="chrome-横空出世">Chrome 横空出世</h3>
<p>微软的懈怠</p>
<ul>
<li>由于 IE6 的巨大成功，微软觉得再花费精力不值得，而且没有竞争对手，所以直接解散了 IE6 开发团队</li>
<li>Firefox 的出现让微软重新组建 IE 团队，但不是同一队人，造成 IE7、8 一直问题不断</li>
</ul>
<p>谷歌抓住机会</p>
<ul>
<li>2004年，谷歌雇用了一些 Firefox 和 IE 的开发者</li>
<li><strong>2008年</strong>，Chrome 终于发布，迅速拿下 1% 份额</li>
<li>2011年，Chrome 份额超过 Firefox</li>
<li><strong>2016年</strong>，Chrome 全球份额 62%</li>
<li>欣赏一支 <a href="https://www.bilibili.com/video/av3745910/" target="_blank" rel="noopener noreffer">Chrome 的广告</a></li>
</ul>
<p>​</p>
<h3 id="移动市场兴起">移动市场兴起</h3>
<p>智能手机崛起</p>
<ul>
<li>2010年，iPhone 4 发布</li>
<li>2011年，微软 和 Nokia 联合起来，打算搞一波事情</li>
<li>后来的事情大家都知道，Nokia 手机业务完了</li>
<li>也就是说，手机上基本没有 IE 了</li>
<li>前端程序员表示欣喜若狂，IE 终于快要死了</li>
<li>2016年，淘宝天猫宣布<a href="https://www.jianshu.com/p/4eb60e47b4bf" target="_blank" rel="noopener noreffer">不再支持 IE6、IE7</a></li>
<li>同年年底，宣布<a href="https://zhuanlan.zhihu.com/p/24091492" target="_blank" rel="noopener noreffer">不再支持 IE 8</a></li>
<li>移动市场的兴起，让中国前端摆脱 IE 十年的恐怖支配</li>
<li>从此，前端快速，不对，是极速发展</li>
</ul>
<p>​</p>
<h3 id="ecmascript-标准的制定">ECMAScript 标准的制定</h3>
<p>时间</p>
<ul>
<li>1997年6月，第一版 ECMAScript 发布</li>
<li>1999年12月，<strong>第三版</strong>发布，这个版本使用最广（IE6支持）</li>
<li>第四版，流产。</li>
<li>2009年12月，第五版发布，增加了一些功能</li>
<li><strong>2015年</strong>6月，<strong>第六版</strong>发布，新浏览器都支持这一版</li>
<li>之后每年发布一版，版本号以年份命名</li>
</ul>
<h4 id="js-与-ecmascript-的关系">JS 与 ECMAScript 的关系</h4>
<ul>
<li>ECMAScript 是纸上的标准，JS 是浏览器的实现</li>
<li>纸上标准往往落后于浏览器，先实现，再写进标准
<ul>
<li>ECMA 只总结，不预演，这样就不会再导致标准流产（写进标准但没浏览器使用的情况）</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="javascript-兴起">JavaScript 兴起</h3>
<h4 id="杀手级应用-gmail">杀手级应用 Gmail</h4>
<ul>
<li>2004年愚人节，谷歌发布 Gmail 在线网页</li>
<li>当时的人们认为网页只能用来看新闻和图片</li>
<li>Gmail 的发布让用户和开发者（后端、客户端）眼前一亮</li>
<li>2005年，Jesse 将谷歌用到的技术命名为 AJAX</li>
<li><strong>从此，前端技术正式出现</strong></li>
<li>在此之前的网页开发，都是由 后端 和 设计师 完成</li>
<li>2006年，jQuery 发布，是目前最长寿的 JS 库</li>
<li>后来的十年，jQuery 大发异彩，直到 IE 不行了，jQuery 才稍微没有那么火</li>
</ul>
<p>​</p>
<h3 id="中国前端的发展">中国前端的发展</h3>
<p>正式出现时间</p>
<ul>
<li>
<p>2010年左右，中国才有专门的前端岗位</p>
<p><a href="http://index.baidu.com/v2/main/index.html#/trend/%E5%89%8D%E7%AB%AF?words=%E5%89%8D%E7%AB%AF,java,python,php" target="_blank" rel="noopener noreffer">百度搜索指数</a></p>
<p></p>
<p></p>
</li>
</ul>
<p>前端的来源</p>
<ul>
<li>一部分来自自学的<strong>后端</strong>程序员，他们把 Java 的思想代入 JavaScript，<strong>面向对象</strong>成了JS的主流思想</li>
<li>一部分来自<strong>设计师</strong>，他们开始学习 CSS，并独创了「重构工程师」岗位（现已没落）
<ul>
<li>比如张鑫旭，专门研究CSS</li>
</ul>
</li>
<li>上面这两种来源，一种赶鸭子上架，一种不够专业，导致前端特别缺人</li>
</ul>
<p>缺人</p>
<ul>
<li>最应该产出前端人才的大学，迟迟没有相关课程</li>
<li>由于早期前端工资比不上后端，所以大部分人选后者</li>
<li>就如同现在很多高材生选择机器学习一样</li>
<li>一些不小心进入前端领域的科班生成长非常迅速</li>
</ul>
<p>​</p>
<h3 id="javascript-爆发">JavaScript 爆发</h3>
<p>V8 快如闪电</p>
<ul>
<li>
<p>Chrome 的 JS 引擎叫做 V8（V1到V7是啥)</p>
</li>
<li>
<p>2009年，Ryan 基于 V8 创建了 Node.js</p>
</li>
<li>
<p>2010年，Isaac 基于 Node.js 写出了 npm</p>
</li>
<li>
<p>前端工程师可以在浏览器之外执行 JS 了，Node.js 快速风靡</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">例：node demo.js
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>同年，TJ 受 Sinatra 启发，发布了 Express.js</p>
</li>
<li>
<p>从此，前端工程师可以愉快地写后端应用了！</p>
</li>
</ul>
<p>爆发</p>
<ul>
<li>这期间出来的技术太多，以后慢慢介绍：gulp、grunt、yeoman、requirejs、webpack、Angular、React、Vue等</li>
<li>这些技术很多也已经过时了</li>
</ul>
<p>​</p>
<h3 id="总结-2">总结</h3>
<h4 id="js-是历史的选择">JS 是历史的选择</h4>
<ul>
<li>一开始浏览器支持很多东西：Java、Flash、VBScript</li>
<li>只有 JS 活到最后</li>
</ul>
<h4 id="js-的低开高走">JS 的低开高走</h4>
<ul>
<li>一开始 JS 就是一个玩具语言</li>
<li>但是 JS 每次都走对了风口
<ol>
<li>JS 推出标准</li>
<li>Gmail 的出现（当时的网站只能看新闻，用户第一次体验到输入网址就能打开一个工具）</li>
<li>移动端</li>
<li>node.js</li>
</ol>
</li>
</ul>
<h4 id="学习-js-时需要注意">学习 JS 时需要注意</h4>
<ul>
<li>JS 最初也很混乱，旧的、过时的东西了解就好，考前记忆一些</li>
<li>跟 IE 相关的知识一律忽略</li>
</ul>
<blockquote>
<p>前端是进入互联网行业的捷径</p>
</blockquote>]]></description>
</item></channel>
</rss>

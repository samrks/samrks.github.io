<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>彩虹 - 标签 - Sam&#39;s Garage</title>
        <link>https://liubingxuan.xyz/tags/%E5%BD%A9%E8%99%B9/</link>
        <description>彩虹 - 标签 - Sam&#39;s Garage</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ryuukousen@gmail.com (Sam)</managingEditor>
            <webMaster>ryuukousen@gmail.com (Sam)</webMaster><lastBuildDate>Sat, 25 Jul 2020 02:12:24 &#43;0800</lastBuildDate><atom:link href="https://liubingxuan.xyz/tags/%E5%BD%A9%E8%99%B9/" rel="self" type="application/rss+xml" /><item>
    <title>CSS 学习笔记——基础篇</title>
    <link>https://liubingxuan.xyz/css-basic/</link>
    <pubDate>Sat, 25 Jul 2020 02:12:24 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://liubingxuan.xyz/css-basic/</guid>
    <description><![CDATA[<p>熬夜总结 – CSS 基础篇 。</p>
<p></p>
<h2 id="css-的历史">CSS 的历史</h2>
<h3 id="css-是谁发明的">CSS 是谁发明的</h3>
<blockquote>
<p>李爵士的挪威同事赖先生，首先<a href="https://www.w3.org/People/howcome/p/cascade.html" target="_blank" rel="noopener noreffer">提出 CSS</a></p>
<p>Håkon Wium Lie （挪威语）</p>
</blockquote>
<h3 id="赖先生的生平">赖先生的生平</h3>
<h4 id="生平">生平</h4>
<ul>
<li>
<p>1991年获得MIT媒体实验室视觉研究理学硕士学位</p>
</li>
<li>
<p>1994年提出CSS概念而闻名</p>
</li>
<li>
<p>1999年任Opera的CTO（首席技术官，不分前端后端、只要是技术就负责）</p>
</li>
<li>
<p>2005年他写公开信给比尔盖茨问为什么IE不支持Web标准，盖茨说IE 7马上发布，他写了 Acid2 用来验证</p>
</li>
<li>
<p>2006年通过了博士论文答辩</p>
</li>
<li>
<p>2006年他倡议 Web 网页应使用通用字体格式</p>
</li>
<li>
<p>2007年他倡议浏览器可以支持video标签</p>
</li>
</ul>
<h4 id="观点">观点</h4>
<ul>
<li>
<p>微软的IE常常成为他的批评对象</p>
</li>
<li>
<p>他也是Web打印概念的倡导者，用HTML和CSS写书</p>
</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="css-的牛-x-之处在哪">CSS 的牛 X 之处在哪？</h3>
<blockquote>
<p>CSS（Cascading Style Sheets）：==层叠==样式表</p>
</blockquote>
<h4 id="样式层叠">样式层叠</h4>
<p>可以多次对同一选择器进行样式声明</p>
<h4 id="选择器层叠">选择器层叠</h4>
<p>可以用不同选择器对同一个元素进行样式声明</p>
<h4 id="文件层叠">文件层叠</h4>
<p>可以用多个文件进行层叠</p>
<h4 id="这些特性使得-css-极度灵活">这些特性使得 CSS 极度灵活</h4>
<p>这也为 CSS 后来被吐槽留下了隐患</p>
<p>​</p>
<p>​</p>
<h3 id="css-的版本">CSS 的版本</h3>
<blockquote>
<p>⭐目前使用最广泛的css版本：css 2.1 版本</p>
<ul>
<li>2004-2011年间不断更新，没有具体发布时间</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th><strong>版本</strong></th>
<th><strong>时间</strong></th>
<th><strong>重点</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>CSS  1</td>
<td>1996年</td>
<td>不用管</td>
</tr>
<tr>
<td>CSS  2</td>
<td>1998年</td>
<td>添加定位、z-index、media，不用管</td>
</tr>
<tr>
<td>**CSS  2.1 **</td>
<td>2004~2011年</td>
<td>使用最广泛的版本（IE支持）</td>
</tr>
<tr>
<td>CSS  3</td>
<td>1999年开始起草</td>
<td>现代版本，分模块（IE  8 部分支持）</td>
</tr>
<tr>
<td>CSS  4*</td>
<td>分模块升级</td>
<td></td>
</tr>
</tbody>
</table>
<p>​</p>
<p>​</p>
<h3 id="浏览器对css的支持兼容性">浏览器对CSS的支持（兼容性）</h3>
<blockquote>
<p>怎么知道，哪些浏览器，支持哪些特性？</p>
<ul>
<li>方法一：几十种浏览器全部跑一遍</li>
<li>方法二：使用 <a href="https://www.caniuse.com/#search=flex" target="_blank" rel="noopener noreffer">caniuse.com</a></li>
</ul>
</blockquote>
<p></p>
<ul>
<li>红色：不支持flex</li>
<li>黄色：部分支持</li>
<li>绿色：完全支持</li>
</ul>
<h4 id="caniusecom-使用方法">caniuse.com 使用方法</h4>
<h5 id="请收藏此网站">请收藏此网站</h5>
<ul>
<li>
<p>输入你关心的样式，比如 border-radius 或 filter</p>
</li>
<li>
<p>查看大部分浏览器的支持情况</p>
</li>
<li>
<p>如果想看更多，点击 Show All</p>
</li>
<li>
<p>下方会详细说明兼容 bug 有哪些（翻译成中文）</p>
</li>
</ul>
<h5 id="这个网站是怎么运作的">这个网站是怎么运作的</h5>
<ul>
<li>
<p>网站主一开始<a href="http://tests.caniuse.com/" target="_blank" rel="noopener noreffer">自己测试</a>了一部分浏览器</p>
</li>
<li>
<p>社区的前端工程师帮助测试各种各样的浏览器</p>
</li>
<li>
<p>UC 浏览器和 QQ 浏览器当然主要是中国开发者测试</p>
</li>
<li>
<p>大家把测试结果提交到 GitHub 上</p>
</li>
<li>
<p>这就是<u>开发者社区</u>的力量、</p>
<ul>
<li>
<p>什么是社区？</p>
<p>社区不是一个准确存在的概念，大家你帮我我帮你，互相学习，互相分享，就形成了社区。</p>
<p>是一种弱联系。</p>
<p>社区通过汇集的力量将事情给解决好</p>
</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="css-是艺术">CSS 是艺术</h2>
<blockquote>
<p>就像画画、折纸</p>
<p>你需要用感性思维来理解 CSS</p>
</blockquote>
<h3 id="不要用理性思维">不要用理性思维</h3>
<ul>
<li>
<p>即不要问「为什么会这样」，而是说「原来是这样」</p>
</li>
<li>
<p>浏览器说是怎么样，就是怎么样</p>
</li>
<li>
<p>当然有极少情况是浏览器出错了</p>
</li>
</ul>
<h3 id="为什么-color-red-能让字变红">为什么 color: red 能让字变红</h3>
<ul>
<li>
<p>不要问「为什么」</p>
</li>
<li>
<p>要说「原来是这样」</p>
</li>
<li>
<p>所见即所学</p>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="体系化学习">体系化学习</h2>
<blockquote>
<ul>
<li>有生之年都不太可能把css所有知识学完，因为它太、多、了。只文档可能就有几百页，目录全看一遍都很累：<a href="https://www.w3.org/Style/CSS/specs.en.html" target="_blank" rel="noopener noreffer">css标准文档</a>（google 搜 css spec）</li>
<li>不是把所有知识都学完，而是在一个新知识点到来的时候，马上学会它。这才是学习CSS体系化最重要的手段</li>
</ul>
</blockquote>
<blockquote>
<p>体系化学习 CSS 和 HTML 的过程完全一致</p>
</blockquote>
<h3 id="学一门语言必须学会什么">学一门语言必须学会什么</h3>
<ul>
<li>
<p><a href="#%e8%af%ad%e6%b3%95" rel="">语法</a>（怎么写代码）</p>
</li>
<li>
<p>css 语法非常简单</p>
</li>
<li>
<p>[如何调试](#如何调试 CSS)（怎么知道自己代码写错了）</p>
<ul>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="o">-</span><span class="nx">w3c</span><span class="o">-</span><span class="nx">validator</span> <span class="o">-</span><span class="nx">i</span> <span class="nx">index</span><span class="p">.</span><span class="nx">html</span>    <span class="c1">// 查错
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p><a href="#%e5%9c%a8%e5%93%aa%e6%9f%a5%e8%b5%84%e6%96%99" rel="">在哪查资料</a>（其实就是为了抄代码）</p>
</li>
<li>
<p>MDN</p>
</li>
<li>
<p>标准制定者是谁</p>
<ul>
<li>尝试所有方法仍不能解决问题的话，就必须看<a href="https://www.w3.org/Style/CSS/specs.en.html" target="_blank" rel="noopener noreffer">标准文档</a>了</li>
</ul>
</li>
</ul>
<h3 id="如何学">如何学</h3>
<ul>
<li>
<p>Copy - 抄文档、抄老师</p>
</li>
<li>
<p>Run - 放在自己的机器上运行成功</p>
</li>
<li>
<p>Modify - 加入一点自己的想法，然后重新运行</p>
</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="语法">语法</h3>
<blockquote>
<p>超级简单</p>
</blockquote>
<h4 id="语法一样式语法">语法一：样式语法</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="nt">选择器</span> <span class="p">{</span>
  <span class="err">属性名:</span> <span class="err">属性值</span><span class="p">;</span>
  <span class="c">/*注释*/</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="注意事项">注意事项</h5>
<blockquote>
<p>不学常态，学变态</p>
</blockquote>
<ul>
<li>
<p>所有符号都是英文符号，如果写错了，浏览器会警告（样式会被<del>划掉</del>）</p>
</li>
<li>
<p>区分大小写，a 和 A 是不同的东西（特别是大小写很相似的字母，很容易错）</p>
</li>
<li>
<p>没有 // 注释，只有 <code>/* 注释 */</code>  这种形式</p>
</li>
<li>
<p>最后一个分号可以省略，但建议不要省略</p>
</li>
<li>
<p>任何地方写错了，都不会报错，浏览器会直接忽略</p>
</li>
<li>
<p>那我怎么知道自己写没写错呢？一会说</p>
</li>
</ul>
<h4 id="语法二at-httpsdevelopermozillaorgzh-cndocswebcssat-rule语法httpsdevelopermozillaorgzh-cndocswebcssat-rule">语法二：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/At-rule" target="_blank" rel="noopener noreffer">at </a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/At-rule" target="_blank" rel="noopener noreffer">语法</a></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">@</span><span class="k">charset</span> <span class="s2">&#34;UTF-8&#34;</span><span class="p">;</span>    <span class="c">/* 声明字符编码，必须放在第一行 */</span>
<span class="p">@</span><span class="k">import</span> <span class="nt">url</span><span class="o">(</span><span class="nt">2</span><span class="p">.</span><span class="nc">css</span><span class="o">)</span><span class="p">;</span>   <span class="c">/* 导入一个额外的css文件 */</span>
<span class="p">@</span><span class="k">media</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">100px</span><span class="o">)</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-width</span><span class="o">:</span> <span class="nt">200px</span><span class="o">)</span> <span class="p">{</span>    <span class="c">/* 媒体查询 */</span>
  <span class="nt">语法一</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="注意事项-1">注意事项</h5>
<ul>
<li>
<p>@charset 必须放在第一行</p>
</li>
<li>
<p>前两个 at 语法必须以分号 ; 结尾</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">@</span><span class="k">charset</span> <span class="s2">&#34;UTF-8&#34;</span><span class="p">;</span>
<span class="p">@</span><span class="k">import</span> <span class="nt">url</span><span class="o">(</span><span class="nt">2</span><span class="p">.</span><span class="nc">css</span><span class="o">)</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>@media 语法会单独教学</p>
</li>
<li>
<p>charset 是字符集的意思，但 UTF-8 是字符编码 encoding（并不是字符集），这是历史遗留问题</p>
<ul>
<li>最早只有 ASCII 这一种字符集（英文），这个字符集的编码形式就是它自己</li>
<li>后来中国人发现 ASCII 不能表示中文，所以就发明了 GB2312，由中国国家标准局（国标局）发行，GB 就是国家标准的缩写。
<ul>
<li>GB2312 是一个支持中文简体汉字的字符集。它对应的编码形式，是它自己</li>
</ul>
</li>
<li>后来日本、韩国的文字，我们的 GB2312 也表示不了。国标局还没开始动作，微软先一步发明 GBK，k表示扩展。GBK 可以同时表示  中文、日文、韩文（CJK）</li>
<li>后来中国发现还需要和更多国家建立联系，国标库根本就搞不定，就有一个叫 Unicode 的组织，给全球制作了一个字符集，叫做 Unicode（万国码）。这个码包含非常多国家，特别长，所以必须采用不同的编码形式。
<ul>
<li>编码形式包含：UTF8/UTF16/UTF32 （选择任意一个即可）</li>
<li>从 Unicode开始字符集和编码形式就不统一了，之前都是统一的</li>
</ul>
</li>
<li>html 1993年左右发明，css 发明于1996年左右，Unicode在1996年之后发明。</li>
<li>charset 原本后面写一个【字符集的名字】，写 GBK/GB2312 ….这种，对应编码形式也是同名的。但是Unicode发明后，字符集名称和编码形式不统一了，所以我们为了表明自己使用的是 Unicode 的那种编码形式，就只能将Unicode的编码形式，写在表示字符集的 charset 的位置。</li>
<li>==【这就是这个历史问题的发展经过】==</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>字符集</th>
<th>编码形式</th>
</tr>
</thead>
<tbody>
<tr>
<td>ASCII</td>
<td>ASCII</td>
</tr>
<tr>
<td>GB2312</td>
<td>GB2312</td>
</tr>
<tr>
<td>GBK</td>
<td>GBK</td>
</tr>
<tr>
<td>Unicode</td>
<td>UTF8/UTF16/UTF32</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>问： @charset “UTF-8”  指的是什么？</p>
<blockquote>
<ul>
<li>
<p>回答 ：字符集（charset） 是错误的</p>
</li>
<li>
<p><strong>“UTF-8”<strong>指定的不是字符集 charset，而是</strong>指定的【 文件编码 】</strong></p>
<ul>
<li>虽然charset本身是字符集的意思，但后面的 utf-8 指的是  Unicode字符集的**【编码形式】**的一种。这是一个历史遗留问题</li>
</ul>
</li>
</ul>
</blockquote>
</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="如何调试-css">如何调试 CSS</h3>
<h4 id="方法">方法</h4>
<ul>
<li>
<p>使用 W3C 验证器（<a href="https://jigsaw.w3.org/css-validator/" target="_blank" rel="noopener noreffer">在线</a> / 命令行工具）不用试了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="o">-</span><span class="nx">w3c</span><span class="o">-</span><span class="nx">validator</span> <span class="o">-</span><span class="nx">i</span> <span class="nx">index</span><span class="p">.</span><span class="nx">html</span>    <span class="c1">// 可能需要先安装java环境，才能运行 node-w3c-validator
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="https://www.cnblogs.com/SNNA/p/12531886.html" target="_blank" rel="noopener noreffer">Java环境安装、配置</a></li>
</ul>
</li>
<li>
<p>使用 VSCode 看颜色</p>
</li>
<li>
<p>使用 WebStorm 看颜色</p>
</li>
<li>
<p>使用开发者工具看警告</p>
<ul>
<li>浏览器预览页面，右键检查，查看Element中，一般会给出问题警告。有问题的css会被<del>划删除线</del></li>
</ul>
</li>
</ul>
<h4 id="如何使用开发者工具">如何使用开发者工具</h4>
<ul>
<li>
<p>找到你脑中的标签</p>
</li>
<li>
<p>看它是否有选择器</p>
</li>
<li>
<p>看它的样式是否被划掉</p>
</li>
<li>
<p>看它的样式是否有警告</p>
</li>
</ul>
<h4 id="border-调试法">Border 调试法</h4>
<h5 id="步骤">步骤</h5>
<ul>
<li>怀疑某个元素有问题</li>
<li>就给这个元素加 border</li>
<li>border 展示效果没出现？说明选择器错了或者语法错了
<ul>
<li>通常是 border 上面的代码有问题（因为上面代码执行遇到问题，就会影响下面样式的输出）</li>
</ul>
</li>
<li>border 出现了？看看边界是否符合预期
<ul>
<li>说明选择器没有错、border以上的代码没有错</li>
<li>可以继续往下测试、查找错误</li>
</ul>
</li>
<li>bug 解决了才可以把 border 删掉</li>
</ul>
<h5 id="记住">记住</h5>
<ul>
<li>CSS 的 border 调试法</li>
<li>就相当于 JS 的 log 调试法</li>
<li>我会再每节课重复这个调试法</li>
</ul>
<p>​</p>
<h4 id="新人常见错误">新人常见错误</h4>
<h5 id="低级错误">低级错误</h5>
<ul>
<li>选择器拼写错误</li>
<li>属性名拼写错误</li>
<li>属性值拼写错误</li>
<li>大小写错误</li>
<li>没写分号</li>
<li>中文冒号</li>
<li>没写反花括号</li>
<li>没加单位</li>
</ul>
<h5 id="非低级错误">非低级错误</h5>
<ul>
<li>没有非低级错误</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="在哪查资料">在哪查资料</h3>
<h4 id="网站推荐">网站推荐</h4>
<ul>
<li>Google 搜索关键词时加 MDN</li>
<li>CSS tricks（英文），专门收集 css 小技巧的网站
<ul>
<li>使用方式：在google 搜  <code>[技术名词] css tricks</code>    <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">https://css-tricks.com/snippets/css/a-guide-to-flexbox/</a></li>
</ul>
</li>
<li>张鑫旭的博客：可能是中国花时间最多来学css的人
<ul>
<li>使用方式：搜  [技术名词] 张鑫旭</li>
</ul>
</li>
</ul>
<h4 id="书籍推荐">书籍推荐</h4>
<ul>
<li>不推荐买任何书</li>
<li>CSS 和 HTML 一样，以练为主</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="在哪搜练习素材">在哪搜练习素材</h3>
<h4 id="psd">PSD</h4>
<ul>
<li>Freepik 搜索 <a href="https://www.freepik.com/search?query=web&amp;type=psd" target="_blank" rel="noopener noreffer">PSD web</a>  英文（下载免费的 psd）
<ul>
<li>如果下载慢，就把域名加入翻墙插件</li>
</ul>
</li>
<li>中文免费 PSD 网站较少，需要多搜一下</li>
<li>365PSD 里的 <a href="https://cn.365psd.com/free-psd/ui-kits" target="_blank" rel="noopener noreffer">UI </a><a href="https://cn.365psd.com/free-psd/ui-kits" target="_blank" rel="noopener noreffer">套件</a>还行</li>
</ul>
<h4 id="效果图不提供下载">效果图（不提供下载）</h4>
<ul>
<li>dribbble.com 顶级设计师社区</li>
<li>可以用肉眼模仿它</li>
</ul>
<h4 id="商业网站">商业网站</h4>
<ul>
<li>直接模仿你常去的网站</li>
</ul>
<p>​</p>
<h3 id="不要沉迷临摹">不要沉迷临摹</h3>
<blockquote>
<p>每个类型的临摹一两个即可</p>
<ul>
<li>
<p>PC 网站、手机网站、UI 套件</p>
</li>
<li>
<p>再多无益</p>
</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="遇到查不到的问题怎么办">遇到查不到的问题，怎么办</h3>
<blockquote>
<p>遇到查不到的问题，应该去哪里查文档？  ——找标准制定者</p>
</blockquote>
<blockquote>
<p>李爵士、赖先生</p>
</blockquote>
<ul>
<li>W3C</li>
<li>搜索 CSS spec 可以找到 <a href="https://www.w3.org/Style/CSS/specs.en.html" target="_blank" rel="noopener noreffer">CSS 最新标准</a>
<ul>
<li>没人能看完它</li>
<li>你可以看看 CSS 2.1 标准的<a href="http://www.ayqy.net/doc/css2-1/cover.html" target="_blank" rel="noopener noreffer">中文版</a></li>
<li>正确学 css ，应该是遇到问题，再查资料</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="基本概念">基本概念</h2>
<h3 id="要理解几个重要的概念">要理解几个重要的概念</h3>
<ul>
<li><a href="#%e6%96%87%e6%a1%a3%e6%b5%81" rel="">文档流</a> Normal Flow</li>
<li><a href="#%e5%9d%97%e3%80%81%e5%86%85%e8%81%94%e3%80%81%e5%86%85%e8%81%94%e5%9d%97" rel="">块、内联、内联块</a></li>
<li><a href="#margin%e5%90%88%e5%b9%b6" rel="">margin 合并</a></li>
<li><a href="#%e7%9b%92%e6%a8%a1%e5%9e%8b" rel="">两种盒模型</a>（border-box 更符合人类思维）</li>
</ul>
<p>​</p>
<h3 id="文档流">文档流</h3>
<blockquote>
<p>文档流的英文名称叫做  Normal Flow</p>
<p>文档流方向：默认，内联元素从左到右，块级元素从上到下</p>
</blockquote>
<p></p>
<p></p>
<p>emmet:  <code>span{第$个span元素}*6</code> + tab</p>
<p>​</p>
<h3 id="块内联内联块">块、内联、内联块</h3>
<blockquote>
<ul>
<li>将元素分为：内联元素、块级元素。是一种已经过时的分法。
<ul>
<li>在新的 HTML5 标准中，元素不分内联、块级。所有元素都可以是内联元素，所有元素都可以是块级元素。</li>
</ul>
</li>
<li>看样式：如果 <strong><code>display:inline</code></strong>， 就是内联元素。如果 <strong><code>display: block</code></strong>  就是块级元素。</li>
<li>内联块：不会出现如【内联元素首尾可以在不同行】的情况，内联块会同行展示，但是又保有 block 的一个特点：不会跨两行（这就是inline和inline-block在流动方向上相似又稍微不同的点）</li>
</ul>
</blockquote>
<h4 id="流动方向">流动方向</h4>
<ul>
<li>inline 元素从左到右，到达最右边才会换行</li>
<li>block 元素从上到下，每一个都另起一行</li>
<li>inline-block 也是从左到右</li>
</ul>
<h4 id="宽度">宽度</h4>
<h5 id="inline-元素"><strong>inline 元素</strong></h5>
<ol>
<li>宽度为 内部 inline 元素的和。</li>
<li>不接受用 width 指定宽度。加了也不变化</li>
<li><strong>不要</strong>在 inline元素内部，再写 block 元素。它的计算可能乱套的，出现后果自负</li>
</ol>
<h5 id="block-元素"><strong>block 元素</strong></h5>
<ol>
<li>
<p>默认自动计算宽度，可用 width 指定</p>
<ul>
<li><code>width: 200px; </code>（200像素）、<code>width: 20em;</code> （20个字宽）</li>
</ul>
</li>
<li>
<p>不指定宽度，宽度默认是 <strong><code>width: auto</code></strong>。不是 width: 100%，<strong>是能有多宽就占多宽</strong>，最大可以占 100%</p>
<ul>
<li>如下图，每个div元素都有边框，【div默认宽度】=100%-边框宽度。如果【设置div宽度为100%】，那么相当于，整行宽度= div宽度100%+边框宽度，所以会多出边框宽度的一小块位置</li>
<li>==经验之谈==：给任何元素都尽量，<strong>不要设置 width: 100% 的样式</strong>。大部分情况写了就等于 bug。</li>
</ul>
<p></p>
</li>
</ol>
<h5 id="inline-block-元素"><strong>inline-block 元素</strong></h5>
<ol>
<li>
<p>结合前两者特点，可用 width</p>
<ul>
<li>
<p>默认情况，与 inline 一致</p>
</li>
<li>
<p>但是又可以用 width 指定宽度，这一点又与 block 一致</p>
</li>
</ul>
</li>
</ol>
<h4 id="高度">高度</h4>
<h5 id="inline-高度">inline 高度</h5>
<ol>
<li>
<p>由 <strong>line-height（行高）</strong> <strong>间接</strong>确定，跟 height 无关 （设置height无效）</p>
<ul>
<li>
<p>如下图，为什么外层的 绿div 没有包住 红span、被撑高呢？</p>
<ul>
<li>因为 span 的高度，不是【内容高+padding】决定的。<strong>padding 改变的不是 span 的实际高度</strong>，只是改变了可视的高度。div 框的高度才是 span 的<strong>实际高度</strong>。</li>
</ul>
<p></p>
<hr>
<ul>
<li>span 的实际高度，由 <strong>行高</strong> 间接确定。如下图，虽然span的红框仍然没变，但是 div高度变化了。而div包裹的高度才是 span 的<strong>实际高度</strong>（只需关注外层div高度即可，红框的高度并不是span实际高度）</li>
</ul>
<p></p>
</li>
<li>
<p>“间接” 怎么理解？</p>
<blockquote>
<p>即使设置行高100px，span的高度也有可能不是100px高</p>
</blockquote>
<ul>
<li>
<p>设置不同的<strong>字体</strong>，会改变 span 的实际高度。经测试：↓↓</p>
<ul>
<li>默认，微软雅黑字体、行高是100px的话，实际高度就是100px。</li>
<li>改成宋体、行高是100px，span 的实际高度变成 101px。</li>
<li>改成 monospace(等宽字体)、行高是100px。 实际高度变成 102px</li>
</ul>
</li>
<li>
<p>具体知识点叫做：<strong>行盒</strong></p>
<p>（可以看<a href="https://zhuanlan.zhihu.com/p/25808995" target="_blank" rel="noopener noreffer">文章</a>，能看懂就看，面试官可能都看不懂，前期可以不用研究这么深）</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h5 id="block-高度">block 高度</h5>
<ul>
<li>
<p>默认高度，由内部所有 <strong>文档流元素</strong> 的<strong>高度总和</strong> 决定的。（由默认行高间接决定）
</p>
<ul>
<li>
<p>内层div是脱离文档流的元素，外层div就无法计算上它的高度</p>
<ul>
<li>
<p>后面会介绍：如何<strong>脱离文档流</strong>、脱离后去哪里了</p>
<p></p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>同时也可以自定义设置 height 高度。这种情况，就忽略内部元素高度。</p>
</li>
<li>
<p>如果div中没有任何内容，高度为0。区别于span，span中没有内容，也有高度，由 默认的 line-height 决定。</p>
<p></p>
</li>
</ul>
<h5 id="inline-block-高度">inline-block 高度</h5>
<ul>
<li>默认高度的计算，跟 block 一样。</li>
<li>也可以自定义设置 height。</li>
</ul>
<h3 id="overflow-溢出">overflow 溢出</h3>
<blockquote>
<p>当内容大于容器</p>
</blockquote>
<ul>
<li>当内容的宽度或高度大于容器的，会溢出
<ul>
<li>可用 overflow 来设置是否显示滚动条</li>
<li>auto 是灵活设置</li>
<li>scroll 是永远显示（基本不用）</li>
<li>hidden 是直接隐藏溢出部分</li>
<li>visible 是直接显示溢出部分（默认值）</li>
<li>overflow 可以分为 overflow-x 和 overflow-y，通常只用overflow。x和y可能最终效果会与实际需求有差</li>
</ul>
</li>
</ul>
<ul>
<li>
<p>示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;width: 10em; height: 200px;&#34;</span><span class="p">&gt;</span>内容......<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="nt">overflow</span><span class="o">:</span> <span class="nt">visible</span><span class="o">;</span>   <span class="c">/* 默认 */</span>
<span class="nt">overflow</span><span class="o">:</span> <span class="nt">hidden</span><span class="o">;</span>   <span class="c">/* 超出部分隐藏 */</span>
<span class="nt">overflow</span><span class="o">:</span> <span class="nt">scroll</span><span class="o">;</span>   <span class="c">/* 超出部分可滚动预览，很少有人用。因为内容没溢出时，仍显示滚动条，非常丑 */</span>
<span class="nt">overflow</span><span class="o">:</span> <span class="nt">auto</span><span class="o">;</span> 		<span class="c">/* 超出时显示滚动条，不超出不显示 */</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
<li>
<p>横向滚动条</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;width: 10em; height: 200px;&#34;</span><span class="p">&gt;</span>
  内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;width:1000px;&#34;</span><span class="p">&gt;</span>
    内容
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    
<span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
<span class="nt">div</span><span class="p">{</span>
  <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">green</span><span class="p">;</span>
  <span class="k">overflow</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">span</span><span class="p">{</span>
  <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>内部文档流元素宽度超出外层父元素，就会出现横向滚动条</p>
</li>
<li>
<p>同时原本的内容，不会因为宽度被内部元素撑开而平铺显示，仍会只显示在第一屏中</p>
<p></p>
</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="脱离文档流">脱离文档流</h3>
<h4 id="回忆一下">回忆一下</h4>
<ul>
<li>
<p>block 高度由内部文档流元素决定，可以设 height</p>
</li>
<li>
<p>这句话的意思是不是说，有些元素可以不在文档流中</p>
</li>
</ul>
<h4 id="哪些元素脱离文档流">哪些元素脱离文档流</h4>
<blockquote>
<p>脱离文档流的元素，那么它所在的容器，就不会把它计算进高度中</p>
<ul>
<li><strong>脱离文档流</strong>，就是从普通文档流中跳出，比普通文档流的层级稍高</li>
</ul>
</blockquote>
<ul>
<li>
<p>float</p>
</li>
<li>
<p>position: absolute / fixed</p>
</li>
</ul>
<h4 id="怎么让元素不脱离文档流">怎么让元素不脱离文档流</h4>
<ul>
<li>不要用上面属性不就不脱离了</li>
</ul>
<p>​</p>
<h3 id="盒模型">盒模型</h3>
<blockquote>
<p>content box &amp; border box</p>
<p>css 盒模型分为两种：一种是 content-box ，一种是 border-box</p>
<p>二者的区别是：</p>
<ul>
<li>content-box 的宽度，只包含 content 部分</li>
<li>border-box 的宽度，包含 border、padding 和 content</li>
</ul>
</blockquote>
<p></p>
<h4 id="分别是">分别是</h4>
<ul>
<li>content-box 内容盒 - 内容，就是盒子的边界</li>
<li>border-box 边框盒 - 边框，才是盒子的边界</li>
</ul>
<h4 id="公式">公式</h4>
<ul>
<li>content-box width = 内容宽度</li>
<li>border-box width = 内容宽度 + padding + border</li>
</ul>
<h4 id="哪个好用">哪个好用</h4>
<ul>
<li>border-box 好用</li>
<li>同时指定 padding、width、border 就知道为什么了</li>
</ul>
<p>​</p>
<h3 id="margin合并">margin合并</h3>
<h4 id="哪些情况会合并">哪些情况会合并</h4>
<ul>
<li>
<p>兄弟 margin 合并</p>
<ul>
<li>上方元素的 margin-bottom，会和下方元素的 margin-top 重合</li>
</ul>
</li>
<li>
<p>父子 margin 合并</p>
<ul>
<li>给子元素添加 margin-top，效果会作用在父元素上（bf：嵌套崩塌）</li>
<li>第一个子元素的 margin-top，会和 最后一个子元素的 margin-bottom，效果会作用在父元素的 margin-top/bottom 或 和父元素的 margin-top/bottom 重合</li>
</ul>
<blockquote>
<p>记住：只有上下会重叠，左右从来不重叠</p>
</blockquote>
</li>
</ul>
<h4 id="如何阻止合并">如何阻止合并</h4>
<blockquote>
<p>不要问为什么，CSS 很多效果是试出来了，无法解释清楚</p>
</blockquote>
<ul>
<li>父子合并用 padding / border 挡住
<ul>
<li>可以用很小的 padding/border 来挡住，让父子的margin无法穿透并重叠</li>
</ul>
</li>
<li>父子合并用 overflow: hidden 挡住</li>
<li>父子合并用 display: flex，不知道为什么，试出来的</li>
<li>兄弟合并是符合预期的</li>
<li>兄弟合并可以用 <code>display: inline-block</code> 消除</li>
</ul>
<p>总之要一条一条死记。</p>
<p>而且 CSS 的属性逐年增多，每年都可能有新的</p>
<blockquote>
<p>为什么css 难学？</p>
<ul>
<li>不正交
<ul>
<li>因为很多没有道理，需要死记硬背的点。</li>
<li>为什么 <code>display: inline-block</code> 可以消除 margin 合并。</li>
<li>并没有 <code>enable-margin-callapse: false</code>  这种选项，翻译一下就知道它是用来单独控制margin合并的。</li>
<li>无法知道 现在写的这句 css，到底会影响哪些属性</li>
</ul>
</li>
<li>什么叫正交？
<ul>
<li>当我们调节显示器的亮度时，显示器的对比度不会改变。</li>
<li>而 css 是不正交的，因为我们在写某一个属性时，可能就会改变其他属性的状态、效果</li>
</ul>
</li>
</ul>
</blockquote>
<p></p>
<p>​</p>
<p>​</p>
<h3 id="基本单位">基本单位</h3>
<h4 id="长度单位">长度单位</h4>
<ul>
<li>px 像素</li>
<li>em 相对于自身 font-size 的倍数</li>
<li>百分数</li>
<li>整数</li>
<li>rem：等你把 em 滚瓜烂熟了再问 rem</li>
<li>vw 和 vh</li>
<li>其他长度单位都用得很少，不用了解</li>
</ul>
<h4 id="颜色">颜色</h4>
<ul>
<li>十六进制 <code>#FF6600</code> 或者 <code>#F60</code> <code>#000</code>
<ul>
<li>也支持最后添加 alpha。 <code>#FF660000</code> 全透明、 <code>#FF6600FF</code> 不透、 <code>#FF660088</code> 半透。但<strong>兼容性不确定</strong></li>
</ul>
</li>
<li>RGBA 颜色 <code>rgb(0,0,0)</code> 或者<code> rgba(0,0,0,1)</code></li>
<li>hsl 颜色 <code>hsl(360,100%,100%)</code>：色相、饱和度、明度
<ul>
<li><code>hsla(360,100%,100%, 0.5)</code></li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="实践做一个彩虹">实践：做一个彩虹</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>JS Bin<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;rainbow&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
              <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                  
                <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
              <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
          <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="o">*</span> <span class="p">{</span>
  <span class="k">box-sizing</span><span class="p">:</span> <span class="kc">border-box</span><span class="p">;</span>
  <span class="k">margin</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">body</span><span class="p">{</span>
  <span class="k">background</span><span class="p">:</span> <span class="kc">white</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="p">{</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">200</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">overflow</span><span class="p">:</span> <span class="kc">hidden</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="nt">div</span> <span class="p">{</span>
  <span class="k">overflow</span><span class="p">:</span> <span class="kc">hidden</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
  <span class="k">width</span><span class="p">:</span> <span class="mi">400</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">400</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">background</span><span class="p">:</span> <span class="kc">red</span><span class="p">;</span>
  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="o">&gt;</span> <span class="nt">div</span><span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
  <span class="k">background</span><span class="p">:</span> <span class="nb">hsl</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="mi">80</span><span class="kt">%</span><span class="p">,</span> <span class="mi">50</span><span class="kt">%</span><span class="p">);</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">380</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">margin</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="o">&gt;</span> <span class="nt">div</span><span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
  <span class="k">background</span><span class="p">:</span> <span class="nb">hsl</span><span class="p">(</span><span class="mi">120</span><span class="p">,</span> <span class="mi">80</span><span class="kt">%</span><span class="p">,</span> <span class="mi">50</span><span class="kt">%</span><span class="p">);</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">360</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">margin</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="o">&gt;</span> <span class="nt">div</span><span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
  <span class="k">background</span><span class="p">:</span> <span class="nb">hsl</span><span class="p">(</span><span class="mi">180</span><span class="p">,</span> <span class="mi">80</span><span class="kt">%</span><span class="p">,</span> <span class="mi">50</span><span class="kt">%</span><span class="p">);</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">340</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">margin</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="o">&gt;</span> <span class="nt">div</span><span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span><span class="nt">div</span> <span class="p">{</span>
  <span class="k">background</span><span class="p">:</span> <span class="nb">hsl</span><span class="p">(</span><span class="mi">240</span><span class="p">,</span> <span class="mi">80</span><span class="kt">%</span><span class="p">,</span> <span class="mi">50</span><span class="kt">%</span><span class="p">);</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">320</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">margin</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="o">&gt;</span> <span class="nt">div</span><span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span><span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
  <span class="k">background</span><span class="p">:</span> <span class="nb">hsl</span><span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="mi">80</span><span class="kt">%</span><span class="p">,</span> <span class="mi">50</span><span class="kt">%</span><span class="p">);</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">300</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">margin</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="o">&gt;</span> <span class="nt">div</span><span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span><span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
  <span class="k">background</span><span class="p">:</span> <span class="nb">hsl</span><span class="p">(</span><span class="mi">330</span><span class="p">,</span> <span class="mi">80</span><span class="kt">%</span><span class="p">,</span> <span class="mi">50</span><span class="kt">%</span><span class="p">);</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">280</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">margin</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="o">&gt;</span> <span class="nt">div</span><span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span><span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
  <span class="k">background</span><span class="p">:</span> <span class="nb">hsl</span><span class="p">(</span><span class="mi">330</span><span class="p">,</span> <span class="mi">80</span><span class="kt">%</span><span class="p">,</span> <span class="mi">100</span><span class="kt">%</span><span class="p">);</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">260</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">margin</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>]]></description>
</item></channel>
</rss>

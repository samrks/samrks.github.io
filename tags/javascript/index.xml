<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>JavaScript - 标签 - Sam&#39;s Garage</title>
        <link>http://samrks.github.io/tags/javascript/</link>
        <description>JavaScript - 标签 - Sam&#39;s Garage</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ryuukousen@gmail.com (Sam)</managingEditor>
            <webMaster>ryuukousen@gmail.com (Sam)</webMaster><lastBuildDate>Thu, 24 Sep 2020 18:12:52 &#43;0800</lastBuildDate><atom:link href="http://samrks.github.io/tags/javascript/" rel="self" type="application/rss+xml" /><item>
    <title>JS 阶段总结</title>
    <link>http://samrks.github.io/javascript-summary/</link>
    <pubDate>Thu, 24 Sep 2020 18:12:52 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-summary/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="知识点">知识点</h2>
<h3 id="基本概念">基本概念</h3>
<ul>
<li><strong>内存</strong>：内存图</li>
<li><strong>变量</strong>：如何声明、哪些类型</li>
<li><strong>数据类型</strong>：哪7种</li>
<li><strong>对象</strong>：是什么、有什么属性、如何构造的</li>
</ul>
<h3 id="控制语句">控制语句</h3>
<ul>
<li>if&hellip;else&hellip;</li>
<li>for&hellip;</li>
</ul>
<h3 id="对象">对象</h3>
<ul>
<li>原型、原型链</li>
<li>对象分类：数 组是什么对象、函数是什么对象</li>
<li>如何 new 一个新对象：new 做了哪 4 件事情</li>
<li>构造函数：是什么</li>
<li>this 的隐式传递和显式传递：普通调用就是隐式传递、推荐用 call 显式传递</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="难点">难点</h2>
<h3 id="js-三座大山">JS 三座大山</h3>
<ol>
<li>原型</li>
<li>this</li>
<li>AJAX</li>
</ol>
<h3 id="已经遇到了前两座">已经遇到了前两座</h3>
<ul>
<li>前端门槛</li>
<li>反复学反复理解</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="最重要的知识-">最重要的知识 ⭐️</h2>
<h3 id="第一个重要知识js-公式">第一个重要知识：JS 公式</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">对象</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">其构造函数</span><span class="p">.</span><span class="nx">prototype</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>JS 唯一公式</p>
</blockquote>
<p>​</p>
<h3 id="第二个重要知识根公理">第二个重要知识：根公理</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="nx">是根对象</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="nx">是所有对象的原型</span> 
<span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="nx">是所有对象的直接或间接的原型</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>加了一个直接或间接，所谓公理就是 JS 规定好的</p>
</blockquote>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;frank&#39;</span><span class="p">}</span> <span class="nx">的原型</span><span class="o">:</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="err">（</span><span class="nx">直接原型</span><span class="err">）</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="nx">的原型是</span><span class="o">:</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="err">（</span><span class="nx">直接原型</span><span class="err">）</span> <span class="nx">的原型是</span>  <span class="p">=&gt;</span>  <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="err">（</span><span class="nx">间接原型</span><span class="err">）</span>
<span class="nb">Object</span> <span class="nx">的原型是</span><span class="o">:</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="err">（</span><span class="nx">直接原型</span><span class="err">）</span> <span class="nx">的原型是</span> <span class="p">=&gt;</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="err">（</span><span class="nx">间接原型</span><span class="err">）</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="第三个重要知识函数公理">第三个重要知识：函数公理</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">所有函数都是由</span> <span class="nb">Function</span> <span class="nx">构造的</span>
</code></pre></td></tr></table>
</div>
</div><p>推出 👇</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">任何函数</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span>
<span class="nx">任意函数有</span> <span class="nb">Object</span> <span class="o">/</span> <span class="nb">Array</span> <span class="o">/</span> <span class="nb">Function</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">f1</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>
<span class="nx">f1</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="总结">总结</h2>
<ul>
<li>JS 公式、根公理、函数公理</li>
<li>基于这三个知识和基础知识，可以推出 JS 世界</li>
</ul>
<p>（细品）</p>
<p>​</p>
<p>​</p>
<h2 id="拨乱反正误区">拨乱反正（误区）</h2>
<h3 id="乱一的原型">乱一：「的原型」</h3>
<h4 id="xxx-的原型">XXX 的原型</h4>
<blockquote>
<p>提到 「xxx 的原型」，到底指的是 <code>__proto__</code> 还是 <code>prototype</code></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">-</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;frank&#39;</span><span class="p">}</span> <span class="nx">的原型</span>
<span class="o">-</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="nx">的原型</span>
<span class="o">-</span> <span class="nb">Object</span> <span class="nx">的原型</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="解读">解读</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">-</span> <span class="nb">Object</span> <span class="nx">的原型是</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">__proto__</span><span class="err">：</span><span class="nx">对</span>
<span class="o">-</span> <span class="nb">Object</span> <span class="nx">的原型是</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="err">：</span><span class="nx">错</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="分析">分析</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">-</span> <span class="nx">约定只要提到</span><span class="err">「</span><span class="nx">xxx的原型</span><span class="err">」</span><span class="nx">就是指</span><span class="err">「</span><span class="nx">xxx</span><span class="p">.</span><span class="nx">__proto__</span><span class="err">」</span>
<span class="o">-</span> <span class="nx">中文的</span><span class="err">「</span><span class="nx">原型</span><span class="err">」</span><span class="nx">无法区分</span> <span class="nx">__proto__</span> <span class="nx">和</span> <span class="nx">prototype</span><span class="err">，</span><span class="nx">可以同时代指这俩</span>
<span class="o">-</span> <span class="nx">所以我们只能约定</span><span class="err">，「</span><span class="nx">原型</span><span class="err">」</span><span class="nx">默认表示</span> <span class="nx">__proto__</span> 
<span class="o">-</span> <span class="nx">只不过</span> <span class="nx">__proto__</span> <span class="nx">正好等于某个函数的</span> <span class="nx">prototype</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="乱二直接间接原型">乱二：直接/间接原型</h3>
<h4 id="矛盾了吗">矛盾了吗？</h4>
<ul>
<li>说 [1,2,3] 的原型是 Array.prototype</li>
<li>又说 Object.prototype 是所有对象的原型</li>
<li>那为什么 Object.prototype 不是 [1,2,3] 的原型</li>
</ul>
<h4 id="怎么理解">怎么理解</h4>
<ul>
<li>原型分两种：直接原型 和 间接原型</li>
<li>对于普通对象来说，Object.prototype 是直接原型</li>
<li>对于数组、函数来说，Object.prototype 是间接原型</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">-</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;frank&#39;</span><span class="p">}</span> <span class="nx">的原型</span><span class="o">:</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="err">（</span><span class="nx">直接原型</span><span class="err">）</span>
<span class="o">-</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="nx">的原型是</span><span class="o">:</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="err">（</span><span class="nx">直接原型</span><span class="err">）</span> <span class="nx">的原型是</span>  <span class="p">=&gt;</span>  <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="err">（</span><span class="nx">间接原型</span><span class="err">）</span>
<span class="o">-</span> <span class="nb">Object</span> <span class="nx">的原型是</span><span class="o">:</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="err">（</span><span class="nx">直接原型</span><span class="err">）</span> <span class="nx">的原型是</span> <span class="p">=&gt;</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="err">（</span><span class="nx">间接原型</span><span class="err">）</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>其实，只要在浏览器中输出一下 [1,2,3]  看看 proto 就能理解 直接原型 和 间接原型</p>
</blockquote>
<blockquote>
<p>比较好理解</p>
</blockquote>
<p>​</p>
<h3 id="乱三objectprototype">乱三：Object.prototype</h3>
<h4 id="有人认为-objectprototype-不是根对象">有人认为 Object.prototype 不是根对象</h4>
<p>（质疑公理 😏）</p>
<h4 id="理由如下">理由如下</h4>
<ul>
<li>Object.prototype 是所有对象的原型</li>
<li>Object 是 Function 构造出来的</li>
<li>所以，Function 构造了 Object.prototype</li>
<li>推论，Function 才是万物之源啊！</li>
<li>（看似无懈可击的推理，实际上是对更基础的知识没有理解好）</li>
</ul>
<h4 id="反驳">反驳</h4>
<blockquote>
<p>要理解 <font color="red">Object.prototype</font> 和 <font color="red">Object.prototype 对象</font>  的区别</p>
</blockquote>
<ul>
<li>
<p>实际上，<font color="red">Object.prototype</font> 的值，本身是一个内存地址，指向的内存空间是  <font color="red">Object.prototype 对象</font></p>
</li>
<li>
<p>只是我们日常习惯口头上称 <font color="red">Object.prototype</font> 为原型对象（实际上只是个地址）</p>
</li>
<li>
<p>“Function 构造了 Object.prototype”  是构造出了 Object 上存根地址的属性 <code>prototype: #202</code>，而不是构造出原型对象本身 （结合内存图理解）</p>
</li>
<li>
<p>对象里面从来都不会包含另一个对象，只会包含另一个对象的地址</p>
</li>
</ul>
<p></p>
<blockquote>
<p>接下来我们要把 JS 世界的建造顺序理清楚</p>
</blockquote>
<p>​</p>
<h2 id="再画-js-世界">再画 JS 世界</h2>
<h3 id="js-世界的构造顺序">JS 世界的构造顺序</h3>
<ol>
<li>
<p>创建根对象 #101  (toString)，根对象没有名字</p>
</li>
<li>
<p>创建函数的原型 #208  (call /apply)，原型 __p 为 #101</p>
</li>
<li>
<p>创建数组的原型 #404  (push/pop)，原型 __p 为 #101</p>
</li>
<li>
<p>创建 Function #342，原型 __p 为 #208</p>
</li>
<li>
<p>用 Function.prototype 存储函数的原型，等于 #208</p>
</li>
<li>
<p>此时发现 Function 的 <em>_proto</em>_ 和 prototype 都是 #208</p>
</li>
<li>
<p>用 Function 创建 Object #909</p>
</li>
<li>
<p>用 Object.prototype 存储对象的原型，等于 #101</p>
</li>
<li>
<p>用 Function 创建 Array</p>
</li>
<li>
<p>用 Array.prototype 存储数组的原型，等于 #404</p>
</li>
<li>
<p>创建 window 对象</p>
</li>
<li>
<p>用 window 的 &lsquo;Object&rsquo; &lsquo;Array&rsquo; 属性将 7 和 9 中的函数命名</p>
</li>
</ol>
<blockquote>
<p>记住一点，JS 创建一个对象时，不会给这个对象名字的</p>
</blockquote>
<p></p>
<h3 id="构造一个新对象的过程">构造一个新对象的过程</h3>
<ol>
<li>用 new Object() 创建 obj1</li>
<li>new 会将 obj1 的原型 __p 设置为 Object.prototype，也就是 #101
因为创建 JS 世界时，把原型的地址存到了 Object.prototype  上</li>
<li>用 new Array() 创建 arr1</li>
<li>new 会将 arr1 的原型 __p 设置为 Array.prototype，也就是 #404</li>
<li>用 new Function 创建 f1</li>
<li>new 会将 f1 的原型 __p 设置为 Function.prototype，也就是 #208</li>
</ol>
<blockquote>
<p>总结</p>
<p><code>new XXX</code>， 就把 new 出来的实例的原型 __p 设为 <code>XXX.prototype</code></p>
</blockquote>
<p>​</p>
<h3 id="自定义构造函数创建过程">自定义构造函数创建过程</h3>
<ol>
<li>自己定义构造函数 Person，函数里给 this 加属性</li>
<li>Person 自动创建 prototype 属性和对应的对象 #502</li>
<li>在 Person.prototype #502 上面加属性</li>
<li>用 new Person() 创建对象 p</li>
<li>new 会将 p 的原型 __p 设为 #502</li>
</ol>
<p>​</p>
<p>​</p>
<h3 id="漂亮的图示-">漂亮的图示 ⭐️</h3>
<blockquote>
<p>需求：清晰的理解下图的每一条线</p>
</blockquote>
<blockquote>
<p>Array、Object、Function 三个都是函数，所以他们本身的原型 __p 都指向「函数的原型」</p>
<p>而每一个函数都存了其构造出的「(孩子) 新对象」的原型（共有属性） prototype</p>
</blockquote>
<p></p>
<p>​</p>
<h3 id="prototype-和-__proto__-区别">prototype 和 <em>_proto</em>_ 区别</h3>
<blockquote>
<p>细品</p>
</blockquote>
<ol>
<li>
<p>都存着<strong>原型的地址</strong></p>
</li>
<li>
<p>只不过 <code>prototype</code> 挂在函数上</p>
<ul>
<li>Object 是个构造函数，Object.prototype 就存储了 Object构造的新对象 的共有属性</li>
<li>Array 是个构造函数，Array.prototype 就存储了 Array构造的新对象 的共有属性</li>
</ul>
</li>
<li>
<p><code>__proto__</code> 挂在每个新生成的对象上</p>
</li>
</ol>
<ul>
<li>Object构造的新对象 obj1 的共有属性在 obj1.__proto__ 上
<ul>
<li>Array构造的新对象 arr1 的共有属性在 arr1.__proto__ 上</li>
</ul>
</li>
</ul>
<ol start="4">
<li>
<p>函数上的 prototype 指向这个函数构造出来的孩子的共有属性</p>
</li>
<li>
<p>孩子上的 <em>_proto</em>_ 指向其父构造函数赋予这个孩子的共有属性</p>
</li>
<li>
<p>每个函数都有 prototype、每个对象都有__proto__ ，而函数也属于对象，所以函数同时有 prototype 和 __proto__</p>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>  
<span class="nx">等价于</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">()</span>

<span class="c1">// Object 上有 prototype
</span><span class="c1">// obj 上有 __proto__
</span><span class="c1"></span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>   <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="总结-">总结 ⭐️</h2>
<blockquote>
<p>必须非常清晰的理解</p>
</blockquote>
<blockquote>
<p>不管怎么绕，都要清楚的理解</p>
<ul>
<li>函数的构造函数 Function ，构造出了函数 f1</li>
<li>对象的构造函数 Object，构造出了对象 obj1</li>
<li>数组的构造函数 Array ，构造出了数组 array1</li>
<li>(window.)Function 的构造函数是 Function</li>
<li>array1 的构造函数是 Array</li>
<li>obj 的构造函数是 Object</li>
<li>Object 的构造函数是 Function</li>
<li>…</li>
</ul>
</blockquote>
<h3 id="构造函数">构造函数</h3>
<ul>
<li>是用来构造对象的</li>
<li>会预先存好对象的原型，原型的原型是根</li>
<li>new 的时候将对象的 __p 指向原型</li>
</ul>
<h3 id="对象-1">对象</h3>
<ul>
<li>所有对象都直接或间接指向根对象</li>
<li>如果对象想要分类，就在原型链上加一环</li>
<li>用构造函数可以加这一环</li>
</ul>
<h3 id="思考">思考</h3>
<ul>
<li>如果加了一环之后，想再加一环怎么办 （加两环，要用继承的方式）</li>
<li>以后会在「继承」里讲</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="例-">例 ⚡️</h2>
<blockquote>
<p>把其他知识都忘掉，就记住以下</p>
<ol>
<li><strong>JS 公式</strong>：对象.__proto__ === 其构造函数.prototype</li>
<li><strong>根公理</strong>：Object.prototype 是所有对象的直接或间接的原型</li>
<li><strong>函数公理</strong>：所有函数都是由 Function 构造的</li>
</ol>
</blockquote>
<ol>
<li>
<p>Object.prototype 的原型是什么</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 1.约定只要提到「xxx的原型」就是指「xxx.__proto__」
</span><span class="c1">// 2.Object.prototype 是所有对象的原型（是根，根就不再往上有原型了）
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="kc">null</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Function.prototype 的原型是什么</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">//（JS公式）等于问 Function.prototype 的「构造函数」.prototype
</span><span class="c1">// 重点在 Function.prototype 的构造函数 是 ？？
</span><span class="c1"></span><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">==</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{}</span>  <span class="c1">// 箭头函数的原型是什么  
</span><span class="c1">// 所有函数都是由 Function 构造的
</span><span class="c1"></span><span class="nx">f</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Function 的原型是什么</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 所有函数都是由 Function 构造的
</span><span class="c1"></span><span class="nb">Function</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Array.prototype.toString 的原型是什么</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// toString 是个函数
</span><span class="c1">// 所有函数都是由 Function 构造的
</span><span class="c1"></span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Object 的原型是什么</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Object</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Array.prototype 是谁的原型</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 把公式一反过来用
</span><span class="c1">// 是用 Array 构造的实例的原型
</span><span class="c1"></span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">===</span> <span class="p">[].</span><span class="nx">__proto__</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>]]></description>
</item><item>
    <title>JS 运算符 </title>
    <link>http://samrks.github.io/javascript-operators/</link>
    <pubDate>Fri, 18 Sep 2020 23:24:12 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-operators/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="前言">前言</h2>
<blockquote>
<p><a href="https://wangdoc.com/javascript/operators/index.html" target="_blank" rel="noopener noreffer">JavaScript 网道：运算符</a></p>
</blockquote>
<p>​</p>
<h2 id="算数运算符">算数运算符</h2>
<blockquote>
<p>数学运算</p>
</blockquote>
<h3 id="number-运算">number 运算</h3>
<h4 id="加减乘除">加减乘除</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">1</span><span class="o">+</span><span class="mi">1</span>    <span class="c1">// 2
</span><span class="c1"></span><span class="mi">9</span><span class="o">-</span><span class="mi">4</span>    <span class="c1">// 5
</span><span class="c1"></span><span class="mi">5</span><span class="o">*</span><span class="mi">3</span>    <span class="c1">// 15
</span><span class="c1"></span><span class="mi">9</span><span class="o">/</span><span class="mi">4</span>    <span class="c1">// 2.25
</span><span class="c1"></span><span class="mi">9</span><span class="o">/</span><span class="mi">0</span>    <span class="c1">// Infinity  正无穷大
</span><span class="c1"></span><span class="o">-</span><span class="mi">9</span><span class="o">/-</span><span class="mi">0</span>  <span class="c1">// Infinity  正无穷大
</span><span class="c1"></span><span class="mi">9</span><span class="o">/-</span><span class="mi">0</span>   <span class="c1">// -Infinity  负无穷大
</span><span class="c1"></span><span class="o">-</span><span class="mi">9</span><span class="o">/</span><span class="mi">0</span>   <span class="c1">// -Infinity  负无穷大
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="余数-x--7">余数 x % 7</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">10</span> <span class="o">%</span> <span class="mi">7</span>    <span class="c1">// 3
</span><span class="c1"></span> <span class="mi">7</span> <span class="o">%</span> <span class="mi">7</span>    <span class="c1">// 0   表示没有余数
</span><span class="c1"></span><span class="o">-</span><span class="mi">1</span> <span class="o">%</span> <span class="mi">7</span>    <span class="c1">// -1  把负号提出来，用1%7=&gt;1，然后合起两部分 =&gt; -1
</span><span class="c1"></span> <span class="mi">1</span> <span class="o">%</span> <span class="o">-</span><span class="mi">7</span>   <span class="c1">// 1
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>数学逻辑原理上：</p>
<ul>
<li>两个数相隔 x ，再分别和 x 取余，其结果应该是相等的</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 10 和 17 相隔 7，分别和 7 取余，结果应该是等价的
</span><span class="c1"></span><span class="mi">10</span> <span class="o">%</span> <span class="mi">7</span> <span class="o">===</span> <span class="mi">17</span> <span class="o">%</span> <span class="mi">7</span>    <span class="c1">// true
</span><span class="c1"></span><span class="o">-</span><span class="mi">1</span> <span class="o">%</span> <span class="mi">7</span> <span class="o">===</span>  <span class="mi">6</span> <span class="o">%</span> <span class="mi">7</span>    <span class="c1">// false  // JS 中负数取余有BUG
</span></code></pre></td></tr></table>
</div>
</div><h5 id="变态面试题负数取余">变态面试题：负数取余</h5>
<blockquote>
<p>JS 犯错了，在 JS 中</p>
<ul>
<li>如果是<strong>负数取余</strong> -x % y ，执行的逻辑是，先把负号提出来，两个正数取余，其结果再加上负号</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">-</span><span class="nx">x</span> <span class="o">%</span> <span class="nx">y</span>    <span class="p">=&gt;</span>  <span class="o">-</span><span class="p">(</span><span class="nx">x</span> <span class="o">%</span> <span class="nx">y</span><span class="p">)</span>
<span class="o">-</span><span class="nx">x</span> <span class="o">%</span> <span class="o">-</span><span class="nx">y</span>   <span class="p">=&gt;</span>  <span class="o">-</span><span class="p">(</span><span class="nx">x</span> <span class="o">%</span> <span class="nx">y</span><span class="p">)</span>
 <span class="nx">x</span> <span class="o">%</span> <span class="o">-</span><span class="nx">y</span>   <span class="p">=&gt;</span>  <span class="nx">x</span> <span class="o">%</span> <span class="nx">y</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">-</span><span class="mi">1</span> <span class="o">%</span> <span class="mi">7</span>    <span class="c1">// -1
</span><span class="c1"></span><span class="o">-</span><span class="mi">7</span> <span class="o">%</span> <span class="mi">8</span>    <span class="c1">// -7
</span><span class="c1"></span><span class="o">-</span><span class="mi">4</span> <span class="o">%</span> <span class="mi">3</span>    <span class="c1">// -1
</span><span class="c1"></span><span class="o">-</span><span class="mi">4</span> <span class="o">%</span> <span class="mi">2</span>    <span class="c1">// -0
</span><span class="c1"></span><span class="o">-</span><span class="mi">4</span> <span class="o">%</span> <span class="mi">8</span>    <span class="c1">// -4
</span><span class="c1"></span><span class="o">----------------------------------</span>
<span class="o">-</span><span class="mi">1</span> <span class="o">%</span> <span class="o">-</span><span class="mi">7</span>   <span class="c1">// -1
</span><span class="c1"></span><span class="o">-</span><span class="mi">7</span> <span class="o">%</span> <span class="o">-</span><span class="mi">8</span>   <span class="c1">// -7
</span><span class="c1"></span><span class="o">-</span><span class="mi">4</span> <span class="o">%</span> <span class="o">-</span><span class="mi">3</span>   <span class="c1">// -1
</span><span class="c1"></span><span class="o">-</span><span class="mi">4</span> <span class="o">%</span> <span class="o">-</span><span class="mi">2</span>   <span class="c1">// -0
</span><span class="c1"></span><span class="o">-</span><span class="mi">4</span> <span class="o">%</span> <span class="o">-</span><span class="mi">8</span>   <span class="c1">// -4
</span><span class="c1"></span><span class="o">----------------------------------</span>
 <span class="mi">1</span> <span class="o">%</span> <span class="o">-</span><span class="mi">7</span>   <span class="c1">// 1
</span><span class="c1"></span> <span class="mi">7</span> <span class="o">%</span> <span class="o">-</span><span class="mi">8</span>   <span class="c1">// 7
</span><span class="c1"></span> <span class="mi">4</span> <span class="o">%</span> <span class="o">-</span><span class="mi">3</span>   <span class="c1">// 1
</span><span class="c1"></span> <span class="mi">4</span> <span class="o">%</span> <span class="o">-</span><span class="mi">2</span>   <span class="c1">// 0
</span><span class="c1"></span> <span class="mi">4</span> <span class="o">%</span> <span class="o">-</span><span class="mi">8</span>   <span class="c1">// 4
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="指数-x--3">指数 x ** 3</h4>
<blockquote>
<p>x  的 3次方</p>
</blockquote>
<blockquote>
<p>这是最新的语法，但是 IE6 不支持（谁管它~🙄）</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">7</span> <span class="o">**</span> <span class="mi">2</span>    <span class="c1">// 49
</span><span class="c1"></span><span class="mi">8</span> <span class="o">**</span> <span class="mi">2</span>    <span class="c1">// 64
</span><span class="c1"></span><span class="mi">2</span> <span class="o">**</span> <span class="mi">3</span>    <span class="c1">// 8
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="自增自减--x--x--x------x">自增自减 👿 x++ / ++x / x&ndash; / &ndash;x</h4>
<blockquote>
<p>面试常考</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nx">a</span><span class="o">++</span>  <span class="c1">// 1 --- 表达式的值
</span><span class="c1"></span><span class="nx">a</span>    <span class="c1">// 2
</span><span class="c1"></span><span class="nx">a</span><span class="o">--</span>  <span class="c1">// 2 --- 表达式的值
</span><span class="c1"></span><span class="nx">a</span>    <span class="c1">// 1
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="o">++</span><span class="nx">a</span>  <span class="c1">// 2 --- 表达式的值
</span><span class="c1"></span><span class="nx">a</span>    <span class="c1">// 2
</span><span class="c1"></span><span class="o">--</span><span class="nx">a</span>  <span class="c1">// 1 --- 表达式的值
</span><span class="c1"></span><span class="nx">a</span>    <span class="c1">// 1
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>规则：</p>
<ul>
<li>a 在前，表达式的值就是 ++ 前的值</li>
<li>a 在后，表达式的值就是 ++ 后的值</li>
<li>a 在前，表达式的值就是 &ndash; 前的值</li>
<li>a 在后，表达式的值就是 &ndash; 后的值</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span>
<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">a</span><span class="o">++</span>   <span class="c1">// 先赋值，后自增
</span><span class="c1"></span><span class="nx">b</span>  <span class="c1">// 10
</span><span class="c1"></span><span class="nx">a</span>  <span class="c1">// 11
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="求值运算符-x">求值运算符 +x</h4>
<blockquote>
<p>就是单纯的获取一下值，不对值做任何改变</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">8</span>
<span class="o">+</span><span class="nx">a</span>   <span class="c1">// 8
</span><span class="c1"></span><span class="o">----------------------</span>
<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="o">-</span><span class="mi">8</span>
<span class="o">+</span><span class="nx">a</span>   <span class="c1">// -8
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="负数运算符--x">负数运算符 -x</h4>
<blockquote>
<p>求负运算：正数变负数、负数变正数</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">8</span>
<span class="o">-</span><span class="nx">a</span>   <span class="c1">// -8
</span><span class="c1"></span><span class="o">----------------------</span>
<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="o">-</span><span class="mi">8</span>
<span class="o">-</span><span class="nx">a</span>   <span class="c1">// 8
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="string-运算">string 运算</h3>
<blockquote>
<p>字符串仅支持一种符号运算 ： +    （效果是连接两个字符串）</p>
</blockquote>
<h4 id="连接运算--">连接运算  +</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;123&#39;</span> <span class="o">+</span> <span class="s1">&#39;456&#39;</span>    <span class="c1">// &#34;123456&#34;
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>字符串的 相减、相乘、相除，都会转换成 number 运算。但本质上是错误的计算</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;2&#39;</span> <span class="o">-</span> <span class="s1">&#39;1&#39;</span>   <span class="c1">// 1
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="变态">变态</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"> <span class="mi">1</span>  <span class="o">+</span> <span class="s1">&#39;2&#39;</span>    <span class="c1">// &#34;12&#34;
</span><span class="c1"></span><span class="s2">&#34;1&#34;</span> <span class="o">+</span> <span class="s2">&#34;2&#34;</span>    <span class="c1">// &#34;12&#34;
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>本质上：一个数字为什么要和一个字符串相加  ？！</p>
<ul>
<li>这从类型上讲就不对。其他语言都不允许不同类型进行相加，会报错</li>
</ul>
</blockquote>
<blockquote>
<p>JS 中</p>
<ul>
<li>
<p><strong>数字与字符串相加</strong>：JS 默认先把「数字」转为「字符串」，然后拼接字符串</p>
</li>
<li>
<p><strong>数字与字符串相减</strong>：因为字符串不支持减号，JS 默认先把「字符串」转为「数字」，然后进行减法运算</p>
</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"> <span class="mi">1</span>  <span class="o">+</span> <span class="s1">&#39;2&#39;</span>    <span class="c1">// &#34;12&#34;
</span><span class="c1"></span><span class="s2">&#34;5&#34;</span> <span class="o">-</span>  <span class="mi">5</span>     <span class="c1">// 0
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="尽量少用自增自减">尽量少用自增自减</h3>
<blockquote>
<p>因为容易你和别人都记错</p>
<ul>
<li>
<p>总有人会分不清  a++ / ++a ，所以你要兼容处理这种可能的情况，想办法避免</p>
</li>
<li>
<p>解决办法，就是不用自增自减</p>
</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">a</span><span class="o">++</span>  <span class="p">=&gt;</span>   <span class="nx">a</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="什么情况用-a-呢">什么情况用 a++ 呢？</h4>
<blockquote>
<p>只在 for 循环用：因为这是一种「约定俗成」的写法</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){}</span>   <span class="c1">// 所有程序员都这么写
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">+=</span><span class="mi">1</span><span class="p">){}</span>  <span class="c1">// 这么写没问题，但是看着就有点野路子、不正规
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">){}</span>   <span class="c1">// 还有处女座程序员喜欢这么写，不管他怎么解释，你听听就好，不必当真
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>可能 20 年前， ++i 更快。但是现在，无脑写 i++ 就可以了，完全没问题 🤪</p>
</blockquote>
<p>​</p>
<h3 id="不同类型不要加起来">不同类型不要加起来</h3>
<blockquote>
<p>把 1 和 &lsquo;2&rsquo; 加起来是几个意思</p>
<p>苹果 + 橘子 是什么？ 苹橘？</p>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="比较运算符">比较运算符</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">&gt;</span>
<span class="o">&lt;</span>
<span class="o">=</span>
<span class="o">&lt;=</span>
<span class="o">==</span>   <span class="c1">// 模糊相等
</span><span class="c1"></span><span class="o">!=</span>   <span class="c1">// 不模糊相等
</span><span class="c1"></span><span class="o">===</span>  <span class="c1">// 全等
</span><span class="c1"></span><span class="o">!==</span>  <span class="c1">// 不全等
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>== 是 JS 的 BUG</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/22745278" target="_blank" rel="noopener noreffer">为什么推荐使用 === 不推荐 ==</a></li>
<li><a href="https://www.zhihu.com/question/20348948/answer/19601270" target="_blank" rel="noopener noreffer">假设要计算 x == y， 计算的过程很冗长，但是每个步骤都很简单</a></li>
</ul>
</blockquote>
<h3 id="js-的三位一体">JS 的三位一体</h3>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">0</span> <span class="o">==</span> <span class="p">[]</span>     <span class="c1">// true
</span><span class="c1"></span><span class="mi">0</span> <span class="o">==</span> <span class="s1">&#39;0&#39;</span>    <span class="c1">// true
</span><span class="c1"></span><span class="mi">0</span> <span class="o">==</span> <span class="s1">&#39;\t&#39;</span>   <span class="c1">// true   (\t: tab)
</span><span class="c1">// 上面等式，还可以理解，但是等式右边的三个却互不相等
</span><span class="c1"></span><span class="p">[]</span>  <span class="o">==</span> <span class="s1">&#39;0&#39;</span>   <span class="c1">// false
</span><span class="c1"></span><span class="p">[]</span>  <span class="o">==</span> <span class="s1">&#39;\t&#39;</span>  <span class="c1">// false
</span><span class="c1"></span><span class="s1">&#39;0&#39;</span> <span class="o">==</span> <span class="s1">&#39;\t&#39;</span>  <span class="c1">// false
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<h3 id="忠告">忠告：</h3>
<ul>
<li>永远不要使用 <code>==</code>，而是使用 <code>===</code></li>
<li><code>==</code> 的问题在于，它总是自作聪明（自动类型转换）</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="x--y">x == y</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 令人难以理解
</span><span class="c1"></span><span class="p">[]</span> <span class="o">==</span> <span class="nx">false但不是</span> <span class="nx">falsy</span>
<span class="p">[]</span> <span class="o">==</span> <span class="nx">false但</span><span class="p">{}</span><span class="nx">却不是</span> 
<span class="p">[[]]</span> <span class="o">==</span> <span class="kc">false</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="真值表">真值表</h4>
<blockquote>
<p>黄色块，表示两个值是真的相等</p>
</blockquote>
<p></p>
<h4 id="js-的自相矛盾">JS 的自相矛盾</h4>
<blockquote>
<p>逻辑 BUG</p>
</blockquote>
<p>问：下述代码 if 判断为真吗 ？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{}</span>   <span class="c1">// a是true，可以通过 if ，真
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>只有 5 个 falsy 值是假，其他都是真</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">0</span>  <span class="kc">NaN</span>  <span class="kc">null</span>  <span class="kc">undefined</span>  <span class="s2">&#34;&#34;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>但是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;判断为真&#34;</span><span class="p">)</span> <span class="p">}</span><span class="k">else</span><span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;判断为假&#34;</span><span class="p">)</span> <span class="p">}</span>
<span class="p">[]</span> <span class="o">==</span> <span class="kc">true</span>   <span class="c1">// false
</span><span class="c1"></span><span class="p">[]</span> <span class="o">==</span> <span class="kc">false</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>打印结果：【判断为真】，但 <code>[ ] == true</code> 却为假。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">==</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;判断为真&#34;</span><span class="p">)</span> <span class="p">}</span><span class="k">else</span><span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;判断为假&#34;</span><span class="p">)</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>打印结果：【判断为假】。</p>
<blockquote>
<p>总结：</p>
<ul>
<li>if(a)为真，if(a==true)为假。</li>
</ul>
<ul>
<li>
<p>a 是真的 ，但是却不等于 true</p>
</li>
<li>
<p>那 a 到底是真的假的  ？！</p>
<p>——  JS 自身矛盾</p>
</li>
</ul>
</blockquote>
<blockquote>
<p>解决办法：🤬 永远不要用 ==</p>
</blockquote>
<p>​</p>
<h4 id="空数组--false空对象--true">空数组 == false、空对象 != true</h4>
<blockquote>
<p>对照 [== 真值表](# 真值表)</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">[]</span> <span class="o">==</span> <span class="kc">true</span>   <span class="c1">// false
</span><span class="c1"></span><span class="p">[]</span> <span class="o">==</span> <span class="kc">false</span>  <span class="c1">// true
</span><span class="c1"></span><span class="p">[[]]</span> <span class="o">==</span> <span class="kc">true</span>   <span class="c1">// false   // 如果空数组里有一个空元素，仍是false
</span><span class="c1"></span><span class="p">[{}]</span> <span class="o">==</span> <span class="kc">true</span>   <span class="c1">// false
</span><span class="c1"></span><span class="o">--------------------------------------------------------------------------------</span>
<span class="p">{}</span> <span class="o">==</span> <span class="kc">true</span>   <span class="c1">// false      // chrome 输出要加小括号 ({}) == true 
</span><span class="c1"></span><span class="p">{}</span> <span class="o">==</span> <span class="kc">false</span>  <span class="c1">// false     // chrome 输出要加小括号 ({}) == false 
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>空对象 != false 、空对象 != true</p>
</blockquote>
<p></p>
<p>​</p>
<h3 id="x--y-1">x === y</h3>
<blockquote>
<p>没有任何费解（仅两个规则）</p>
</blockquote>
<ol>
<li>
<p>**基本类型看值是否相等 **</p>
</li>
<li>
<p>**对象看地址是否相等 **</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">[]</span> <span class="o">!==</span> <span class="p">[]</span>   <span class="c1">// 地址不同
</span><span class="c1"></span><span class="p">{}</span> <span class="o">!==</span> <span class="p">{}</span>   <span class="c1">// 地址不同
</span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h4 id="真值表-1">真值表</h4>
<p></p>
<h4 id="重点">重点</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">0</span> <span class="o">===</span> <span class="p">[]</span>          <span class="c1">// false
</span><span class="c1"></span><span class="mi">0</span> <span class="o">===</span> <span class="mi">1</span>           <span class="c1">// false       
</span><span class="c1"></span><span class="kc">true</span> <span class="o">===</span> <span class="kc">false</span>    <span class="c1">// false     
</span><span class="c1"></span><span class="kc">true</span> <span class="o">===</span> <span class="kc">true</span>     <span class="c1">// true    
</span><span class="c1"></span><span class="p">...</span>
<span class="o">------------------------------------------</span>
<span class="p">[]</span> <span class="o">===</span> <span class="p">[]</span>    <span class="c1">// false  
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>空数组 和 空数组，不相等。</p>
</li>
<li>
<p>如果会画「内存图」就很清晰了。</p>
<ul>
<li>地址不同</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">[]</span> <span class="cm">/* #101 */</span>  <span class="o">===</span>  <span class="p">[]</span>  <span class="cm">/* #108 */</span>
<span class="kc">false</span>
</code></pre></td></tr></table>
</div>
</div><p>数组属于对象类型，只能比较地址，不能比较内容</p>
</li>
</ul>
<p>​</p>
<h3 id="nan--nan">NaN !== NaN</h3>
<blockquote>
<p>唯一特例，强行记忆一下</p>
</blockquote>
<p>​</p>
<h3 id="总结">总结</h3>
<ul>
<li>空数组模糊相等 false、空对象模糊相等 true</li>
<li>空数组不全等于空数组</li>
<li>空对象不全等于空对象</li>
<li>NaN 不全等于 NaN</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="布尔运算符">布尔运算符</h2>
<h3 id="或且非">或、且、非</h3>
<ul>
<li>||</li>
<li>&amp;&amp;</li>
<li>!   取反</li>
</ul>
<h3 id="短路逻辑">短路逻辑</h3>
<blockquote>
<p>常用</p>
</blockquote>
<p>例1.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nx">console</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// 简化为 👇
</span><span class="c1"></span><span class="nx">console</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>IE 中就没有 console</p>
</li>
<li>
<p>以防 console 不存在报错</p>
</li>
<li>
<p>这种编码方式，叫做**「防御性编程」**</p>
</li>
<li>
<p>最新版 JS 还新增了更简单的写法 ——「<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/%E5%8F%AF%E9%80%89%E9%93%BE" target="_blank" rel="noopener noreffer">可选链语法</a>」</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-JS" data-lang="JS"><span class="c1">// 简化为 👇
</span><span class="c1"></span><span class="nx">console</span><span class="o">?</span><span class="p">.</span><span class="nx">log</span><span class="o">?</span><span class="p">.(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>     <span class="c1">// 如果console存在，就获取上面的log方法，如果也存在执行、打印 &#39;hi&#39;
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<p>例2.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">){</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="mi">100</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span>
<span class="p">}</span>
<span class="c1">// 简化为 👇 
</span><span class="c1"></span><span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">||</span> <span class="mi">100</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>a 的保底值</p>
</li>
<li>
<p>如果 a 是真值，a 就不变。如果 a 是假值，a 就等于 100</p>
</li>
<li>
<p>但上述方法其实存在一点 bug ：如果 a 是空字符串呢  ?！  5个falsy值都会使得 a 为假值，赋值为100</p>
</li>
<li>
<p>于是，JS 又发 明了新的语法 —— 直接在<strong>函数参数</strong>上写 ✅</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span> 
  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">n</span><span class="p">){</span> <span class="nx">n</span><span class="o">=</span><span class="mi">0</span> <span class="p">}</span>   <span class="c1">// n = n || 0
</span><span class="c1"></span>  <span class="k">return</span> <span class="nx">n</span><span class="o">+</span><span class="mi">1</span>
<span class="p">}</span>
<span class="c1">// 新语法 👇
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">n</span><span class="o">+</span><span class="mi">1</span>
<span class="p">}</span>
<span class="nx">add</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span>       <span class="c1">//  1
</span><span class="c1"></span><span class="nx">add</span><span class="p">(</span><span class="kc">undefined</span><span class="p">)</span>  <span class="c1">//  1
</span><span class="c1"></span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>         <span class="c1">//  &#34;1&#34;
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<blockquote>
<h3 id="尽量都是用最新的-js-语法-">尽量都是用最新的 JS 语法 ⭐️</h3>
</blockquote>
<p>​</p>
<p>​</p>
<h2 id="二进制位运算符">二进制位运算符</h2>
<blockquote>
<p>这些位运算符直接处理每一个比特位（bit），所以是非常底层的运算，**好处是速度极快，缺点是很不直观，许多场合不能使用它们，否则会使代码难以理解和查错。 **</p>
<p>有一点需要特别注意，<strong>位运算符只对整数起作用</strong>，如果一个运算子不是整数，会自动转为整数后再执行。另外，虽然在 JavaScript 内部，数值都是以64位浮点数的形式储存，但是做位运算的时候，是<strong>以32位带符号的整数</strong>进行运算的，并且返回值也是一个32位带符号的整数。</p>
</blockquote>
<blockquote>
<p>注：可以使用十进制数进行运算，会先自动转化成二进制，然后再计算</p>
</blockquote>
<h3 id="或与否运算符">或、与、否运算符</h3>
<h4 id="或">或</h4>
<blockquote>
<p>0b（零b）开头，表示后面写的是二进制数</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mb">0b11</span>   <span class="c1">// 3
</span><span class="c1"></span><span class="mb">0b01</span>   <span class="c1">// 1
</span><span class="c1"></span><span class="mb">0b10</span>   <span class="c1">// 2
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>或 <code>|</code></p>
<ul>
<li>只有两位都为 0，结果才为 0</li>
<li>否则为 1</li>
</ul>
</blockquote>
<p>运算过程：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mb">0b1111</span>
  <span class="o">||||</span>
<span class="mb">0b1010</span>  
  <span class="o">||||</span>   
<span class="mb">0b1111</span>   
<span class="c1">// 垂直比较对应位置，只要上下两个二进制数中有一位显示的是 1 那么最终结果的当前位置为 1。
</span><span class="c1">// 都是 0 时，才得出 0
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mb">0b1111</span> <span class="o">|</span> <span class="mb">0b1010</span>    <span class="c1">// 15  // 因为没用二进制显示结果，所以默认被转换为了10进制 （8421）
</span><span class="c1">// 正确写法 👇
</span><span class="c1"></span><span class="p">(</span><span class="mb">0b1111</span> <span class="o">|</span> <span class="mb">0b1010</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>  <span class="c1">// &#34;1111&#34;   JS变态之处，只能用字符串形式表示二进制数，不能用数字
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="与">与</h4>
<blockquote>
<p>与 <code>&amp;</code></p>
<ul>
<li>两位都为 1 才是 1</li>
<li>有一位是 0 ，结果就是 0</li>
</ul>
</blockquote>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">(</span><span class="mb">0b1111</span> <span class="o">&amp;</span> <span class="mb">0b1010</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>    <span class="c1">// &#34;1010&#34;
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mb">0b1111</span>
  <span class="o">&amp;&amp;&amp;&amp;</span>
<span class="mb">0b1010</span>  
  <span class="o">||||</span>   
<span class="mb">0b1010</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="否">否</h4>
<blockquote>
<p>否 <code>~</code></p>
<ul>
<li>1变成0，0变成1</li>
<li>它的返回结果有时比较难理解，因为涉及到计算机内部的数值表示机制。</li>
<li>详解查看 <a href="https://wangdoc.com/javascript/operators/bit.html#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%90%A6%E8%BF%90%E7%AE%97%E7%AC%A6" target="_blank" rel="noopener noreffer">JavaScript 网道</a></li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">(</span><span class="o">~</span><span class="mb">0b1111</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c1">// &#34;-10000&#34;
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="异或运算符">异或运算符</h3>
<blockquote>
<p>异或运算（^）在两个二进制位不同时返回1，相同时返回0。</p>
<ul>
<li>两位相同，则返回 0</li>
<li>两位不同，则返回 1</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">(</span><span class="mb">0b1111</span> <span class="o">^</span> <span class="mb">0b1010</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>    <span class="c1">//  0101 省略最前面的 0，结果为  =&gt;   &#34;101&#34; 
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="左移右移运算符">左移、右移运算符</h3>
<blockquote>
<p><code>&lt;&lt;</code> 和 <code>&gt;&gt;</code></p>
<ul>
<li><a href="https://wangdoc.com/javascript/operators/bit.html#%E5%B7%A6%E7%A7%BB%E8%BF%90%E7%AE%97%E7%AC%A6" target="_blank" rel="noopener noreffer">左移运算符</a>（&laquo;）表示将一个数的二进制值向左移动指定的位数，尾部补 0</li>
<li><a href="https://wangdoc.com/javascript/operators/bit.html#%E5%8F%B3%E7%A7%BB%E8%BF%90%E7%AE%97%E7%AC%A6" target="_blank" rel="noopener noreffer">右移运算符</a>（&raquo;）表示将一个数的二进制值向右移动指定的位数。
如果是正数，头部全部补0；如果是负数，头部全部补1。</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mb">0b0010</span>         <span class="c1">// 0010（二进制） =&gt;  2（十进制）
</span></code></pre></td></tr></table>
</div>
</div><h4 id="左移一位-">左移一位 👇</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mb">0b0010</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>    <span class="c1">// 0001（二进制） =&gt;  1（十进制）
</span></code></pre></td></tr></table>
</div>
</div><h4 id="右移一位-">右移一位 👇</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mb">0b0010</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span>    <span class="c1">// 0100（二进制） =&gt;  4（十进制）
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注意：结果仍会自动转换为十进制数，调用 .toString(2) 可以得到二进制（会省略开头0）</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">(</span><span class="mb">0b0010</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c1">// 0010 =&gt; 0001  =&gt;  &#34;1&#34;  （二进制） 会省略开头0
</span><span class="c1"></span><span class="p">(</span><span class="mb">0b0010</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c1">// 0010 =&gt; 0100  =&gt;  &#34;100&#34;（二进制） 会省略开头0
</span></code></pre></td></tr></table>
</div>
</div><h5 id="右移得负数情况">右移得负数情况</h5>
<blockquote>
<p>如果不懂二进制，这块也不太好理解是怎么转换的  😶</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">-</span><span class="mi">4</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>    <span class="c1">// -2
</span><span class="c1"></span><span class="cm">/*
</span><span class="cm">// 因为-4的二进制形式为 11111111111111111111111111111100，
</span><span class="cm">// 右移一位，头部补1，得到 11111111111111111111111111111110,
</span><span class="cm">// 即为十进制的 -2
</span><span class="cm">*/</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="如果有多个-1">如果有多个 1</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">(</span><span class="mb">0b0011</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c1">// 0011 =&gt; 0001  =&gt;  &#34;1&#34;  （二进制） 会省略开头0 （吃掉最右边的1）
</span><span class="c1"></span><span class="p">(</span><span class="mb">0b0011</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c1">// 0011 =&gt; 0110  =&gt;  &#34;110&#34;（二进制） 会省略开头0
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="头部补零的右移运算符">头部补零的右移运算符</h3>
<blockquote>
<p><code>&gt;&gt;&gt;</code></p>
<p>在正数的情况下，<code>&gt;&gt;</code> 和 <code>&gt;&gt;&gt;</code>  基本没有区别</p>
<p>头部补零的右移运算符（&raquo;&gt;）与右移运算符（&raquo;）只有一个差别，就是一个数的二进制形式向右移动时，头部一律补零，而不考虑符号位。所以，该运算总是得到正值。对于正数，该运算的结果与右移运算符（&raquo;）完全一致，区别主要在于负数。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">(</span><span class="mb">0b1111</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c1">// 0111  =&gt;  &#34;111&#34;（二进制） 会省略开头0
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<blockquote>
<p>上面的运算符，看过一遍然后就忘记好了，因为这辈子可能都用不上</p>
</blockquote>
<p>​</p>
<p>​</p>
<h2 id="面试题-">面试题 🙄</h2>
<blockquote>
<p>平时工作很少用。只有一种情况可能遇上，就是「面试题」中</p>
</blockquote>
<blockquote>
<p>文章：<a href="https://juejin.im/post/6844903568906911752" target="_blank" rel="noopener noreffer">位运算符在JS中的妙用</a> （仅做参考）</p>
</blockquote>
<h3 id="使用与运算符判断奇偶">使用与运算符&amp;判断奇偶</h3>
<p>先给出结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 方法1.与2取余（最方便的方法、也好理解）
</span><span class="c1"></span><span class="mi">7</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">1</span>  <span class="c1">// true 奇数
</span><span class="c1"></span>
<span class="c1">// 方法2.二进制与运算符：两位都为1才是1
</span><span class="c1"></span><span class="nx">任意数</span> <span class="o">&amp;</span> <span class="mi">1</span>   <span class="c1">//  =&gt; 0 说明是偶数
</span><span class="c1"></span><span class="nx">任意数</span> <span class="o">&amp;</span> <span class="mi">1</span>   <span class="c1">//  =&gt; 1 说明是奇数
</span></code></pre></td></tr></table>
</div>
</div><h4 id="测试">测试</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">(</span><span class="mi">7</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">// 把其转换为2进制 =&gt;  &#34;111&#34;  最后一位是 1
</span><span class="c1"></span><span class="mi">7</span> <span class="o">&amp;</span> <span class="mb">0b001</span>       <span class="c1">// 7和二进制的1进行与运算，规则是二进制中对应的两位都是1结果就是1  =&gt;  1
</span><span class="c1"></span>
<span class="p">(</span><span class="mi">7</span> <span class="o">&amp;</span> <span class="mb">0b001</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c1">// 0001 =&gt; &#34;1&#34; 二进制
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>原理</p>
<ul>
<li>偶数的二进制位最后一位都是 0 ，而奇数二进制位的最后一位都是 1，所以<strong>可以根据二进制判断奇偶</strong></li>
</ul>
</blockquote>
<blockquote>
<p>问题转化：**如何获取任意数的二进制数的最后一位值 **</p>
<p>解决办法：跟二进制的 1 进行**与运算 **</p>
<ul>
<li><strong>与运算的规则</strong>：两个二进制数的对应位进行两两比较，**只要有一个是 0，结果就是 0 **，只有对应位都是 1 结果才得 1</li>
<li>因为二进制 1 的前五位都是 0，所以任意数与二进制 1 进行与运算，必然导致最终结果的前 5 为都是 0</li>
<li>因为前 5 位都是 0，自然就获取到最后一位，根据最后一位的结果 0 或 1 来判断出「偶 或 奇」</li>
</ul>
<blockquote>
<p>如果最后一位是 0 ，则二进制数为 000000 简写为 0    =&gt;   偶数
如果最后一位是 1 ，则二进制数为 000001 简写为 1    =&gt;   奇数</p>
</blockquote>
</blockquote>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">123</span> <span class="o">&amp;</span> <span class="mi">1</span>    <span class="c1">// 1  奇数
</span><span class="c1"></span><span class="mi">124</span> <span class="o">&amp;</span> <span class="mi">1</span>    <span class="c1">// 0  偶数
</span><span class="c1"></span><span class="mi">125</span> <span class="o">&amp;</span> <span class="mi">1</span>    <span class="c1">// 1  奇数
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注：可以使用十进制数进行二进制与运算，会先自动转化成二进制，然后再计算</p>
</blockquote>
<blockquote>
<p>虽然<strong>位运算 <strong>速度极快，但是</strong>模运算</strong>速度也不慢</p>
<ul>
<li>“模”是“Mod”的音译，模运算多应用于程序编写中。 Mod的含义为**求余 **。</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="使用------来取整">使用 ~, &raquo;, &laquo;, &raquo;&gt;, | 来取整</h3>
<blockquote>
<p>下列方法都是基于该原理：</p>
<ul>
<li>位运算符<strong>只对整数起作用，不支持小数，会自动转为整数后再执行</strong>  （直接抹掉小数位，不是四舍五入）</li>
<li>正数、负数同理</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nb">parseInt</span><span class="p">(</span><span class="mf">6.83</span><span class="p">)</span>     <span class="c1">// 6  (JS有直接提供取整的 api 呀~~)
</span><span class="c1"></span><span class="o">-------------------------------------------------------------</span> <span class="c1">// 面试逼得必须会的方式👇 位运算
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">~~</span> <span class="mf">6.83</span><span class="p">)</span>      <span class="c1">// 6
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mf">6.83</span> <span class="o">&gt;&gt;</span> <span class="mi">0</span><span class="p">)</span>    <span class="c1">// 6
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mf">6.83</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">)</span>    <span class="c1">// 6
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mf">6.83</span> <span class="o">|</span> <span class="mi">0</span><span class="p">)</span>     <span class="c1">// 6
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mf">6.83</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">0</span><span class="p">)</span>   <span class="c1">// 6
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="1-两次取反-">1. 两次取反 ~~</h4>
<blockquote>
<p>注意，这是二进制的取反：把 1 变成 0，把 0 变成 1</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">~~</span> <span class="mf">6.83</span><span class="p">)</span> <span class="c1">// 两次取反，相当于负负得正，还是取的原值，但把小数部分抹去了   // 6
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="2-右移-0-位---0">2. 右移 0 位  &raquo; 0</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mf">6.83</span> <span class="o">&gt;&gt;</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1">// 右移零位，就是原地不动，但位运算符会自动取整，所以这番运算会抹掉小数  // 6
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">-</span><span class="mf">6.83</span> <span class="o">&gt;&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">// -6
</span></code></pre></td></tr></table>
</div>
</div><p>运算过程：</p>
<ol>
<li>因为是位运算，第一步先转换为整数 6.83 =&gt; 6</li>
<li>因为 6 的二进制形式是 “0110”   =&gt;  右移 0 位 &ldquo;0110&rdquo;  =&gt; 转换成10进制输出 6</li>
</ol>
<blockquote>
<h4 id="左移-0-位--0-同理可得">左移 0 位 &laquo; 0， 同理可得</h4>
<h4 id="头部补零的右移---0-同理可得">头部补零的右移  &raquo;&gt; 0 ，同理可得</h4>
</blockquote>
<p>​</p>
<h4 id="3-与-0-进行或运算--0">3. 与 0 进行或运算 | 0</h4>
<blockquote>
<p>或运算 <code>|</code>  ：只有两位都为 0，结果才为 0，否则是 1  （位运算符自动转换为整数）</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mf">6.83</span> <span class="o">|</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1">// 与0进行或运算的本质：还是不改变原二进制数的 （细品）
</span></code></pre></td></tr></table>
</div>
</div><p>运算过程：</p>
<ol>
<li>因为是位运算，第一步先转换为整数 6.83 =&gt; 6</li>
<li>6 的二进制数与 0 的二进制数进行或运算： &ldquo;110&rdquo;  |  &ldquo;000&rdquo;   =&gt;   &ldquo;110&rdquo;</li>
</ol>
<p>​</p>
<h3 id="使用--来交换-a-b-的值">使用 ^ 来交换 a b 的值</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="kd">let</span> <span class="nx">b</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span>
<span class="p">[</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">]</span>   <span class="c1">// JS 最新的语法——交换两个值
</span><span class="c1"></span><span class="nx">a</span>   <span class="c1">// 2
</span><span class="c1"></span><span class="nx">b</span>   <span class="c1">// 1
</span></code></pre></td></tr></table>
</div>
</div><p>位运算 —— 异或 ^</p>
<ul>
<li>两位相同，则返回 0</li>
<li>两位不同，则返回 1</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">5</span>
<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">8</span>
<span class="nx">a</span> <span class="o">^=</span> <span class="nx">b</span>    <span class="c1">// 是 a = a ^ b 的简写
</span><span class="c1"></span><span class="nx">b</span> <span class="o">^=</span> <span class="nx">a</span>
<span class="nx">a</span> <span class="o">^=</span> <span class="nx">b</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>   <span class="c1">// 8
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>   <span class="c1">// 5
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="总结-1">总结</h3>
<blockquote>
<p>关于位运算，只要记住下面 3 个问题的解法：</p>
<ul>
<li>判断奇偶</li>
<li>取整</li>
<li>交换值</li>
</ul>
</blockquote>
<blockquote>
<p>位运算用得很少容易忘，面试之前重新看看即可</p>
</blockquote>
<p>​</p>
<p>​</p>
<h2 id="其他运算符">其他运算符</h2>
<blockquote>
<p>奇葩运算符，一个比一个奇葩</p>
<p>很多「搞不清楚为什么 JS 可以这样写的」用法，其实是程序员自己发现的</p>
</blockquote>
<h3 id="点运算符">点运算符</h3>
<blockquote>
<p>点运算符，只能用在对象上。如果遇到其他类型，会有一个特殊逻辑 ，👇</p>
</blockquote>
<h4 id="语法">语法</h4>
<ul>
<li>对象.属性名 = 属性值</li>
</ul>
<h4 id="作用">作用</h4>
<ul>
<li>
<p>读取/设置 对象的属性值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;sam&#39;</span><span class="p">}</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">name</span>   <span class="c1">// &#34;sam&#34;  读取属性值
</span><span class="c1"></span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&#34;jack&#34;</span> <span class="c1">// 设置属性值
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="有个疑问">有个疑问</h4>
<blockquote>
<h5 id="问不是对象为什么也可以用点----还能获取到属性--a-b-csplit-">问：不是对象，为什么也可以用点 <code>.</code>   还能获取到属性？  <code>'a-b-c'.split('-')</code></h5>
</blockquote>
<ul>
<li>
<p>JS 有特殊逻辑，点前面不是对象，就把它封装成对象</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>（内存图）</p>
<ol>
<li>
<p>JS 发现 a 没有 toString，就把 a 封装成对象 a&rsquo;</p>
</li>
<li>
<p>然后调用 封装对象 a‘  的 toString 方法</p>
</li>
<li>
<p>抹掉封装对象  a&rsquo; = null</p>
</li>
</ol>
</li>
</ul>
<p>​</p>
<blockquote>
<p>每次使用 <code>.</code> 点运算符，都会①<strong>创</strong>建封装对象②调<strong>用</strong>封装对象上的方法③抹掉封装对象**(滚) **</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span> 
<span class="nx">a</span><span class="p">.</span><span class="nx">xxx</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span>  <span class="c1">// 这一行背后过程：创建 a&#39;，然后把 xxx 放到 a&#39;上，值为sam，最后 a’ 被抹掉
</span><span class="c1"></span><span class="nx">a</span><span class="p">.</span><span class="nx">xxx</span>  <span class="c1">// undefined   // 这一行背后过程：创建a&#39;&#39;，获取a&#39;‘上的xxx属性，找不到xxx，返回 undefined
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>**每次点运算符，都会创建一个新的对象 **，用来容纳你操作的属性信息 （翻脸就不认人🙄）</p>
</blockquote>
<p>​</p>
<p>JS  封装对象</p>
<ul>
<li>
<p>number 会变成 Number 对象</p>
</li>
<li>
<p>string 会变成 String 对象</p>
</li>
<li>
<p>bool 会变成 Boolean 对象</p>
</li>
<li>
<p>程序员从来不用这三种对象👇，只用简单类型</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">new</span> <span class="nb">Number</span><span class="p">()</span>
<span class="k">new</span> <span class="nb">String</span><span class="p">()</span>
<span class="k">new</span> <span class="nb">Boolean</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>提醒一下，「永远不要用」的有 👇</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">==</span>
<span class="o">++</span> <span class="err">（</span><span class="nx">for循环用一下</span><span class="p">)</span>
<span class="k">new</span> <span class="nb">Number</span><span class="p">()</span> <span class="err">、</span> <span class="k">new</span> <span class="nb">String</span><span class="p">()</span> <span class="err">、</span> <span class="k">new</span> <span class="nb">Boolean</span><span class="p">()</span> <span class="err">（</span><span class="nx">number</span><span class="o">/</span><span class="nx">string</span><span class="o">/</span><span class="nx">布尔的构造函数</span><span class="err">）</span>  
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="void-运算符">void 运算符</h3>
<h4 id="语法-1">语法</h4>
<p><code>void 表达式或语句</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">void</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>
<span class="k">void</span> <span class="mi">1</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="作用-1">作用</h4>
<ul>
<li>求表达式的值，或执行语句</li>
<li>**void 的值总是为 undefined **</li>
</ul>
<p>​</p>
<h4 id="需求用法">需求/用法</h4>
<blockquote>
<p>需求：a 标签不跳转，而是点击 a 就执行 f 方法</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 假设👇是 f 方法
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">f</span><span class="p">(){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>方法一</p>
<p>return 假值可以阻止默认动作（阻止 a 标签跳转）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;http://example.com&#34;</span> <span class="na">onclick</span><span class="o">=</span><span class="s">&#34;f(); return false;&#34;</span><span class="p">&gt;</span>点击<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>方法二</p>
<p>点击 a 执行 js 语句 （改用 void 可以炫技）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;javascript: void(f())&#34;</span><span class="p">&gt;</span>文字<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>方法三</p>
<p>即使不用 void ，也可以实现同样效果，👇</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&#34;javascript:;&#34;</span> <span class="nx">onclick</span><span class="o">=</span><span class="s2">&#34;f();&#34;</span><span class="o">&gt;</span><span class="nx">文字</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="逗号运算符">逗号运算符</h3>
<h4 id="语法-2">语法</h4>
<p><code>表达式1, 表达式2, ..., 表达式 n</code></p>
<h4 id="作用-2">作用</h4>
<ul>
<li>将表达式 n 的值作为整体的值</li>
<li>也就是将最后一个表达式 ，作为 return 的内容</li>
</ul>
<h4 id="使用">使用</h4>
<p>例 1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>那么 a 的值就是 5，奇葩吧？</li>
</ul>
<p>例 2</p>
<blockquote>
<p>箭头函数，不用 { } 和 return，也能写多个语句 👇 ：用 () 和 ,</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">f</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;平方值为&#39;</span><span class="p">),</span> <span class="nx">x</span><span class="o">*</span><span class="nx">x</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>注意上面的括号不能省</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="运算符的优先级">运算符的优先级</h2>
<blockquote>
<p>先算什么，后算什么</p>
</blockquote>
<h3 id="优先级是什么">优先级是什么</h3>
<blockquote>
<p>优先级处理的就是，当一个语句中有多个操作，到底先算哪个</p>
</blockquote>
<h4 id="不同运算符">不同运算符</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">3</span> <span class="nx">是</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">*</span> <span class="mi">3</span> <span class="nx">还是</span> <span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span>   <span class="c1">// 小学生都知道先算乘法
</span><span class="c1"></span><span class="o">!</span> <span class="nx">a</span> <span class="o">===</span> <span class="mi">1</span> <span class="nx">是</span> <span class="p">(</span><span class="o">!</span> <span class="nx">a</span><span class="p">)</span> <span class="o">===</span> <span class="mi">1</span> <span class="nx">还是</span> <span class="o">!</span> <span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span>   <span class="c1">// 先求a的反，再与1进行布尔运算
</span><span class="c1"></span><span class="k">new</span> <span class="nx">Person</span><span class="p">().</span><span class="nx">sayHi</span><span class="p">()</span> <span class="nx">先new还是先</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="相同运算符">相同运算符</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">从左到右</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span>  
<span class="nx">从右到左</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">d</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="优先级就是先算什么后算什么">优先级就是先算什么后算什么</h4>
<blockquote>
<p>具体规则想知道吗？
你：想。
不，你不想！看看<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#Table" target="_blank" rel="noopener noreffer">这里</a>就知道为什么。—— JS 操作符的优先级，你可能这辈子都记不下来（丧😨）</p>
</blockquote>
<p>MDN 总结的非常好</p>
<ul>
<li>将所有运算符按照优先级的不同从高（20）到低（1）排列</li>
</ul>
<h3 id="学习建议">学习建议</h3>
<blockquote>
<p>运算符优先级很难记全，所以<strong>直接 放弃</strong>，不要记</p>
<p>如果遇到运算符优先级的题，直接猜</p>
</blockquote>
<p>​</p>
<h3 id="优先级汇总">优先级汇总</h3>
<p>####汇总表位于 MDN</p>
<ul>
<li>一共有20个运算符</li>
<li>怎么记忆呢</li>
</ul>
<h4 id="技巧">技巧</h4>
<ul>
<li>只记「圆括号优先级最高」</li>
<li>会用圆括号就行</li>
<li>其他一律不记</li>
</ul>
<blockquote>
<p>面试官：问为什么不知道 / 没有记 JS 的优先级？</p>
<p>满分回答：</p>
<ol>
<li>
<p>因为 JS 的优先级太多了，没有一个人能确保把 JS 的优先级记得很清楚</p>
</li>
<li>
<p>就算我记清楚了，也不能确保我的同事记得清楚。所以我就记了「优先级最高的是圆括号」</p>
</li>
<li>
<p>我会在写代码时，非常清楚的用「圆括号」表明我的优先级，这样别人也可以很好的理解我的代码</p>
</li>
</ol>
<p>（从<strong>为了让同事能更好的理解代码</strong>的角度，来反驳面试官/领导）</p>
</blockquote>
<h3 id="例-">例 💋</h3>
<h4 id="不同运算符-1">不同运算符</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="o">===</span><span class="mi">1</span><span class="p">){}</span>  <span class="c1">// 先算谁呢？
</span><span class="c1"></span><span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">)</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span>  <span class="c1">// 圆括号优先级最高    // 查一下MDN可知，!高于===
</span></code></pre></td></tr></table>
</div>
</div><h4 id="相同运算符-1">相同运算符</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span>   <span class="c1">// 从左到右顺序
</span><span class="c1"></span><span class="nx">a</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">d</span>   <span class="c1">// 从右到左倒序
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span>
<span class="nx">a</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">d</span> <span class="o">=</span> <span class="mi">2</span>
<span class="nx">相当于</span><span class="err">👇</span>
<span class="nx">a</span> <span class="o">=</span> <span class="p">(</span><span class="nx">b</span> <span class="o">=</span> <span class="p">(</span><span class="nx">c</span> <span class="o">=</span> <span class="p">(</span><span class="nx">d</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)))</span>    <span class="c1">// (d=2)表达式的值就是2，赋给c，c=2表达式的值是2，再赋给 b...
</span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>JS 函数的执行时机 🚀⌚</title>
    <link>http://samrks.github.io/javascript-timing-of-call-a-function/</link>
    <pubDate>Wed, 16 Sep 2020 21:41:13 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-timing-of-call-a-function/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="js-函数的执行时机">JS 函数的执行时机</h2>
<blockquote>
<p>执行时机，或说调用时机，是 JS 函数的要素之一</p>
</blockquote>
<blockquote>
<p>先抛出结论：JS 函数的执行时机不同，结果不同</p>
</blockquote>
<p>下面逐例分析：函数调用执行的时机，是如何影响结果的</p>
<p>​</p>
<h3 id="例1">例1</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>输出：[未知]</p>
<p>分析：函数只有被调用才会执行。上述代码中的函数 fn 并未被调用，输出更无从说起。</p>
<p>​</p>
<h3 id="例2">例2</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>输出：1</p>
<p>​</p>
<h3 id="例3">例3</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>   
  <span class="c1">// 看到这可能会认为是打印 1
</span><span class="c1"></span>  <span class="c1">// 但此时函数未被调用，可以忽略整个函数。不要提前把 a=1 带入到函数中做记号
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1">// a变成2
</span><span class="c1"></span><span class="nx">fn</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>输出：2</p>
<p>​</p>
<h3 id="例4">例4</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">()</span>   <span class="c1">// 看时机：函数被调用，此时 a=1
</span><span class="c1"></span><span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
</code></pre></td></tr></table>
</div>
</div><p>输出：1</p>
<p>​</p>
<h3 id="例5">例5</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">()</span>
<span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
</code></pre></td></tr></table>
</div>
</div><p>输出：2</p>
<p>分析：</p>
<ul>
<li>setTimeout 口语化理解相当于“过一会”、“尽快”（意思是忙完当前手头事，就立马执行里面的语句）</li>
<li>举个栗子：
<ul>
<li>你在打游戏（运行这段代码）</li>
<li>别人叫你去吃饭（<code>fn()</code>被调用）</li>
<li>你说马上去”（遇到 setTimeout ）</li>
<li>“马上去” 的潜台词，是要先把这局游戏打完才去😜（继续向下执行<code> a=2</code>）</li>
<li>现在打完了（其他代码全部走完）</li>
<li>可以去吃饭了 （<code>console.log(a)</code>）</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="例6-">例6 💡</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  
  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span> 
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  
  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>输出：6  6  6  6  6  6</p>
<p>分析：</p>
<ul>
<li>
<p>首先，<code>let</code> 声明一个 <code>i </code>。 <code>let i</code> 写在 for 循环外，所以  <code> let i</code>（声明 i）不会参与到循环中。始终只有一个 <code>i</code></p>
</li>
<li>
<p>开始 for 循环，逐步拆分 ↓</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">i</span><span class="o">=</span><span class="mi">0</span> <span class="err">（</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="err">）</span>
<span class="nx">遇到</span> <span class="nx">setTimeout</span><span class="err">（</span><span class="nx">执行完其他代码</span><span class="err">，</span><span class="nx">再执行这里</span> <span class="nx">setTimeout</span> <span class="nx">中的语句</span><span class="err">）——</span> <span class="nx">stand</span> <span class="nx">by</span> <span class="err">①</span>
<span class="nx">i</span><span class="o">++</span>  <span class="p">=&gt;</span>  <span class="nx">i</span><span class="o">=</span><span class="mi">1</span> <span class="err">（</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="err">）</span>
<span class="nx">遇到</span> <span class="nx">setTimeout</span> <span class="err">——</span> <span class="nx">stand</span> <span class="nx">by</span> <span class="err">②</span>
<span class="nx">i</span><span class="o">++</span>  <span class="p">=&gt;</span>  <span class="nx">i</span><span class="o">=</span><span class="mi">2</span> <span class="err">（</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="err">）</span> 
<span class="nx">遇到</span> <span class="nx">setTimeout</span> <span class="err">——</span> <span class="nx">stand</span> <span class="nx">by</span> <span class="err">③</span>
<span class="nx">i</span><span class="o">++</span>  <span class="p">=&gt;</span>  <span class="nx">i</span><span class="o">=</span><span class="mi">3</span> <span class="err">（</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="err">）</span>
<span class="nx">遇到</span> <span class="nx">setTimeout</span> <span class="err">——</span> <span class="nx">stand</span> <span class="nx">by</span> <span class="err">④</span>
<span class="nx">i</span><span class="o">++</span>  <span class="p">=&gt;</span>  <span class="nx">i</span><span class="o">=</span><span class="mi">4</span> <span class="err">（</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="err">）</span>
<span class="nx">遇到</span> <span class="nx">setTimeout</span> <span class="err">——</span> <span class="nx">stand</span> <span class="nx">by</span> <span class="err">⑤</span>
<span class="nx">i</span><span class="o">++</span>  <span class="p">=&gt;</span>  <span class="nx">i</span><span class="o">=</span><span class="mi">5</span> <span class="err">（</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="err">）</span>
<span class="nx">遇到</span> <span class="nx">setTimeout</span> <span class="err">——</span> <span class="nx">stand</span> <span class="nx">by</span> <span class="err">⑥</span>
<span class="nx">i</span><span class="o">++</span>  <span class="p">=&gt;</span>  <span class="nx">i</span><span class="o">=</span><span class="mi">6</span>  <span class="nx">不符合条件</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="err">。</span> <span class="nx">循环结束</span><span class="err">。</span>
<span class="nx">stand</span> <span class="nx">by</span> <span class="nx">完毕</span><span class="err">，</span><span class="nx">开始依次执行</span> <span class="err">①②③④⑤⑥，</span><span class="nx">此时</span> <span class="nx">i</span><span class="o">=</span><span class="mi">6</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 6
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 6
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 6
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 6
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 6
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 6
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h4 id="变形">变形</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// 相当于只有一个 i
</span><span class="c1"></span>  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  
  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 6 6 6 6 6 6
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="例7-">例7 💡</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> <span class="c1">// 相当于在每一次循环的代码块中各声明了一个i。一共声明了6个i
</span><span class="c1"></span>  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span> 
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>输出： 0  1  2  3  4  5</p>
<p>分析：</p>
<ul>
<li>
<p>for 和 let  连用，可以近似的理解为：每轮循环创建了一个作用域 {  }</p>
</li>
<li>
<p>let 特性，仅在当前作用域有效</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="err">，</span> <span class="nx">满足</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span>
    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1">// stand by ①
</span><span class="c1"></span><span class="p">}</span>
<span class="p">{</span>
    <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="err">，</span> <span class="nx">满足</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span>
    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1">// stand by ②
</span><span class="c1"></span><span class="p">}</span>
<span class="p">...</span>
<span class="p">{</span>
    <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">5</span><span class="err">，</span> <span class="nx">满足</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span>
    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1">// stand by ⑥
</span><span class="c1"></span><span class="p">}</span>
<span class="p">{</span>
    <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">6</span><span class="err">，</span> <span class="nx">不满足</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span> <span class="err">，</span><span class="nx">循环结束</span>
<span class="p">}</span>
<span class="c1">// 此时 stand by 完毕，开始依次执行 ①②③④⑤⑥
</span><span class="c1">// 因为 let 存在作用域限制，所以每个 log 打印的都是其所在作用域的 i
</span><span class="c1"></span><span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// 0
</span><span class="c1"></span><span class="p">}</span>
<span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// 1
</span><span class="c1"></span><span class="p">}</span>
<span class="p">...</span>
<span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// 5
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h4 id="变形1">变形1</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="o">!</span> <span class="kd">function</span><span class="p">(</span><span class="nx">j</span><span class="p">){</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span>
    <span class="p">},</span> <span class="mi">0</span><span class="p">)</span>
  <span class="p">}(</span><span class="nx">i</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>输出：0  1  2  3  4  5</p>
<p>分析：利用「立即执行函数」的参数，保存下 i 值</p>
<p>​</p>
<h4 id="变形2">变形2</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">setTimeout</span><span class="p">((</span><span class="nx">j</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span>
  <span class="p">},</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>输出：0  1  2  3  4  5</p>
<p>分析：利用 setTimeout 的第 3 个参数，保存下 i 值。一旦定时器到期，会作为参数传递给 function</p>]]></description>
</item><item>
    <title>JS 函数的基本介绍</title>
    <link>http://samrks.github.io/javascript-function/</link>
    <pubDate>Mon, 14 Sep 2020 20:35:51 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-function/</guid>
    <description><![CDATA[<p>定义函数、call / apply / bind、大师调用法、调用时机、作用域、闭包、形参、调用栈、函数提升、arguments、this、箭头函数、立即执行函数。</p>
<p>​</p>
<h2 id="函数是对象">函数是对象</h2>
<ul>
<li>
<p>函数怎么会是对象……看起来不一样啊</p>
</li>
<li>
<p>解释起来非常抽象，请直接接受这个结论</p>
</li>
</ul>
<blockquote>
<p>函数是一种特殊的对象</p>
</blockquote>
<h2 id="定义一个函数">定义一个函数</h2>
<h3 id="1-具名函数">1️⃣ 具名函数</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">函数名</span><span class="p">(</span><span class="nx">形式参数1</span><span class="p">,</span> <span class="nx">形式参数2</span><span class="p">){</span>
  <span class="nx">语句</span>
  <span class="k">return</span> <span class="nx">返回值</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="2-匿名函数">2️⃣ 匿名函数</h3>
<blockquote>
<p>上面的具名函数，去掉函数名就是匿名函数</p>
<p>匿名函数，通常要声明一个变量进行赋值，不然函数就消失了</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">){</span> <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>也叫函数表达式</p>
<p>ps：等号左边是声明变量 a 并赋值。等号右边部分，才是函数表达式</p>
<h3 id="例">例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>
<span class="p">}</span>
<span class="o">-------------------------------</span> <span class="nx">上面是具名函数</span><span class="err">，</span><span class="nx">函数名为fn</span><span class="err">；</span>
<span class="o">-------------------------------</span> <span class="nx">下面是匿名函数</span><span class="err">，</span><span class="nx">函数没有名字</span><span class="err">，</span><span class="nx">但是声明一个变量a来容纳这个函数的地址</span>
<span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="变态">变态</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span><span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span><span class="p">}</span>
<span class="c1">// fn(1,2)  // 报错 fn 不存在：fn is not defined    // 为什么？
</span><span class="c1"></span><span class="nx">a</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>  <span class="c1">// 3
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>解：</p>
<ul>
<li>如果 fn 函数式的声明是在等号右边，那么这个 fn 的作用域就只能在等号右边、这块<font color="purple"><strong>高亮</strong></font>的范围</li>
<li>出了这块高亮范围，fn 就不存在</li>
<li>其他地方要用这个函数，只能用 a 来调用</li>
</ul>
<p>​</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span><span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span><span class="p">}</span>
<span class="nx">fn</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>  <span class="c1">// 3
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果没有左边赋值的操作，那么 fn 在哪里都可以用</li>
</ul>
<p>​</p>
<h3 id="3-箭头函数">3️⃣ 箭头函数</h3>
<p>写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">f1</span> <span class="o">=</span> <span class="nx">x</span> <span class="p">=&gt;</span> <span class="nx">x</span><span class="o">*</span><span class="nx">x</span> 
<span class="kd">let</span> <span class="nx">f2</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span> <span class="c1">// 多个形参，则圆括号不能省
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">f3</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span> <span class="p">}</span>  <span class="c1">// 写了return，则花括号不能省
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">f4</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;x+y=&#39;</span><span class="p">);</span> <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span> <span class="p">}</span> <span class="c1">// 多语句时，花括号不能省，return不能省
</span></code></pre></td></tr></table>
</div>
</div><p>变态：函数返回值是一个对象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// let f5 = (x,y) =&gt; {name:x, age: y} // JS 中 {} 被优先当做【代码块(label语法)】的起始，而不是对象
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">f5</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="nx">x</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="nx">y</span><span class="p">})</span>  
</code></pre></td></tr></table>
</div>
</div><ul>
<li>函数返回值是一个对象，需要加个圆括号，表示里面是一个整体，不是一个代码块</li>
<li>可以看出 JS 这门语言每次添加新的语法时，可能都多少会有点小bug，大概是因为它要兼容以前得版本，所以有些错误它也解决不了（不是门很严谨的语言）</li>
</ul>
<p>​</p>
<h3 id="4-用构造函数">4️⃣ 用构造函数</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 单语句
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;return x+y&#39;</span><span class="p">)</span>   
<span class="c1">// 多语句
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;console.log(\&#39;hi\&#39;); return x+y&#39;</span><span class="p">)</span>   
<span class="nx">f</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> 
<span class="c1">// hi 
</span><span class="c1">// 3
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>基本没人用，但是能让你知道函数是谁构造的</li>
<li>所有函数都是 Function 构造出来的</li>
<li>包括 Object、Array、Function 也是 （这里都省略了 window. ）
<ul>
<li>Function 本身也是由自己构造出来的（在对象原型的笔记中解释过）</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="函数自身-vs-函数调用区别">函数自身 vs. 函数调用（区别）</h2>
<blockquote>
<p><code>fn</code>    V.S.    <code>fn()</code></p>
</blockquote>
<h3 id="函数自身">函数自身</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>
<span class="nx">fn</span>
</code></pre></td></tr></table>
</div>
</div><p>结果</p>
<ul>
<li>不会有任何结果</li>
<li>因为 fn 没有执行（执行就是调用，调用就是执行）</li>
</ul>
<h3 id="函数调用">函数调用</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>
<span class="nx">fn</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>结果</p>
<ul>
<li>打印出 hi</li>
<li>有圆括号才是调用</li>
</ul>
<h3 id="再进一步">再进一步</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>  <span class="c1">// 很多人认为fn就是函数，实际上这里的fn只是保存了函数的地址
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">fn2</span> <span class="o">=</span> <span class="nx">fn</span> <span class="c1">// 把fn保存的地址复制给fn2
</span><span class="c1"></span><span class="nx">fn2</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>结果</p>
<ul>
<li><strong>fn 保存了匿名函数的地址</strong></li>
<li>这个地址被复制给了 fn2</li>
<li>fn2() 调用了匿名函数</li>
<li>实际上 fn 和 fn2 都是对匿名函数的<strong>引用</strong>而已</li>
<li>真正的函数既不是 fn 也不是 fn2</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="函数的要素9-个">函数的要素（9 个）🤩</h2>
<blockquote>
<p>9个概念需要知道，其他函数的教程，都没这里讲的细</p>
</blockquote>
<h3 id="每个函数都有这些东西">每个函数都有这些东西</h3>
<ol>
<li>
<p>调用时机</p>
</li>
<li>
<p>作用域</p>
</li>
<li>
<p>闭包</p>
</li>
<li>
<p>形式参数</p>
</li>
<li>
<p>返回值</p>
</li>
<li>
<p>调用栈</p>
</li>
<li>
<p>函数提升</p>
</li>
<li>
<p><strong>arguments（除了箭头函数）</strong></p>
</li>
<li>
<p><strong>this（除了箭头函数）</strong></p>
<blockquote>
<p>JS 的三座大山</p>
<ol>
<li>原型、原型链</li>
<li><strong>this</strong></li>
<li>AJAX</li>
</ol>
</blockquote>
<blockquote>
<p>搞懂这三座大山，vue、react、angular … 就都可以去学了。</p>
<p>但如果三个有任何一个没搞清楚，那就还是 JS 没入门的水平。你会感觉一直在 JS 的屏障/瓶颈中</p>
</blockquote>
</li>
</ol>
<p>​</p>
<p>​</p>
<h3 id="1-调用时机-">1️⃣ 调用时机 🧐</h3>
<blockquote>
<p>JS 函数的执行时机 —— 时机不同，结果不同</p>
</blockquote>
<h4 id="例1">例1</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>问打印出多少？答：不知，因为没有调用（函数只有被调用才会执行）</p>
<h4 id="例2">例2</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>问打印出多少？答：1</p>
<h4 id="例3">例3</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>   
  <span class="c1">// 很多人看到这，会认为是打印 1。
</span><span class="c1"></span>  <span class="c1">// 但此时函数根本没执行过，可以完全忽略整个函数，不要提前就把 a=1 带入到函数中做记号
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1">// 到这里，a变成2了
</span><span class="c1"></span><span class="nx">fn</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>问打印出多少？答：2</p>
<h4 id="例4">例4</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">()</span>   <span class="c1">// 看时机：函数被调用，此时a=1
</span><span class="c1"></span><span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
</code></pre></td></tr></table>
</div>
</div><p>问打印出多少？答：1</p>
<h4 id="例5">例5</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>  <span class="c1">// setTimeout 相当于过一会、尽快（意思是当前手头事忙完，就立马执行里面的语句）
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">()</span>
<span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
</code></pre></td></tr></table>
</div>
</div><p>举个栗子：你在打游戏（运行这段js），你妈叫你去吃饭（fn()被调用） ，你说马上去（执行setTimeout）。说了马上去，意思是要先把这局游戏打完才去（继续向下执行a=2）。现在打完了(js全部走完)，可以吃饭 console.log(a)</p>
<p>问打印出多少？答：2</p>
<h4 id="例6-">例6 💡</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1">// 注意：let i 写在for外面，相当于 i 只声明了一个。let i（声明i）的过程不会参加到循环中
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  
  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>  <span class="c1">// 忙完手头事（for循环）立马执行里面的语句 console.log   // 【异步】
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 6 6 6 6 6 6 
</span><span class="c1"></span>  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>上面代码块打印出多少？答：不是 0、1、2、3、4、5，而是 6 个 6</p>
<p>变形：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// 相当于只有一个 i
</span><span class="c1"></span>  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 6 6 6 6 6 6
</span><span class="c1"></span>  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
<span class="o">-------------------------------------------------</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>   <span class="c1">// 这样相当于在每一次循环体的代码块中各声明了一个i，一共声明了6个i
</span><span class="c1"></span>  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 0 1 2 3 4 5 
</span><span class="c1"></span>  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="例7-">例7 💡</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> <span class="c1">// 这样相当于在每一次循环体的代码块中各声明了一个i，一共声明了6个i
</span><span class="c1"></span>  <span class="c1">// 每次循环都会创建一个i 进行赋值，然后留在这个空间中。6次循环创建6个新的i在各自的{}中，互不干涉
</span><span class="c1"></span>  <span class="c1">// 细品：类似于刻舟求剑，每次刻一下，剑的位置竟随着舟的移动也发生了变化
</span><span class="c1"></span>  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span> 
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>问打印出多少？答：是 0、1、2、3、4、5。</p>
<ul>
<li>因为 JS 在 for 和 let 一起用的时候会加东西，每次循环会多创建一个 i（我服了 JS）</li>
</ul>
<p>​</p>
<h4 id="总结">总结</h4>
<ul>
<li>setTimeout 就是尽快、等一会，但是不是现在。相当于先干完手头的，然后去做 setTimeout 里面的</li>
<li>JS 函数的「调用时机」，由于变量的值可能会发生改变，所以每次求值的时候都要想一想所有代码执行的顺序是怎样的。如果不能确定代码执行的顺序，那么最终结果可能就是不对的。</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="2-作用域">2️⃣ 作用域</h3>
<blockquote>
<p>每个函数都会默认创建一个作用域</p>
</blockquote>
<blockquote>
<p>作用域特别简单，就是画圈圈</p>
</blockquote>
<h4 id="例1-1">例1</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>           <span class="c1">// let声明的变量的作用域仅在当前这个 {...} 中
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// 报错 a is not defined  // a不存在
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>问：是不是因为 fn 没执行，导致 a 不存在 ？？</p>
</blockquote>
<h4 id="例2-1">例2</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// 即使 fn 执行了，a 还是不存在，仍旧报错
</span></code></pre></td></tr></table>
</div>
</div><p>答：就算 fn 执行了，也访问不到作用域里面的 a</p>
<ul>
<li>跟执不执行没有关系。</li>
<li>let 声明的变量的作用域非常好找。</li>
<li>在 let 声明语句的前面找到一个 <code>{</code>  ，在 let 语句后面找到一个 <code>}</code>  ，这俩半个花括号组成的作用域<code>{ } </code>，就是 let 变量的作用域</li>
</ul>
<p>​</p>
<h4 id="全局变量-vs-局部变量">全局变量 vs. 局部变量</h4>
<ul>
<li>在<strong>顶级作用域</strong>声明的变量是【全局变量】</li>
<li><strong>挂载到 window 上的属性</strong>是【全局变量】</li>
<li>其他都是【局部变量】</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>     <span class="c1">// let 声明的变量 a，仅在fn函数的{}内生效，所以是局部变量
</span><span class="c1"></span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span>   <span class="c1">// let声明的变量b，是在顶级作用域声明的，所以是全局变量，全局可访问
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">c</span> <span class="o">=</span> <span class="mi">3</span>  <span class="c1">// 在window上声明变量c，c就是全局变量，全局可访问
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">f1</span><span class="p">(){</span>
  <span class="nb">window</span><span class="p">.</span><span class="nx">d</span> <span class="o">=</span> <span class="mi">4</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">f2</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">f1</span><span class="p">()</span> <span class="c1">// 3   // 函数里也可以访问到 window 上的 c
</span><span class="c1"></span><span class="nx">f2</span><span class="p">()</span> <span class="c1">// 4   // f2函数中能访问到f1函数中，声明在window 上的变量d
</span></code></pre></td></tr></table>
</div>
</div><p>只要是挂载在window上的变量，不论在哪个作用域声明/挂载的，都是全局变量，全局可访问</p>
<blockquote>
<p>为什么有些方法可以直接使用，因为是挂在 window 上的</p>
<p>例如： Object / window.Object 、parseInt / window.parseInt  …</p>
</blockquote>
<h4 id="函数可嵌套">函数可嵌套</h4>
<blockquote>
<p>作用域也可嵌套</p>
<p>就近原则</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(){</span>
  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>

  <span class="kd">function</span> <span class="nx">f2</span><span class="p">(){</span>   <span class="c1">// 在f1函数中声明了一个f2函数
</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>  
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> 
  <span class="nx">a</span> <span class="o">=</span> <span class="mi">3</span>
  <span class="nx">f2</span><span class="p">()</span> 
<span class="p">}</span>
<span class="nx">f1</span><span class="p">()</span>  
<span class="c1">// 1
</span><span class="c1">// 2
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="作用域规则">作用域规则</h4>
<p>如果多个作用域有同名变量 a  （如上）</p>
<ul>
<li>那么查找 a 的声明时，就向上取最近的作用域</li>
<li>简称「<strong>就近原则</strong>」</li>
<li>查找 a（分清作用域）的过程与函数执行无关
<ul>
<li>函数的作用域与函数执行无关 —— 静态作用域（又叫 词法作用域，属于编译原理的知识）</li>
<li>函数的作用域与函数执行有关 —— 动态作用域，但 JS 里没有动态作用域，只有静态</li>
</ul>
</li>
<li>但 a 的值与函数执行有关</li>
</ul>
<h4 id="例4-">例4 ⭐️</h4>
<blockquote>
<p>看懂这个例子，作用域就没什么问题了</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(){</span>
  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="kd">function</span> <span class="nx">f2</span><span class="p">(){</span>
    <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="kd">function</span> <span class="nx">f3</span><span class="p">(){</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">a</span> <span class="o">=</span> <span class="mi">22</span>
    <span class="nx">f3</span><span class="p">()</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="mi">100</span>
  <span class="nx">f2</span><span class="p">()</span>
<span class="p">}</span>
<span class="nx">f1</span><span class="p">()</span>
<span class="c1">// 1
</span><span class="c1">// 22
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>作用域总结：==「就近原则」==</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="3-闭包">3️⃣ 闭包</h3>
<blockquote>
<p>闭包上面讲过了  ——  讲过了吗？！</p>
</blockquote>
<h4 id="重看例4">重看例4</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(){</span>
  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="kd">function</span> <span class="nx">f2</span><span class="p">(){</span>
    <span class="o">---------------------------</span>
    <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="kd">function</span> <span class="nx">f3</span><span class="p">(){</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>  <span class="c1">// f3里面用到了外层函数f2的变量 a ，那么 a 和 f3 就是闭包
</span><span class="c1"></span>    <span class="p">}</span>
    <span class="o">---------------------------</span>
    <span class="nx">a</span> <span class="o">=</span> <span class="mi">22</span>
    <span class="nx">f3</span><span class="p">()</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="mi">100</span>
  <span class="nx">f2</span><span class="p">()</span>
<span class="p">}</span>
<span class="nx">f1</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p><strong>闭包</strong></p>
<ul>
<li><strong>如果一个函数用到了外部的变量</strong></li>
<li><strong>那么这个函数加这个变量</strong></li>
<li><strong>就叫做闭包</strong>
<ul>
<li>左边的 a 和 f3 组成了闭包</li>
<li>闭包的用途以后讲，这里先把【闭包】的形式记下来即可</li>
<li>你也可以先搜一下</li>
</ul>
</li>
</ul>
<blockquote>
<p>“ 闭包这么简单吗？怎么看到网上讲的各种花里胡哨…  ”</p>
<p>frank：在 JS 基础知识这方面，我很有自信，我比其他所有在网上教你的人都懂。网上教的乱七八糟的</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="4-形式参数">4️⃣ 形式参数</h3>
<h4 id="形式参数的意思就是非实际参数">形式参数的意思就是非实际参数</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>
<span class="p">}</span>
<span class="c1">// 其中 x 和 y 就是【形参】，因为并不是实际的参数，x/y并【不代表任何实际的值】，仅代表参数的【顺序】
</span><span class="c1"></span>
<span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="c1">// 调用 add 时，1 和 2 是实际参数【实参】，会被赋值给 x 和 y
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>其他 JS 教程可能会说： JS 传参时分为「值传递」和「地址传递」。</p>
<p>上面记法太复杂，如果你<strong>搞懂了内存图</strong>，就知道没那么麻烦。</p>
<ul>
<li>实际上，<strong>传参就是把 stack 里记的内容拷贝给形参</strong>（不要区分什么值和地址，太麻烦了）</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>
<span class="p">}</span>
<span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>  <span class="c1">// 3
</span><span class="c1">// x接收到的 1，和 add(1,2) 这里的1，不是同一个1，只是复制了一份给 x
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">addObject</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span><span class="p">.</span><span class="nx">value</span> <span class="o">+</span> <span class="nx">y</span><span class="p">.</span><span class="nx">value</span>
<span class="p">}</span>
<span class="nx">addObject</span><span class="p">({</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},{</span><span class="nx">value</span><span class="o">:</span><span class="mi">2</span><span class="p">})</span>  <span class="c1">// 3
</span><span class="c1">// 怎么知道调用时，赋给x的{value:1}和 addObject(x,y)中x接收到的{value:1}是不是同一个
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 测试一下
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="mi">2</span><span class="p">}</span>
<span class="kd">function</span> <span class="nx">addObject</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span> <span class="c1">// 执行函数不仅把value加起来，还偷偷把x的内容改掉，看看是否影响到外面定义的x
</span><span class="c1"></span>  <span class="nx">x</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>
  <span class="k">return</span> <span class="nx">x</span><span class="p">.</span><span class="nx">value</span> <span class="o">+</span> <span class="nx">y</span><span class="p">.</span><span class="nx">value</span>
<span class="p">}</span>
<span class="nx">addObject</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span>   <span class="c1">// 3
</span><span class="c1"></span><span class="nx">a</span>  <span class="c1">// {value: 1, name: &#34;xxx&#34;}    // 诶! a被改了
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>如果搞懂内存图，就会知道，当我们在赋值时，只是把 a 存的 stack 内容，拷贝给形参</p>
<ul>
<li>实际上，<strong>传参就是把 stack 里记的内容拷贝给形参</strong>（不要区分什么值和地址，太麻烦了）</li>
<li>而形参 x / y ，应该会存储在「不知道什么区」（代指任何应该出现的区）</li>
</ul>
</blockquote>
<p>​</p>
<h4 id="形参可认为是变量声明">形参可认为是变量声明</h4>
<blockquote>
<p>其实，形参的本质就是变量声明</p>
<p>「形参」并不特殊，就是个语法糖</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 上面代码近似等价于下面代码
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">add</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>   <span class="c1">// 为什么用 var ?  答：历史原因，当时发明形参时 就只有var声明
</span><span class="c1"></span>  <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
  <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="形参可多可少">形参可多可少</h4>
<blockquote>
<p>形参只是给参数取名字而已</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span>   <span class="c1">// 只声明一个形参，如果传了两个参数，怎么拿到第2个形参呢？
</span><span class="c1"></span>  <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="p">}</span>
<span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>   <span class="c1">// 3
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>arguments 就是所有形参组成的数组</p>
<p>所以我们没有必要，把形参全部声明出来。通过 arguments 就可以全部获取到</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">z</span><span class="p">){</span>  
  <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>   <span class="c1">// z 怎么办？无所谓，声明着玩
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>   <span class="c1">// 7
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>JS 代码就是这么随意，形参爱多就多，爱少就少，没有规则约束</p>
<ul>
<li>后来这种特性造成一些问题，比如 TypeScript 兴起，TS 要求形参必须按照严格的类型和顺序</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="5-返回值">5️⃣ 返回值</h3>
<h4 id="每个函数都有返回值">每个函数都有返回值</h4>
<blockquote>
<p>不存在没有返回值的函数</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">hi</span><span class="p">(){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span> <span class="p">}</span>
<span class="nx">hi</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>没写 return，会默认返回值是 undefined</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">hi</span><span class="p">(){</span> <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span> <span class="p">}</span>
<span class="nx">hi</span><span class="p">()</span>  
<span class="c1">// hi           // 会照常执行语句的打印效果，并不表示这是语句的返回值
</span><span class="c1">// undefined    // 返回值
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>return console.log('hi')</code> 也就是说返回值为 console.log(&lsquo;hi&rsquo;) 的值，也就是 log 函数 的返回值，因为 log 函数没有 return，所以最终的值就是 undefined</p>
<blockquote>
<p>return 的结果，还是比较严谨的</p>
</blockquote>
</li>
</ul>
<p>​</p>
<h4 id="函数执行完了后才会返回">函数执行完了后才会返回</h4>
<blockquote>
<p>如果不执行，就不会有返回值</p>
<p>执行了，才会有返回值</p>
</blockquote>
<p>​</p>
<h4 id="只有函数有返回值">只有函数有返回值</h4>
<ul>
<li>1+2 的返回值为 3  ❌ （这是我们常见的一种口误，没有 return 哪来的返回值）</li>
<li>1+2 的值为 3   ✅</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="6-调用栈-">6️⃣ 调用栈 ⭐️</h3>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack" target="_blank" rel="noopener noreffer">MDN：Call stack</a></p>
</blockquote>
<blockquote>
<p>很抽象。是函数非常重要的要素。</p>
</blockquote>
<p>什么是调用栈</p>
<ul>
<li>JS 引擎在调用一个函数前</li>
<li>需要把函数所在的环境 push 到一个数组里</li>
<li>这个数组叫做调用栈</li>
<li>等函数执行完了，就会把环境弹(pop)出来</li>
<li>然后 return 到之前的环境，继续执行后续代码</li>
</ul>
<h4 id="举例">举例</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;1+2的结果为&#39;</span> <span class="o">+</span> <span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="调用栈的作用抽象">调用栈的作用（抽象）</h4>
<ul>
<li><strong>计算机是健忘的</strong>，每次进到一个函数，都要记下来等会要回到哪。把记录写到「调用栈」中</li>
<li>所以要把这个回到的地址，写到这个调用栈里面 ——<strong>「压栈」</strong>
<ul>
<li>在进入一个函数后，还要再进入另一个函数（嵌套的），那也要把这个子函数的地址放到栈里</li>
</ul>
</li>
<li>等当前子函数执行完毕，就**「弹栈」**—— 告诉计算机函数执行完要回到哪了。当前父函数执行完，再弹栈…
<ul>
<li>弹栈，会立刻删除调用栈列表中压栈时存下的对应信息。</li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack" target="_blank" rel="noopener noreffer">MDN 调用栈</a></p>
<p>这个模型还是比较重要的。</p>
<ul>
<li>JS 每次进入一个函数之前，先存档，执行完毕，没什么问题就读档，消掉前面的档</li>
<li>类似玩游戏打boss之前要存档，dead了后，就能自动读档到打boss之前的游戏进度 —— 与 JS 的流程不是非常一致，就是大概意思.</li>
<li>主要理解上面的流程图</li>
</ul>
</blockquote>
<blockquote>
<p>「栈」会不会满呢？</p>
<ul>
<li>如果使用<strong>递归函数</strong>，就有可能把栈压满。</li>
<li>因为递归函数，可能会一直不停的在压栈。</li>
</ul>
</blockquote>
<h4 id="递归函数">递归函数</h4>
<h5 id="阶乘">阶乘</h5>
<ul>
<li>当 n 不等于 1，就执行 n × f(n-1)</li>
<li>当 n 等于 1，就返回 1</li>
</ul>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">n</span> <span class="o">!==</span> <span class="mi">1</span> <span class="o">?</span> <span class="nx">n</span><span class="o">*</span> <span class="nx">f</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h5 id="理解递归">理解递归</h5>
<blockquote>
<p>层层递进↘，再层层回归↙  —— 递归</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">f</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="nx">f</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="nx">f</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nx">f</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
<span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
<span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="p">(</span><span class="mi">6</span><span class="p">)</span>
<span class="mi">24</span>
</code></pre></td></tr></table>
</div>
</div><p>先递进↘，再回归↙</p>
<ul>
<li>很多教程中，说递归就是不停的调用自己，实际上是不正确的理解</li>
<li>调用自己 !== 递归。调用自己有时候会死循环的，死循环就不是递归。递归——先递进，再回归、</li>
<li>递归的尽头，就在 <strong><code>f(1) === 1</code></strong>  这个关键点。</li>
</ul>
<p>​</p>
<h4 id="递归函数的调用栈">递归函数的调用栈</h4>
<h5 id="递归函数的调用栈很长">递归函数的调用栈很长</h5>
<ul>
<li>
<p>请画出阶乘 (4) 的调用栈</p>
<p></p>
</li>
<li>
<p>阶乘 4 ，会压 4 次栈</p>
</li>
<li>
<p>阶乘 10000 ，会压 10000 次栈  （数值太大，Chrome 计算不了）</p>
<p></p>
</li>
<li>
<p>试试「阶加」10000，压 10000 次栈</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">n</span> <span class="o">!==</span> <span class="mi">1</span> <span class="o">?</span> <span class="nx">n</span><span class="o">+</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
<span class="nx">sum</span><span class="p">(</span><span class="mi">10000</span><span class="p">)</span> <span class="c1">// 50005000 
</span><span class="c1"></span><span class="nx">sum</span><span class="p">(</span><span class="mi">20000</span><span class="p">)</span> <span class="c1">// Maximum call stack size exceeded 【爆栈】
</span></code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ul>
<h4 id="爆栈">爆栈</h4>
<blockquote>
<p>如果调用栈中压入的帧过多，程序就会崩溃 —— 爆栈</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">n</span> <span class="o">!==</span> <span class="mi">1</span> <span class="o">?</span> <span class="nx">n</span><span class="o">+</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
<span class="nx">sum</span><span class="p">(</span><span class="mi">10000</span><span class="p">)</span>   <span class="c1">// 要压10000次栈 // 50005000
</span><span class="c1"></span><span class="nx">sum</span><span class="p">(</span><span class="mi">20000</span><span class="p">)</span>   <span class="c1">// 要压20000次栈 // 已经报错。Maximum call stack size exceeded
</span></code></pre></td></tr></table>
</div>
</div><p>可以用<strong>二分法</strong>，试试 Chrome 最多能压多少次栈</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">sum</span><span class="p">(</span><span class="mi">15000</span><span class="p">)</span>  <span class="c1">// 爆栈
</span><span class="c1"></span><span class="nx">sum</span><span class="p">(</span><span class="mi">12500</span><span class="p">)</span>  <span class="c1">// 爆栈
</span><span class="c1"></span><span class="nx">sum</span><span class="p">(</span><span class="mi">11431</span><span class="p">)</span>  <span class="c1">// 爆栈
</span><span class="c1"></span><span class="nx">sum</span><span class="p">(</span><span class="mi">11430</span><span class="p">)</span>  <span class="c1">// 65328165
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Chrome 的调用栈的长度，大概 11000 ~ 12000 左右，不是固定值（因为里面可能已经放了一些别的东西）</p>
</blockquote>
<p>​</p>
<h4 id="调用栈最长有多少">调用栈最长有多少</h4>
<blockquote>
<p>使用下面代码，可以测试一个浏览器的调用栈的长度</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">computeMaxCallStackSize</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="nx">computeMaxCallStackSize</span><span class="p">();</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 报错说明 stack overflow 了
</span><span class="c1"></span>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>Chrome 12578
Firefox 26773
Node 12536</p>
</li>
<li>
<p>Chrome 和 Node 的用的是同一个 JS 引擎，所以测出来差不多。
Firefox 用的是自己的 JS 引擎，所以可能大一些</p>
</li>
</ul>
<p>​</p>
<h4 id="总结-1">总结—————————————</h4>
<blockquote>
<p>什么是调用栈</p>
<ul>
<li>
<p>就是我们进入一个函数时，要先把这个环境存下来，然后再进去，不然函数执行完就不知道怎么回去了。
要存的东西很多，就需要一个数组来保存。这个保存函数所在环境的数组，就叫<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack" target="_blank" rel="noopener noreffer">「调用栈」</a></p>
</li>
<li>
<p>调用栈的长度大概是在一万到两万左右，超过这个值程序就会崩溃 —— 爆栈</p>
</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h3 id="7-函数提升">7️⃣ 函数提升</h3>
<h4 id="什么是函数提升">什么是函数提升</h4>
<blockquote>
<p>不管你把具名函数声明在哪里，它都会跑到第一行</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){}</span>
</code></pre></td></tr></table>
</div>
</div><p>示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>
<span class="p">}</span>
<span class="c1">// 3
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>有一种代码规范就是，把所有声明的函数，都集中放到最后面，这样代码阅读起来就更简洁</p>
</blockquote>
<p>拓展</p>
<ul>
<li>
<p>如果同时声明 变量 add 和 函数 add，那 add 到底是谁呢？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">add</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">add</span><span class="p">(){}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>报错：add 已经被声明了。</p>
<p>输出 add，结果为 函数 add。（函数会提升，自动变成 ↓↓ 这样）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">add</span><span class="p">(){}</span>
<span class="kd">let</span> <span class="nx">add</span> <span class="o">=</span> <span class="mi">1</span> 
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>let 特性：如果这个变量已经存在，就不允许再次重复声明，会直接报错</p>
</li>
<li>
<p>但是用 var 声明，就不会报错</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">add</span><span class="p">(){}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">add</span>
<span class="kd">function</span> <span class="nx">add</span><span class="p">(){}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
<li>
<p>由上，用 var 可能有很多问题，搞不清到底表示函数还是什么。（押题再讲 var）</p>
</li>
<li>
<p>如果只用 let ，那世界就清净了。因为只要 let 重复声明，就会报错，避免上述搞不清变量到底是谁的 bug</p>
<blockquote>
<p>学习方法：难得东西着重去学；简单的东西，可以放到面试准备阶段背</p>
<p>就比如：var 很复杂，但又没什么用，只是面试会考到。所以我们只在面试准备阶段，讲一下</p>
</blockquote>
</li>
</ul>
<p>​</p>
<h4 id="什么不是函数提升">什么不是函数提升</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>这是赋值，右边的匿名函数声明不会提升，你在什么时候写，它就什么时候声明</p>
</blockquote>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>   <span class="c1">// 报错
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span><span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span><span class="p">}</span>   <span class="c1">// 这个函数的声明并没有提升，导致声明前先调用，所以会报错
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<h3 id="8-arguments">8️⃣ arguments</h3>
<h3 id="9-this-">9️⃣ this ⚡️</h3>
<blockquote>
<p>arguments 和 this，是<strong>除了箭头函数</strong>，每个函数都有的。</p>
</blockquote>
<ul>
<li>箭头函数，是新出的语法，故意摒弃了这两个特性。</li>
<li>可见，新的语法并不认为这俩是好东西</li>
<li>正如 JS 之父说的：JS 的原创之处并不优秀、优秀之处并非原创</li>
<li>arguments 和 this 就是 JS 原创的，使得 JS 语法特别独特，也特别不好用</li>
</ul>
<p>​</p>
<h2 id="理解-arguments">理解 arguments</h2>
<blockquote>
<p>译为：参数</p>
</blockquote>
<blockquote>
<p>注意</p>
<ul>
<li>arguments 是所有参数组成的伪数组</li>
<li>每次<strong>调用函数</strong>时，都会对应产生一个 arguments</li>
<li>我们应该尽量不对 arguments 内的元素进行修改，修改 arguments 会让代码变得令人疑惑</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">()</span>
<span class="nx">fn</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="nx">fn</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>发现：打印 arguments，结果类似<strong>数组</strong></p>
<ul>
<li>实际上， <strong>arguments 是包含所有参数的伪数组</strong>。
<ul>
<li>arguments 数组的原型是「根对象」——包含对象的共有属性。没有 push、shift、join … 这些数组共有方法</li>
<li>没有数组共有方法的数组，就是「伪数组」</li>
</ul>
</li>
</ul>
</blockquote>
<blockquote>
<p>「伪数组」怎么变真数组 ？</p>
<ul>
<li>通过 <code>Array.from(array)</code> 可以把任何不是数组的东西，转换为真数组（具有数组的共有属性）</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h2 id="理解-this-">理解 this ⚡️</h2>
<blockquote>
<p>this 可以说是 JS 的 “ 千古奇案 ” —— 各种取值，眼花缭乱</p>
</blockquote>
<h3 id="情况一">情况一</h3>
<blockquote>
<p>如果不给任何条件，那么 this 默认指向 window（包含所有全局变量）</p>
<ul>
<li>这种情况，通常用不上。因为如果要获取 window 上的某变量，直接写就行 <code>window.xxx</code> ，不需要用 this 来指代</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<h3 id="如何指定-this">如何指定 this</h3>
<blockquote>
<p>目前只能用 fn.call(…)</p>
</blockquote>
<h4 id="情况一-1">情况一</h4>
<blockquote>
<p>如果传的 this 不是对象，JS 会尽量<strong>封装成对象</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>          <span class="c1">// → 对象1
</span><span class="c1"></span><span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">undefined</span><span class="p">)</span>  <span class="c1">// → window
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p></p>
<h4 id="什么叫封装成对象">什么叫「封装成对象」？</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">就是</span> <span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>   <span class="c1">// 具有 number 的共有属性 —— 但基本没人用
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="怎么禁用这个自动封装的特性-">怎么禁用这个自动封装的特性 ？</h4>
<blockquote>
<p>例：传数字 1，最终 this 就是指向【数字 1】，而不被自动封装成【对象 1】</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 很简单，在声明函数的时候，【使用严格模式】，相当于告诉 JS 不要随便添加东西
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="s1">&#39;use strict&#39;</span>  
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">undefined</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p></p>
<p>​</p>
<p>​</p>
<h3 id="同时指定-this-和-arguments">同时指定 this 和 arguments</h3>
<ul>
<li>目前可以用 fn.call(xxx, 1,2,3) 传 this 和 arguments</li>
<li><strong>第1个参数是 this，后面所有参数是 arguments</strong></li>
<li>xxx 作为 this，会被自动转化成对象（JS 的糟粕）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span> 
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<h3 id="-this-是隐藏参数arguments-是普通参数-">“ this 是隐藏参数、arguments 是普通参数 ”</h3>
<blockquote>
<p>this 是参数（此结论是 frank 个人的）</p>
</blockquote>
<blockquote>
<p>↑↑ 是什么意思呢 ？ —— 我们需要花很多例子，来理解这句话</p>
</blockquote>
<blockquote>
<p>要理解 this，先从 JS 中把 this 排除出去。就是看看不用 this，能不能达到跟 this 一样的功能 ！</p>
</blockquote>
<h3 id="假设没有-this">假设没有 this</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;frank&#39;</span><span class="p">,</span>
  <span class="nx">sayHi</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`你好，我叫`</span> <span class="o">+</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>  <span class="c1">// 以前是使用 this.name，改成 person.name
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>为什么这里可以用 person.name，应该还没完成 person 的声明吧 ？</p>
<ul>
<li>因为这是一个函数，函数等会儿才会执行，等到执行时，person 不是已经完成了声明吗 ！！所以这是可以的</li>
<li>我们在 person 对象中声明一个函数的时候，在函数中可以用变量 person 得到这个对象的引用</li>
<li>在不准用 this 的前提下，这段代码是合法的，也符合我们的预期</li>
</ul>
<blockquote>
<p>我们可以用直接保存了对象地址的<strong>变量</strong>获取 &lsquo;name&rsquo;
我们把这种办法简称为<strong>引用</strong> （ 一个变量<strong>保存了</strong>一个对象的<strong>地址</strong>，就叫引用）</p>
</blockquote>
<h4 id="问题一">问题一</h4>
<blockquote>
<p>如果先声明了这个函数，后声明对象</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">sayHi</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`你好，我叫`</span> <span class="o">+</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> 
  <span class="c1">// 函数声明时怎么知道会有 person 变量呢，person 还没声明 ？
</span><span class="c1"></span>  <span class="c1">// 虽然执行上没问题，但先后逻辑上确实略有不通之处
</span><span class="c1"></span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;frank&#39;</span><span class="p">,</span>
  <span class="s1">&#39;sayHi&#39;</span><span class="o">:</span> <span class="nx">sayHi</span>  <span class="c1">// 引用sayHi函数
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">person</span>
<span class="nx">sayHi</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>分析</p>
<ul>
<li>person 如果改名，sayHi 中引用 person 的地方也必须跟着修改，否则 sayHi 函数就挂了</li>
<li>甚至有可能有 2 个单独 JS 文件，一个放着 person，而 sayHi 函数在另一个文件里面。
这样就显得更加奇怪：一个文件居然需要知道另一个文件中有什么变量</li>
<li>所以我们可能不是很希望 sayHi 函数里出现 person 引用
（感觉上这个代码有点不好，但也不是那么不好，较尴尬令人不爽 🙃 ）</li>
</ul>
<p>​</p>
<h4 id="问题二-">问题二 ⚡️⚡️</h4>
<blockquote>
<p>对象还好，如果用 类 class 的话，问题就更大了。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">Person</span><span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span> 
    <span class="c1">// this 指临时的新对象，这里的 this 是 new 强制指定的。我们就不讨论了 😅
</span><span class="c1"></span>  <span class="p">}</span>
  <span class="nx">sayHi</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">???</span><span class="p">)</span> <span class="c1">// 问题在这，怎么打印出name呢？声明类时，还没有new出任何实例对象，没法引用
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>我们想在 sayHi 中获取到当前对象的 name，但此时根本就没有当前对象，那怎么获取 ？</p>
<ul>
<li>我们就需要一种机制，来获取到未来的对象的 name 的引用</li>
</ul>
</blockquote>
<p>分析</p>
<ul>
<li>这里只有类，还没创建对象，故不可能获取对象的引用</li>
<li>那么如何拿到对象的 name 属性？ 🤔</li>
</ul>
<p>​</p>
<h4 id="需要一种办法拿到未来的对象">需要一种办法拿到未来的对象</h4>
<blockquote>
<p>复述问题：我们需要在函数中，获取一个对象的引用，但这个对象还未创建，那要怎么获取 ？</p>
</blockquote>
<blockquote>
<p>怎样才能获取的未来对象的引用，以便拿到对象的 name 属性？  →  怎样在不知道对象名字的情况下，拿到对象的引用 ？</p>
</blockquote>
<h4 id="一种土办法用参数传参">一种土办法，用参数（传参）</h4>
<p>对象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;frank&#39;</span><span class="p">,</span>
  <span class="nx">sayHi</span><span class="p">(</span><span class="nx">p</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`你好，我叫`</span> <span class="o">+</span> <span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>  
<span class="c1">// 用参数的形式，把你要得到的对象，传给了你
</span><span class="c1">// 这种方法，看起来很冗余、很挫
</span></code></pre></td></tr></table>
</div>
</div><p>类</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">Person</span><span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span> <span class="p">}</span>
  <span class="nx">sayHi</span><span class="p">(</span><span class="nx">p</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`你好，我叫`</span> <span class="o">+</span> <span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="谁会用这种办法--python">谁会用这种办法 —— Python</h4>
<blockquote>
<p>Python 在每一个函数中加了一个参数，并且约定这个参数就是后面创建的新对象</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span> <span class="c1"># 构造函数</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>

    <span class="k">def</span> <span class="nf">sayHi</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="s1">&#39;Hi, I am &#39;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>

<span class="n">person</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s1">&#39;frank&#39;</span><span class="p">)</span>
<span class="n">person</span><span class="o">.</span><span class="n">sayHi</span><span class="p">()</span>   <span class="c1"># Python 默认会把 sayHi 前面的 person 作为参数传到 sayHi 中，所以 self 就是这个参数</span>
</code></pre></td></tr></table>
</div>
</div><p>特点</p>
<ul>
<li>每个函数都接受一个额外的 self</li>
<li><strong>这个 self 就是后面会创建并传进来的对象</strong></li>
<li>只不过 Python 会偷偷帮你传对象
<ul>
<li>person.sayHi() 等价于 person.sayHi(person)</li>
</ul>
</li>
<li><strong>person 就被传给 self 了</strong>（得到了一个未来的对象的引用）</li>
</ul>
<blockquote>
<p>这其实是任何语言都要解决的问题 —— 在写代码的时候，不知道后面要创建的对象叫什么</p>
</blockquote>
<p>​</p>
<h4 id="js-没有模仿-python-的思路">JS 没有模仿 Python 的思路</h4>
<blockquote>
<p>JS 走了另一条路 —— 更难理解的路 —— 这就是 JS 的第二座大山 this</p>
</blockquote>
<p>​</p>
<h3 id="js-在每个函数里加了-this-">JS 在每个函数里加了 this ⚡️⚡️</h3>
<blockquote>
<p>JS 没有像 Python 那样加一个参数，而是发明了一个关键字 —— this</p>
<p>在任何一个函数里，可<strong>用 this 获取到那个</strong>你现在还不知道名字的<strong>对象</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;frank&#39;</span><span class="p">,</span>
  <span class="nx">sayHi</span><span class="p">(</span><span class="nx">隐藏的this</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`你好，我叫`</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">()</span>
<span class="o">----------------------------------------------------</span>
<span class="kr">class</span> <span class="nx">Person</span><span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span> <span class="p">}</span>
  <span class="nx">sayHi</span><span class="p">(</span><span class="nx">p</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`你好，我叫`</span> <span class="o">+</span> <span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;frank&#39;</span><span class="p">)</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">()</span>  <span class="c1">// 隐式的写了 this = p （JS引擎擅自执行的操作）
</span><span class="c1">// ↑↑ 相当于 ↓↓ 
</span><span class="c1">// person.sayHi(person)  
</span><span class="c1">// JS 和 Python 做了一样的处理：会自动把 person 传给 sayHi
</span><span class="c1">// 然后 person 被传给 this 了（person 是个地址）
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<ul>
<li>JS 做的第 1 件事：把 this关键字 赋予 sayHi。</li>
<li>JS 做的第 2 件事：把 person(地址) 传给 this。</li>
<li>综上，就是把 person 给了 sayHi</li>
</ul>
<p>这样，每个函数都能用 this 获取一个未知对象（person）的引用了</p>
</blockquote>
<blockquote>
<h3 id="personsayhi-会隐式地把-person-作为-this-传给-sayhi"><strong>person.sayHi() 会隐式地把 person 作为 this 传给 sayHi</strong></h3>
<p>（ 而不是像 Python 一样作为第 1 个参数 self ，传给 sayHi ）</p>
<p><strong>方便 sayHi 获取 person 对应的对象</strong></p>
</blockquote>
<p>​</p>
<h3 id="总结-2">总结</h3>
<blockquote>
<p>总结一下目前的知识</p>
</blockquote>
<ul>
<li>我们想让函数获取对象的引用</li>
<li>但是并不想通过变量名做到</li>
<li>Python 通过额外的 self 参数做到</li>
<li>JS 通过额外的 this 做到：
<ul>
<li>person.sayHi() 会把 person 自动传给 sayHi，sayHi 可以通过 this 引用 person</li>
</ul>
</li>
<li>其他
<ul>
<li>注意 person.sayHi 和 person.sayHi() 的区别</li>
<li>注意 person.sayHi() 的断句 (person.sayHi) ( )</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="这就引出另一个问题-">这就引出另一个问题 💡</h3>
<h4 id="到底哪个对">到底哪个对</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;frank&#39;</span><span class="p">,</span>
  <span class="nx">sayHi</span><span class="p">(){</span>  <span class="c1">// 隐藏的this参数
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`你好，我叫`</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// 自动隐式的把 person 传给 sayHi
</span><span class="c1"></span><span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">()</span>        <span class="c1">// 省略传参 ？
</span><span class="c1"></span><span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>  <span class="c1">// 完整传参 ？  哪种写法是对的
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>省略形式反而对了，完整形式反而是错的</p>
</blockquote>
<h4 id="js-怎么解决这种不和谐">JS 怎么解决这种不和谐</h4>
<blockquote>
<p>[Python](#谁会用这种办法 —— Python) 至少有明确的约定：这种 person.sayHi() 写法就会把 person 传给 sayHi 的第 1 个显式参数 self 。</p>
<p>那 JS 要怎么解释 this 的存在呢 ？（函数并没有显式的形参，this 完全是一个不成文的、隐性的约定）</p>
<ul>
<li>JS 提供两种调用形式</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="两种调用">两种调用🧐</h3>
<h4 id="小白调用法-">小白调用法 🚫</h4>
<ul>
<li>person.sayHi()</li>
<li>会自动把 person 传到函数里，作为 this</li>
</ul>
<h4 id="大师调用法-">大师调用法 ✅</h4>
<blockquote>
<p>使用 JS 新出的调用方法：call</p>
</blockquote>
<ul>
<li>
<p>person.sayHi.call(person)</p>
</li>
<li>
<p>需要自己手动把 person 传到函数里，作为 this （更为清晰）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;frank&#39;</span><span class="p">,</span>
  <span class="nx">sayHi</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`你好，我叫`</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">.</span><span class="nx">call</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="mi">1</span><span class="p">})</span>   <span class="c1">// call 里传什么 this 就是什么，非常清晰
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="应该学习哪种">应该学习哪种？</h4>
<ul>
<li>学习大师调用法，因为小白调用法你早就会了</li>
<li>从这段笔记开始，默认用大师调用法</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="指定-this-">指定 this 😈</h2>
<h3 id="call-指定-this">call 指定 this</h3>
<blockquote>
<p>call 是 JS 新出的调用方法。call 会使得所有东西变得明朗起来</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;frank&#39;</span><span class="p">,</span>
  <span class="nx">sayHi</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`你好，我叫`</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>  <span class="c1">// call传什么this就是什么
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">.</span><span class="nx">call</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="mi">1</span><span class="p">})</span>   <span class="c1">// call 里传什么 this 就是什么，非常清晰
</span><span class="c1"></span><span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">.</span><span class="nx">call</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;jack&#39;</span><span class="p">})</span>
<span class="o">-------------------------------------------------------------------------------</span>
<span class="c1">// 大多数情况，我们需要this就是当前对象
</span><span class="c1"></span><span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>  
<span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">()</span>  <span class="c1">// 为什么不用这种写法？因为隐藏了太多细节，只适合小白
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<h3 id="所有函数调用必须强迫自己使用大师调用法-call--apply">所有函数调用，必须强迫自己使用「大师调用法」—— call / apply</h3>
</blockquote>
<p>​</p>
<h4 id="例1-2">例1</h4>
<blockquote>
<p>有一个 add 函数，不需要用到 this，那如何使用 call 调用 ？</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="没有用到-this">没有用到 this</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">add</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">undefined</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="c1">// 3   
</span><span class="c1">// call的第1个参数是指定this的，后面所有参数作为实参传递给函数对应形参
</span></code></pre></td></tr></table>
</div>
</div><h5 id="为什么要多写一个-undefined">为什么要多写一个 undefined</h5>
<ul>
<li>因为第一个参数要作为 this</li>
<li>但是代码里没有用 this</li>
<li>所以只能用 undefined 占位</li>
<li>其实用 null 也可以</li>
</ul>
<p>​</p>
<h4 id="例2-2">例2</h4>
<blockquote>
<p>Array.prototype.forEach 这个函数就用到了 this</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">array</span><span class="p">.</span><span class="nx">forEach2</span><span class="p">()</span>   <span class="c1">// 小白写法：脑子一懵，就不知道了this是什么了
</span><span class="c1"></span><span class="nx">array</span><span class="p">.</span><span class="nx">forEach2</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>  <span class="c1">// [1,2,3]  // 大师写法：规定了call里面的就是this，所以清晰明了的知道此时打印的this就是传进去的array数组本身
</span></code></pre></td></tr></table>
</div>
</div><h5 id="尝试写出完整的-foreach-函数">尝试写出完整的 forEach 函数</h5>
<blockquote>
<p>forEach 功能是遍历当前数组。当前数组在哪呢？ 就是 this，this 就可以作为未来数组的引用</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">){</span>  <span class="c1">// 传一个方法fn
</span><span class="c1"></span>  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="nx">fn</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">i</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>  <span class="c1">// 对每一个元素，执行fn方法
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Tips</p>
<p>我们在看一个函数的代码时，不要想 this 的值是什么 ， 因为 this 的值是不确定的，没人知道</p>
<ul>
<li>只有在函数被调用时（用大师法传进 this），才清晰的知道 this 是什么</li>
</ul>
</blockquote>
<h5 id="如何调用">如何调用</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">){</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="nx">fn</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">i</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> 
<span class="nx">array</span><span class="p">.</span><span class="nx">forEach2</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">)</span> <span class="c1">// 大师：显式的指定了this
</span><span class="c1"></span><span class="nx">array</span><span class="p">.</span><span class="nx">forEach2</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">)</span> <span class="c1">// 小白：隐式的把array作为this
</span></code></pre></td></tr></table>
</div>
</div><p>this 是什么</p>
<ul>
<li>由于大家使用 forEach2 的时候总是习惯于用 arr.forEach2</li>
<li>所以 arr 就被自动传给 forEach2 了</li>
</ul>
<p>​</p>
<h4 id="this-一定是数组吗">this 一定是数组吗</h4>
<ul>
<li>
<p>不一定，比如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">){</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="nx">fn</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">i</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// 我们可以指定 this 为一个对象转化的伪数组
</span><span class="c1"></span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach2</span><span class="p">.</span><span class="nx">call</span><span class="p">({</span><span class="mi">0</span><span class="o">:</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="mi">1</span><span class="o">:</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="nx">length</span><span class="o">:</span><span class="mi">2</span><span class="p">},</span> <span class="nx">item</span><span class="p">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ul>
<blockquote>
<p>所以 this 就是我们可以任意指定的参数而已。</p>
<ul>
<li>使用小白写法，JS 就会猜你想要的 this 是什么，绝大部分情况都能猜对。</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="总结-this-的两种使用方法">总结 this 的两种使用方法</h3>
<blockquote>
<p>不论什么方式调用函数，实际上都在传递 this 。 区别在于：你【知道】传的 this 什么 或【不知道】</p>
</blockquote>
<h4 id="隐式传递">隐式传递</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">fn</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="c1">// 等价于 fn.call(undefined, 1, 2)
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">child</span><span class="p">.</span><span class="nx">fn</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// 等价于 obj.child.fn.call(obj.child, 1)   // 一个对象的属性上的fn函数
</span></code></pre></td></tr></table>
</div>
</div><h4 id="显式传递">显式传递</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">undefined</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">undefined</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="apply-区别">apply 区别</h4>
<ul>
<li>apply 要在后面其他参数的部分，加上中括号 [  ]</li>
<li>apply 后面的参数要用<strong>数组</strong>的形式来表示</li>
<li>只是写法形式不同，其他都和 call 是一样的</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="绑定-this">绑定 this</h3>
<blockquote>
<p>如果不确定 this 是什么，可以使用 bind <strong>强制绑定</strong></p>
</blockquote>
<h4 id="使用-bind-可以让-this-不被改变">使用 .bind 可以让 this 不被改变</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">f2</span> <span class="o">=</span> <span class="nx">f1</span><span class="p">.</span><span class="nx">bind</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;frank&#39;</span><span class="p">})</span> <span class="c1">// 那么 f2 就是 f1 绑定了 this 之后的新函数
</span><span class="c1"></span><span class="nx">f2</span><span class="p">()</span> <span class="c1">// 等价于 f1.call({name:&#39;frank&#39;})
</span><span class="c1">// 打印结果：{name: &#34;frank&#34;} undefined undefined  // this是传进来的对象，p1/p2没传所以是undefined
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li>f2 是 f1 的 this 绑定之后的版本</li>
<li>调 f2 相当于调 f1，唯一的区别就是，f2 的 this 被绑定了，绑定成通过 bind 传递的参数</li>
</ul>
<blockquote>
<p>有什么用呢？ —— 后面学 vue / react 可能就天天遇到了</p>
</blockquote>
<p>​</p>
<h4 id="bind-还可以绑定其他参数">.bind 还可以绑定其他参数</h4>
<blockquote>
<p>bind 除了可以绑定 this，其实可以<strong>用来绑定所有参数</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">f3</span> <span class="o">=</span> <span class="nx">f1</span><span class="p">.</span><span class="nx">bind</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;frank&#39;</span><span class="p">},</span> <span class="s1">&#39;hi&#39;</span><span class="p">)</span>
<span class="nx">f3</span><span class="p">()</span> <span class="c1">// 等价于 f1.call({name:&#39;frank&#39;}, hi)  // 已经绑死了：this是这个对象，p1是&#39;hi&#39;
</span><span class="c1"></span><span class="nx">f3</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>  <span class="c1">// 因为 this 和 p1 已经绑死了，所以这里传的 3 会作为 p2
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<h2 id="箭头函数">箭头函数</h2>
<blockquote>
<p>「箭头函数」没有 arguments 和 this 。</p>
</blockquote>
<blockquote>
<p>上面讲 this 用了大量篇幅，因为 this 功能太复杂且隐晦。所以新版 JS 就放弃了 this</p>
</blockquote>
<h3 id="函数里面的-this-就是外面的-this">函数里面的 this 就是外面的 this</h3>
<blockquote>
<p>默认的 this 是 window</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="c1">// window
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span> <span class="o">===</span> <span class="nb">window</span><span class="p">)</span> <span class="c1">// true
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="c1">// 这里的this无需确认，外面的this是什么，箭头函数里面的this就是什么
</span><span class="c1"></span><span class="nx">fn</span><span class="p">()</span> <span class="c1">// window
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<blockquote>
<p>对于箭头函数来说，变量就是普通变量</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="nx">fn</span><span class="p">()</span>   <span class="c1">// 1
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>函数打印变量a 。就近原则，先找函数里有没有变量a，没有。就用函数外的变量a</p>
</blockquote>
<blockquote>
<p>this 同理，箭头函数里面没有 this 变量，就找外层的 this 变量。所以箭头函数中的 this 就是外面的 this</p>
</blockquote>
<p>​</p>
<h3 id="就算用-call-也无法指定-this">就算用 call 也无法指定 this</h3>
<blockquote>
<p>怎么证明箭头函数里面没有 this 呢？</p>
</blockquote>
<blockquote>
<p>可以用 call 来尝试指定箭头函数的 this 。 结果，无法指定，this 仍然指向 window</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
<span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;frank&#39;</span><span class="p">})</span> <span class="c1">// 仍是 window
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>不论是用 call 、 bind … 都无法改变箭头函数中 this 的指向，永远是和 函数外的this 保持一致。
除非外面的 this 改变了，否则 箭头函数的 this 不会变化</p>
</blockquote>
<h3 id="箭头函数没有-arguments">箭头函数没有 arguments</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)</span>  <span class="c1">// arguments是所有参数组成的伪数组
</span><span class="c1"></span><span class="nx">fn</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>  <span class="c1">// 报错：arguments is not defined
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>没有 this ，没有 arguments 的函数就是「箭头函数」</p>
</blockquote>
<h2 id="总结-3">总结</h2>
<p>每个函数都有这些东西</p>
<ol>
<li><strong>调用时机</strong>：决定了变量的值</li>
<li><strong>作用域</strong>：同时多个作用域，遵循「就近原则」</li>
<li><strong>闭包</strong>：如果一个函数用到了外部的变量，那么这个函数加这个变量，就叫做闭包</li>
</ol>
<ul>
<li><strong>形式参数</strong>：给参数取名字，相当于声明一个变量</li>
</ul>
<ol start="5">
<li><strong>返回值</strong>：return ，默认 return undefined</li>
<li><strong>调用栈</strong>：进去每个函数前都要先压栈，出来函数前要弹栈</li>
<li><strong>函数提升</strong>：函数跑到最前面</li>
<li><strong>arguments（除了箭头函数）</strong>：包含所有参数的伪数组</li>
<li><strong>this（除了箭头函数）</strong>：引用一个当前不存在的对象，是 call() 方法的第一个参数</li>
</ol>
<p>​</p>
<p>​</p>
<h2 id="立即执行函数">立即执行函数</h2>
<blockquote>
<p>只有 JS 有的变态玩意，现在用得少</p>
</blockquote>
<h3 id="声明局部变量es6-之前">声明局部变量（ES6 之前）</h3>
<blockquote>
<p>在 ES6 之前，怎么获得一个局部变量</p>
</blockquote>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 以前只有 var声明时
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1">// a 是一个全局变量
</span><span class="c1"></span>
<span class="c1">// 如果想声明一个局部变量，必须写一个函数
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>   <span class="c1">// 在函数里，声明的 a 才是局部变量
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>  
<span class="p">}</span>

<span class="nx">fn</span><span class="p">()</span>           <span class="c1">// 2
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// 1
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>用函数确能得到局部变量，但也同时增加了一个全局的函数（不也是全局变量），这与初衷相悖</p>
</blockquote>
<h4 id="思考--办法">思考 / 办法</h4>
<blockquote>
<p>思考：如果函数没有名字，那就不会生成一个全局函数，然后直接调用这个没名的函数不就行了</p>
</blockquote>
<blockquote>
<p>办法：声明一个匿名函数，然后直接调用执行 —— 没有暴露任何一个全局变量 或 全局函数</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>   <span class="c1">// 获得局部变量a，但副作用是又带来一个全局函数
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">()</span> <span class="c1">// 2
</span><span class="c1"></span><span class="o">-----------------------------------------</span> <span class="err">↑↑</span> <span class="nx">改写成</span> <span class="err">↓↓</span> <span class="o">---------------</span>
<span class="c1">// 去掉函数名
</span><span class="c1"></span><span class="kd">function</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>   <span class="c1">// 获得局部变量a，但副作用是又带来一个全局函数
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span> <span class="p">()</span> <span class="c1">// 把圆括号加到匿名函数的后面
</span><span class="c1">// 上面就是声明一个匿名函数，然后直接调用执行
</span></code></pre></td></tr></table>
</div>
</div><h4 id="执行--报错">执行 / 报错</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span> <span class="p">()</span> 
<span class="c1">// Uncaught SyntaxError: Function statements require a function name
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>执行，报错（JS认为语法不对）</p>
</blockquote>
<h4 id="解决">解决</h4>
<blockquote>
<p>JS 的程序员绞尽脑汁，找到一些解决办法    ↓↓</p>
</blockquote>
<ul>
<li>
<p>匿名函数前加一个操作符</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">+</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span> <span class="p">()</span>
<span class="c1">// 2
</span><span class="c1">// NaN（返回值并不影响需求，所以放着就好）
</span></code></pre></td></tr></table>
</div>
</div><p></p>
</li>
<li>
<p>只要做一个运算，上面函数的写法都可以直接执行，不会再报错（与 undefined 运算，返回都是 NaN）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">+</span> <span class="kd">function</span><span class="p">(){...}()</span>   <span class="c1">// NaN
</span><span class="c1"></span><span class="o">-</span> <span class="kd">function</span><span class="p">(){...}()</span>   <span class="c1">// NaN
</span><span class="c1"></span><span class="mi">1</span><span class="o">*</span> <span class="kd">function</span><span class="p">(){...}()</span>  <span class="c1">// NaN   // 乘号必须左右都有值
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>取反也可以 <strong><code>!</code></strong></p>
<p>返回值为 undefined  =&gt;  ! undefined  =&gt;  true</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">!</span> <span class="kd">function</span><span class="p">(){...}()</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>…</p>
</li>
</ul>
<blockquote>
<p>这样我们终于就得到 JS 中，只要一个局部变量的方法</p>
</blockquote>
<blockquote>
<p>总结：为得到一个局部变量，不得不去造一个函数，并执行这个函数 —— 这也是 JS（旧） 的问题</p>
</blockquote>
<h3 id="总结原理">总结原理</h3>
<ul>
<li>ES 5 时代，为了得到局部变量，必须引入一个函数</li>
<li>但是这个函数如果有名字，就得不偿失</li>
<li>于是这个函数必须是匿名函数</li>
<li>声明匿名函数，然后立即加个 () 执行它</li>
<li>但是 JS 标准认为这种语法不合法</li>
<li>所以 JS 程序员寻求各种办法</li>
<li>最终发现，只要在匿名函数前面加个运算符即可</li>
<li>!、~、()、+、- 都可以</li>
<li>但是这里面有些运算符会往上走</li>
<li>所以方方推荐永远用 ! 来解决</li>
</ul>
<p>​</p>
<h3 id="声明局部变量es6-之后">声明局部变量（ES6 之后）</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>
<span class="mi">2</span>
<span class="kc">undefined</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>  <span class="c1">// 报错 a is not defined
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="注意事项">注意事项</h3>
<blockquote>
<p>推荐永远用 ! 来解决</p>
</blockquote>
<p>用 +、括号 … 可能有 bug</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span> <span class="c1">// 没有这句时，代码执行一切正常，返回值也是 undefined。一旦有这句话，代码执行就不同了
</span><span class="c1"></span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span> <span class="p">())</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>JS 有个特点：它的回车是没有意义的</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 上面代码执行过程，如下
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>  <span class="p">=&gt;</span>  <span class="nx">log函数返回值</span> <span class="kc">undefined</span>  <span class="p">=&gt;</span> <span class="kc">undefined</span><span class="p">(</span><span class="kd">function</span><span class="p">(){}())</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>因为回车是没有意义的，等同于 undefined 后面跟着一对 <strong><code>( )</code></strong>，所以把 undefined 当成函数执行，必然报错</p>
</blockquote>
<h4 id="总结-4">总结</h4>
<blockquote>
<p>永远<strong>不要</strong>用 【圆括号】来写立即执行函数（圆括号会往上面代码凑，甚至可能连起来执行）</p>
<ul>
<li>虽然可以用【分号】来强制结束/分隔两个语句 。但显然也没感叹号方便</li>
<li><strong>这是 JS 中唯一需要加分号 <code>;</code> 的地方</strong>，其他任何代码不需要分号</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">);</span>   <span class="c1">// 可以用 ; 分隔两个语句   // 如果别人用了圆括号，一定要在前面加 ; 分号
</span><span class="c1"></span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span> <span class="p">())</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>用【感叹号】最合适，因为感叹号不会往上面代码看，只会往后看</p>
</blockquote>]]></description>
</item><item>
    <title>JS 数组</title>
    <link>http://samrks.github.io/javascript-array/</link>
    <pubDate>Fri, 11 Sep 2020 21:34:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-array/</guid>
    <description><![CDATA[<p>「数组的基本方法」「伪数组」「数组的增删改查」「索引越界！」</p>
<p>​</p>
<h2 id="数组对象">数组对象</h2>
<blockquote>
<p>一种特殊的对象</p>
</blockquote>
<h2 id="js-其实没有真正的数组">JS 其实没有真正的数组</h2>
<blockquote>
<p>只是用对象去模拟数组</p>
</blockquote>
<p>其他语言、基于底层的语言，比如 C 语言，会告诉你【数组是连续的内存分配】</p>
<h2 id="js-数组不是典型数组">JS 数组不是典型数组</h2>
<h3 id="典型的数组">典型的数组</h3>
<ul>
<li>
<p>元素的数据类型相同</p>
</li>
<li>
<p>使用连续的内存存储</p>
</li>
<li>
<p>通过数字下标获取元素</p>
<p></p>
</li>
</ul>
<h3 id="但-js-的数组不这样">但 JS 的数组不这样</h3>
<blockquote>
<p>JS 的数组，实际上是用 key / value 模拟的，本质是对象</p>
</blockquote>
<p></p>
<ul>
<li>
<p>元素的数据类型可以不同</p>
</li>
<li>
<p>内存不一定是连续的（对象是随机存储的）</p>
</li>
<li>
<p>不支持数字下标，而是通过<strong>字符串下标</strong></p>
<ul>
<li>
<p>这意味着数组可以有任何 key</p>
</li>
<li>
<p>比如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>  <span class="c1">// [&#34;0&#34;, &#34;1&#34;, &#34;2&#34;]
</span><span class="c1"></span><span class="nx">arr</span><span class="p">[</span><span class="s1">&#39;xxx&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>   <span class="c1">// 下标为&#39;xxx&#39;，值为&#39;xxx&#39;
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">yyy</span> <span class="o">=</span> <span class="s1">&#39;yyy&#39;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p></p>
</li>
</ul>
<h2 id="创建一个数组-">创建一个数组 💡</h2>
<h3 id="新建">新建</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>           <span class="c1">// 简写
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>  <span class="c1">// 正规：方便理解原理
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>      <span class="c1">// [empty × 3] 数组为空，但 length为3
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="转化-arrayfrom-用字符串创建数组">转化（ Array.from 用字符串创建数组）</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="s1">&#39;1,2,3&#39;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>  <span class="c1">//  [&#34;1&#34;, &#34;2&#34;, &#34;3&#34;]
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="s1">&#39;123&#39;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>  
<span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="s1">&#39;123&#39;</span><span class="p">)</span>    <span class="c1">// 最新的ES标准提供的api：会把不是数组的东西，尝试变成数组
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>  <span class="c1">// []
</span><span class="c1"></span><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="c1">// []
</span><span class="c1"></span><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">})</span> <span class="c1">// []
</span><span class="c1"></span><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">({</span><span class="mi">0</span><span class="o">:</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="o">:</span><span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="o">:</span><span class="s1">&#39;c&#39;</span><span class="p">})</span> <span class="c1">// []
</span><span class="c1"></span><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">({</span><span class="mi">0</span><span class="o">:</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="o">:</span><span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="o">:</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="nx">length</span><span class="o">:</span> <span class="mi">3</span><span class="p">})</span> <span class="c1">// [&#34;a&#34;, &#34;b&#34;, &#34;c&#34;]
</span></code></pre></td></tr></table>
</div>
</div><p>总结：<code>Array.from()</code> 只在符合以下条件的情况下，才能<strong>把对象转换成数组</strong></p>
<ul>
<li>条件1 ：这个对象需要有 0,1,2,3… 这种形式的属性，符合数组的下标</li>
<li>条件2： 这个对象需要有 length 属性</li>
</ul>
<blockquote>
<p>满足以上条件，<code>Array.from(xxx)  </code> 就可以尝试把 一个对象 转化成 真正的数组</p>
</blockquote>
<h4 id="变态情况">变态情况</h4>
<ol>
<li>
<p>前面提到：JS 的数组 不支持数字下标，而是通过<strong>字符串下标</strong>。
那这里要转化的对象<code>{0:'a', 1:'b', 2:'c'}</code>的 key 值 0,1,2 都是数字，为什么可以被识别？</p>
<blockquote>
<p>答：当 JS 发现 0,1,2 是数字格式，会先自动调用  <code> (1).toString()</code> 方法，把数字全部转化为 字符串</p>
</blockquote>
</li>
<li>
<p>对象中的下标为 0,1,2  但 length 不为 3  的情况</p>
<p></p>
<blockquote>
<p>答：会以 length 为主，有多余的就删，不足就补 undefined。总之，length 值不变</p>
</blockquote>
</li>
<li>
<p>对象中的下标为乱序</p>
<p></p>
<blockquote>
<p>答：不会依照下标的乱序来转换数组，而是<strong>自动调整为顺序</strong>排列内容</p>
</blockquote>
</li>
</ol>
<h3 id="伪数组">伪数组</h3>
<ul>
<li>伪数组的原型链中并<strong>没有数组的原型</strong></li>
<li>换言之，如果一个数组，不具有数组的共有属性（push、pop…等方法），那它就是一个伪数组</li>
<li>可以通过 <code>Array.from()</code> 变成真正的数组</li>
</ul>
<p>下面的是【真数组】</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>  <span class="c1">// new Array(1,2,3,4)
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span>                      <span class="c1">// true
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>           <span class="c1">// true
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__proto__</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>下面的是【伪数组】</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kd">let</span> <span class="nx">divList</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  <span class="c1">// 获取文档中所有div元素，组成一个数组
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">divList</span><span class="p">)</span> <span class="c1">// 伪数组
</span><span class="c1"></span>  <span class="nx">divList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>  <span class="c1">// 报错 TypeError: divList.push is not a function 伪数组不具有数组的共有属性
</span><span class="c1"></span>  
  <span class="kd">let</span> <span class="nx">divArray</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">divList</span><span class="p">)</span>  <span class="c1">// 把【伪数组】转换为【真数组】
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">divArray</span><span class="p">)</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>divList【伪数组】  ↓↓</p>
</blockquote>
<p></p>
<hr>
<blockquote>
<p>divArray 【真数组】 ↓↓</p>
</blockquote>
<p></p>
<blockquote>
<p>总结：没有数组共有属性的「数组」，就是伪数组</p>
<ul>
<li>不知道 JS 为什么要设计伪数组，没什么用。</li>
<li>如果拿到的是伪数组，尽量转换成真数组，再操作</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="合并两个数组得到新数组">合并两个数组，得到新数组</h3>
<blockquote>
<p>不改变原数组</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="nx">arr1</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">arr2</span><span class="p">)</span>   <span class="c1">// [3, 3, 3, 4, 4, 4]  // 返回一个新数组，原数组不改变
</span></code></pre></td></tr></table>
</div>
</div><h3 id="截取一个数组的一部分">截取一个数组的一部分</h3>
<blockquote>
<p>不改变原数组</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>  
<span class="nx">arr1</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">// 从第3个元素开始，获得新数组 [3,4,5,6]   // 原数组 arr1 不改变
</span></code></pre></td></tr></table>
</div>
</div><h3 id="截取数组全部">截取数组全部</h3>
<blockquote>
<p>不改变原数组</p>
</blockquote>
<ul>
<li>相当于把原数组复制了一遍</li>
<li>slice(0)  经常用于<strong>复制数组</strong>。JS 并没有提供专门的复制数组的方法，所以要实现复制效果，就使用 slice(0)</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="nx">arr1</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">// 全部截取，赋给arr2
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注意，所以 JS 原生提供的，都是【浅拷贝】，没有深拷贝</p>
<p>深拷贝在【押题】中讲解</p>
</blockquote>
<h2 id="数组的增删改查-">数组的增删改查 ❤️</h2>
<h3 id="删元素">删元素</h3>
<h4 id="-跟对象一样">🙁 跟对象一样</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">]</span>
<span class="k">delete</span> <span class="nx">arr</span><span class="p">[</span><span class="s1">&#39;0&#39;</span><span class="p">]</span>  <span class="c1">// arr[0] 可不加引号，此时js会自动加引号
</span><span class="c1"></span><span class="nx">arr</span>  <span class="c1">// [empty, &#39;b&#39;, &#39;c&#39;]    // 变成【稀疏数组】
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">delete</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="k">delete</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="nx">arr</span> <span class="c1">// [empty × 3]      // 变成【稀疏数组】
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>神奇，即使把元素全部 delete ，数组的长度也没有变</p>
</blockquote>
<p>​</p>
<h5 id="稀疏数组">稀疏数组</h5>
<blockquote>
<p>稀疏数组：只有长度 length，但没有对应的下标，这种数组就是稀疏数组</p>
<p>（感兴趣可以取了解一下，稀疏数组没什么好处，倒是有很多 bug）</p>
</blockquote>
<p>例 1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>   
<span class="nx">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>   <span class="c1">// 数组原本3个元素，下标0,1,2   // 现在添加第4个元素、下标为3
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1,2,3,4]  // 仍是普通数组，没有异常
</span><span class="c1"></span>
<span class="nx">arr</span><span class="p">[</span><span class="mi">100</span><span class="p">]</span> <span class="o">=</span> <span class="mi">101</span>  <span class="c1">// 数组原本4个元素，下标0,1,2,3，现在跳级直接添加下标为100的元素
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1, 2, 3, 4, empty × 96, 101]  // 如果跳级添加下标，会导致数组变成【稀疏数组】// length: 101
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>例 2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="k">delete</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="nx">arr</span> <span class="c1">// [1,empty,3]  length: 3    // 使用 delete 删除数组元素，也会导致【稀疏数组】
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h4 id="-如果直接改-length-可以删元素吗">🙁 如果直接改 length 可以删元素吗</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">1</span>  
<span class="nx">arr</span> <span class="c1">// [1]
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li>我X，居然可以？！</li>
<li>JS 真神奇</li>
<li><strong>重要忠告</strong>：不要随便改 length</li>
</ul>
<blockquote>
<p>🈲 尽量不要使用 delete 和 改 length 的方式，删除数组元素</p>
</blockquote>
<p>​</p>
<h4 id="-推荐-3-种-api">😍 推荐 3 种 API</h4>
<blockquote>
<p>一个对象提供的函数，就叫做 API 。书写形式： <code>对象.方法名()</code></p>
</blockquote>
<h5 id="删除头部的元素">删除头部的元素</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span> <span class="c1">// arr 被修改，并返回被删元素
</span></code></pre></td></tr></table>
</div>
</div><h5 id="删除尾部的元素">删除尾部的元素</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span> <span class="c1">// arr 被修改，并返回被删元素
</span></code></pre></td></tr></table>
</div>
</div><h5 id="删除中间的元素允许增加元素">删除中间的元素（允许增加元素）</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span>               <span class="c1">// 从下标为 index 的位置开始删除后面所有元素
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>            <span class="c1">// 从下标为 index 的位置开始删除 3 个元素
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>            <span class="c1">// 从下标为 index 的位置开始删除 1 个元素
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="o">-</span><span class="nx">index</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>           <span class="c1">// 从倒数第 index 位开始删除 3 个元素（index为负时，不表示下标）
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">)</span>       <span class="c1">// 并在删除位置添加 &#39;x&#39;
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">)</span>  <span class="c1">// 并在删除位置添加 &#39;x&#39;，&#39;y&#39;
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener noreffer">splice MDN</a>   功能非常强大</li>
</ul>
<h5 id="示例">示例</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span>  <span class="c1">// 1    // arr.shift() 删除第一个元素，返回被删除元素
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [2,3]
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span> <span class="c1">// 3     // arr.pop() 删除最后一个元素，返回被删除元素
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1,2]
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// [3]     // arr.slice(2,1) 在下标为2的位置删除1个元素，返回被删除元素组成的数组
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1,2,4,5,6,7]
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="c1">// [3,4,5]     // 从下标2开始删除3个元素，返回被删除元素组成的数组
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1,2,6,7]
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>      <span class="c1">// [3,4,5]  // 从下标2开始删除3个元素，添加元素0。返回被删除元素组成的数组
</span><span class="c1"></span><span class="nx">arr</span>                    <span class="c1">// [1,2,0,6,7]
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>  <span class="c1">// [0]      // 从下标2开始删除1个元素，添加元素3,4,5。返回被删除元素组成的数组
</span><span class="c1"></span><span class="nx">arr</span>                    <span class="c1">// [1,2,3,4,5,6,7]
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">777</span><span class="p">)</span>   <span class="c1">// [7]      // 从倒数第1位删除1个元素，添加元素777。返回被删除元素组成的数组
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<h3 id="查看所有元素">查看所有元素</h3>
<blockquote>
<p>遍历</p>
</blockquote>
<h4 id="-查看所有属性名">🙁 查看所有属性名</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span> 

<span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>   <span class="c1">// 遍历属性名
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="c1">// 遍历属性值
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">arr</span><span class="p">){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">key</span><span class="si">}</span><span class="sb">: </span><span class="si">${</span><span class="nx">arr</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span> <span class="p">}</span>  <span class="c1">// for-in 更适用于遍历对象
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Object.keys 、 Object.values、for…in… 这 3 种方法，都更适用于遍历对象，不适合遍历数组</p>
<ul>
<li>通常我们遍历数组，只希望查看对应正常顺序的下标的元素。</li>
<li>如果遍历数组，获取到一个下标为 &lsquo;x&rsquo; 的元素，可能是很奇怪的😱（如下图）</li>
<li>所以上述三种方式，虽然可以用，但<strong>不是</strong>最适合/最常见的遍历数组的方式</li>
</ul>
</blockquote>
<p></p>
<p>​</p>
<h4 id="-查看数字字符串属性名和值">😍 查看数字（字符串）属性名和值</h4>
<h5 id="for-循环">for 循环</h5>
<blockquote>
<ul>
<li>
<p>用 for 循环遍历（可以自己控制下标）</p>
</li>
<li>
<p>让下标  <code>i</code>  从 <code>0</code> 增长到 <code>length-1 </code></p>
</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">i</span><span class="si">}</span><span class="sb">: </span><span class="si">${</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span> 
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li><strong>for 循环，是访问数组的比较常见的形式</strong></li>
<li>for…in… 用来访问对象</li>
</ul>
<h5 id="foreach">forEach</h5>
<blockquote>
<p>forEach 接收一个函数作为参数。这种函数，称为回调函数</p>
<ul>
<li>
<p>forEach 的作用：就是遍历数组的每一项，<strong>访问到每一个元素都执行一遍回调函数</strong>。</p>
</li>
<li>
<p>该回调函数，默认参数</p>
<ul>
<li>【第1个形参】表示元素本身，通常写作 item</li>
<li>【第2个形参】表示当前下标，通常写作 index</li>
<li>【第3个形参】表示数组本身，通常写作 array （大部分情况用不到）</li>
</ul>
<p>形参的名称无所谓，顺序是关键</p>
</li>
</ul>
</blockquote>
<p><strong>例 1</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">){</span> <span class="c1">// 回调函数的默认第1个形参item表示元素本身、第2个形参index表示当前下标
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">index</span><span class="si">}</span><span class="sb">: </span><span class="si">${</span><span class="nx">item</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>也可以用 forEach/map 等原型上的函数</p>
<p></p>
</li>
</ul>
<h6 id="手写-foreach">手写 forEach</h6>
<blockquote>
<p>为了更好地理解上述代码（forEach）是怎么实现遍历数组的
下面手动封装一个 forEach 函数</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">forEach</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">fn</span><span class="p">){</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// 访问传入的 array 的每一项，对每项执行什么操作呢？↓
</span><span class="c1"></span>    <span class="nx">fn</span><span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">array</span><span class="p">)</span>  <span class="c1">// 对每一项调用 fn，把数组的相关值作为参数传入到 fn 中
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>forEach 用 for 访问 array 的每一项</li>
<li>对每一项调用 <code>fn(array[i], i, array)</code>。数组有几项，fn 就执行几次</li>
<li>为什么要传入 array 呢？不为什么，规定如此。</li>
</ul>
<p><strong>例 2</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">]</span>
<span class="nx">forEach</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">z</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">z</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li>注意：例 2 是 <code>forEach(arr,function)</code>的形式 ，例 1 是 <code>arr.forEach(function)</code> 的形式。</li>
<li>两种写法其实是等价的。因为 JS 会自动把顺序倒过来，按照 例2  的形式执行</li>
</ul>
<h5 id="面试问区别是什么">面试问：区别是什么</h5>
<blockquote>
<p>两者区别，回答的关键点就是：<strong>前者能实现、而后者做不到的</strong></p>
</blockquote>
<ul>
<li>实际上大多数情况，for 和 forEach 都是通用的</li>
<li>只有一种情况
<ul>
<li>for 循环里面有 break 和 continue，而 forEach 是不支持的
forEach 只是个普通函数，而 for 是个 关键字，关键字的功能可能会更强大一点</li>
</ul>
</li>
</ul>
<p>示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">]</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">i</span><span class="si">}</span><span class="sb">: </span><span class="si">${</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">===</span><span class="mi">3</span><span class="p">){</span><span class="k">break</span><span class="p">;}</span>
<span class="p">}</span>
<span class="o">-----------------------------------------------------</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">i</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">===</span><span class="mi">3</span><span class="p">){</span><span class="k">return</span> <span class="kc">false</span><span class="p">}</span>  <span class="c1">// 无效
</span><span class="c1"></span><span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p><strong>⭐️区别：</strong></p>
<ol>
<li>for 循环中间，可以 break 或 continue。而 forEach 一旦开始就会一直走到尾，即使 return 也无法结束</li>
<li>for 是关键字，{  } 是块级作用域。而 forEach 是一个函数，{  } 是函数作用域</li>
</ol>
<p>​</p>
<p>​</p>
<h3 id="查看单个属性">查看单个属性</h3>
<h4 id="跟对象一样">跟对象一样</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">111</span><span class="p">,</span><span class="mi">222</span><span class="p">,</span><span class="mi">333</span><span class="p">]</span> 
<span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>注意：不论给下标什么数字，一定都会变成字符串。JS 中没有「数字下标」这么一说</p>
<p>​</p>
<h4 id="索引越界-">索引越界 ⭐️</h4>
<blockquote>
<p>「索引越界」指给的数组索引（下标）不存在</p>
</blockquote>
<p>下述两种情况，需要注意避免</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">[</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">===</span> <span class="kc">undefined</span> 
<span class="nx">arr</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="kc">undefined</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;=</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// i===length时，数组中并没有对应元素，值为 undefined
</span><span class="c1"></span>  <span class="nx">console</span><span class="mf">.1</span><span class="nx">og</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">toString</span><span class="p">())</span>
<span class="p">}</span>
<span class="c1">// 报错：Cannot read property &#39;toString&#39; of undefined （ undefined不是对象，没有toString ）
</span></code></pre></td></tr></table>
</div>
</div><p>访问任何不存在的下标时，得到的结果都是 undefined</p>
<blockquote>
<p>当碰到报错 Cannot read property &lsquo;xxx&rsquo; of undefined，很有可能是数组的索引越界了</p>
<p>解决办法：console.log 大法</p>
</blockquote>
<p></p>
<p>​</p>
<h4 id="查找某个元素是否在数组里">查找某个元素是否在数组里</h4>
<h5 id="-方法一遍历">❌ 方法一：遍历</h5>
<blockquote>
<p>降智写法</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">55</span><span class="p">]</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">===</span><span class="mi">22</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;arr中存在22&#39;</span><span class="p">)</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;不存在&#39;</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="-方法二api">😍 方法二：API</h5>
<blockquote>
<p>indexOf 返回只要不是 -1 ，就说明存在</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>  <span class="c1">// 存在返回下标，否则返回 -1
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">55</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">22</span><span class="p">)</span>  <span class="c1">// 1
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span>  <span class="c1">// 0
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">66</span><span class="p">)</span>  <span class="c1">// -1
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="查找满足条件的元素">查找满足条件的元素</h4>
<h5 id="降智写法遍历">❌降智写法：遍历</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">0</span><span class="p">){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`数组中的偶数：</span><span class="si">${</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span> <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// 数组中的偶数：2
</span><span class="c1">// 数组中的偶数：4
</span></code></pre></td></tr></table>
</div>
</div><h5 id="更好的方法使用-find">😍更好的方法：使用 find</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">item</span><span class="o">%</span><span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1">// 找第一个偶数
</span></code></pre></td></tr></table>
</div>
</div><p>完整写法</p>
<blockquote>
<p>find 用法：找到<strong>第一个</strong>符合条件（return true）的元素，就停止，并返回这个元素</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span><span class="o">%</span><span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span>
<span class="p">})</span>
<span class="c1">// 2
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="查找满足条件的元素的索引">查找满足条件的元素的索引</h4>
<blockquote>
<p>findIndex 用法：找到<strong>第一个</strong>符合条件（return true）的元素，就停止，并返回这个元素的下标</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">findlndex</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">item</span><span class="o">%</span><span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1">// 找第一个偶数的索引
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">44</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span><span class="o">%</span><span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span>
<span class="p">})</span>
<span class="c1">// 1
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="增加数组中的元素">增加数组中的元素</h3>
<h4 id="-不推荐">❌ 不推荐</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>   
<span class="nx">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>   <span class="c1">// 数组原本3个元素，下标0,1,2   // 现在添加第4个元素、下标为3
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1,2,3,4]  // 仍是普通数组，没有异常
</span><span class="c1"></span>
<span class="nx">arr</span><span class="p">[</span><span class="mi">100</span><span class="p">]</span> <span class="o">=</span> <span class="mi">101</span>  <span class="c1">// 数组原本4个元素，下标0,1,2,3，现在跳级直接添加下标为100的元素
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1, 2, 3, 4, empty × 96, 101]  // 如果跳级添加下标，会导致数组变成【稀疏数组】// length: 101
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p><code>arr[index]</code> 的方式，可以增加数组元素</p>
<p>但如果跳级增加下标，会导致数组变成【稀疏数组】，所以不推荐这种方式</p>
</blockquote>
<p>​</p>
<p>​</p>
<h4 id="-在尾部加元素">✅ 在尾部加元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">newItem</span><span class="p">)</span>      <span class="c1">// 修改 arr，返回新长度 
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">item1</span><span class="p">,</span> <span class="nx">item2</span><span class="p">)</span> <span class="c1">// 修改 arr，返回新长度
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">)</span>  <span class="c1">// 6   // 修改原数组，并返回该数组的新长度
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1, 2, 3, &#34;a&#34;, &#34;b&#34;, &#34;c&#34;]
</span><span class="c1"></span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">666</span><span class="p">)</span>
<span class="nx">arr</span> <span class="c1">// [1, 2, 3, &#34;a&#34;, &#34;b&#34;, &#34;c&#34;, 666]
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h4 id="-在头部加元素">✅ 在头部加元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">newItem</span><span class="p">)</span>      <span class="c1">// 修改 arr，返回新长度 
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">item1</span><span class="p">,</span> <span class="nx">item2</span><span class="p">)</span>  <span class="c1">// 修改 arr，返回新长度
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span><span class="s1">&#39;y&#39;</span><span class="p">,</span><span class="s1">&#39;z&#39;</span><span class="p">)</span> <span class="c1">// [&#34;x&#34;, &#34;y&#34;, &#34;z&#34;, 1, 2, 3]
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="mi">777</span><span class="p">)</span>         <span class="c1">// [777, &#34;x&#34;, &#34;y&#34;, &#34;z&#34;, 1, 2, 3]
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h4 id="-在中间添加元素">✅ 在中间添加元素</h4>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener noreffer">splice MDN</a>  功能强大</p>
<p>前面讲，可以用 splice 来[删除指定位置的元素](# 删除中间的元素（允许增加元素）)，这里用来<a href="" rel="">往指定位置添加元素</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">)</span>      <span class="c1">// 在 index 处插入&#39;x&#39;，原元素向后移一位  // 第2个参数写 0 表示不删除元素
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">666</span><span class="p">)</span>   <span class="c1">// []   // 返回被删除元素组成的数组，0表示不删除元素，所以返回空数组
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1, 666, 2, 3]
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>splice：可以删除元素、添加元素 （会用 splice 基本可以对数组进行任何操作）</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="修改数组中的元素">修改数组中的元素</h3>
<h4 id="直接修改">直接修改</h4>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="nx">arr</span> <span class="c1">// [1,0,3]
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>  <span class="c1">// [2]    // 把下标为1的元素删除，插入一个0  // 相当于修改元素
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1,0,3]
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="反转顺序-reverse">反转顺序 reverse</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">reverse</span><span class="p">()</span> <span class="c1">// 修改原数组
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">reverse</span><span class="p">()</span>  <span class="c1">// [3,2,1]
</span><span class="c1"></span><span class="nx">arr</span>            <span class="c1">// [3,2,1] 
</span></code></pre></td></tr></table>
</div>
</div><h5 id="著名面试题">著名面试题</h5>
<blockquote>
<p>翻转字符串</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">s</span> <span class="o">=</span> <span class="s1">&#39;abcde&#39;</span>
<span class="nx">s</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>                     <span class="c1">// [&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;, &#34;e&#34;]
</span><span class="c1"></span><span class="nx">s</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">reverse</span><span class="p">()</span>           <span class="c1">// [&#34;e&#34;, &#34;d&#34;, &#34;c&#34;, &#34;b&#34;, &#34;a&#34;]
</span><span class="c1"></span><span class="nx">s</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">reverse</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>  <span class="c1">// &#34;edcba&#34;
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="自定义顺序-sort">自定义顺序 sort</h4>
<blockquote>
<p>把乱序，改为【从大到小】或【从小到大】的顺序</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span>    <span class="c1">// 会改变原数组
</span></code></pre></td></tr></table>
</div>
</div><h5 id="从小到大">从小到大</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">()</span>   <span class="c1">// [1,2,3,4,5]  // sort 默认【从小到大】排序
</span></code></pre></td></tr></table>
</div>
</div><h5 id="从大到小怎么实现-">从大到小怎么实现 ？</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// sort 接收一个回调
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>   <span class="c1">// 两个形参，表示每次进行两两比较的两个数值
</span><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">){</span>
    <span class="k">return</span> <span class="mi">1</span>
  <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">b</span><span class="p">){</span>
    <span class="k">return</span> <span class="mi">0</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
  <span class="p">}</span>
<span class="p">})</span>  
<span class="c1">// [1, 2, 3, 4, 5]
</span><span class="c1"></span><span class="o">----------------------------------------------------------------------------------</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">){</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
  <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">b</span><span class="p">){</span>
    <span class="k">return</span> <span class="mi">0</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="k">return</span> <span class="mi">1</span>
  <span class="p">}</span>
<span class="p">})</span>
<span class="c1">// [5, 4, 3, 2, 1]
</span></code></pre></td></tr></table>
</div>
</div><h5 id="例">例</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;Kate&#39;</span><span class="p">,</span> <span class="nx">score</span><span class="o">:</span> <span class="mi">99</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;Jack&#39;</span><span class="p">,</span> <span class="nx">score</span><span class="o">:</span> <span class="mi">85</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;Ryan&#39;</span><span class="p">,</span> <span class="nx">score</span><span class="o">:</span> <span class="mi">100</span><span class="p">}</span>
<span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>需求：根据每一项的 score 进行排序</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">()</span> <span class="c1">// 显然无效，因为 JS 看不出要怎么比较，我们需要指定给 JS：让它用每一项的 score 来进行比较
</span></code></pre></td></tr></table>
</div>
</div><p>怎么指定？用回调函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;Kate&#39;</span><span class="p">,</span> <span class="nx">score</span><span class="o">:</span> <span class="mi">99</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;Jack&#39;</span><span class="p">,</span> <span class="nx">score</span><span class="o">:</span> <span class="mi">85</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;Ryan&#39;</span><span class="p">,</span> <span class="nx">score</span><span class="o">:</span> <span class="mi">100</span><span class="p">}</span>
<span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>  <span class="c1">// a/b代表两两比较的数组元素（也就是3个对象）
</span><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">score</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">score</span><span class="p">){</span><span class="k">return</span> <span class="mi">1</span><span class="p">}</span>
  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">score</span> <span class="o">===</span> <span class="nx">b</span><span class="p">.</span><span class="nx">score</span><span class="p">){</span><span class="k">return</span> <span class="mi">0</span><span class="p">}</span>
  <span class="k">else</span><span class="p">{</span><span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h5 id="简化写法">简化写法</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">a</span><span class="o">-</span><span class="nx">b</span> <span class="c1">// a&gt;b返回一个正数，a&lt;b返回负数，a===b返回0
</span><span class="c1"></span><span class="p">})</span>
<span class="c1">// [1, 2, 3, 4, 5]
</span><span class="c1"></span><span class="o">-------------------------------------------------</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">b</span><span class="o">-</span><span class="nx">a</span>  <span class="c1">// b&gt;a返回一个正数，b&lt;a返回负数，a===b返回0
</span><span class="c1"></span><span class="p">})</span>
<span class="c1">// [5, 4, 3, 2, 1]
</span></code></pre></td></tr></table>
</div>
</div><p>==&gt; 箭头函数，进一步简化</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)=&gt;</span><span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span>  <span class="c1">// 从小到大
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)=&gt;</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span>  <span class="c1">// 从大到小
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">a</span><span class="p">.</span><span class="nx">score</span> <span class="o">-</span> <span class="nx">b</span><span class="p">.</span><span class="nx">score</span><span class="p">)</span>  <span class="c1">// 从小到大
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">score</span> <span class="o">-</span> <span class="nx">a</span><span class="p">.</span><span class="nx">score</span><span class="p">)</span>  <span class="c1">// 从大到小
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<p>​</p>
<h2 id="数组变换-">数组变换 ⚡️</h2>
<blockquote>
<p>高级 API</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">map</span><span class="p">([</span><span class="err">🐮</span><span class="p">,</span> <span class="err">🥔</span><span class="p">,</span> <span class="err">🐔</span><span class="p">,</span> <span class="err">🌽</span><span class="p">],</span> <span class="nx">cook</span><span class="p">)</span>     <span class="c1">// n变n
</span><span class="c1"></span> <span class="p">=&gt;</span> <span class="p">[</span><span class="err">🍔</span><span class="p">,</span> <span class="err">🍟</span><span class="p">,</span> <span class="err">🍗</span><span class="p">,</span> <span class="err">🍿</span><span class="p">]</span>

<span class="nx">filter</span><span class="p">([</span><span class="err">🍔</span><span class="p">,</span> <span class="err">🍟</span><span class="p">,</span> <span class="err">🍗</span><span class="p">,</span> <span class="err">🍿</span><span class="p">],</span> <span class="nx">isNotMeet</span><span class="p">)</span>    <span class="c1">// n变少
</span><span class="c1"></span> <span class="p">=&gt;</span> <span class="p">[</span><span class="err">🍟</span><span class="p">,</span> <span class="err">🍿</span><span class="p">]</span>

<span class="nx">reduce</span><span class="p">([</span><span class="err">🍔</span><span class="p">,</span> <span class="err">🍟</span><span class="p">,</span> <span class="err">🍗</span><span class="p">,</span> <span class="err">🍿</span><span class="p">],</span> <span class="nx">eat</span><span class="p">)</span>    <span class="c1">// n变1
</span><span class="c1"></span> <span class="p">=&gt;</span> <span class="err">💩</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h3 id="map">map</h3>
<blockquote>
<p>n 变 n</p>
<ul>
<li>
<p>ES6 新方法 map</p>
</li>
<li>
<p>map 会对数组进行遍历，可以对每一项都执行指定的操作（对数组元素每一项进行一一映射）</p>
</li>
<li>
<p>map 方法的返回值为【数组每一项经过回调处理后的返回值 组成的新数组】</p>
</li>
<li>
<p><strong>返回新的数组，不改变原数组</strong></p>
</li>
<li>
<p>语法： <code>Array.map(function(ele, index, arr){...});</code>  回调函数</p>
<ul>
<li>参数1：遍历的元素  item</li>
<li>参数2：元素下标  index</li>
<li>参数3：原数组 array （通常用不到这个参数）</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="例-1">例 1</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">];</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">ele</span><span class="p">,</span><span class="nx">index</span><span class="p">,</span><span class="nx">arr</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;ele ==&gt; &#34;</span><span class="p">,</span> <span class="nx">ele</span><span class="p">,</span><span class="s2">&#34; index ==&gt; &#34;</span><span class="p">,</span> <span class="nx">index</span> <span class="p">,</span><span class="s2">&#34; arr ==&gt; &#34;</span><span class="p">,</span><span class="nx">arr</span><span class="p">)</span>
<span class="p">})</span> 
<span class="c1">// [undefined,undefined,undefined,undefined] 
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li>
<p>因为回调里没有 return，所以会采用函数的默认返回值 undefined，作为每一项回调处理后的返回值，并将这4个返回值组成新的数组，作为最终返回值</p>
</li>
<li>
<p>所以最后结果就是 4 个 undefined 组成的新数组</p>
<blockquote>
<p>总结：</p>
<p>对每一项元素进行处理的语句要写在 return 后面。</p>
<p>否则每一项处理后的返回值都是 undefined</p>
</blockquote>
</li>
</ul>
<h4 id="例-2">例 2</h4>
<blockquote>
<p>需求：对 arr 进行操作（每个数乘2），返回新的数组[2,4,6,8]</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 以前的方法: for循环
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">newArr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span>   <span class="c1">// 返回新数组
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newArr</span><span class="p">)</span>  <span class="c1">// [2,4,6,8]
</span><span class="c1"></span><span class="o">--------------------------------------------------------------</span>
<span class="c1">// ES6: map
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">ele</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">ele</span><span class="o">*</span><span class="mi">2</span>
<span class="p">});</span>

<span class="c1">// 用箭头函数进行重构：return 的语句可以直接写在箭头后，省略&#39;return&#39;
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">ele</span> <span class="p">=&gt;</span> <span class="nx">ele</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">newArr</span><span class="p">)</span> <span class="c1">// [1,2,3,4]  [2,4,6,8]
</span></code></pre></td></tr></table>
</div>
</div><h4 id="例-3-计算每一项的平方">例 3 ：计算每一项的平方</h4>
<blockquote>
<p>需求：把 arr 的每一项都平方  （这个也可[用 reduce 实现](# 计算每一项的平方)）</p>
</blockquote>
<ul>
<li>
<p>for 循环（旧）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  
  <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">*</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>   <span class="c1">// 在原数组上进行修改
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">arr</span> <span class="c1">// [1, 4, 9, 16, 25, 36]
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>使用 map 简化过程（ES6 新增）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">item</span> <span class="o">*</span> <span class="nx">item</span><span class="p">)</span>  <span class="c1">// [1, 4, 9, 16, 25, 36]  返回新数组，原数组不改变
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="filter">filter</h3>
<blockquote>
<p>n 变少</p>
<ul>
<li>用于<strong>筛选</strong>数组中符合条件的<strong>全部元素</strong>，返回的是这些元素组成的新数组</li>
<li><strong>返回新的数组，不改变原数组</strong></li>
</ul>
</blockquote>
<h4 id="区别于-find-方法">区别于 find 方法</h4>
<ul>
<li><strong>find方法</strong> 查找符合条件的<strong>第一个元素</strong>，并返回这个<strong>元素</strong>；没有符合条件的元素，返回 <strong>undefined</strong></li>
<li><strong>filter方法</strong> 查找符合条件的<strong>全部元素</strong>，并返回这些元素组成的<strong>新数组</strong>；没有符合条件的元素，返回<strong>空数组<code>[ ]</code></strong></li>
</ul>
<h4 id="例-1-1">例 1</h4>
<p>需求：筛选出 arr 中的偶数（也可以<a href="#%e7%ad%9b%e9%80%89%e5%87%ba%e6%89%80%e6%9c%89%e5%81%b6%e6%95%b0" rel="">用 reduce 实现</a>）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">item</span><span class="o">%</span><span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span> <span class="p">)</span>   <span class="c1">// [2, 4, 6]  // 把符合条件、返回true的item，筛选出来组成新数组
</span></code></pre></td></tr></table>
</div>
</div><h4 id="例-2-1">例 2</h4>
<p>需求：筛选出大于等于3的元素</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">ele</span> <span class="p">,</span> <span class="nx">index</span> <span class="p">,</span> <span class="nx">arr</span><span class="p">)</span> <span class="p">=&gt;{</span>
  <span class="k">return</span> <span class="nx">ele</span> <span class="o">&gt;=</span> <span class="mi">3</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ele</span><span class="p">)</span>  <span class="c1">// 不会执行这句，因为函数中遇到 return 就返回（结束）了
</span><span class="c1"></span><span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newArr</span><span class="p">);</span> <span class="c1">// [3,4] 
</span></code></pre></td></tr></table>
</div>
</div><p>需求：筛选出大于等于10的元素</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span> <span class="nx">ele</span> <span class="p">=&gt;</span> <span class="nx">ele</span> <span class="o">&gt;=</span> <span class="mi">10</span> <span class="p">)</span> <span class="c1">// []
</span></code></pre></td></tr></table>
</div>
</div><h4 id="例-3-删除元素">例 3 ：删除元素</h4>
<blockquote>
<p>需求：删除数组中值为 3 的元素</p>
</blockquote>
<p>方法一：filter</p>
<p>会把<strong>符合条件的全部元素删除</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
<span class="nx">arr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">ele</span> <span class="p">=&gt;</span> <span class="nx">ele</span><span class="o">!==</span><span class="mi">3</span> <span class="p">)</span>  <span class="c1">// 筛选出不等于3的元素，相当于从数组中删除值为3的元素
</span><span class="c1">// filter会返回新的数组，再重新赋值给原数组，相当于从原数组中删除 值为3的元素
</span></code></pre></td></tr></table>
</div>
</div><p>方法二：findIndex + splice</p>
<p>会把<strong>符合条件的第一个元素删除</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">(</span><span class="nx">ele</span> <span class="p">=&gt;</span> <span class="nx">ele</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span>  <span class="c1">// 找到下标，通过splice方法从数组中删除对应下标的元素
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// [3]
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [4, 5, 6, 3, 3, 3, 7]
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="reduce">reduce</h3>
<blockquote>
<p>n 变 1</p>
<ul>
<li>reduce 是数组里面最难理解，也是功能最强大的 API（第二名是 splice）</li>
<li>reduce 可以代替 map 和 filter，只不过对新人有一定难度</li>
</ul>
</blockquote>
<h4 id="求数组元素之和">求数组元素之和</h4>
<h5 id="用-for-循环实现">用 for 循环实现</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1">// 作为结果的初始值为0
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span> <span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>   <span class="c1">// sum = sum + arr[i]
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">)</span>  <span class="c1">// 15
</span></code></pre></td></tr></table>
</div>
</div><h5 id="用-reduce-来实现">用 reduce 来实现</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="c1">// arr.reduce(()=&gt;{}, 0)  // reduce中，0作为结果的初始值，写在第2个参数上 
</span><span class="c1"></span>										     <span class="c1">// 第1个参数是一个函数：规定每一次遍历要对上一次的结果进行什么操作
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">total</span><span class="p">,</span><span class="nx">current</span><span class="p">)=&gt;</span><span class="nx">total</span><span class="o">+</span><span class="nx">current</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1">// 15
</span><span class="c1">// reduce的回调函数，默认形参1是上一次的返回值（初始0），形参2是当前元素
</span><span class="c1">// 求和，就是要把上一次的结果再加上当前元素，获得二者的和，所以回调执行的就是 total+current
</span><span class="c1">// total初始值为0（相当于上面for循环例子中的sum）
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>第1轮，遍历获取元素 1，执行回调，total为初始值0 + current是当前遍历到的元素1，回调返回0+1=&gt; 1</li>
<li>第2轮，遍历获取元素 2，执行回调，total为上一次的返回值 1 + current：2，回调返回 1+2 =&gt; 3</li>
<li>第3轮，遍历获取元素 3，执行回调，total为上一次的返回值 3 + current：3，回调返回 3+3 =&gt; 6</li>
<li>第4轮，遍历获取元素 4，执行回调，total为上一次的返回值 6 + current：4，回调返回 6+4 =&gt; 10</li>
<li>第5轮，遍历获取元素 5，执行回调，total为上一次的返回值 10 + current：5，回调返回 10+5 =&gt; 15</li>
</ul>
<h5 id="变形">变形</h5>
<p>计算数组中成员的总年龄</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;张三&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">40</span><span class="p">},</span>
  <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;李四&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">50</span><span class="p">},</span>
  <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;王五&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">60</span><span class="p">}</span>
<span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">total</span><span class="p">,</span> <span class="nx">current</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">total</span><span class="p">,</span> <span class="nx">current</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span> <span class="c1">// 0 40   // 40 50   // 90 60
</span><span class="c1"></span>  <span class="k">return</span> <span class="nx">total</span> <span class="o">+</span> <span class="nx">current</span><span class="p">.</span><span class="nx">age</span>
<span class="p">},</span> <span class="mi">0</span><span class="p">)</span> 
<span class="c1">// 150
</span></code></pre></td></tr></table>
</div>
</div><h4 id="计算每一项的平方">计算每一项的平方</h4>
<h5 id="用-map-实现">用 map 实现</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">item</span> <span class="o">*</span> <span class="nx">item</span><span class="p">)</span>  <span class="c1">// [1, 4, 9, 16, 25, 36]  返回新数组，原数组不改变
</span></code></pre></td></tr></table>
</div>
</div><h5 id="用-reduce-实现">用 reduce 实现</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span> 
<span class="c1">// arr.reduce((total,current)=&gt;{ return total.push(current*current) }, [])  
</span><span class="c1">// 报错 total.push is not a function 因为 push 的返回值并不是新的数组，而是length，所以不能用 push
</span><span class="c1">// 连接两个数组，用 concat
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">result</span><span class="p">,</span> <span class="nx">item</span><span class="p">)=&gt;{</span> <span class="k">return</span> <span class="nx">result</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">item</span> <span class="o">*</span> <span class="nx">item</span><span class="p">)</span> <span class="p">},</span> <span class="p">[])</span> 
<span class="c1">// [1, 4, 9, 16, 25, 36]
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>补充：concat 用法：不修改原数组，返回新数组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>         <span class="c1">// [0, 1]
</span><span class="c1"></span><span class="nx">arr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>     <span class="c1">// [0, 1, 2]  所以必须重新赋值给arr，才能实现push效果
</span><span class="c1"></span><span class="nx">arr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">concat</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span> <span class="c1">// [0, 1, 2, 3, 4]
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h4 id="筛选出所有偶数">筛选出所有偶数</h4>
<h5 id="用-filter-实现">用 filter 实现</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">item</span><span class="o">%</span><span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span> <span class="p">)</span>   <span class="c1">// [2, 4, 6]  // 把符合条件、返回true的item，筛选出来组成新数组
</span></code></pre></td></tr></table>
</div>
</div><h5 id="用-reduce-实现-1">用 reduce 实现</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">result</span><span class="p">,</span><span class="nx">item</span><span class="p">)=&gt;{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">1</span><span class="p">){</span>  <span class="c1">// 如果是奇数，不做任何处理，直接返回 原result
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">result</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span> <span class="c1">// 如果是偶数，就把偶数连到result中，再返回新数组，作为下一轮的result
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">result</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">},[])</span>
</code></pre></td></tr></table>
</div>
</div><h6 id="简写">简写</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">result</span><span class="p">,</span><span class="nx">item</span><span class="p">)=&gt;</span> <span class="nx">item</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">?</span> <span class="nx">result</span> <span class="o">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">,</span> <span class="p">[])</span>
</code></pre></td></tr></table>
</div>
</div><h6 id="再进一步探索炫技">再进一步探索（炫技）</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">result</span><span class="p">,</span><span class="nx">item</span><span class="p">)=&gt;</span> 
  <span class="c1">// item % 2 === 1 ? result : result.concat(item) 
</span><span class="c1"></span>  <span class="c1">// 原理：如果item是奇数就不concat到result中
</span><span class="c1"></span>  <span class="c1">// ==&gt; 换言之，若是奇数，可concat一个空 // item%2===1 ? result.concat() : result.concat(item)
</span><span class="c1"></span>  <span class="c1">// ==&gt; 也就是，我总是需要concat一个东西 ==&gt; 那就可以转换为
</span><span class="c1"></span>  <span class="nx">result</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">item</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">?</span> <span class="p">[]</span> <span class="o">:</span> <span class="nx">item</span><span class="p">)</span>    
<span class="p">,</span> <span class="p">[])</span>

<span class="c1">// [2, 4, 6]
</span></code></pre></td></tr></table>
</div>
</div><h4 id="将多维数组转为一维数组">将多维数组，转为一维数组</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// reduce的参数total和current也可以执行【数组合并】这样的操作
</span><span class="c1"></span>
<span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="mi">6</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="p">[</span><span class="mi">4</span><span class="p">]]];</span>
<span class="kd">var</span> <span class="nx">fun</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">total</span><span class="p">,</span> <span class="nx">current</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">current</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">//递归
</span><span class="c1"></span>      <span class="kd">var</span> <span class="nx">news</span> <span class="o">=</span> <span class="nx">fun</span><span class="p">(</span><span class="nx">current</span><span class="p">);</span> <span class="c1">// 返回一个数组
</span><span class="c1"></span>      <span class="nx">total</span> <span class="o">=</span> <span class="nx">total</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">news</span><span class="p">);</span>
      <span class="k">return</span> <span class="nx">total</span> <span class="c1">// 将返回的数组拼接回total中
</span><span class="c1"></span>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">total</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">current</span><span class="p">);</span>
      <span class="k">return</span> <span class="nx">total</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="p">[])</span> <span class="c1">//[]：表示给total赋初始值，total是一个空数组
</span><span class="c1"></span>  <span class="k">return</span> <span class="nx">newArr</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fun</span><span class="p">(</span><span class="nx">arr</span><span class="p">));</span>
</code></pre></td></tr></table>
</div>
</div><p>多维数组转为一维数组，也可以用flat方法等【方法很多，可以查看es6入门2/zuoye目录中的大家的解法】</p>
<p></p>
<hr>
<ul>
<li>reduce 叫做累加器</li>
<li>对数组进行遍历，执行加减乘除操作等等</li>
<li>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</li>
<li>常用来【求和】</li>
<li>语法：<code>array.reduce(function(total, current, currentIndex, arr), initialValue)</code>
<ul>
<li><strong>参数 total ： 必需。上一次循环计算结束后的return返回值；</strong>
<ul>
<li>如果回调函数没有return，则第二次循环时total为undefined</li>
</ul>
</li>
<li>**参数 current **： 必需。当前的元素</li>
<li>参数 currentIndex：可选。当前元素下标</li>
<li>参数 arr：可选。原数组</li>
<li><strong>参数 initialValue</strong>：可选。传递给函数的初始值</li>
</ul>
</li>
</ul>
<h2 id="题目">题目</h2>
<h3 id="第一题把数字变成星期">第一题：把数字变成星期</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">item</span><span class="p">,</span><span class="nx">index</span><span class="p">)=&gt;{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="o">===</span><span class="mi">0</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;周日&#39;</span><span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="o">===</span><span class="mi">1</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;周一&#39;</span><span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="o">===</span><span class="mi">2</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;周二&#39;</span><span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="o">===</span><span class="mi">3</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;周三&#39;</span><span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="o">===</span><span class="mi">4</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;周四&#39;</span><span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="o">===</span><span class="mi">5</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;周五&#39;</span><span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="o">===</span><span class="mi">6</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;周六&#39;</span><span class="p">}</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr2</span><span class="p">)</span> 
<span class="c1">// [&#39;周日&#39;, &#39;周一&#39;, &#39;周二&#39;, &#39;周二&#39;, &#39;周三&#39;, &#39;周三&#39;, &#39;周三&#39;, &#39;周四&#39;, &#39;周四&#39;, &#39;周四&#39;, &#39;周四&#39;,&#39;周六&#39;]
</span></code></pre></td></tr></table>
</div>
</div><p>参考答案</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">i</span><span class="p">)=&gt;{</span>
  <span class="kr">const</span> <span class="nx">hash</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="o">:</span><span class="s1">&#39;周日&#39;</span><span class="p">,</span><span class="mi">1</span><span class="o">:</span><span class="s1">&#39;周一&#39;</span><span class="p">,</span><span class="mi">2</span><span class="o">:</span><span class="s1">&#39;周二&#39;</span><span class="p">,</span><span class="mi">3</span><span class="o">:</span><span class="s1">&#39;周三&#39;</span><span class="p">,</span><span class="mi">4</span><span class="o">:</span><span class="s1">&#39;周四&#39;</span><span class="p">,</span><span class="mi">5</span><span class="o">:</span><span class="s1">&#39;周五&#39;</span><span class="p">,</span><span class="mi">6</span><span class="o">:</span><span class="s1">&#39;周六&#39;</span><span class="p">}</span>
  <span class="k">return</span> <span class="nx">hash</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="第二题找出所有大于-60-分的成绩">第二题：找出所有大于 60 分的成绩</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">scores</span> <span class="o">=</span> <span class="p">[</span><span class="mi">95</span><span class="p">,</span><span class="mi">91</span><span class="p">,</span><span class="mi">59</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">42</span><span class="p">,</span><span class="mi">82</span><span class="p">,</span><span class="mi">72</span><span class="p">,</span><span class="mi">85</span><span class="p">,</span><span class="mi">67</span><span class="p">,</span><span class="mi">66</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">91</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">scores2</span> <span class="o">=</span> <span class="nx">scores</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">item</span><span class="p">=&gt;</span><span class="nx">item</span> <span class="o">&gt;</span> <span class="mi">60</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">scores2</span><span class="p">)</span> <span class="c1">// [95, 91, 82, 72, 85, 67, 66, 91]
</span></code></pre></td></tr></table>
</div>
</div><p>参考答案</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">scores</span> <span class="o">=</span> <span class="p">[</span><span class="mi">95</span><span class="p">,</span><span class="mi">91</span><span class="p">,</span><span class="mi">59</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">42</span><span class="p">,</span><span class="mi">82</span><span class="p">,</span><span class="mi">72</span><span class="p">,</span><span class="mi">85</span><span class="p">,</span><span class="mi">67</span><span class="p">,</span><span class="mi">66</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">91</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">scores2</span> <span class="o">=</span> <span class="nx">scores</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">n</span> <span class="p">=&gt;</span> <span class="nx">n</span><span class="o">&gt;=</span> <span class="mi">60</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">scores2</span><span class="p">)</span> <span class="c1">//  [95,91,82,72,85,67,66, 91]
</span></code></pre></td></tr></table>
</div>
</div><h3 id="第三题算出所有奇数之和">第三题：算出所有奇数之和</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">95</span><span class="p">,</span><span class="mi">91</span><span class="p">,</span><span class="mi">59</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">42</span><span class="p">,</span><span class="mi">82</span><span class="p">,</span><span class="mi">72</span><span class="p">,</span><span class="mi">85</span><span class="p">,</span><span class="mi">67</span><span class="p">,</span><span class="mi">66</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">91</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">sum</span><span class="p">,</span><span class="nx">n</span><span class="p">)=&gt;{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">0</span><span class="p">){</span><span class="k">return</span> <span class="nx">sum</span><span class="p">}</span>
  <span class="k">else</span><span class="p">{</span><span class="k">return</span> <span class="nx">sum</span><span class="o">+</span><span class="nx">n</span><span class="p">}</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">scores</span> <span class="o">=</span> <span class="p">[</span><span class="mi">95</span><span class="p">,</span><span class="mi">91</span><span class="p">,</span><span class="mi">59</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">42</span><span class="p">,</span><span class="mi">82</span><span class="p">,</span><span class="mi">72</span><span class="p">,</span><span class="mi">85</span><span class="p">,</span><span class="mi">67</span><span class="p">,</span><span class="mi">66</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">91</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">scores</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">sum</span><span class="p">,</span><span class="nx">n</span><span class="p">)=&gt;</span> <span class="nx">n</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">1</span> <span class="o">?</span> <span class="nx">sum</span><span class="o">+</span><span class="nx">n</span> <span class="o">:</span> <span class="nx">sum</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">)</span>  <span class="c1">// 598
</span></code></pre></td></tr></table>
</div>
</div><p>参考答案</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">scores</span> <span class="o">=</span> <span class="p">[</span><span class="mi">95</span><span class="p">,</span><span class="mi">91</span><span class="p">,</span><span class="mi">59</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">42</span><span class="p">,</span><span class="mi">82</span><span class="p">,</span><span class="mi">72</span><span class="p">,</span><span class="mi">85</span><span class="p">,</span><span class="mi">67</span><span class="p">,</span><span class="mi">66</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">91</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">scores</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">sum</span><span class="p">,</span> <span class="nx">n</span><span class="p">)=&gt;{</span>
  <span class="k">return</span> <span class="nx">n</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">0</span><span class="o">?</span><span class="nx">sum</span><span class="o">:</span><span class="nx">sum</span><span class="o">+</span><span class="nx">n</span>
<span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">)</span> <span class="c1">// 奇数之和：598
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="面试题">面试题</h2>
<h3 id="数据变换">数据变换</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span> 
  <span class="p">{</span><span class="nx">名称</span><span class="o">:</span> <span class="s1">&#39;动物&#39;</span><span class="p">,</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">parent</span><span class="o">:</span> <span class="kc">null</span><span class="p">},</span> 
  <span class="p">{</span><span class="nx">名称</span><span class="o">:</span> <span class="s1">&#39;狗&#39;</span><span class="p">,</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">parent</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> 
  <span class="p">{</span><span class="nx">名称</span><span class="o">:</span> <span class="s1">&#39;猫&#39;</span><span class="p">,</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">parent</span><span class="o">:</span> <span class="mi">1</span><span class="p">}</span>
<span class="p">]</span> 
<span class="c1">// 数组变成对象 
</span><span class="c1"></span><span class="p">{</span> 
  <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">名称</span><span class="err">：</span><span class="s1">&#39;动物&#39;</span><span class="p">,</span> <span class="nx">children</span><span class="o">:</span><span class="p">[</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">名称</span><span class="err">：</span><span class="s1">&#39;狗&#39;</span><span class="p">,</span> <span class="nx">children</span><span class="o">:</span> <span class="kc">null</span><span class="p">},</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">名称</span><span class="err">：</span><span class="s1">&#39;猫&#39;</span><span class="p">,</span> <span class="nx">children</span><span class="o">:</span> <span class="kc">null</span><span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>解</p>
<p>test-1，先想当然的试试</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">result</span><span class="p">,</span><span class="nx">item</span><span class="p">)=&gt;{</span>
  <span class="nx">result</span><span class="p">[</span><span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">item</span>
  <span class="k">return</span> <span class="nx">result</span>
<span class="p">},</span> <span class="p">{})</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>test-2，</p>
<p>如果在parent为null时，才往 result 添加 id，值为 item.id；parent不为空，就把 item 添加到 result.children数组中</p>
<p>初始化 result 把 id 和 children 加进去（注意children是数组）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">result</span><span class="p">,</span><span class="nx">item</span><span class="p">)=&gt;{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">parent</span> <span class="o">===</span> <span class="kc">null</span><span class="p">){</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span>
    <span class="nx">result</span><span class="p">[</span><span class="s1">&#39;名称&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">item</span><span class="p">[</span><span class="s1">&#39;名称&#39;</span><span class="p">]</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="k">delete</span> <span class="nx">item</span><span class="p">.</span><span class="nx">parent</span>
    <span class="nx">item</span><span class="p">.</span><span class="nx">children</span> <span class="o">=</span> <span class="kc">null</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">result</span>
<span class="p">},</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">children</span><span class="o">:</span> <span class="p">[]})</span>
</code></pre></td></tr></table>
</div>
</div><p>完。</p>]]></description>
</item><item>
    <title>JS 的基本语法🤓</title>
    <link>http://samrks.github.io/javascript-basic-syntax/</link>
    <pubDate>Mon, 24 Aug 2020 22:15:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-basic-syntax/</guid>
    <description><![CDATA[<p>内容包括「什么是表达式和语句」「标识符的规则」「 if else 语句」「 while for 语句」「 label 」</p>
<h2 id="推荐书籍">推荐书籍</h2>
<ol>
<li>适合入门《<a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener noreffer">网道 JavaScript 教程</a>》</li>
<li>适合进阶《<a href="https://book.douban.com/subject/26351021/" target="_blank" rel="noopener noreffer">你不知道的 JavaScript（上卷）</a>》</li>
</ol>
<h2 id="js-语法-">JS 语法 ⭐️</h2>
<blockquote>
<p>开始学习</p>
</blockquote>
<h3 id="表达式与语句">表达式与语句</h3>
<p>表达式</p>
<ul>
<li>1+2 表达式的值为 3</li>
<li>add(1,2) 表达式的值为函数的<strong>返回值</strong></li>
<li>console.log 表达式的值为函数本身（因为没加括号）</li>
<li>console.log(3) 表达式的值为多少？（<strong>面试</strong>)
<ul>
<li>表达式的值就是函数的返回值 ，log函数的返回值为 undefined</li>
<li>所以 console.log(3) 表达式的值为 undefined</li>
</ul>
</li>
</ul>
<p>语句</p>
<ul>
<li>var a=1 是一个语句</li>
</ul>
<p>二者的区别</p>
<ul>
<li>表达式一般都有值，语句可能有也可能没有</li>
<li>语句一般会改变环境（声明、赋值）</li>
<li>上面两句话并不是绝对的</li>
</ul>
<h3 id="大小写敏感">大小写敏感</h3>
<p>不要写错</p>
<ul>
<li>var a 和 var A 是不同的</li>
<li>object 和 Object 是不同的</li>
<li>function 和 Function 是不同的</li>
<li>具体含义后面说</li>
</ul>
<h3 id="空格">空格</h3>
<p>大部分空格没有实际意义</p>
<ul>
<li>
<p><code>var    a    =    1</code> 和 <code>var a=1</code> 没有区别</p>
</li>
<li>
<p>加回车，大部分时候也不影响</p>
</li>
<li>
<p>只有一个地方不能加回车，那就是 return 后面</p>
<ul>
<li>
<p>return 后面不加东西，js 会自动补充成  return undefined</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="k">return</span> <span class="mi">3</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="k">return</span> <span class="p">[</span><span class="kc">undefined</span><span class="p">]</span>    <span class="c1">// return 和 3 之间加了一个回车，js会自动补充为 return undefined
</span><span class="c1"></span>  <span class="mi">3</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>  </p>
</li>
</ul>
<ul>
<li>唯独 return 后面不能加回车，其他多离谱的回车都没问题</li>
</ul>
</li>
</ul>
<h3 id="标识符">标识符</h3>
<h4 id="规则">规则</h4>
<ul>
<li>
<p>第一个字符，可以是 <code>Unicode 字母</code> /  <code>$</code> / <code>_</code>  /  <code>中文</code></p>
</li>
<li>
<p>后面的字符，除了上面所说，还可以有数字</p>
</li>
<li>
<p>注意，首位不能是数字</p>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="mi">9</span><span class="nx">$</span>
<span class="nx">Uncaught</span> <span class="nx">SyntaxError</span><span class="o">:</span> <span class="nx">Invalid</span> <span class="nx">or</span> <span class="nx">unexpected</span> <span class="nx">token</span> <span class="c1">// SyntaxError意为语法错误，token理解成字符串
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="变量名是标识符">变量名是标识符</h4>
<p>以下都是合法的标识符用法</p>
<ul>
<li><code>var _ = 1 </code></li>
<li><code>var $ = 2 </code></li>
<li><code>var ______= 6 </code></li>
<li><code>var 你好 = 'hi'</code></li>
<li>其他标识符用到再说</li>
</ul>
<h3 id="注释">注释</h3>
<blockquote>
<p>谣言：“ 写代码要多写注释。”</p>
<p>注释，分为：好的注释、不好的注释</p>
</blockquote>
<h4 id="不好的注释">不好的注释</h4>
<blockquote>
<p>不好的注释：告诉别人我写了什么</p>
</blockquote>
<ol>
<li>
<p>把代码翻译成中文</p>
<p>可能埋没了重要的注释。有用的信息和噪音的比例（信噪比）要低</p>
<p></p>
</li>
<li>
<p>过时的注释</p>
</li>
<li>
<p>发泄不满的注释</p>
</li>
</ol>
<h4 id="好的注释">好的注释</h4>
<blockquote>
<p>好的注释：告诉别人为什么我要这么写</p>
</blockquote>
<ol>
<li>
<p>踩坑注解</p>
</li>
<li>
<p>为什么代码会写得这么奇怪，遇到什么 bug</p>
<ul>
<li>遇到某个 bug，代码非得这么奇怪的写，才能避开这个 bug（这种也需要注释出来）</li>
</ul>
</li>
</ol>
<h3 id="区块-block">区块 block</h3>
<ul>
<li>
<p>把代码包在一起</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
  <span class="kd">let</span> <span class="nx">b</span><span class="o">=</span><span class="mi">2</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>常常与 if / for / while 合用</p>
</li>
</ul>
<h2 id="if-语句">if 语句</h2>
<blockquote>
<p>如果 … 那么 …</p>
</blockquote>
<h3 id="语法">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span><span class="nx">语句1</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">语句2</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>{ } 在语句只有一句的时候可以省略，不建议这样做</li>
</ul>
<h3 id="变态情况">变态情况</h3>
<ul>
<li>
<p>(表达式) 里可以非常变态，如 a=1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">2</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a是1&#39;</span><span class="p">)</span>   <span class="c1">// 最终打印这句，因为 = 是赋值，=== 才是判断是否相等
</span><span class="c1"></span><span class="p">}</span><span class="k">else</span><span class="p">{</span>
  <span class="nx">console</span><span class="mf">.1</span><span class="nx">og</span><span class="p">(</span><span class="s1">&#39;a不是1&#39;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>语句1 里可以非常变态，如嵌套的 if else</p>
</li>
<li>
<p>语句2 里可以非常变态，如嵌套的 if else</p>
</li>
<li>
<p>缩进也可以很变态，如面试题常常下套</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>上述代码执行结果为：</p>
<p>因为不写 { } 时，只默认<strong>第一个语句</strong>是跟随 if 条件的，有一个**无形的 { } **括住了第一句，相当于下面效果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>注：<strong>js 中是没有【行】的概念</strong>，即使两句写在一行，结果不变，仍是只括住<strong>第一个语句</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">);</span> <span class="p">}</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>如果用 逗号分隔呢？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span> <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a???&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li>逗号，表示这句话没结束。所以默认两个 console 就变成一个语句了（效果如上）</li>
<li>分号；表示这句话结束了。</li>
</ul>
</li>
</ul>
<h3 id="使用最没有歧义的写法">使用最没有歧义的写法</h3>
<h4 id="最推荐使用的写法">最推荐使用的写法</h4>
<blockquote>
<p>永远不要省略花括号 { }，即使只有一个语句。这是最不会产生歧义的写法</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
	<span class="nx">语句</span>
<span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
  <span class="nx">语句</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
  <span class="nx">语句</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="次推荐使用的写法">次推荐使用的写法</h4>
<blockquote>
<p>该写法，只在函数里有用</p>
<p>基于函数 return 的特点：执行 return ，函数就结束了，不再往下执行</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">表达式</span>
  <span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">表达式</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">表达式</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="switch-语句">switch 语句</h2>
<blockquote>
<p>if…else…升级版</p>
<p>JS 的 switch 语句设计的不算精致，但确实在某些情况时，比 if…else… 好用</p>
</blockquote>
<h3 id="语法-1">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">switch</span><span class="p">(</span><span class="nx">fruit</span><span class="p">){</span> 
  <span class="k">case</span> <span class="s2">&#34;banana&#34;</span><span class="err">：</span>
    <span class="c1">//...
</span><span class="c1"></span>    <span class="k">break</span><span class="err">；</span> 
  <span class="k">case</span> <span class="s2">&#34;apple&#34;</span><span class="o">:</span>
    <span class="c1">//...
</span><span class="c1"></span>    <span class="k">break</span><span class="err">；</span> 
  <span class="k">default</span><span class="o">:</span>
    <span class="c1">//...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="break">break</h3>
<ol>
<li>
<p>**大部分时候，省略 break 你就完蛋了 **</p>
<ul>
<li>当条件符合 banana 时，执行某些语句 …  ，遇到 break 跳出 switch</li>
<li>如果没有 break，就会向下跳过<code>case 'apple'</code>，直接执行 apple 的语句 …</li>
<li>看起来很鸡肋</li>
</ul>
</li>
<li>
<p><strong>少部分时候，可以利用 break</strong></p>
<ul>
<li>
<p>最早为什么这么设计 break 呢？</p>
</li>
<li>
<p>是为了方便「 满足多个条件（case）时 」的判断</p>
<ul>
<li>如下，case 1 可以默认贯穿到 case 3  （初衷是好的）</li>
</ul>
<p>​       </p>
</li>
</ul>
</li>
<li>
<p><a href="https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html" target="_blank" rel="noopener noreffer">Swift</a> 的 switch case 语句设计，完爆 JS 的 switch case  （apple 出的语言）</p>
<ul>
<li>执行完一个 case，默认跳出，无需 break</li>
<li>多条件判断：可以直接在一个 case 下写多个条件句 ，无需去掉 break 来表示贯穿</li>
<li>综上，JS 出现的太早了，没有抄到一个好的 switch case</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">switch</span> <span class="nx">some</span> <span class="nx">value</span> <span class="nx">to</span> <span class="nx">consider</span> <span class="p">{</span>
<span class="k">case</span> <span class="nx">value</span> <span class="mi">1</span><span class="o">:</span>
    <span class="nx">respond</span> <span class="nx">to</span> <span class="nx">value</span> <span class="mi">1</span>
<span class="k">case</span> <span class="nx">value</span> <span class="mi">2</span><span class="p">,</span>
     <span class="nx">value</span> <span class="mi">3</span><span class="o">:</span>
    <span class="nx">respond</span> <span class="nx">to</span> <span class="nx">value</span> <span class="mi">2</span> <span class="nx">or</span> <span class="mi">3</span>
<span class="k">default</span><span class="o">:</span>
    <span class="nx">otherwise</span><span class="p">,</span> <span class="k">do</span> <span class="nx">something</span> <span class="k">else</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ol>
<h2 id="问号冒号三元表达式">问号冒号（三元）表达式</h2>
<blockquote>
<p><strong><code>表达式1 ? 表达式2 : 表达式3 </code></strong>    表达式</p>
<p>最简单的 if…else… 的写法，能用问号冒号就不用 if…else…</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 求两个数的最大值
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">)</span> <span class="k">return</span> <span class="nx">a</span><span class="p">;</span>
  <span class="k">else</span> <span class="k">return</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">a</span><span class="o">&gt;</span><span class="nx">b</span> <span class="o">?</span> <span class="nx">a</span><span class="o">:</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="c1">// 求绝对值
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">abs</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">n</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">?</span> <span class="nx">n</span><span class="o">:</span> <span class="o">-</span><span class="nx">n</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="-短路逻辑">&amp;&amp; 短路逻辑</h2>
<p>与运算</p>
<blockquote>
<ul>
<li>A &amp;&amp; B &amp;&amp; C &amp;&amp; D
<ul>
<li>取第一个假值，后面就不看了</li>
<li>如果ABC都为真，就取 D。</li>
</ul>
</li>
<li>一般整句表达式的值，不会出现取 true / false，而是取 ABCD 中的一个</li>
<li>只要整个表达式中，有一个是假，整个式子就是假</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">b</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span>  <span class="c1">// 理解：a&amp;&amp;b 等价于，如果a是真，就执行b，否则就什么都不执行
</span><span class="c1"></span>  <span class="nx">b</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span> 
  
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">5</span> <span class="o">&amp;&amp;</span> <span class="mi">5</span>
<span class="kc">false</span>
<span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">5</span>
<span class="mi">5</span>
<span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;前面全对了&#39;</span><span class="p">)</span>
<span class="nx">前面全对了</span>
<span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">5</span><span class="o">&lt;</span><span class="mi">0</span>
<span class="kc">false</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">f1</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;f1存在&#39;</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 上下效果等价：如果 window.f1为 true ，就会执行 conosole.log(&#39;f1存在&#39;)
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">f1</span> <span class="o">&amp;&amp;</span> <span class="nx">conosole</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;f1存在&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>前端中，如果能写成 &amp;&amp; 的语句，就不写 if…else… 语句</p>
</blockquote>
<h3 id="最常见的用法">最常见的用法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">fn</span> <span class="o">&amp;&amp;</span> <span class="nx">fn</span><span class="p">()</span>  <span class="c1">// 如果 fn 存在就执行 fn
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>  
<span class="c1">// 如果console存在，就判断console.log是否存在，也存在，就执行打印 hi
</span><span class="c1"></span><span class="cm">/* 这么写有什么意义？
</span><span class="cm">   因为 IE 没有 console，如果用 IE 就不执行 console，不然 IE 会报错 */</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="-短路逻辑-1">|| 短路逻辑</h2>
<p>或运算</p>
<blockquote>
<ul>
<li>
<p>A || B || C || D</p>
<ul>
<li>
<p>取第一个真值，后面就都不看了。</p>
</li>
<li>
<p>如果ABC都为假，就取 D</p>
</li>
</ul>
</li>
<li>
<p>一般整句表达式的值，不会出现取 true / false，而是取 ABCD 中的一个</p>
</li>
<li>
<p>只要整个表达式中，有一个是真，整个式子就是 真</p>
</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">a</span><span class="o">||</span><span class="nx">b</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">){</span>  <span class="c1">// 理解：a||b 等价于，如果a不是真，就执行b，否则就什么都不执行
</span><span class="c1"></span>  <span class="nx">b</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
  
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>如果能写成 || 的语句，就不写 if…else…</p>
</blockquote>
<h3 id="最常见的用法-1">最常见的用法</h3>
<p>例：前端中经常有一个种写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">||</span> <span class="mi">100</span> 

<span class="c1">// 理解：如果a存在就什么都不做，否则 a=100
</span><span class="c1"></span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span>  <span class="c1">// 自己赋给自己，相当于什么都不做
</span><span class="c1"></span><span class="p">}</span><span class="k">else</span><span class="p">{</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="mi">100</span>  <span class="c1">// 保底值
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="总结条件语句">总结：条件语句</h2>
<ul>
<li>if … else…
<ul>
<li>if…else…的逻辑是最常用的，但是很多情况并不使用它。代码简短时，会用更简便的代码替代这种写法</li>
</ul>
</li>
<li>switch case
<ul>
<li>不能少了 break</li>
</ul>
</li>
<li>A ? B : C
<ul>
<li>相当常用（A若为真，执行B，A若为假，执行C）</li>
</ul>
</li>
<li>A &amp;&amp; B
<ul>
<li>相当常用，举例：fn &amp;&amp; fn()    （ fn 存在就执行 fn ）</li>
</ul>
</li>
<li>A || B
<ul>
<li>相当常用，举例： A = A || B    （A 存在时就什么都不执行，A 不存在时 B 就是 A 的保底值）</li>
</ul>
</li>
</ul>
<h2 id="while-循环">while 循环</h2>
<blockquote>
<p>用的不多</p>
</blockquote>
<h3 id="语法-2">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">while</span> <span class="p">(</span><span class="nx">表达式</span><span class="p">)</span> <span class="p">{</span> <span class="nx">语句</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>判断表达式的真假</li>
<li>当表达式为真，执行语句，执行完再判断表达式的真假</li>
<li>直到遇到表达式为假，跳出循环，执行后面的语句</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1">// 初始化
</span><span class="c1"></span><span class="k">while</span><span class="p">(</span><span class="nx">a</span> <span class="o">!==</span> <span class="mi">10</span><span class="p">){</span>   <span class="c1">// 判断条件
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>   <span class="c1">// 循环体
</span><span class="c1"></span>  <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span><span class="o">+</span><span class="mi">1</span>  <span class="c1">// 增长(为最终能跳出循环)
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>共需要四部分： 1. 初始化  2. 判断条件  3. 循环体  4. 增长</li>
</ul>
<h3 id="其他">其他</h3>
<ul>
<li>do &hellip; while 用得不多，自行了解</li>
</ul>
<h3 id="while-变态情况死循环">while 变态情况：死循环</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">while</span><span class="p">(</span><span class="nx">a</span><span class="o">!==</span><span class="mi">1</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="mf">0.1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>原因：浮点数不精确，导致死循环</p>
<p></p>
<h2 id="for-循环">for 循环</h2>
<blockquote>
<p>for循环 是 while循环 的语法糖</p>
</blockquote>
<h3 id="语法糖">语法糖</h3>
<ul>
<li>for 是 while 循环的方便写法
<ul>
<li>写 while 时需要四部分： 1. 初始化  2. 判断条件  3. 循环体  4. 增长</li>
<li>for 将 while 的写法升级、整合，如下
<ol>
<li>语句1 是用来初始化的</li>
<li>表达式2  是判断条件</li>
<li>语句3 是自增</li>
<li>循环体</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="语法-3">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="nx">语句1</span><span class="p">;</span><span class="nx">表达式2</span><span class="p">;</span><span class="nx">语句3</span><span class="p">){</span>
  <span class="nx">循环体</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ol>
<li>先执行语句1</li>
<li>然后判断表达式2
<ul>
<li>如果为真，执行循环体，然后再执行语句3</li>
<li>如果为假，直接退出循环，执行后面的语句</li>
</ul>
</li>
</ol>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>   <span class="c1">// 0 1 2 3 4
</span><span class="c1"></span><span class="p">}</span>
<span class="c1">// i 5
</span></code></pre></td></tr></table>
</div>
</div><h3 id="变态">变态</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// 5 5 5 5 5
</span><span class="c1"></span>    <span class="c1">// console.log(i + &#39;随机数&#39; + Math.random())  
</span><span class="c1"></span>  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// i 5
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>9 是 Chrome 的 bug。</p>
<p>5个5是正解。</p>
<p>每轮循环触发 setTimeout 相当于设置一个闹钟命令：过一会再执行 setTimeout 中的语句。而过一会之后，for循环已经走完，i 变为 5。然后闹钟到点，依次执行每轮触发的 setTimeout 中的语句，也就是执行 5轮 <code>console.log( i )</code> ，就会打印 5 个 5</p>
<h4 id="解决">解决</h4>
<p>把 var 替换成 let</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// 0 1 2 3 4 
</span><span class="c1"></span>  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="语法变形">语法变形</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="nx">语句1</span><span class="p">;</span><span class="nx">表达式2</span><span class="p">;</span><span class="nx">语句3</span><span class="p">){</span>
  <span class="nx">循环体</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>省略 语句 1 ，可在 for 循环外面定义变量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>    <span class="c1">// 0 1 2 3 4
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>省略 表达式 2 ，会进入死循环</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(;</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>    <span class="c1">// 0 1 2 3 4 5 6...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>省略 语句 2 &amp; 3 ，会进入死循环</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(;</span> <span class="p">;</span> <span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>    <span class="c1">// 0 0 0 0 0 0 0...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="break-和-continue">break 和 continue</h3>
<blockquote>
<p>break 退出所有循环</p>
<p>continue 退出当前一次循环</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">1</span><span class="p">){</span> <span class="c1">// 遇到奇数轮次，退出整个for循环
</span><span class="c1"></span>    <span class="k">break</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 1
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">1</span><span class="p">){</span> <span class="c1">// 遇到奇数轮次，跳过当次循环
</span><span class="c1"></span>    <span class="k">continue</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 0 2 4 6 8
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="label-语法">label 语法</h2>
<blockquote>
<p>用的很少，面试会考（概率5%）</p>
<p>这个知识点，除了用来做面试题之外，毫无用处</p>
</blockquote>
<h3 id="语法-4">语法</h3>
<p>label 语法：在任何情况下，写一个[标识符](# 标识符)，后面写一个代码块 { }（通常包含多句代码），或一句代码</p>
<h4 id="代码块">代码块</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">foo</span><span class="o">:</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">break</span> <span class="nx">foo</span><span class="p">;</span>   <span class="c1">// 跳出foo这个代码块
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;本行不会输出&#39;</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="一句代码">一句代码</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">foo</span><span class="o">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="面试">面试</h3>
<p>1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>   <span class="c1">// 表示代码块只有一行，叫做 1
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>3</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>  <span class="c1">// 一个代码块，第一行是一个标签，标签内容是 1，没有什么实际意义
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>问上面是什么</p>
<p>答： 是一个代码块（属于 label 语法），里面有一个标签 foo，语句就是一个 1</p>
<p>为什么不是一个对象？</p>
<p>答：如果写成下面形式，a 就是对象了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>如果单纯写一个代码块（如下），那就是一个 label，语句为 1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>JavaScript 的发展历史</title>
    <link>http://samrks.github.io/javascript-history/</link>
    <pubDate>Wed, 12 Aug 2020 21:13:23 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-history/</guid>
    <description><![CDATA[<p>简单了解「学 JS 的基本要求」，重点了解「JS 的诞生与历史」</p>
<p>​</p>
<h2 id="一些链接">一些链接</h2>
<ul>
<li>《<a href="https://www.bilibili.com/video/av15989846/" target="_blank" rel="noopener noreffer">Code Rush</a>》纪录片，记录了 Firefox 开源的过程，里面有 JS 之父的采访</li>
<li><a href="https://www.bilibili.com/video/av3745910/" target="_blank" rel="noopener noreffer">Chrome 的广告</a>，让你了解 Chrome 有多快</li>
<li><a href="https://www.jianshu.com/p/4eb60e47b4bf" target="_blank" rel="noopener noreffer">淘宝天猫不再支持 IE 6/7</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/24091492" target="_blank" rel="noopener noreffer">淘宝天猫不再支持 IE 8</a></li>
<li><a href="http://index.baidu.com/v2/main/index.html#/trend/%e5%89%8d%e7%ab%af?words=%e5%89%8d%e7%ab%af" target="_blank" rel="noopener noreffer">百度指数</a></li>
</ul>
<p>【JavaScript 诞生】相关文章：</p>
<ol>
<li><a href="https://zh.wikipedia.org/wiki/JavaScript#%e5%8e%86%e5%8f%b2" target="_blank" rel="noopener noreffer">JavaScript 的历史</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html" target="_blank" rel="noopener noreffer">JavaScript 诞生记</a>⭐</li>
<li><a href="http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html" target="_blank" rel="noopener noreffer">JavaScript 的10个设计缺陷</a></li>
</ol>
<p>​</p>
<h2 id="前端的门槛">前端的门槛</h2>
<blockquote>
<p>从 JavaScript 开始，你需要绞尽脑汁了</p>
</blockquote>
<p>​</p>
<h2 id="学-js-的基本要求">学 JS 的基本要求</h2>
<h3 id="软要求">软要求</h3>
<blockquote>
<p>对大脑的要求</p>
</blockquote>
<h4 id="一逻辑能力">一、逻辑能力</h4>
<p>逻辑分很多种：抽象逻辑、符号逻辑、三段论逻辑（最常用）…</p>
<p><strong>三段论逻辑</strong></p>
<p>示例</p>
<ul>
<li>JS的数据类型有 number / string / null / undefined / bool / symbol / object 【大前提】</li>
<li>JS的函数不是  number / string / null / undefined / bool / symbol 中的任意一种</li>
<li>所以，JS的函数是object 【根据前两句话，能推出第三句】</li>
</ul>
<p>好处</p>
<ul>
<li>写代码基本就是在<strong>编写逻辑</strong></li>
</ul>
<p>​</p>
<h4 id="二质疑自己的能力">二、质疑自己的能力</h4>
<blockquote>
<p>程序员不要相信人类，包括你自己</p>
</blockquote>
<p>质疑自己、推翻自己</p>
<p></p>
<ul>
<li>出现 bug ，先质疑自己、再质疑机器</li>
<li>大脑中有6个知识点，通过这6个知识点，写出一个bug，可能某个知识点记错了，不要纠结，不要认死理，懂得质疑和推翻自己。直接把错误的知识点从大脑中擦掉，灌入正确的知识点，来更新你的知识</li>
</ul>
<p><strong>回想一下</strong></p>
<p>你犯了多少错误</p>
<ul>
<li>拼错单词</li>
<li>多写了空格、少写了空格</li>
<li>把 O 看成 0，把 0 写成 O</li>
<li>把 iOS 写成 IOS 或者 ios</li>
</ul>
<blockquote>
<p>这不是粗心大意，这是人类不可克服的问题，通过 <strong>double check</strong> 可以缓解</p>
<ul>
<li>正着核对一遍，再反着核对一遍</li>
</ul>
</blockquote>
<p>​</p>
<h4 id="三抽象思维">三、抽象思维</h4>
<blockquote>
<p>高级程序员必备能力</p>
</blockquote>
<p><strong>什么是抽象能力</strong></p>
<p>举例</p>
<ul>
<li>
<p>你订了一份报纸</p>
</li>
<li>
<p>你关注了偶像明星蔡徐坤的微博</p>
</li>
<li>
<p>你用JS监听了一个按钮的点击事件</p>
<blockquote>
<p>对程序员来说，这三件事是一件事，拥有共同的模式：发布订阅模式。</p>
<p>这就是抽象，<strong>把事物的特征进行快速总结</strong>。</p>
<p>多练，初级程序员至少锻炼1年，才能具备这种抽象思维。</p>
<p>具备看到一个事物，就能把它抽离成代码示例的能力。</p>
</blockquote>
</li>
</ul>
<p>好处</p>
<ul>
<li>抽象思维，使你的代码能解决更多的问题</li>
<li>而不是兵来将挡、水来土掩，一个一个解决
<ul>
<li>新手程序员，遇到一个问题就写一段代码</li>
<li>高级程序员，将所有可能问题汇总，写一大坨代码解决全部问题</li>
<li>比如 Vue 和 React 的作者（一套框架解决问题）</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="硬要求">硬要求</h3>
<blockquote>
<p>客观上的要求</p>
</blockquote>
<h4 id="一足够的代码量">一、足够的代码量</h4>
<ul>
<li>达到 1000 行 - 新手</li>
<li>达到 10000 行 - 熟手（至少做过1个比较复杂的项目，常规项目都能做）</li>
<li>达到 50000 行 - 专业选手（至少做过2-3个比较复杂的项目，可能3-5年，看996时间积累）</li>
<li><strong>只能靠时间积累</strong></li>
</ul>
<p><strong>如何统计自己的代码行数</strong></p>
<ul>
<li>安装 <code>yarn global add cloc</code></li>
<li><code>cloc --vcs=git .</code></li>
<li>可以用来统计一个仓库里的有效代码</li>
</ul>
<p>注意</p>
<ul>
<li>如果仓库里有 node_modules 目录等不相关内容</li>
<li>需要把 /node_modules/ 写入 .gitignore 文件</li>
</ul>
<p>​</p>
<h4 id="二了解足够多的概念">二、了解足够多的概念</h4>
<blockquote>
<p>不仅要会写，还要会<del>扯</del>说（面试）</p>
</blockquote>
<p><strong>概览</strong></p>
<p>常用常考</p>
<ul>
<li>
<p>闭包、原型类、继承、MVC、Flux、高阶函数、前端工程化</p>
<blockquote>
<p>只会用，不会说，面试就完了</p>
</blockquote>
</li>
</ul>
<p>如何积累</p>
<ul>
<li>在课程中提炼
<ul>
<li>就是记笔记</li>
<li>面试如果能完整说出来，就是满分。新手能说出一般也达到要求了，面试新手就看思路对不对，不需要百分百实现</li>
</ul>
</li>
<li>在大脑中思考
<ul>
<li>JS需要思考清楚，这些代码到底是在做什么。为什么这样设计、为什么这样用</li>
<li>学JS，必须把疑问直接搞定，不能一直留着，不然会有越来越多的 bug</li>
</ul>
</li>
<li>在博客上总结
<ul>
<li>思考清楚了，一定要总结、记下来</li>
<li>用于面试</li>
</ul>
</li>
<li>在代码中实践</li>
</ul>
<p>​</p>
<h4 id="三有足够的踩坑经验">三、有足够的踩坑经验</h4>
<blockquote>
<p>你以为是工作经验吗？</p>
</blockquote>
<p><strong>踩坑经验</strong></p>
<p>何谓专家</p>
<ul>
<li>**“ 该领域内所有的错误都犯完的人，就是专家 ” **</li>
</ul>
<p>如何踩坑</p>
<ul>
<li>做项目，而且是个人项目</li>
<li>个人项目的意思是<strong>所有代码都是你一个人写的</strong>
<ul>
<li>团队合作的大项目，基本上只有两个人做，其他人都是打酱油的</li>
</ul>
</li>
<li>这样你才能<strong>全方位踩坑</strong></li>
</ul>
<p>​</p>
<h3 id="总结">总结</h3>
<p>软要求</p>
<ul>
<li>逻辑能力</li>
<li>质疑自己的能力</li>
<li>抽象能力</li>
</ul>
<p>硬要求</p>
<ul>
<li>足够多的代码（至少5000行，大项目1000-2000行，小项目200行左右）</li>
<li>足够多的概念</li>
<li>足够多的踩坑经验（记下来自己遇到过什么坑）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="javascript-的历史">JavaScript 的历史</h2>
<blockquote>
<p>历史和特点</p>
</blockquote>
<h3 id="发明人">发明人</h3>
<p>李爵士发明 HTML</p>
<p>赖先生发明 CSS</p>
<p><strong>布兰登发明 JS</strong></p>
<p>​</p>
<h4 id="布兰登的生平">布兰登的生平</h4>
<p></p>
<ul>
<li>生平1961年生于美国</li>
<li>物理学转数学与计算机学位</li>
<li>工作七年，负责操作系统与网络开发</li>
<li>又工作三年，负责微内核与电子信号处理相关工作</li>
<li>1995年进入网景公司，为其浏览器开发了 JS 功能</li>
<li>1998年协助成立 Mozilla.org，担任首席架构师</li>
<li>网景死亡（被收购）后，他成立了 Mozilla 基金会，Firefox 就是这个基金会维护的，有<a href="https://www.bilibili.com/video/av15989846/" target="_blank" rel="noopener noreffer">纪录片</a>记录了这一过程</li>
<li>2014年晋升为 Mozilla 的 CEO，十天后，被赶下台
<ul>
<li>原因是他曾捐助过反同性恋的法案（只有异性可结婚）</li>
</ul>
</li>
<li>2015年成立 Brave 公司，开发保护用户隐私的浏览器</li>
</ul>
<p>​</p>
<h3 id="总结-1">总结</h3>
<p>牛逼的程序员</p>
<ul>
<li>从来不会只学一门编程语言</li>
<li>不怕被辞退，总能找到事做</li>
<li>很容易创业，比外行人靠谱得多</li>
<li>可以干到 50 岁以上（基本上都是创办公司或很有钱了）</li>
</ul>
<p>JavaScript</p>
<ul>
<li>诞生之初，只是一个不起眼的小功能</li>
<li>同时 JS 有很多 bug，我们学习的时候要注意辨别</li>
</ul>
<p>​</p>
<h3 id="javascript-的诞生">JavaScript 的诞生</h3>
<p>布莱登临危受命</p>
<ul>
<li>公司要求给浏览器添加一个脚本功能</li>
<li>公司要求这个脚本必须蹭 Java 的流量</li>
<li>布莱登花十天设计了 JS 的最初版本（不是实现）</li>
</ul>
<p>JS的命名</p>
<ul>
<li>Mocha 摩卡 =&gt; LiveScript =&gt; JavaScript</li>
<li>Java 既是编程语言，也是一种咖啡</li>
<li>浏览器一开始同时就支持 Java 和 JavaScript</li>
<li>后来，JS 胜了（在浏览器上），Java就逐渐退出了浏览器平台</li>
</ul>
<p>​</p>
<h3 id="浏览器大战">浏览器大战</h3>
<blockquote>
<p>背景：1995年，网景推出 JS 功能，用户纷纷叫好，因为可以在页面上节省流量。</p>
<ul>
<li>当时的网速非常慢 2~3k/s，用户填写一个表单，点击提交按钮，等待一分钟才刷新页面，反馈结果。</li>
<li>有了 JS 功能之后，点击按钮，马上反馈用户表单信息是否正确，所以用户非常喜欢。</li>
<li>注意：此时的 JavaScript 只是网景提供的一个<strong>功能</strong>，并不是语言</li>
</ul>
</blockquote>
<p>微软的跟进</p>
<ul>
<li>1996年8月 IE 3 发布，支持 JScript（微软实现的JS）</li>
<li>浏览器大战开始，每家浏览器的脚本不太一样</li>
</ul>
<p>网景的反击</p>
<ul>
<li>1996年11月，网景向 ECMA 提交语言标准，由于版权问题，JS 语言标准不叫 JavaScript，叫 ECMAScript</li>
<li>ECMA 发音：ai ke ma</li>
</ul>
<p>​</p>
<h3 id="网景之死">网景之死</h3>
<p>被收购</p>
<ul>
<li>微软的 IE 浏览器由于捆绑进了 Windows，很快超越</li>
<li>1998年，网景浏览器节节败退，公司陷入内忧外患</li>
<li>同年，公司打算搏一搏，将浏览器<strong>开源</strong>（Firefox）</li>
<li>最终，市场并没有因为开源而重新青睐网景</li>
<li>年底，[美国在线 AOL] 宣布开始收购网景</li>
<li>收购后，网景团队里的程序员纷纷被解雇</li>
<li>布莱登在之后一直协助维护 Firefox 的运营</li>
</ul>
<p>​</p>
<h3 id="ie-6-如日中天">IE 6 如日中天</h3>
<p>你想象不到 IE 6 多么火</p>
<ul>
<li>2001年，IE 6 随着 Windows XP 一起发布</li>
<li>2004年，IE 6 全球市场占用率 80% 以上</li>
<li>然而，这款浏览器却不兼容 W3C 标准（主要是 CSS)</li>
<li>IE 6 也不断爆出安全漏洞</li>
<li>Firefox 打算涅槃重生，重新打败 IE</li>
<li>2005年，IE 7 发布，但打不过 IE 6</li>
<li>2006年，主流浏览器为 IE 6 和 Firefox</li>
<li>2010年，中国的大部分浏览器还是 IE 6</li>
<li>由于盗版 Windows XP 在中国的风行，在很多年里，IE 6 始终占据中国浏览器市场，是前端开发者的恶魔</li>
</ul>
<p>​</p>
<h3 id="ie-6-神奇的-bug">IE 6 神奇的 bug</h3>
<p>下面代码会让 IE 6 直接崩溃，当场死机</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span> 
  <span class="o">*</span> <span class="p">{</span> <span class="k">position</span><span class="p">:</span> <span class="kc">relative</span> <span class="p">}</span> 
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span> 
<span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span> 
  <span class="p">&lt;</span><span class="nt">input</span><span class="p">&gt;</span> 
<span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>补充：</p>
<ul>
<li>「<code>*{  }</code> 星号性能低下」的谣言，就是从 IE6 这个 bug ，开始传出来的</li>
<li>实际上星号没有这个问题，这是 IE6 自己有问题</li>
<li>如果现在还有人说「星号性能低下」，不要反驳他，八九年前的事情现在还在说
<ul>
<li>星号套星号…可能有问题，但是<strong>一个星号，是绝对不会有问题的</strong></li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="chrome-横空出世">Chrome 横空出世</h3>
<p>微软的懈怠</p>
<ul>
<li>由于 IE6 的巨大成功，微软觉得再花费精力不值得，而且没有竞争对手，所以直接解散了 IE6 开发团队</li>
<li>Firefox 的出现让微软重新组建 IE 团队，但不是同一队人，造成 IE7、8 一直问题不断</li>
</ul>
<p>谷歌抓住机会</p>
<ul>
<li>2004年，谷歌雇用了一些 Firefox 和 IE 的开发者</li>
<li><strong>2008年</strong>，Chrome 终于发布，迅速拿下 1% 份额</li>
<li>2011年，Chrome 份额超过 Firefox</li>
<li><strong>2016年</strong>，Chrome 全球份额 62%</li>
<li>欣赏一支 <a href="https://www.bilibili.com/video/av3745910/" target="_blank" rel="noopener noreffer">Chrome 的广告</a></li>
</ul>
<p>​</p>
<h3 id="移动市场兴起">移动市场兴起</h3>
<p>智能手机崛起</p>
<ul>
<li>2010年，iPhone 4 发布</li>
<li>2011年，微软 和 Nokia 联合起来，打算搞一波事情</li>
<li>后来的事情大家都知道，Nokia 手机业务完了</li>
<li>也就是说，手机上基本没有 IE 了</li>
<li>前端程序员表示欣喜若狂，IE 终于快要死了</li>
<li>2016年，淘宝天猫宣布<a href="https://www.jianshu.com/p/4eb60e47b4bf" target="_blank" rel="noopener noreffer">不再支持 IE6、IE7</a></li>
<li>同年年底，宣布<a href="https://zhuanlan.zhihu.com/p/24091492" target="_blank" rel="noopener noreffer">不再支持 IE 8</a></li>
<li>移动市场的兴起，让中国前端摆脱 IE 十年的恐怖支配</li>
<li>从此，前端快速，不对，是极速发展</li>
</ul>
<p>​</p>
<h3 id="ecmascript-标准的制定">ECMAScript 标准的制定</h3>
<p>时间</p>
<ul>
<li>1997年6月，第一版 ECMAScript 发布</li>
<li>1999年12月，<strong>第三版</strong>发布，这个版本使用最广（IE6支持）</li>
<li>第四版，流产。</li>
<li>2009年12月，第五版发布，增加了一些功能</li>
<li><strong>2015年</strong>6月，<strong>第六版</strong>发布，新浏览器都支持这一版</li>
<li>之后每年发布一版，版本号以年份命名</li>
</ul>
<h4 id="js-与-ecmascript-的关系">JS 与 ECMAScript 的关系</h4>
<ul>
<li>ECMAScript 是纸上的标准，JS 是浏览器的实现</li>
<li>纸上标准往往落后于浏览器，先实现，再写进标准
<ul>
<li>ECMA 只总结，不预演，这样就不会再导致标准流产（写进标准但没浏览器使用的情况）</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="javascript-兴起">JavaScript 兴起</h3>
<h4 id="杀手级应用-gmail">杀手级应用 Gmail</h4>
<ul>
<li>2004年愚人节，谷歌发布 Gmail 在线网页</li>
<li>当时的人们认为网页只能用来看新闻和图片</li>
<li>Gmail 的发布让用户和开发者（后端、客户端）眼前一亮</li>
<li>2005年，Jesse 将谷歌用到的技术命名为 AJAX</li>
<li><strong>从此，前端技术正式出现</strong></li>
<li>在此之前的网页开发，都是由 后端 和 设计师 完成</li>
<li>2006年，jQuery 发布，是目前最长寿的 JS 库</li>
<li>后来的十年，jQuery 大发异彩，直到 IE 不行了，jQuery 才稍微没有那么火</li>
</ul>
<p>​</p>
<h3 id="中国前端的发展">中国前端的发展</h3>
<p>正式出现时间</p>
<ul>
<li>
<p>2010年左右，中国才有专门的前端岗位</p>
<p><a href="http://index.baidu.com/v2/main/index.html#/trend/%E5%89%8D%E7%AB%AF?words=%E5%89%8D%E7%AB%AF,java,python,php" target="_blank" rel="noopener noreffer">百度搜索指数</a></p>
<p></p>
<p></p>
</li>
</ul>
<p>前端的来源</p>
<ul>
<li>一部分来自自学的<strong>后端</strong>程序员，他们把 Java 的思想代入 JavaScript，<strong>面向对象</strong>成了JS的主流思想</li>
<li>一部分来自<strong>设计师</strong>，他们开始学习 CSS，并独创了「重构工程师」岗位（现已没落）
<ul>
<li>比如张鑫旭，专门研究CSS</li>
</ul>
</li>
<li>上面这两种来源，一种赶鸭子上架，一种不够专业，导致前端特别缺人</li>
</ul>
<p>缺人</p>
<ul>
<li>最应该产出前端人才的大学，迟迟没有相关课程</li>
<li>由于早期前端工资比不上后端，所以大部分人选后者</li>
<li>就如同现在很多高材生选择机器学习一样</li>
<li>一些不小心进入前端领域的科班生成长非常迅速</li>
</ul>
<p>​</p>
<h3 id="javascript-爆发">JavaScript 爆发</h3>
<p>V8 快如闪电</p>
<ul>
<li>
<p>Chrome 的 JS 引擎叫做 V8（V1到V7是啥)</p>
</li>
<li>
<p>2009年，Ryan 基于 V8 创建了 Node.js</p>
</li>
<li>
<p>2010年，Isaac 基于 Node.js 写出了 npm</p>
</li>
<li>
<p>前端工程师可以在浏览器之外执行 JS 了，Node.js 快速风靡</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">例：node demo.js
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>同年，TJ 受 Sinatra 启发，发布了 Express.js</p>
</li>
<li>
<p>从此，前端工程师可以愉快地写后端应用了！</p>
</li>
</ul>
<p>爆发</p>
<ul>
<li>这期间出来的技术太多，以后慢慢介绍：gulp、grunt、yeoman、requirejs、webpack、Angular、React、Vue等</li>
<li>这些技术很多也已经过时了</li>
</ul>
<p>​</p>
<h3 id="总结-2">总结</h3>
<h4 id="js-是历史的选择">JS 是历史的选择</h4>
<ul>
<li>一开始浏览器支持很多东西：Java、Flash、VBScript</li>
<li>只有 JS 活到最后</li>
</ul>
<h4 id="js-的低开高走">JS 的低开高走</h4>
<ul>
<li>一开始 JS 就是一个玩具语言</li>
<li>但是 JS 每次都走对了风口
<ol>
<li>JS 推出标准</li>
<li>Gmail 的出现（当时的网站只能看新闻，用户第一次体验到输入网址就能打开一个工具）</li>
<li>移动端</li>
<li>node.js</li>
</ol>
</li>
</ul>
<h4 id="学习-js-时需要注意">学习 JS 时需要注意</h4>
<ul>
<li>JS 最初也很混乱，旧的、过时的东西了解就好，考前记忆一些</li>
<li>跟 IE 相关的知识一律忽略</li>
</ul>
<blockquote>
<p>前端是进入互联网行业的捷径</p>
</blockquote>]]></description>
</item></channel>
</rss>

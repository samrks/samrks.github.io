<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>转换 - 标签 - Sam&#39;s Garage</title>
        <link>https://liubingxuan.xyz/tags/%E8%BD%AC%E6%8D%A2/</link>
        <description>转换 - 标签 - Sam&#39;s Garage</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ryuukousen@gmail.com (Sam)</managingEditor>
            <webMaster>ryuukousen@gmail.com (Sam)</webMaster><lastBuildDate>Thu, 27 Aug 2020 01:45:54 &#43;0800</lastBuildDate><atom:link href="https://liubingxuan.xyz/tags/%E8%BD%AC%E6%8D%A2/" rel="self" type="application/rss+xml" /><item>
    <title>JS 的数据类型🧐</title>
    <link>https://liubingxuan.xyz/javascript-something-about-data-type/</link>
    <pubDate>Thu, 27 Aug 2020 01:45:54 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://liubingxuan.xyz/javascript-something-about-data-type/</guid>
    <description><![CDATA[<p>「如何存数字&amp;字符」「JS 的数据类型」「64位浮点数 」「变量声明 var / let / const」「类型转换」</p>
<p>​</p>
<h2 id="数据为什么需要类型">数据为什么需要类型</h2>
<h3 id="数字与字符串">数字与字符串</h3>
<blockquote>
<p>都是一，为什么要分 <code>1</code> 和 <code>'1'</code></p>
</blockquote>
<p>功能不同</p>
<ul>
<li>数字是数字，字符串是字符串，要严谨</li>
<li>数字能加减乘除，字符串不行</li>
<li>字符串能表示电话号码，数字不行</li>
</ul>
<p>存储形式不同</p>
<ul>
<li><strong>JS中，数字 number 是用64位浮点数的形式存储的</strong></li>
<li>JS中，字符串是用类似 UTF8 形式存储的（UCS-2)</li>
</ul>
<h2 id="如何存数字">如何存数字</h2>
<blockquote>
<p>进制转二进制即可</p>
</blockquote>
<h3 id="二进制">二进制</h3>
<p>10转2</p>
<ul>
<li>31变成二进制：</li>
<li>经过一番尝试：</li>
<li>所以31（十进制）= 01111（二进制）</li>
<li>不是套公式吗？程序员从来不套公式 🙃</li>
</ul>
<p>2转10</p>
<ul>
<li>
<p>100011变成十进制</p>
</li>
<li>
<p>每一位乘以2的N次方，然后加起来即可</p>
<p></p>
</li>
</ul>
<h3 id="用十六进制表示二进制">用十六进制表示二进制</h3>
<ul>
<li>
<p>为什么用十六进制，因为二进制写起来太慢了：011110001011010</p>
</li>
<li>
<p>记住 8 4 2 1 对应 X X X X</p>
</li>
<li>
<p><strong>从右往左</strong>每四位改写成一位：<font color="red">011</font><font color="green">1100</font><font color="orange">0101</font><font color="blue">1010</font></p>
<p></p>
</li>
<li>
<p>得到 3，12，5，10；</p>
</li>
<li>
<p>16进制中，把大于9的数字改为ABCDEF</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">0123456789</span> <span class="nx">A</span>  <span class="nx">B</span>  <span class="nx">C</span>  <span class="nx">D</span>  <span class="nx">E</span>  <span class="nx">F</span>
           <span class="mi">10</span> <span class="mi">11</span> <span class="mi">12</span> <span class="mi">13</span> <span class="mi">14</span> <span class="mi">15</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>于是得到 3C5A，你也可以用计算器的程序员模式</p>
<p></p>
</li>
<li>
<p>HEX表示16进制，BIN表示2进制</p>
</li>
<li>
<p>OCT表示8进制，DEC表示10进制</p>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="如何存字符">如何存字符</h2>
<blockquote>
<p>转成数字即可（但字符有几万个，数字只有0-9），解决办法就是把所有字符都编号</p>
<p>注意，<code>&quot;1&quot;</code> 不能用 <code>1</code> 来表示</p>
</blockquote>
<h3 id="用-0--127-表示所有符号">用 0 ~ 127 表示所有符号</h3>
<p>（2^7^ = 128）</p>
<ul>
<li>0 表示结束字符</li>
<li>10 表示换行</li>
<li>13 表示回车</li>
<li>32 表示空格</li>
<li>33 到 47 表示标点</li>
<li><strong>48 到 57 表示数字符号</strong>（存 0 用 48 表示）</li>
<li>65 到 90 表示大写字母（存 A 用 65 表示）</li>
<li>97 到 122 表示小写字母（存 a 用 97 表示）</li>
<li>127 表示删除键</li>
</ul>
<p></p>
<h3 id="中文怎么表示">中文怎么表示？</h3>
<blockquote>
<p>1990-1995年左右，中国开始有人买得起电脑了</p>
</blockquote>
<p>简单，还是编号</p>
<p><em><strong>中国国家标准局</strong></em>来编，名称为「国标23121」</p>
<p>​</p>
<h4 id="用-0000--ffff-表示汉字">用 0000 ~ FFFF 表示汉字</h4>
<blockquote>
<p>用两个字节，表示一个汉字（一个字节是8个0/1位）</p>
</blockquote>
<ul>
<li>一个 16 进制数是4个0/1位</li>
<li>FFFF 就是 4x4=16 位，也就是两个字节</li>
<li>最多收录 2^16=65536 个字符</li>
<li>但只收录了6000多常用汉字、西文字母和日文假名（没有收录生僻字、繁体字、韩文…）
<ul>
<li>
<p>「你」的 GB2312 编号为 C4E3</p>
</li>
<li>
<p>「牛」的 GB2312 编号为 C5A3</p>
<p></p>
</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="生僻字">生僻字</h3>
<blockquote>
<p>随着计算机的普及，政府、学习开始采用计算机管理录入信息</p>
</blockquote>
<p><strong>中国人的名字里有生僻字！</strong></p>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">李瓛</span> <span class="p">=&gt;</span> <span class="nx">李</span><span class="o">*</span>
<span class="nx">陶喆</span> <span class="p">=&gt;</span> <span class="nx">陶吉吉</span>
</code></pre></td></tr></table>
</div>
</div><p>怎么表示生僻字、繁体字、韩文呢，之前的忘了编进去</p>
<blockquote>
<p>微软出手了，推出了一个国标扩展，简称 GBK</p>
</blockquote>
<p>​</p>
<h4 id="gbk-国标扩httpszhwikipediaorgwikie6b189e5ad97e58685e7a081e689a9e5b195e8a784e88c83">GBK <a href="https://zh.wikipedia.org/wiki/%E6%B1%89%E5%AD%97%E5%86%85%E7%A0%81%E6%89%A9%E5%B1%95%E8%A7%84%E8%8C%83" target="_blank" rel="noopener noreffer">国标扩</a></h4>
<ul>
<li>含 21886 个汉字和图形符号</li>
<li>收录了中日韩使用的几乎所有汉字</li>
<li>完全兼容 GB2312</li>
</ul>
<p>依然使用 16 位（两字节）</p>
<ul>
<li>后来国标局推出 GB18030 想取代 GBK</li>
<li>但 GB18030 不兼容 GB2312，导致没人使用 GB18030，而是一直使用国标扩</li>
</ul>
<p></p>
<p>​</p>
<h3 id="泰文藏文">泰文、藏文</h3>
<p></p>
<blockquote>
<p>继续编号，这回一次性解决全世界需求</p>
<p>—— 推出 万国码 Unicode 字符集</p>
</blockquote>
<p>​</p>
<h3 id="万国码-unicode">万国码 Unicode</h3>
<p>优点</p>
<ul>
<li>
<p>已收录13万字符（大于16位），全世界通用</p>
</li>
<li>
<p>以后还会继续扩充，不会停止</p>
</li>
<li>
<p>最新版(2019)只添加了一个字 —— 令和的合体字 （日本的新元号）</p>
<ul>
<li>
<p>日文有很多合体字。如，「株式会社」被合成一个字；元号也都被合成一个字</p>
<p></p>
</li>
</ul>
</li>
</ul>
<p>缺点</p>
<ul>
<li>两个字节不够用，每个字符要用三个及以上字节</li>
<li>这样所有文件都扩大50%，不划算</li>
<li>那怎么办？
<ul>
<li>虽然用Unicode，但存的时候偷懒，这样行不行</li>
<li>UTF-8 就被发明出来了，还真行</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="utf-8">UTF-8</h3>
<blockquote>
<p>Unicode 是字符集，UTF-8是编码形式</p>
</blockquote>
<h4 id="鸡贼的存法">鸡贼的存法</h4>
<blockquote>
<p>英文用 1 个字节存，中文用 3 个字节存</p>
</blockquote>
<p>存储「a」</p>
<ul>
<li>a 对应的 Unicode 编号为 97，十六进制为61</li>
<li>Unicode 直接存：<font color="blue">00000000</font><font color="red">000000000</font>1100001</li>
<li>UTF-8 偷懒存法：01100001</li>
<li>UTF-8 使得所有字母，从三字节变一字节，比 GBK 还省</li>
</ul>
<p>存储「你」</p>
<ul>
<li>你 对应的 Unicode 编号为 4F60（16位）</li>
<li>Unicode 直接存：<font color="blue">00000000</font><font color="red">01001111</font>01100000</li>
<li>UTF-8 偷懒存法：<font color="blue">11100100</font><font color="red">10111101</font>10100000</li>
<li>还是三字节，没有省，但是字母都能省一点</li>
</ul>
<p>UTF-8 中的 8 的意思是</p>
<ul>
<li>最少可用 8 位，存一个字符。（可能用 8/16/24 位存一个字符）</li>
</ul>
<h4 id="utf-8-的规则">UTF-8 的规则</h4>
<blockquote>
<p>这一块看不懂就跳过，反正不考。记住去餐馆排队的比喻即可</p>
</blockquote>
<p>以「你a」为例</p>
<ul>
<li>11100100 10111101 10100000 01100001</li>
<li>如何知道上述内容表示什么字符？</li>
<li>读 8 位信息 1110<font color="orange">0100</font></li>
<li><strong>发现开头有3个1，就认为这个字符有3个八位</strong></li>
<li>于是再往后读两个 8 位信息 10<font color="orange">111101</font> 10<font color="orange">100000</font>
<ul>
<li>10 表示当前这8位是跟着前面一起的</li>
</ul>
</li>
<li>前面的 10 不要，其他合起来，得 <font color="orange">0100 111101 100000</font></li>
<li><strong>前面补8个0</strong>，这就还原为 Unicode 的「你」了：
00000000<font color="red">01001111</font><font color="green">01100000</font></li>
<li>再读 8 位信息 01100001</li>
<li><strong>发现开头是 0，就认为这个字符只占 8 位</strong></li>
<li><strong>前面补16个0</strong>，这就还原为 Unicode 的「a」 了：
0000000000000000<font color="red">01100001</font></li>
</ul>
<blockquote>
<p>上面 4 个字节，存了两个字符。UTF-8 平均每个字符需要 2 个字节</p>
<p>Unicode 每个字符至少占 3 个字节，UTF-8 的存储方法更节省空间</p>
</blockquote>
<p>​</p>
<h3 id="终于搞清如何存字符了">终于搞清如何存字符了</h3>
<blockquote>
<p>全世界的字符，都是先把字符进行编号，然后存下编号（10进制变2进制）</p>
</blockquote>
<p>​</p>
<h2 id="数字1-和-字符1-的区别">数字1 和 字符1 的区别</h2>
<blockquote>
<p>功能不同：数字1 可以进行运算，加减乘除…  （ 字符只能相加 =&gt; 拼接字符 ）</p>
<p>存储形式不同：数字是转为二进制直接存储，字符需要经过编码变成数字再存储</p>
</blockquote>
<p>数字1 ，最终存的是 1    </p>
<p>字符1 ，最终存的是 49</p>
<p>​</p>
<blockquote>
<p>既然字符也是存的数字，那么计算机怎么知道存的是字符还是数字呢？</p>
</blockquote>
<p>答：计算机并不知道这段0/1是字符还是数字。</p>
<ul>
<li>但计算机可以通过看文件格式判断，如果是 .txt 那就全都是字符串，如果在 Excel 中存一个1 ，就是数字1</li>
<li>计算机并不知道用户存的0/1到底什么意思，但可以通过其他辅助信息得知（如后缀）或者其他方式约定（比如在文件开头约定：0表示数字，1表示字符串，2表示布尔值…这种方式）。</li>
<li>http 只支持字符串，在 html 中写一个1，就是字符串1</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="js-中的数据类型-">JS 中的数据类型 💡</h2>
<p>7 种（大小写无所谓）</p>
<ol>
<li>数字 number</li>
<li>字符串 string</li>
<li>布尔 bool</li>
<li>符号 symbol（JS 从 ruby 抄的，基本没人用）</li>
<li>空 undefined</li>
<li>空 null</li>
<li>对象 object</li>
</ol>
<ul>
<li><strong>总结：四基两空一对象</strong></li>
<li>bigint（新增第8种）</li>
</ul>
<p>以下不是数据类型</p>
<ul>
<li>数组、函数、日期、正则…</li>
<li>它们都是特殊的对象 object，所以它们都属于object</li>
</ul>
<p>​</p>
<h3 id="数字-number">数字 number</h3>
<blockquote>
<p>number 是由64位(0/1)浮点数组成的</p>
<ul>
<li>JS 的 number 全都是以小数（浮点数）的形式存储的，没有单独的整数</li>
</ul>
</blockquote>
<h4 id="写法">写法</h4>
<ul>
<li>整数写法 1</li>
<li>小数写法 0.1</li>
<li>科学计数法 1.23e4  （1.23×10^4^ ）</li>
<li>八进制写法（用得少）
<ul>
<li>0 或 00 或 0o 开头，就是 8进制</li>
<li>0123 或 00123 或 0o123</li>
</ul>
</li>
<li>十六进制写法  0x3F 或 0X3F （用得少）
<ul>
<li>0x 或 0X 开头</li>
</ul>
</li>
<li>二进制写法  0b11 或 0B11（用得少）
<ul>
<li>0b 或 0B 开头</li>
</ul>
</li>
</ul>
<h4 id="特殊值">特殊值</h4>
<ol>
<li>
<p>正0和负0</p>
<ul>
<li>
<p>0分三种：0、+0、-0</p>
</li>
<li>
<p>都是 0，基本没什么区别</p>
</li>
<li>
<p>只在一种情况有区别（要严谨）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">1</span><span class="o">/</span><span class="mi">0</span> <span class="nx">或</span> <span class="mi">1</span><span class="o">/+</span><span class="mi">0</span>   <span class="p">=&gt;</span> <span class="kc">Infinity</span>
<span class="mi">1</span><span class="o">/-</span><span class="mi">0</span>          <span class="p">=&gt;</span> <span class="o">-</span><span class="kc">Infinity</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>无穷大</p>
<ul>
<li>Infinity、+Infinity、-Infinity</li>
</ul>
</li>
<li>
<p>无法表示的数字</p>
<ul>
<li>
<p>NaN (Not a Number)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">0</span><span class="o">/</span><span class="mi">0</span>  <span class="p">=&gt;</span>  <span class="kc">NaN</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>但 NaN 仍是一个数字</p>
</li>
<li>
<p>NaN 永远不会和另一个 NaN 相等</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kc">NaN</span> <span class="o">==</span> <span class="kc">NaN</span>    <span class="c1">// false
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ol>
<h4 id="64位浮点数">64位浮点数</h4>
<blockquote>
<h4 id="网道教程httpswangdoccomjavascripttypesnumberhtml"><a href="https://wangdoc.com/javascript/types/number.html" target="_blank" rel="noopener noreffer">网道教程</a></h4>
<p>JavaScript 内部，<strong>所有数字</strong>都是以64位浮点数形式储存，即使整数也是如此。所以，1与1.0是相同的，是同一个数。 <strong><code>1 === 1.0 // true</code></strong></p>
<p>这就是说，JavaScript 语言的底层根本没有整数，所有数字都是小数（64位浮点数）。容易造成混淆的是，某些运算只有整数才能完成，此时 JavaScript 会自动把64位浮点数，转成32位整数，然后再进行运算，参见《运算符》一章的“位运算”部分。</p>
<p>由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mf">0.1</span> <span class="o">+</span> <span class="mf">0.2</span> <span class="o">===</span> <span class="mf">0.3</span>
<span class="c1">// false
</span><span class="c1"></span>
<span class="mf">0.3</span> <span class="o">/</span> <span class="mf">0.1</span>
<span class="c1">// 2.9999999999999996
</span><span class="c1"></span>
<span class="p">(</span><span class="mf">0.3</span> <span class="o">-</span> <span class="mf">0.2</span><span class="p">)</span> <span class="o">===</span> <span class="p">(</span><span class="mf">0.2</span> <span class="o">-</span> <span class="mf">0.1</span><span class="p">)</span>
<span class="c1">// false
</span></code></pre></td></tr></table>
</div>
</div><p>根据国际标准 IEEE 754，JavaScript 浮点数的64个二进制位，从最左边开始，是这样组成的。</p>
<ul>
<li>第1位：符号位，0表示正数，1表示负数
第2位到第12位（共11位）：指数部分
第13位到第64位（共52位）：小数部分（即有效数字）</li>
</ul>
<p>符号位决定了一个数的正负，指数部分决定了数值的大小，小数部分决定了数值的精度。</p>
<p>&hellip;</p>
</blockquote>
<blockquote>
<p>为什么说【 number 是由 64位(0/1)浮点数组成的】 ？</p>
<p>（看↓图）一共（1+11+52）64 位，就可以表示 js 中的所有数字，包括小数、NaN …</p>
</blockquote>
<p>JS数字的存储形式</p>
<ul>
<li>浮点就是浮动的点，意思就是小数点会乱动</li>
<li>123.456  可以表示为  1.23456 × 10^2^  ，也可以表示为  12345.6 × 10^-2^（0.01）</li>
<li>如果小数点可以浮动，那就是<strong>浮点数</strong></li>
<li>也有<u>定点数</u>，就是指 有效数位、指数数位 都是固定的（少用）</li>
</ul>
<p>​</p>
<p></p>
<p>​</p>
<p>64位存储一个 number</p>
<ul>
<li>符号占1位
<ul>
<li>浮点数的第一位，0表示正号，1表示负号。「+0」的第一位是 0，「-0」的第一位是 1</li>
</ul>
</li>
<li>指数占11位
<ul>
<li>指的是 10 的 n 次方，把这个 n 存到这11位里（11位可以存2048，因为有正负所以范围是 -1023~1024）</li>
</ul>
</li>
<li>有效数字占52位（开头的 1. 省略）
<ul>
<li>10进制的小数，第一位永远可以为 1.xxx  ，如 0.123  =&gt; 1.23 × 10^-1^</li>
</ul>
</li>
</ul>
<p>​</p>
<p>例：存 0.5</p>
<ul>
<li>
<p>先将0.5转为二进制（看0.5是多少个二分之一，凑）=&gt;  <font color="red">1.0 × 2^-1^  </font></p>
</li>
<li>
<p>0.5是1个二分之一，所以 0.5 的二进制是 <font color="red">0.1</font></p>
</li>
<li>
<p>0.1存成64位形式  =&gt;   <font color="red">1.0 × 2^-1^ </font></p>
<table>
<thead>
<tr>
<th>正：0，负：1</th>
<th>指数部分（有正负）</th>
<th>有效数字（省掉第一个1.）</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>-1</td>
<td>0</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>​</p>
<p>例：存 0.625</p>
<ul>
<li>
<p>看0.625有多少个二分之一（转为二进制，凑一下）</p>
</li>
<li>
<p>0.625 = 0.5 + 0.125 = 1/2 + 1/8 = <font color="red">1×2^-1^ + 1×2^-3^ </font></p>
</li>
<li>
<p>所以 0.625 表示成 二进制就是 <font color="red">0.101</font></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mf">0.101</span>
  <span class="err">↑</span> <span class="err">↑</span>
 <span class="o">-</span><span class="mi">1</span> <span class="o">-</span><span class="mi">3</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>0.101存成 64位形式  =&gt;  <font color="red">1.01 × 2^-1^ </font></p>
<table>
<thead>
<tr>
<th>正：0，负：1</th>
<th>指数部分（有正负）</th>
<th>有效数字（省掉第一个1.）</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>-1</td>
<td>01</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>​</p>
<h4 id="范围和精度">范围和精度</h4>
<p>范围（忽略符号位）</p>
<ul>
<li>指数拉满、有效数字拉满，得到最大二进制数字</li>
<li>Number.MAX_VALUE: 1.7976931348623157e+308</li>
<li>指数负方向拉满、有效数字最小 1，得到最小值</li>
<li>Number.MIN_VALUE: 5e-324</li>
</ul>
<p>精度（有效数字）</p>
<ul>
<li>最多只能到 52 + 1 个二进制位表示有效数字</li>
<li>2^53^ 对应的十进制是 9 后面 15 个零</li>
<li>所以 15 位有效数字都能精确表示</li>
<li>16 位有效数字如果小于 90 开头，也能精确表示</li>
<li>9110000000000001 就存不下来</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="字符串-string">字符串 string</h3>
<blockquote>
<p>字符串 string 在 JS 中，每个字符占两个字节（定长）。是阉割版的 UTF8。</p>
<ul>
<li>因为 1995 年发布 JS ，当时 Unicode 并未流行，甚至还没有推出第一个可用版本。</li>
</ul>
</blockquote>
<h4 id="写法-1">写法</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">-</span> <span class="nx">单引号</span> <span class="s1">&#39;你好&#39;</span>
<span class="o">-</span> <span class="nx">双引号</span> <span class="s2">&#34;你好&#34;</span>
<span class="o">-</span> <span class="nx">反引号</span> <span class="sb">`你好`</span>  <span class="p">(</span><span class="nx">ES6</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>注意</p>
<ul>
<li>引号不属于字符串的一部分，就像书名号不属于书名的一部分一样</li>
<li>如果要在单引号里面包含单引号怎么办?</li>
</ul>
<p><strong>错误写法</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;it&#39;</span><span class="nx">s</span> <span class="nx">ok</span><span class="err">&#39;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>JS 引擎会认为  <code>'it'</code>  就结束了，后面的看不懂，可能就会报错</li>
<li>Chrome 中这种写法如果不报错，那就是 Chrome 的误导💩🤬</li>
</ul>
<p><strong>正确写法</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;it\&#39;s ok&#39;</span>  <span class="c1">// 这就是转义
</span><span class="c1"></span><span class="s2">&#34;it&#39;s ok&#34;</span>
<span class="sb">`it&#39;s ok`</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="转义">转义</h4>
<p>用另一种写法表示你想要的东西</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">\&#39;       表示 &#39;
\&#34;       表示 &#34;
\n       表示 换行
\r       表示 回车
\t       表示 tab制表符
\\       表示 \
\uFFFF   表示对应的 Unicode 字符
\xFF     表示前256个 Unicode 字符（16进制）
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;\u4f60&#39;</span>  <span class="p">=&gt;</span>  <span class="s2">&#34;你&#34;</span>
<span class="s1">&#39;\x31&#39;</span>    <span class="p">=&gt;</span>  <span class="s2">&#34;1&#34;</span>   <span class="err">（</span><span class="mi">10</span><span class="nx">进制的49转16进制为</span> <span class="mi">31</span><span class="err">）</span>
<span class="s1">&#39;\x32&#39;</span>    <span class="p">=&gt;</span>  <span class="s2">&#34;2&#34;</span>
<span class="s1">&#39;\x33&#39;</span>    <span class="p">=&gt;</span>  <span class="s2">&#34;3&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="多行字符串">多行字符串</h4>
<p>如果你想要在字符串里<strong>回车</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">s</span><span class="o">=</span><span class="sb">`这样是
</span><span class="sb">可以的
</span><span class="sb">用【反引号】很容易做到`</span>
</code></pre></td></tr></table>
</div>
</div><p>以前没有反引号的时候</p>
<ul>
<li>写起来很麻烦，是比较古老的知识，想了解可以看<a href="https://wangdoc.com/javascript/types/string.html" target="_blank" rel="noopener noreffer">阮一峰的网道教程</a></li>
</ul>
<p>​</p>
<h4 id="字符串的属性">字符串的属性</h4>
<blockquote>
<p>“ 等等，对象才有属性，为什么字符串也有属性 ”</p>
<ul>
<li>记住一点：只有对象才有属性，字符串、数字、布尔是没有属性这么一说的</li>
<li>那为什么这里讲「字符串的属性」？（源于对象，学完对象才能解答）</li>
</ul>
</blockquote>
<h5 id="字符串的长度">字符串的长度</h5>
<ul>
<li>
<p>string.length</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;123&#39;</span><span class="p">.</span><span class="nx">length</span>    <span class="c1">// 3 
</span><span class="c1"></span><span class="s1">&#39;\n\t\r&#39;</span><span class="p">.</span><span class="nx">length</span> <span class="c1">// 3 （1个换行、1个tab、1个回车）
</span><span class="c1"></span><span class="s1">&#39;\\\\\\&#39;</span><span class="p">.</span><span class="nx">length</span> <span class="c1">// 3 （2个反斜杠表示1个\）
</span><span class="c1"></span><span class="s1">&#39;&#39;</span><span class="p">.</span><span class="nx">length</span>       <span class="c1">// 0 （空字符串）
</span><span class="c1"></span><span class="s1">&#39; &#39;</span><span class="p">.</span><span class="nx">length</span>      <span class="c1">// 1 （1个空格字符串）
</span><span class="c1"></span><span class="s1">&#39;  &#39;</span><span class="p">.</span><span class="nx">length</span>     <span class="c1">// 2 （2个空格字符串）
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h5 id="字符串的下标">字符串的下标</h5>
<p>通过下标读取字符</p>
<ul>
<li>
<p>string[index]</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">s</span><span class="o">=</span><span class="s1">&#39;hello&#39;</span>
<span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  <span class="c1">// &#34;h&#34;
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>注意 index 从0开始</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="nx">是第一个字符</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>注意 index 不到 length</p>
<p>一个字符串的最大 index 为 length - 1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">s</span><span class="o">=</span><span class="s1">&#39;hello&#39;</span>
<span class="nx">s</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="c1">// undefined  居然不报错 
</span><span class="c1"></span><span class="nx">s</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="c1">// &#39;o&#39;
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h4 id="base64-转码">base64 转码</h4>
<p>window.btoa</p>
<ul>
<li>正常字符串转为Base64编码的字符串</li>
</ul>
<p>window.atob</p>
<ul>
<li>Base64 编码的字符串转为原来的字符串</li>
</ul>
<p>一般用来隐藏招聘启事里的简历</p>
<ul>
<li>
<p>邮箱：YWJjZGVmZ0BnbWFpbC5jb20=</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">编码</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">btoa</span><span class="p">(</span><span class="s1">&#39;abcdefg@gmail.com&#39;</span><span class="p">)</span>   <span class="c1">// YWJjZGVmZ0BnbWFpbC5jb20=
</span><span class="c1"></span><span class="nx">解码</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">atob</span><span class="p">(</span><span class="s1">&#39;YWJjZGVmZ0BnbWFpbC5jb20=&#39;</span><span class="p">)</span>  <span class="c1">// abcdefg@gmail.com
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>有时候也用来自欺欺人</p>
<ul>
<li>所谓的「加密」，也就能骗过一部分外行</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="布尔-boolean">布尔 boolean</h3>
<blockquote>
<p>真或假</p>
<p>只有两个值：true /  false   （全都小写）</p>
</blockquote>
<h4 id="下列运算符会得到-bool-值">下列运算符会得到 bool 值</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">否定运算</span>  <span class="o">!</span><span class="nx">value</span>
<span class="nx">相等运算</span>  <span class="mi">1</span><span class="o">==</span><span class="mi">2</span><span class="err">、</span><span class="mi">1</span><span class="o">!=</span><span class="mi">2</span><span class="err">、</span><span class="mi">3</span><span class="o">===</span><span class="mi">4</span><span class="err">、</span><span class="mi">3</span><span class="o">!==</span><span class="mi">4</span>
<span class="nx">比较运算</span>  <span class="mi">1</span><span class="o">&gt;</span><span class="mi">2</span><span class="err">、</span><span class="mi">1</span><span class="o">&gt;=</span><span class="mi">2</span><span class="err">、</span><span class="mi">3</span><span class="o">&lt;</span><span class="mi">4</span><span class="err">、</span><span class="mi">3</span><span class="o">&lt;=</span><span class="mi">4</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="if-配-bool">if 配 bool</h4>
<p>if 语句常常需要判断真假</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nx">value</span><span class="p">){...}</span> <span class="k">else</span> <span class="p">{...}</span>
</code></pre></td></tr></table>
</div>
</div><p>问题来了</p>
<ul>
<li>如果 value 是 bool 值还好说</li>
<li>如果 value 不是 bool 值咋办，谁真谁假
<ul>
<li>1 是真还是假，0 是真还是假</li>
<li><code>'1' </code>是真还是假，<code>'0'</code> 是真还是假</li>
</ul>
</li>
</ul>
<h4 id="五个-falsy-值">五个 falsy 值</h4>
<p>falsy 就是相当于 false，但又不是 false 的值</p>
<p>分别是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kc">undefined</span> 
<span class="kc">null</span>  
<span class="mi">0</span>  
<span class="kc">NaN</span>
<span class="s1">&#39;&#39;</span>     <span class="c1">// &#39;&#39;和&#39; &#39;不是一个玩意再次声明，请保持严谨  
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>整个 JavaScript 中，除了上述 5 个 falsy 值 和 false 本身（6个假值）之外</p>
<p>其他任何值都是【真值】，包括数组、函数、对象…</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="undefined-和-null">undefined 和 null</h3>
<blockquote>
<p>两种空类型，空空如也</p>
</blockquote>
<h4 id="为什么有两个空">为什么有两个空</h4>
<ul>
<li>这就是 JS 的原创（💩）之处</li>
<li>其他任何一种语言，都只有一个空类型</li>
</ul>
<h4 id="区别">区别</h4>
<p>没有本质区别</p>
<p>细节一</p>
<ul>
<li>如果一个变量声明了，但没有赋值，那么默认值就是 undefined，而不是 null</li>
</ul>
<p>细节二</p>
<ul>
<li>如果一个函数，没有写 return，那么默认 return undefined，而不是 null</li>
</ul>
<p>细节三</p>
<ul>
<li>前端程序员习惯上，把非对象的空值写为 undefined，把对象的空值写为 null</li>
<li>但仅仅是习惯上而已</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="symbol-符号">symbol 符号</h3>
<blockquote>
<p>不怎么常用的数据类型（大概率完全不会用到）</p>
<p>直接看<a href="https://zhuanlan.zhihu.com/p/22652486" target="_blank" rel="noopener noreffer">文章</a>吧</p>
</blockquote>
<p>更详细更权威的知识参考下面的自学链接。</p>
<p>自学链接：</p>
<p>MDN： <a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="noopener noreffer">Symbol - JavaScript</a></p>
<p>阮一峰：<a href="https://link.zhihu.com/?target=http%3A//es6.ruanyifeng.com/%23docs/symbol" target="_blank" rel="noopener noreffer">ECMAScript 6入门</a></p>
<p>​</p>
<p>​</p>
<h3 id="bigint-20206-新增">bigint （2020.6 新增）</h3>
<blockquote>
<p>2020 年 6 月 JS 新增了一种类型：bigint</p>
<p>关于 bigint 的详细介绍，请看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt" target="_blank" rel="noopener noreffer">MDN</a>。</p>
</blockquote>
<p>目前 bigint 用得很少。面试也基本不考，工作中也较少用到。因为太新了。</p>
<p>​</p>
<p>​</p>
<h2 id="变量声明-var--let--const--">变量声明 var / let / const  ⭐️</h2>
<blockquote>
<p>强烈推荐阅读：《<a href="https://zhuanlan.zhihu.com/p/28140450" target="_blank" rel="noopener noreffer">我用了两个月的时间才理解 let</a>》</p>
</blockquote>
<h3 id="三种声明方式">三种声明方式</h3>
<ol>
<li><code>var a=1</code></li>
<li><code>let a=1</code></li>
<li><code>const a=1</code></li>
<li><code>a=1</code></li>
</ol>
<h4 id="区别-1">区别</h4>
<ol>
<li>var 是过时的、不好用的方式</li>
<li>let 是新的，更合理的方式</li>
<li>const 是声明时必须赋值，且不能再改的方式</li>
<li>最后这种方式是错误的，不准这样声明</li>
</ol>
<h4 id="var-变量提升">var 变量提升</h4>
<ul>
<li>押题时再讲，有兴趣可以提前看<a href="https://wangdoc.com/javascript/basic/grammar.html#%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87" target="_blank" rel="noopener noreffer">网道教程</a></li>
</ul>
<p>​</p>
<h3 id="var-声明">var 声明</h3>
<p>直接跳过</p>
<ul>
<li>我们写代码不用 var</li>
<li>面试押题前单独讲解</li>
</ul>
<p>​</p>
<h3 id="let-声明">let 声明</h3>
<p>规则（特点）</p>
<ol>
<li>遵循<strong>块作用域</strong>，即：使用范围不能超出 { }</li>
<li>不能重复申明</li>
<li>可以赋值，也可以不赋值</li>
<li>必须先声明，再使用。否则报错</li>
<li>全局声明的 let 变量，不会变成 window 的属性</li>
<li>for 循环配合 let 有奇效</li>
</ol>
<p>例 1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 遵循块作用域，使用范围不能超出{}
</span><span class="c1"></span><span class="p">{</span>
  <span class="kd">let</span> <span class="nx">b</span><span class="o">=</span><span class="mi">1</span>  <span class="c1">// let声明的b只能作用在声明的这个{}里面
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>   <span class="c1">// 1
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>   <span class="c1">// Uncaught ReferenceError: b is not defined // 报错：b未被定义
</span></code></pre></td></tr></table>
</div>
</div><p>例 2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">2</span> <span class="c1">// Uncaught SyntaxError: Identifier &#39;a&#39; has already been declared  // 报错：标识符a已被声明
</span></code></pre></td></tr></table>
</div>
</div><p>不能重复声明：在同一个作用域，只能有一个 a</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="p">{</span>
  <span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">2</span>   <span class="c1">// 这样是可以的。因为a是在{}中的，与{}块外面的a不算重复声明
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>例 3</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span>   <span class="c1">// 声明时可以赋值，也可以不赋值
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>  <span class="c1">// undefined
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="kc">true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>例 4</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 必须先声明，再使用，否则报错
</span><span class="c1"></span><span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>  <span class="c1">// Uncaught ReferenceError: Cannot access &#39;b&#39; before initialization
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">b</span><span class="o">=</span><span class="mi">1</span>
<span class="p">}</span>
<span class="c1">// 报错：不能访问 b 在初始化之前
</span></code></pre></td></tr></table>
</div>
</div><p>例 5</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 全局声明的 let 变量，不会变成 window 的属性
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">abc</span><span class="o">=</span><span class="s1">&#39;abc&#39;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">abc</span><span class="p">)</span>  <span class="c1">// undefined
</span><span class="c1"></span>
<span class="kd">var</span> <span class="nx">abc</span> <span class="o">=</span> <span class="s1">&#39;abc&#39;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">abc</span><span class="p">)</span>  <span class="c1">// &#39;abc&#39;  
</span><span class="c1">// 这其实是 var 的 bug 。为什么声明变量会变成 window 上的属性？这是var强加的
</span><span class="c1">// let就改掉这个bug了，let就是单纯声明变量，不做多余操作
</span></code></pre></td></tr></table>
</div>
</div><p>例 6</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="mi">0</span><span class="p">)</span>   <span class="c1">// 5 5 5 5 5
</span><span class="c1"></span><span class="p">}</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="mi">0</span><span class="p">)</span>   <span class="c1">// 0 1 2 3 4 
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="const-声明">const 声明</h3>
<p>规则</p>
<ul>
<li>
<p>跟 let 相同的点</p>
<ul>
<li>遵循 { } 块作用域</li>
<li>不能重复声明</li>
<li>先声明后使用</li>
<li>不会变成 window 属性</li>
</ul>
</li>
<li>
<p>跟 let 只有一条不同：<strong>声明时就要赋值，赋值后不能改</strong></p>
<p>const 声明的是一个 只读变量，也叫做「常量」</p>
</li>
</ul>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// const声明变量，声明时不赋值，就会报错
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">i</span>  
<span class="c1">// Uncaught SyntaxError: Missing initializer in const declaration // 报错：const声明中缺少初始化
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 声明后，又重新赋值，会报错
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="mi">100</span> 
<span class="nx">i</span><span class="o">=</span><span class="mi">101</span> <span class="c1">// Uncaught TypeError: Assignment to constant variable // 报错：赋值给常量
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// for循环中，修改变量值，会报错
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// Uncaught TypeError: Assignment to constant variable // 报错：赋值给常量
</span><span class="c1"></span>  <span class="nx">setTimeout</span><span class="p">(()=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="mi">0</span><span class="p">)</span>  <span class="c1">// 2
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h3 id="指定值同时也指定了类型">指定值，同时也指定了类型</h3>
<blockquote>
<p>变量声明</p>
<ul>
<li>指定了<strong>值</strong>，同时也指定了<strong>类型</strong></li>
<li>但是值和类型都可以随意变化</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>  <span class="c1">// number类型
</span><span class="c1"></span><span class="nx">a</span><span class="o">=</span><span class="mi">2</span>
<span class="nx">a</span><span class="o">=</span><span class="s1">&#39;字符串&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="name-和-name-的区别">name 和 &lsquo;name&rsquo; 的区别</h2>
<h3 id="name-是变量">name 是变量</h3>
<ul>
<li>变量，意味着「值」「类型」可变，可能是 &lsquo;name&rsquo;，也可能是 &lsquo;hello&rsquo;</li>
<li>变量，存在内存的「不知道什么区」</li>
</ul>
<h3 id="name-是字符串常量">&lsquo;name&rsquo; 是字符串、常量</h3>
<ul>
<li>「常量」就是不变量</li>
<li>&lsquo;name&rsquo; 只能是 &lsquo;name&rsquo; ，不能是其他值</li>
<li>字符串，存在「Stack 区」</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="类型转换--">类型转换  ⚡️</h2>
<h3 id="number--string">number =&gt; string</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">String</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>  <span class="c1">// 前端通常不会用这种写法，太麻烦了
</span><span class="c1"></span><span class="nx">n</span> <span class="o">+</span> <span class="s1">&#39;&#39;</span>     <span class="c1">// 前端都是用这种
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nx">n</span><span class="p">))</span>  <span class="c1">// 1 [黑色字符串]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span>       <span class="c1">// 1 [黑色字符串]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="o">+</span><span class="nx">n</span><span class="p">)</span>       <span class="c1">// 1 [黑色字符串]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>          <span class="c1">// 1 [蓝色数字]
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>JS bug</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">String</span><span class="p">(</span><span class="mi">1000000</span><span class="p">)</span>  <span class="c1">// &#34;1000000&#34;
</span><span class="c1"></span><span class="nb">String</span><span class="p">(</span><span class="mi">1000000000000</span><span class="p">)</span>  <span class="c1">// &#34;1000000000000&#34;
</span><span class="c1"></span><span class="nb">String</span><span class="p">(</span><span class="mi">1000000000000000000000000</span><span class="p">)</span>   <span class="c1">// &#34;1e+24&#34; （0变多，就变成科学计数法的字符串了）
</span><span class="c1">// 后来JS补救了：即使0变多，也不会转成科学计数法
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h3 id="string--number">string =&gt; number</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Number</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
<span class="nb">parseInt</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="o">/</span>  <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
<span class="nx">s</span><span class="o">-</span><span class="mi">0</span> <span class="o">/</span> <span class="o">+</span><span class="nx">s</span>    <span class="c1">// 前端都是用这种最省事的写法
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="s1">&#39;123&#39;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Number</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span>     <span class="c1">// 123 [蓝色数字] 
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span>   <span class="c1">// 123 [蓝色数字] 虽然显示的是整数，实际上是小数，number只有一种64位浮点数
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span> <span class="c1">// 123 [蓝色数字]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s</span><span class="o">-</span><span class="mi">0</span><span class="p">)</span>           <span class="c1">// 123 [蓝色数字]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">+</span><span class="nx">s</span><span class="p">)</span>            <span class="c1">// 123 [蓝色数字]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>             <span class="c1">// 123 [黑色字符串]
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>JS bug</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// ES6之前，parseInt()自动识别：看到0开头就认为是8进制
</span><span class="c1"></span><span class="nb">parseInt</span><span class="p">(</span><span class="s1">&#39;0123&#39;</span><span class="p">)</span>  <span class="c1">// 83  (8进制的0123转为10进制 =&gt; 83)  // 1*8^2+2*8^1+3*8^0=83
</span><span class="c1"></span>    
<span class="c1">// ES6之后，parseInt()默认就是10进制
</span><span class="c1"></span><span class="nb">parseInt</span><span class="p">(</span><span class="s1">&#39;0123&#39;</span><span class="p">)</span>  <span class="c1">// 123
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h3 id="x--bool">x =&gt; bool</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Boolean</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
<span class="o">!!</span><span class="nx">x</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 把1/0变成布尔类型
</span><span class="c1"></span><span class="nb">Boolean</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>   <span class="c1">// true
</span><span class="c1"></span><span class="nb">Boolean</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>   <span class="c1">// false
</span><span class="c1"></span>    
<span class="c1">// 上述方法，前端从来不用，太麻烦
</span><span class="c1">// 前端直接用 !! （两次取反） 这种方法因为比较装B，所以在前端界比较流行
</span><span class="c1"></span>    
<span class="o">!!</span><span class="mi">1</span>          <span class="c1">// true
</span><span class="c1"></span><span class="o">!!</span><span class="s1">&#39;aaa&#39;</span>      <span class="c1">// true      （ !!aaa 不加引号就是变量，这里变量需要先声明才能使用）
</span><span class="c1"></span>    
<span class="kd">var</span> <span class="nx">obj</span><span class="o">=</span><span class="p">{};</span> <span class="o">!!</span><span class="nx">obj</span>        <span class="c1">// true
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">foo</span><span class="p">(){};</span> <span class="o">!!</span><span class="nx">foo</span>  <span class="c1">// true
</span><span class="c1"></span>    
    
<span class="o">!!</span><span class="mi">0</span>          <span class="c1">// false
</span><span class="c1"></span><span class="o">!!</span><span class="kc">NaN</span>        <span class="c1">// false
</span><span class="c1"></span><span class="o">!!</span><span class="s1">&#39;&#39;</span>         <span class="c1">// false
</span><span class="c1"></span><span class="o">!!</span><span class="kc">null</span>       <span class="c1">// false
</span><span class="c1"></span><span class="o">!!</span><span class="kc">undefined</span>  <span class="c1">// false
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">!!</span><span class="nx">abc</span>  <span class="c1">// abc is not defined
</span><span class="c1"></span>    
<span class="kd">var</span> <span class="nx">abc</span>
<span class="o">!!</span><span class="nx">abc</span>   <span class="c1">// false
</span><span class="c1"></span>    
<span class="kd">var</span> <span class="nx">abc</span><span class="o">=</span><span class="mi">123</span>
<span class="o">!!</span><span class="nx">abc</span>   <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h3 id="x--string">x =&gt; string</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">String</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> 
<span class="nx">x</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kc">true</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>   <span class="c1">// &#34;true&#34;
</span><span class="c1"></span><span class="kc">false</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>  <span class="c1">// &#34;false&#34;
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>JS bug</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mf">1.</span><span class="nx">toString</span><span class="p">()</span>   <span class="c1">// 报错，js读到「1.」认为这是个小数，后面应该跟着数字，结果读到「t」，就直接报错
</span><span class="c1">// 解决办法
</span><span class="c1"></span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">()</span>   <span class="c1">// &#34;1&#34;
</span><span class="c1"></span><span class="mi">1</span> <span class="p">.</span><span class="nx">toString</span><span class="p">()</span>    <span class="c1">// &#34;1&#34;
</span><span class="c1"></span><span class="mf">1.</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>    <span class="c1">// &#34;1&#34;   // 合法。js读到「1.」认为是 1.0
</span><span class="c1"></span><span class="mf">1.0</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>   <span class="c1">// &#34;1&#34;
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h3 id="补充js-秘密花园">补充：JS 秘密花园</h3>
<blockquote>
<p>Google 搜索 「<a href="https://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="noopener noreffer">JS 秘密花园</a>」，里面就讲了 JS 的各种奇葩事情</p>
</blockquote>]]></description>
</item></channel>
</rss>

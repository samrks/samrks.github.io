<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>笔记 - 标签 - Sam&#39;s Garage</title>
        <link>http://samrks.github.io/tags/%E7%AC%94%E8%AE%B0/</link>
        <description>笔记 - 标签 - Sam&#39;s Garage</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ryuukousen@gmail.com (Sam)</managingEditor>
            <webMaster>ryuukousen@gmail.com (Sam)</webMaster><lastBuildDate>Thu, 27 Aug 2020 01:45:54 &#43;0800</lastBuildDate><atom:link href="http://samrks.github.io/tags/%E7%AC%94%E8%AE%B0/" rel="self" type="application/rss+xml" /><item>
    <title>JS 的数据类型🧐</title>
    <link>http://samrks.github.io/20200827-js%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
    <pubDate>Thu, 27 Aug 2020 01:45:54 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/20200827-js%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
    <description><![CDATA[<p>「如何存数字&amp;字符」「JS 的数据类型」「64位浮点数 」「变量声明 var / let / const」「类型转换」</p>
<p>​</p>
<h2 id="数据为什么需要类型">数据为什么需要类型</h2>
<h3 id="数字与字符串">数字与字符串</h3>
<blockquote>
<p>都是一，为什么要分 <code>1</code> 和 <code>'1'</code></p>
</blockquote>
<p>功能不同</p>
<ul>
<li>数字是数字，字符串是字符串，要严谨</li>
<li>数字能加减乘除，字符串不行</li>
<li>字符串能表示电话号码，数字不行</li>
</ul>
<p>存储形式不同</p>
<ul>
<li><strong>JS中，数字 number 是用64位浮点数的形式存储的</strong></li>
<li>JS中，字符串是用类似 UTF8 形式存储的（UCS-2)</li>
</ul>
<h2 id="如何存数字">如何存数字</h2>
<blockquote>
<p>进制转二进制即可</p>
</blockquote>
<h3 id="二进制">二进制</h3>
<p>10转2</p>
<ul>
<li>31变成二进制：</li>
<li>经过一番尝试：</li>
<li>所以31（十进制）= 01111（二进制）</li>
<li>不是套公式吗？程序员从来不套公式 🙃</li>
</ul>
<p>2转10</p>
<ul>
<li>
<p>100011变成十进制</p>
</li>
<li>
<p>每一位乘以2的N次方，然后加起来即可</p>
<p></p>
</li>
</ul>
<h3 id="用十六进制表示二进制">用十六进制表示二进制</h3>
<ul>
<li>
<p>为什么用十六进制，因为二进制写起来太慢了：011110001011010</p>
</li>
<li>
<p>记住 8 4 2 1 对应 X X X X</p>
</li>
<li>
<p><strong>从右往左</strong>每四位改写成一位：<font color="red">011</font><font color="green">1100</font><font color="orange">0101</font><font color="blue">1010</font></p>
<p></p>
</li>
<li>
<p>得到 3，12，5，10；</p>
</li>
<li>
<p>16进制中，把大于9的数字改为ABCDEF</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">0123456789</span> <span class="nx">A</span>  <span class="nx">B</span>  <span class="nx">C</span>  <span class="nx">D</span>  <span class="nx">E</span>  <span class="nx">F</span>
           <span class="mi">10</span> <span class="mi">11</span> <span class="mi">12</span> <span class="mi">13</span> <span class="mi">14</span> <span class="mi">15</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>于是得到 3C5A，你也可以用计算器的程序员模式</p>
<p></p>
</li>
<li>
<p>HEX表示16进制，BIN表示2进制</p>
</li>
<li>
<p>OCT表示8进制，DEC表示10进制</p>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="如何存字符">如何存字符</h2>
<blockquote>
<p>转成数字即可（但字符有几万个，数字只有0-9），解决办法就是把所有字符都编号</p>
<p>注意，<code>&quot;1&quot;</code> 不能用 <code>1</code> 来表示</p>
</blockquote>
<h3 id="用-0--127-表示所有符号">用 0 ~ 127 表示所有符号</h3>
<p>（2^7^ = 128）</p>
<ul>
<li>0 表示结束字符</li>
<li>10 表示换行</li>
<li>13 表示回车</li>
<li>32 表示空格</li>
<li>33 到 47 表示标点</li>
<li><strong>48 到 57 表示数字符号</strong>（存 0 用 48 表示）</li>
<li>65 到 90 表示大写字母（存 A 用 65 表示）</li>
<li>97 到 122 表示小写字母（存 a 用 97 表示）</li>
<li>127 表示删除键</li>
</ul>
<p></p>
<h3 id="中文怎么表示">中文怎么表示？</h3>
<blockquote>
<p>1990-1995年左右，中国开始有人买得起电脑了</p>
</blockquote>
<p>简单，还是编号</p>
<p><em><strong>中国国家标准局</strong></em>来编，名称为「国标23121」</p>
<p>​</p>
<h4 id="用-0000--ffff-表示汉字">用 0000 ~ FFFF 表示汉字</h4>
<blockquote>
<p>用两个字节，表示一个汉字（一个字节是8个0/1位）</p>
</blockquote>
<ul>
<li>一个 16 进制数是4个0/1位</li>
<li>FFFF 就是 4x4=16 位，也就是两个字节</li>
<li>最多收录 2^16=65536 个字符</li>
<li>但只收录了6000多常用汉字、西文字母和日文假名（没有收录生僻字、繁体字、韩文…）
<ul>
<li>
<p>「你」的 GB2312 编号为 C4E3</p>
</li>
<li>
<p>「牛」的 GB2312 编号为 C5A3</p>
<p></p>
</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="生僻字">生僻字</h3>
<blockquote>
<p>随着计算机的普及，政府、学习开始采用计算机管理录入信息</p>
</blockquote>
<p><strong>中国人的名字里有生僻字！</strong></p>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">李瓛</span> <span class="p">=&gt;</span> <span class="nx">李</span><span class="o">*</span>
<span class="nx">陶喆</span> <span class="p">=&gt;</span> <span class="nx">陶吉吉</span>
</code></pre></td></tr></table>
</div>
</div><p>怎么表示生僻字、繁体字、韩文呢，之前的忘了编进去</p>
<blockquote>
<p>微软出手了，推出了一个国标扩展，简称 GBK</p>
</blockquote>
<p>​</p>
<h4 id="gbk-国标扩httpszhwikipediaorgwikie6b189e5ad97e58685e7a081e689a9e5b195e8a784e88c83">GBK <a href="https://zh.wikipedia.org/wiki/%E6%B1%89%E5%AD%97%E5%86%85%E7%A0%81%E6%89%A9%E5%B1%95%E8%A7%84%E8%8C%83" target="_blank" rel="noopener noreffer">国标扩</a></h4>
<ul>
<li>含 21886 个汉字和图形符号</li>
<li>收录了中日韩使用的几乎所有汉字</li>
<li>完全兼容 GB2312</li>
</ul>
<p>依然使用 16 位（两字节）</p>
<ul>
<li>后来国标局推出 GB18030 想取代 GBK</li>
<li>但 GB18030 不兼容 GB2312，导致没人使用 GB18030，而是一直使用国标扩</li>
</ul>
<p></p>
<p>​</p>
<h3 id="泰文藏文">泰文、藏文</h3>
<p></p>
<blockquote>
<p>继续编号，这回一次性解决全世界需求</p>
<p>—— 推出 万国码 Unicode 字符集</p>
</blockquote>
<p>​</p>
<h3 id="万国码-unicode">万国码 Unicode</h3>
<p>优点</p>
<ul>
<li>
<p>已收录13万字符（大于16位），全世界通用</p>
</li>
<li>
<p>以后还会继续扩充，不会停止</p>
</li>
<li>
<p>最新版(2019)只添加了一个字 —— 令和的合体字 （日本的新元号）</p>
<ul>
<li>
<p>日文有很多合体字。如，「株式会社」被合成一个字；元号也都被合成一个字</p>
<p></p>
</li>
</ul>
</li>
</ul>
<p>缺点</p>
<ul>
<li>两个字节不够用，每个字符要用三个及以上字节</li>
<li>这样所有文件都扩大50%，不划算</li>
<li>那怎么办？
<ul>
<li>虽然用Unicode，但存的时候偷懒，这样行不行</li>
<li>UTF-8 就被发明出来了，还真行</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="utf-8">UTF-8</h3>
<blockquote>
<p>Unicode 是字符集，UTF-8是编码形式</p>
</blockquote>
<h4 id="鸡贼的存法">鸡贼的存法</h4>
<blockquote>
<p>英文用 1 个字节存，中文用 3 个字节存</p>
</blockquote>
<p>存储「a」</p>
<ul>
<li>a 对应的 Unicode 编号为 97，十六进制为61</li>
<li>Unicode 直接存：<font color="blue">00000000</font><font color="red">000000000</font>1100001</li>
<li>UTF-8 偷懒存法：01100001</li>
<li>UTF-8 使得所有字母，从三字节变一字节，比 GBK 还省</li>
</ul>
<p>存储「你」</p>
<ul>
<li>你 对应的 Unicode 编号为 4F60（16位）</li>
<li>Unicode 直接存：<font color="blue">00000000</font><font color="red">01001111</font>01100000</li>
<li>UTF-8 偷懒存法：<font color="blue">11100100</font><font color="red">10111101</font>10100000</li>
<li>还是三字节，没有省，但是字母都能省一点</li>
</ul>
<p>UTF-8 中的 8 的意思是</p>
<ul>
<li>最少可用 8 位，存一个字符。（可能用 8/16/24 位存一个字符）</li>
</ul>
<h4 id="utf-8-的规则">UTF-8 的规则</h4>
<blockquote>
<p>这一块看不懂就跳过，反正不考。记住去餐馆排队的比喻即可</p>
</blockquote>
<p>以「你a」为例</p>
<ul>
<li>11100100 10111101 10100000 01100001</li>
<li>如何知道上述内容表示什么字符？</li>
<li>读 8 位信息 1110<font color="orange">0100</font></li>
<li><strong>发现开头有3个1，就认为这个字符有3个八位</strong></li>
<li>于是再往后读两个 8 位信息 10<font color="orange">111101</font> 10<font color="orange">100000</font>
<ul>
<li>10 表示当前这8位是跟着前面一起的</li>
</ul>
</li>
<li>前面的 10 不要，其他合起来，得 <font color="orange">0100 111101 100000</font></li>
<li><strong>前面补8个0</strong>，这就还原为 Unicode 的「你」了：
00000000<font color="red">01001111</font><font color="green">01100000</font></li>
<li>再读 8 位信息 01100001</li>
<li><strong>发现开头是 0，就认为这个字符只占 8 位</strong></li>
<li><strong>前面补16个0</strong>，这就还原为 Unicode 的「a」 了：
0000000000000000<font color="red">01100001</font></li>
</ul>
<blockquote>
<p>上面 4 个字节，存了两个字符。UTF-8 平均每个字符需要 2 个字节</p>
<p>Unicode 每个字符至少占 3 个字节，UTF-8 的存储方法更节省空间</p>
</blockquote>
<p>​</p>
<h3 id="终于搞清如何存字符了">终于搞清如何存字符了</h3>
<blockquote>
<p>全世界的字符，都是先把字符进行编号，然后存下编号（10进制变2进制）</p>
</blockquote>
<p>​</p>
<h2 id="数字1-和-字符1-的区别">数字1 和 字符1 的区别</h2>
<blockquote>
<p>功能不同：数字1 可以进行运算，加减乘除…  （ 字符只能相加 =&gt; 拼接字符 ）</p>
<p>存储形式不同：数字是转为二进制直接存储，字符需要经过编码变成数字再存储</p>
</blockquote>
<p>数字1 ，最终存的是 1    </p>
<p>字符1 ，最终存的是 49</p>
<p>​</p>
<blockquote>
<p>既然字符也是存的数字，那么计算机怎么知道存的是字符还是数字呢？</p>
</blockquote>
<p>答：计算机并不知道这段0/1是字符还是数字。</p>
<ul>
<li>但计算机可以通过看文件格式判断，如果是 .txt 那就全都是字符串，如果在 Excel 中存一个1 ，就是数字1</li>
<li>计算机并不知道用户存的0/1到底什么意思，但可以通过其他辅助信息得知（如后缀）或者其他方式约定（比如在文件开头约定：0表示数字，1表示字符串，2表示布尔值…这种方式）。</li>
<li>http 只支持字符串，在 html 中写一个1，就是字符串1</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="js-中的数据类型-">JS 中的数据类型 💡</h2>
<p>7 种（大小写无所谓）</p>
<ul>
<li>数字 number</li>
<li>字符串 string</li>
<li>布尔 bool</li>
<li>符号 symbol（JS 从 ruby 抄的，基本没人用）</li>
<li>空 undefined</li>
<li>空 null</li>
<li>对象 object</li>
<li><strong>总结：四基两空一对象</strong></li>
</ul>
<p>以下不是数据类型</p>
<ul>
<li>数组、函数、日期、正则…</li>
<li>它们都是特殊的对象 object，所以它们都属于object</li>
</ul>
<p>​</p>
<h3 id="数字-number">数字 number</h3>
<blockquote>
<p>number 是由64位(0/1)浮点数组成的</p>
<ul>
<li>JS 的 number 全都是以小数（浮点数）的形式存储的，没有单独的整数</li>
</ul>
</blockquote>
<h4 id="写法">写法</h4>
<ul>
<li>整数写法 1</li>
<li>小数写法 0.1</li>
<li>科学计数法 1.23e4  （1.23×10^4^ ）</li>
<li>八进制写法（用得少）
<ul>
<li>0 或 00 或 0o 开头，就是 8进制</li>
<li>0123 或 00123 或 0o123</li>
</ul>
</li>
<li>十六进制写法  0x3F 或 0X3F （用得少）
<ul>
<li>0x 或 0X 开头</li>
</ul>
</li>
<li>二进制写法  0b11 或 0B11（用得少）
<ul>
<li>0b 或 0B 开头</li>
</ul>
</li>
</ul>
<h4 id="特殊值">特殊值</h4>
<ol>
<li>
<p>正0和负0</p>
<ul>
<li>
<p>0分三种：0、+0、-0</p>
</li>
<li>
<p>都是 0，基本没什么区别</p>
</li>
<li>
<p>只在一种情况有区别（要严谨）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">1</span><span class="o">/</span><span class="mi">0</span> <span class="nx">或</span> <span class="mi">1</span><span class="o">/+</span><span class="mi">0</span>   <span class="p">=&gt;</span> <span class="kc">Infinity</span>
<span class="mi">1</span><span class="o">/-</span><span class="mi">0</span>          <span class="p">=&gt;</span> <span class="o">-</span><span class="kc">Infinity</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>无穷大</p>
<ul>
<li>Infinity、+Infinity、-Infinity</li>
</ul>
</li>
<li>
<p>无法表示的数字</p>
<ul>
<li>
<p>NaN (Not a Number)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">0</span><span class="o">/</span><span class="mi">0</span>  <span class="p">=&gt;</span>  <span class="kc">NaN</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>但 NaN 仍是一个数字</p>
</li>
<li>
<p>NaN 永远不会和另一个 NaN 相等</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kc">NaN</span> <span class="o">==</span> <span class="kc">NaN</span>    <span class="c1">// false
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ol>
<h4 id="64位浮点数">64位浮点数</h4>
<blockquote>
<h4 id="网道教程httpswangdoccomjavascripttypesnumberhtml"><a href="https://wangdoc.com/javascript/types/number.html" target="_blank" rel="noopener noreffer">网道教程</a></h4>
<p>JavaScript 内部，<strong>所有数字</strong>都是以64位浮点数形式储存，即使整数也是如此。所以，1与1.0是相同的，是同一个数。 <strong><code>1 === 1.0 // true</code></strong></p>
<p>这就是说，JavaScript 语言的底层根本没有整数，所有数字都是小数（64位浮点数）。容易造成混淆的是，某些运算只有整数才能完成，此时 JavaScript 会自动把64位浮点数，转成32位整数，然后再进行运算，参见《运算符》一章的“位运算”部分。</p>
<p>由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mf">0.1</span> <span class="o">+</span> <span class="mf">0.2</span> <span class="o">===</span> <span class="mf">0.3</span>
<span class="c1">// false
</span><span class="c1"></span>
<span class="mf">0.3</span> <span class="o">/</span> <span class="mf">0.1</span>
<span class="c1">// 2.9999999999999996
</span><span class="c1"></span>
<span class="p">(</span><span class="mf">0.3</span> <span class="o">-</span> <span class="mf">0.2</span><span class="p">)</span> <span class="o">===</span> <span class="p">(</span><span class="mf">0.2</span> <span class="o">-</span> <span class="mf">0.1</span><span class="p">)</span>
<span class="c1">// false
</span></code></pre></td></tr></table>
</div>
</div><p>根据国际标准 IEEE 754，JavaScript 浮点数的64个二进制位，从最左边开始，是这样组成的。</p>
<ul>
<li>第1位：符号位，0表示正数，1表示负数
第2位到第12位（共11位）：指数部分
第13位到第64位（共52位）：小数部分（即有效数字）</li>
</ul>
<p>符号位决定了一个数的正负，指数部分决定了数值的大小，小数部分决定了数值的精度。</p>
<p>&hellip;</p>
</blockquote>
<blockquote>
<p>为什么说【 number 是由 64位(0/1)浮点数组成的】 ？</p>
<p>（看↓图）一共（1+11+52）64 位，就可以表示 js 中的所有数字，包括小数、NaN …</p>
</blockquote>
<p>JS数字的存储形式</p>
<ul>
<li>浮点就是浮动的点，意思就是小数点会乱动</li>
<li>123.456  可以表示为  1.23456 × 10^2^  ，也可以表示为  12345.6 × 10^-2^（0.01）</li>
<li>如果小数点可以浮动，那就是<strong>浮点数</strong></li>
<li>也有<u>定点数</u>，就是指 有效数位、指数数位 都是固定的（少用）</li>
</ul>
<p>​</p>
<p></p>
<p>​</p>
<p>64位存储一个 number</p>
<ul>
<li>符号占1位
<ul>
<li>浮点数的第一位，0表示正号，1表示负号。「+0」的第一位是 0，「-0」的第一位是 1</li>
</ul>
</li>
<li>指数占11位
<ul>
<li>指的是 10 的 n 次方，把这个 n 存到这11位里（11位可以存2048，因为有正负所以范围是 -1023~1024）</li>
</ul>
</li>
<li>有效数字占52位（开头的 1. 省略）
<ul>
<li>10进制的小数，第一位永远可以为 1.xxx  ，如 0.123  =&gt; 1.23 × 10^-1^</li>
</ul>
</li>
</ul>
<p>​</p>
<p>例：存 0.5</p>
<ul>
<li>
<p>先将0.5转为二进制（看0.5是多少个二分之一，凑）=&gt;  <font color="red">1.0 × 2^-1^  </font></p>
</li>
<li>
<p>0.5是1个二分之一，所以 0.5 的二进制是 <font color="red">0.1</font></p>
</li>
<li>
<p>0.1存成64位形式  =&gt;   <font color="red">1.0 × 2^-1^ </font></p>
<table>
<thead>
<tr>
<th>正：0，负：1</th>
<th>指数部分（有正负）</th>
<th>有效数字（省掉第一个1.）</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>-1</td>
<td>0</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>​</p>
<p>例：存 0.625</p>
<ul>
<li>
<p>看0.625有多少个二分之一（转为二进制，凑一下）</p>
</li>
<li>
<p>0.625 = 0.5 + 0.125 = 1/2 + 1/8 = <font color="red">1×2^-1^ + 1×2^-3^ </font></p>
</li>
<li>
<p>所以 0.625 表示成 二进制就是 <font color="red">0.101</font></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mf">0.101</span>
  <span class="err">↑</span> <span class="err">↑</span>
 <span class="o">-</span><span class="mi">1</span> <span class="o">-</span><span class="mi">3</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>0.101存成 64位形式  =&gt;  <font color="red">1.01 × 2^-1^ </font></p>
<table>
<thead>
<tr>
<th>正：0，负：1</th>
<th>指数部分（有正负）</th>
<th>有效数字（省掉第一个1.）</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>-1</td>
<td>01</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>​</p>
<h4 id="范围和精度">范围和精度</h4>
<p>范围（忽略符号位）</p>
<ul>
<li>指数拉满、有效数字拉满，得到最大二进制数字</li>
<li>Number.MAX_VALUE: 1.7976931348623157e+308</li>
<li>指数负方向拉满、有效数字最小 1，得到最小值</li>
<li>Number.MIN_VALUE: 5e-324</li>
</ul>
<p>精度（有效数字）</p>
<ul>
<li>最多只能到 52 + 1 个二进制位表示有效数字</li>
<li>2^53^ 对应的十进制是 9 后面 15 个零</li>
<li>所以 15 位有效数字都能精确表示</li>
<li>16 位有效数字如果小于 90 开头，也能精确表示</li>
<li>9110000000000001 就存不下来</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="字符串-string">字符串 string</h3>
<blockquote>
<p>字符串 string 在 JS 中，每个字符占两个字节（定长）。是阉割版的 UTF8。</p>
<ul>
<li>因为 1995 年发布 JS ，当时 Unicode 并未流行，甚至还没有推出第一个可用版本。</li>
</ul>
</blockquote>
<h4 id="写法-1">写法</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">-</span> <span class="nx">单引号</span> <span class="s1">&#39;你好&#39;</span>
<span class="o">-</span> <span class="nx">双引号</span> <span class="s2">&#34;你好&#34;</span>
<span class="o">-</span> <span class="nx">反引号</span> <span class="sb">`你好`</span>  <span class="p">(</span><span class="nx">ES6</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>注意</p>
<ul>
<li>引号不属于字符串的一部分，就像书名号不属于书名的一部分一样</li>
<li>如果要在单引号里面包含单引号怎么办?</li>
</ul>
<p><strong>错误写法</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;it&#39;</span><span class="nx">s</span> <span class="nx">ok</span><span class="err">&#39;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>JS 引擎会认为  <code>'it'</code>  就结束了，后面的看不懂，可能就会报错</li>
<li>Chrome 中这种写法如果不报错，那就是 Chrome 的误导💩🤬</li>
</ul>
<p><strong>正确写法</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;it\&#39;s ok&#39;</span>  <span class="c1">// 这就是转义
</span><span class="c1"></span><span class="s2">&#34;it&#39;s ok&#34;</span>
<span class="sb">`it&#39;s ok`</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="转义">转义</h4>
<p>用另一种写法表示你想要的东西</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">\&#39;       表示 &#39;
\&#34;       表示 &#34;
\n       表示 换行
\r       表示 回车
\t       表示 tab制表符
\\       表示 \
\uFFFF   表示对应的 Unicode 字符
\xFF     表示前256个 Unicode 字符（16进制）
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;\u4f60&#39;</span>  <span class="p">=&gt;</span>  <span class="s2">&#34;你&#34;</span>
<span class="s1">&#39;\x31&#39;</span>    <span class="p">=&gt;</span>  <span class="s2">&#34;1&#34;</span>   <span class="err">（</span><span class="mi">10</span><span class="nx">进制的49转16进制为</span> <span class="mi">31</span><span class="err">）</span>
<span class="s1">&#39;\x32&#39;</span>    <span class="p">=&gt;</span>  <span class="s2">&#34;2&#34;</span>
<span class="s1">&#39;\x33&#39;</span>    <span class="p">=&gt;</span>  <span class="s2">&#34;3&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="多行字符串">多行字符串</h4>
<p>如果你想要在字符串里<strong>回车</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">s</span><span class="o">=</span><span class="sb">`这样是
</span><span class="sb">可以的
</span><span class="sb">用【反引号】很容易做到`</span>
</code></pre></td></tr></table>
</div>
</div><p>以前没有反引号的时候</p>
<ul>
<li>写起来很麻烦，是比较古老的知识，想了解可以看<a href="https://wangdoc.com/javascript/types/string.html" target="_blank" rel="noopener noreffer">阮一峰的网道教程</a></li>
</ul>
<p>​</p>
<h4 id="字符串的属性">字符串的属性</h4>
<blockquote>
<p>“ 等等，对象才有属性，为什么字符串也有属性 ”</p>
<ul>
<li>记住一点：只有对象才有属性，字符串、数字、布尔是没有属性这么一说的</li>
<li>那为什么这里讲「字符串的属性」？（源于对象，学完对象才能解答）</li>
</ul>
</blockquote>
<h5 id="字符串的长度">字符串的长度</h5>
<ul>
<li>
<p>string.length</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;123&#39;</span><span class="p">.</span><span class="nx">length</span>    <span class="c1">// 3 
</span><span class="c1"></span><span class="s1">&#39;\n\t\r&#39;</span><span class="p">.</span><span class="nx">length</span> <span class="c1">// 3 （1个换行、1个tab、1个回车）
</span><span class="c1"></span><span class="s1">&#39;\\\\\\&#39;</span><span class="p">.</span><span class="nx">length</span> <span class="c1">// 3 （2个反斜杠表示1个\）
</span><span class="c1"></span><span class="s1">&#39;&#39;</span><span class="p">.</span><span class="nx">length</span>       <span class="c1">// 0 （空字符串）
</span><span class="c1"></span><span class="s1">&#39; &#39;</span><span class="p">.</span><span class="nx">length</span>      <span class="c1">// 1 （1个空格字符串）
</span><span class="c1"></span><span class="s1">&#39;  &#39;</span><span class="p">.</span><span class="nx">length</span>     <span class="c1">// 2 （2个空格字符串）
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h5 id="字符串的下标">字符串的下标</h5>
<p>通过下标读取字符</p>
<ul>
<li>
<p>string[index]</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">s</span><span class="o">=</span><span class="s1">&#39;hello&#39;</span>
<span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  <span class="c1">// &#34;h&#34;
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>注意 index 从0开始</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="nx">是第一个字符</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>注意 index 不到 length</p>
<p>一个字符串的最大 index 为 length - 1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">s</span><span class="o">=</span><span class="s1">&#39;hello&#39;</span>
<span class="nx">s</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="c1">// undefined  居然不报错 
</span><span class="c1"></span><span class="nx">s</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="c1">// &#39;o&#39;
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h4 id="base64-转码">base64 转码</h4>
<p>window.btoa</p>
<ul>
<li>正常字符串转为Base64编码的字符串</li>
</ul>
<p>window.atob</p>
<ul>
<li>Base64 编码的字符串转为原来的字符串</li>
</ul>
<p>一般用来隐藏招聘启事里的简历</p>
<ul>
<li>
<p>邮箱：YWJjZGVmZ0BnbWFpbC5jb20=</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">编码</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">btoa</span><span class="p">(</span><span class="s1">&#39;abcdefg@gmail.com&#39;</span><span class="p">)</span>   <span class="c1">// YWJjZGVmZ0BnbWFpbC5jb20=
</span><span class="c1"></span><span class="nx">解码</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">atob</span><span class="p">(</span><span class="s1">&#39;YWJjZGVmZ0BnbWFpbC5jb20=&#39;</span><span class="p">)</span>  <span class="c1">// abcdefg@gmail.com
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>有时候也用来自欺欺人</p>
<ul>
<li>所谓的「加密」，也就能骗过一部分外行</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="布尔-boolean">布尔 boolean</h3>
<blockquote>
<p>真或假</p>
<p>只有两个值：true /  false   （全都小写）</p>
</blockquote>
<h4 id="下列运算符会得到-bool-值">下列运算符会得到 bool 值</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">否定运算</span>  <span class="o">!</span><span class="nx">value</span>
<span class="nx">相等运算</span>  <span class="mi">1</span><span class="o">==</span><span class="mi">2</span><span class="err">、</span><span class="mi">1</span><span class="o">!=</span><span class="mi">2</span><span class="err">、</span><span class="mi">3</span><span class="o">===</span><span class="mi">4</span><span class="err">、</span><span class="mi">3</span><span class="o">!==</span><span class="mi">4</span>
<span class="nx">比较运算</span>  <span class="mi">1</span><span class="o">&gt;</span><span class="mi">2</span><span class="err">、</span><span class="mi">1</span><span class="o">&gt;=</span><span class="mi">2</span><span class="err">、</span><span class="mi">3</span><span class="o">&lt;</span><span class="mi">4</span><span class="err">、</span><span class="mi">3</span><span class="o">&lt;=</span><span class="mi">4</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="if-配-bool">if 配 bool</h4>
<p>if 语句常常需要判断真假</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nx">value</span><span class="p">){...}</span> <span class="k">else</span> <span class="p">{...}</span>
</code></pre></td></tr></table>
</div>
</div><p>问题来了</p>
<ul>
<li>如果 value 是 bool 值还好说</li>
<li>如果 value 不是 bool 值咋办，谁真谁假
<ul>
<li>1 是真还是假，0 是真还是假</li>
<li><code>'1' </code>是真还是假，<code>'0'</code> 是真还是假</li>
</ul>
</li>
</ul>
<h4 id="五个-falsy-值">五个 falsy 值</h4>
<p>falsy 就是相当于 false，但又不是 false 的值</p>
<p>分别是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kc">undefined</span> 
<span class="kc">null</span>  
<span class="mi">0</span>  
<span class="kc">NaN</span>
<span class="s1">&#39;&#39;</span>     <span class="c1">// &#39;&#39;和&#39; &#39;不是一个玩意再次声明，请保持严谨  
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>整个 JavaScript 中，除了上述 5 个 falsy 值 和 false 本身（6个假值）之外</p>
<p>其他任何值都是【真值】，包括数组、函数、对象…</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="undefined-和-null">undefined 和 null</h3>
<blockquote>
<p>两种空类型，空空如也</p>
</blockquote>
<h4 id="为什么有两个空">为什么有两个空</h4>
<ul>
<li>这就是 JS 的原创（💩）之处</li>
<li>其他任何一种语言，都只有一个空类型</li>
</ul>
<h4 id="区别">区别</h4>
<p>没有本质区别</p>
<p>细节一</p>
<ul>
<li>如果一个变量声明了，但没有赋值，那么默认值就是 undefined，而不是 null</li>
</ul>
<p>细节二</p>
<ul>
<li>如果一个函数，没有写 return，那么默认 return undefined，而不是 null</li>
</ul>
<p>细节三</p>
<ul>
<li>前端程序员习惯上，把非对象的空值写为 undefined，把对象的空值写为 null</li>
<li>但仅仅是习惯上而已</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="symbol-符号">symbol 符号</h3>
<blockquote>
<p>不怎么常用的数据类型（大概率完全不会用到）</p>
<p>直接看<a href="https://zhuanlan.zhihu.com/p/22652486" target="_blank" rel="noopener noreffer">文章</a>吧</p>
</blockquote>
<p>更详细更权威的知识参考下面的自学链接。</p>
<p>自学链接：</p>
<p>MDN： <a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="noopener noreffer">Symbol - JavaScript</a></p>
<p>阮一峰：<a href="https://link.zhihu.com/?target=http%3A//es6.ruanyifeng.com/%23docs/symbol" target="_blank" rel="noopener noreffer">ECMAScript 6入门</a></p>
<p>​</p>
<p>​</p>
<h3 id="bigint-20206-新增">bigint （2020.6 新增）</h3>
<blockquote>
<p>2020 年 6 月 JS 新增了一种类型：bigint</p>
<p>关于 bigint 的详细介绍，请看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt" target="_blank" rel="noopener noreffer">MDN</a>。</p>
</blockquote>
<p>目前 bigint 用得很少。面试也基本不考，工作中也较少用到。因为太新了。</p>
<p>​</p>
<p>​</p>
<h2 id="变量声明-var--let--const--">变量声明 var / let / const  ⭐️</h2>
<blockquote>
<p>强烈推荐阅读：《<a href="https://zhuanlan.zhihu.com/p/28140450" target="_blank" rel="noopener noreffer">我用了两个月的时间才理解 let</a>》</p>
</blockquote>
<h3 id="三种声明方式">三种声明方式</h3>
<ol>
<li><code>var a=1</code></li>
<li><code>let a=1</code></li>
<li><code>const a=1</code></li>
<li><code>a=1</code></li>
</ol>
<h4 id="区别-1">区别</h4>
<ol>
<li>var 是过时的、不好用的方式</li>
<li>let 是新的，更合理的方式</li>
<li>const 是声明时必须赋值，且不能再改的方式</li>
<li>最后这种方式是错误的，不准这样声明</li>
</ol>
<h4 id="var-变量提升">var 变量提升</h4>
<ul>
<li>押题时再讲，有兴趣可以提前看<a href="https://wangdoc.com/javascript/basic/grammar.html#%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87" target="_blank" rel="noopener noreffer">网道教程</a></li>
</ul>
<p>​</p>
<h3 id="var-声明">var 声明</h3>
<p>直接跳过</p>
<ul>
<li>我们写代码不用 var</li>
<li>面试押题前单独讲解</li>
</ul>
<p>​</p>
<h3 id="let-声明">let 声明</h3>
<p>规则（特点）</p>
<ol>
<li>遵循<strong>块作用域</strong>，即：使用范围不能超出 { }</li>
<li>不能重复申明</li>
<li>可以赋值，也可以不赋值</li>
<li>必须先声明，再使用。否则报错</li>
<li>全局声明的 let 变量，不会变成 window 的属性</li>
<li>for 循环配合 let 有奇效</li>
</ol>
<p>例 1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 遵循块作用域，使用范围不能超出{}
</span><span class="c1"></span><span class="p">{</span>
  <span class="kd">let</span> <span class="nx">b</span><span class="o">=</span><span class="mi">1</span>  <span class="c1">// let声明的b只能作用在声明的这个{}里面
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>   <span class="c1">// 1
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>   <span class="c1">// Uncaught ReferenceError: b is not defined // 报错：b未被定义
</span></code></pre></td></tr></table>
</div>
</div><p>例 2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">2</span> <span class="c1">// Uncaught SyntaxError: Identifier &#39;a&#39; has already been declared  // 报错：标识符a已被声明
</span></code></pre></td></tr></table>
</div>
</div><p>不能重复声明：在同一个作用域，只能有一个 a</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="p">{</span>
  <span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">2</span>   <span class="c1">// 这样是可以的。因为a是在{}中的，与{}块外面的a不算重复声明
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>例 3</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span>   <span class="c1">// 声明时可以赋值，也可以不赋值
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>  <span class="c1">// undefined
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="kc">true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>例 4</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 必须先声明，再使用，否则报错
</span><span class="c1"></span><span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>  <span class="c1">// Uncaught ReferenceError: Cannot access &#39;b&#39; before initialization
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">b</span><span class="o">=</span><span class="mi">1</span>
<span class="p">}</span>
<span class="c1">// 报错：不能访问 b 在初始化之前
</span></code></pre></td></tr></table>
</div>
</div><p>例 5</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 全局声明的 let 变量，不会变成 window 的属性
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">abc</span><span class="o">=</span><span class="s1">&#39;abc&#39;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">abc</span><span class="p">)</span>  <span class="c1">// undefined
</span><span class="c1"></span>
<span class="kd">var</span> <span class="nx">abc</span> <span class="o">=</span> <span class="s1">&#39;abc&#39;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">abc</span><span class="p">)</span>  <span class="c1">// &#39;abc&#39;  
</span><span class="c1">// 这其实是 var 的 bug 。为什么声明变量会变成 window 上的属性？这是var强加的
</span><span class="c1">// let就改掉这个bug了，let就是单纯声明变量，不做多余操作
</span></code></pre></td></tr></table>
</div>
</div><p>例 6</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="mi">0</span><span class="p">)</span>   <span class="c1">// 5 5 5 5 5
</span><span class="c1"></span><span class="p">}</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="mi">0</span><span class="p">)</span>   <span class="c1">// 0 1 2 3 4 
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="const-声明">const 声明</h3>
<p>规则</p>
<ul>
<li>
<p>跟 let 相同的点</p>
<ul>
<li>遵循 { } 块作用域</li>
<li>不能重复声明</li>
<li>先声明后使用</li>
<li>不会变成 window 属性</li>
</ul>
</li>
<li>
<p>跟 let 只有一条不同：<strong>声明时就要赋值，赋值后不能改</strong></p>
<p>const 声明的是一个 只读变量，也叫做「常量」</p>
</li>
</ul>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// const声明变量，声明时不赋值，就会报错
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">i</span>  
<span class="c1">// Uncaught SyntaxError: Missing initializer in const declaration // 报错：const声明中缺少初始化
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 声明后，又重新赋值，会报错
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="mi">100</span> 
<span class="nx">i</span><span class="o">=</span><span class="mi">101</span> <span class="c1">// Uncaught TypeError: Assignment to constant variable // 报错：赋值给常量
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// for循环中，修改变量值，会报错
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// Uncaught TypeError: Assignment to constant variable // 报错：赋值给常量
</span><span class="c1"></span>  <span class="nx">setTimeout</span><span class="p">(()=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="mi">0</span><span class="p">)</span>  <span class="c1">// 2
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h3 id="指定值同时也指定了类型">指定值，同时也指定了类型</h3>
<blockquote>
<p>变量声明</p>
<ul>
<li>指定了<strong>值</strong>，同时也指定了<strong>类型</strong></li>
<li>但是值和类型都可以随意变化</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>  <span class="c1">// number类型
</span><span class="c1"></span><span class="nx">a</span><span class="o">=</span><span class="mi">2</span>
<span class="nx">a</span><span class="o">=</span><span class="s1">&#39;字符串&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="name-和-name-的区别">name 和 &lsquo;name&rsquo; 的区别</h2>
<h3 id="name-是变量">name 是变量</h3>
<ul>
<li>变量，意味着「值」「类型」可变，可能是 &lsquo;name&rsquo;，也可能是 &lsquo;hello&rsquo;</li>
<li>变量，存在内存的「不知道什么区」</li>
</ul>
<h3 id="name-是字符串常量">&lsquo;name&rsquo; 是字符串、常量</h3>
<ul>
<li>「常量」就是不变量</li>
<li>&lsquo;name&rsquo; 只能是 &lsquo;name&rsquo; ，不能是其他值</li>
<li>字符串，存在「Stack 区」</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="类型转换--">类型转换  ⚡️</h2>
<h3 id="number--string">number =&gt; string</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">String</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>  <span class="c1">// 前端通常不会用这种写法，太麻烦了
</span><span class="c1"></span><span class="nx">n</span> <span class="o">+</span> <span class="s1">&#39;&#39;</span>     <span class="c1">// 前端都是用这种
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nx">n</span><span class="p">))</span>  <span class="c1">// 1 [黑色字符串]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span>       <span class="c1">// 1 [黑色字符串]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="o">+</span><span class="nx">n</span><span class="p">)</span>       <span class="c1">// 1 [黑色字符串]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>          <span class="c1">// 1 [蓝色数字]
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>JS bug</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">String</span><span class="p">(</span><span class="mi">1000000</span><span class="p">)</span>  <span class="c1">// &#34;1000000&#34;
</span><span class="c1"></span><span class="nb">String</span><span class="p">(</span><span class="mi">1000000000000</span><span class="p">)</span>  <span class="c1">// &#34;1000000000000&#34;
</span><span class="c1"></span><span class="nb">String</span><span class="p">(</span><span class="mi">1000000000000000000000000</span><span class="p">)</span>   <span class="c1">// &#34;1e+24&#34; （0变多，就变成科学计数法的字符串了）
</span><span class="c1">// 后来JS补救了：即使0变多，也不会转成科学计数法
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h3 id="string--number">string =&gt; number</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Number</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
<span class="nb">parseInt</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="o">/</span>  <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
<span class="nx">s</span><span class="o">-</span><span class="mi">0</span> <span class="o">/</span> <span class="o">+</span><span class="nx">s</span>    <span class="c1">// 前端都是用这种最省事的写法
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="s1">&#39;123&#39;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Number</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span>     <span class="c1">// 123 [蓝色数字] 
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span>   <span class="c1">// 123 [蓝色数字] 虽然显示的是整数，实际上是小数，number只有一种64位浮点数
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span> <span class="c1">// 123 [蓝色数字]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s</span><span class="o">-</span><span class="mi">0</span><span class="p">)</span>           <span class="c1">// 123 [蓝色数字]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">+</span><span class="nx">s</span><span class="p">)</span>            <span class="c1">// 123 [蓝色数字]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>             <span class="c1">// 123 [黑色字符串]
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>JS bug</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// ES6之前，parseInt()自动识别：看到0开头就认为是8进制
</span><span class="c1"></span><span class="nb">parseInt</span><span class="p">(</span><span class="s1">&#39;0123&#39;</span><span class="p">)</span>  <span class="c1">// 83  (8进制的0123转为10进制 =&gt; 83)  // 1*8^2+2*8^1+3*8^0=83
</span><span class="c1"></span>    
<span class="c1">// ES6之后，parseInt()默认就是10进制
</span><span class="c1"></span><span class="nb">parseInt</span><span class="p">(</span><span class="s1">&#39;0123&#39;</span><span class="p">)</span>  <span class="c1">// 123
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h3 id="x--bool">x =&gt; bool</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Boolean</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
<span class="o">!!</span><span class="nx">x</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 把1/0变成布尔类型
</span><span class="c1"></span><span class="nb">Boolean</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>   <span class="c1">// true
</span><span class="c1"></span><span class="nb">Boolean</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>   <span class="c1">// false
</span><span class="c1"></span>    
<span class="c1">// 上述方法，前端从来不用，太麻烦
</span><span class="c1">// 前端直接用 !! （两次取反） 这种方法因为比较装B，所以在前端界比较流行
</span><span class="c1"></span>    
<span class="o">!!</span><span class="mi">1</span>          <span class="c1">// true
</span><span class="c1"></span><span class="o">!!</span><span class="s1">&#39;aaa&#39;</span>      <span class="c1">// true      （ !!aaa 不加引号就是变量，这里变量需要先声明才能使用）
</span><span class="c1"></span>    
<span class="kd">var</span> <span class="nx">obj</span><span class="o">=</span><span class="p">{};</span> <span class="o">!!</span><span class="nx">obj</span>        <span class="c1">// true
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">foo</span><span class="p">(){};</span> <span class="o">!!</span><span class="nx">foo</span>  <span class="c1">// true
</span><span class="c1"></span>    
    
<span class="o">!!</span><span class="mi">0</span>          <span class="c1">// false
</span><span class="c1"></span><span class="o">!!</span><span class="kc">NaN</span>        <span class="c1">// false
</span><span class="c1"></span><span class="o">!!</span><span class="s1">&#39;&#39;</span>         <span class="c1">// false
</span><span class="c1"></span><span class="o">!!</span><span class="kc">null</span>       <span class="c1">// false
</span><span class="c1"></span><span class="o">!!</span><span class="kc">undefined</span>  <span class="c1">// false
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">!!</span><span class="nx">abc</span>  <span class="c1">// abc is not defined
</span><span class="c1"></span>    
<span class="kd">var</span> <span class="nx">abc</span>
<span class="o">!!</span><span class="nx">abc</span>   <span class="c1">// false
</span><span class="c1"></span>    
<span class="kd">var</span> <span class="nx">abc</span><span class="o">=</span><span class="mi">123</span>
<span class="o">!!</span><span class="nx">abc</span>   <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h3 id="x--string">x =&gt; string</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">String</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> 
<span class="nx">x</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kc">true</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>   <span class="c1">// &#34;true&#34;
</span><span class="c1"></span><span class="kc">false</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>  <span class="c1">// &#34;false&#34;
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>JS bug</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mf">1.</span><span class="nx">toString</span><span class="p">()</span>   <span class="c1">// 报错，js读到「1.」认为这是个小数，后面应该跟着数字，结果读到「t」，就直接报错
</span><span class="c1">// 解决办法
</span><span class="c1"></span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">()</span>   <span class="c1">// &#34;1&#34;
</span><span class="c1"></span><span class="mi">1</span> <span class="p">.</span><span class="nx">toString</span><span class="p">()</span>    <span class="c1">// &#34;1&#34;
</span><span class="c1"></span><span class="mf">1.</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>    <span class="c1">// &#34;1&#34;   // 合法。js读到「1.」认为是 1.0
</span><span class="c1"></span><span class="mf">1.0</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>   <span class="c1">// &#34;1&#34;
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h3 id="补充js-秘密花园">补充：JS 秘密花园</h3>
<blockquote>
<p>Google 搜索 「<a href="https://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="noopener noreffer">JS 秘密花园</a>」，里面就讲了 JS 的各种奇葩事情</p>
</blockquote>]]></description>
</item><item>
    <title>JS 的基本语法⚙️</title>
    <link>http://samrks.github.io/20200824-js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
    <pubDate>Mon, 24 Aug 2020 22:15:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/20200824-js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
    <description><![CDATA[<p>内容包括「什么是表达式和语句」「标识符的规则」「 if else 语句」「 while for 语句」「 label 」</p>
<h2 id="推荐书籍">推荐书籍</h2>
<ol>
<li>适合入门《<a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener noreffer">网道 JavaScript 教程</a>》</li>
<li>适合进阶《<a href="https://book.douban.com/subject/26351021/" target="_blank" rel="noopener noreffer">你不知道的 JavaScript（上卷）</a>》</li>
</ol>
<h2 id="js-语法-">JS 语法 ⭐️</h2>
<blockquote>
<p>开始学习</p>
</blockquote>
<h3 id="表达式与语句">表达式与语句</h3>
<p>表达式</p>
<ul>
<li>1+2 表达式的值为 3</li>
<li>add(1,2) 表达式的值为函数的<strong>返回值</strong></li>
<li>console.log 表达式的值为函数本身（因为没加括号）</li>
<li>console.log(3) 表达式的值为多少？（<strong>面试</strong>)
<ul>
<li>表达式的值就是函数的返回值 ，log函数的返回值为 undefined</li>
<li>所以 console.log(3) 表达式的值为 undefined</li>
</ul>
</li>
</ul>
<p>语句</p>
<ul>
<li>var a=1 是一个语句</li>
</ul>
<p>二者的区别</p>
<ul>
<li>表达式一般都有值，语句可能有也可能没有</li>
<li>语句一般会改变环境（声明、赋值）</li>
<li>上面两句话并不是绝对的</li>
</ul>
<h3 id="大小写敏感">大小写敏感</h3>
<p>不要写错</p>
<ul>
<li>var a 和 var A 是不同的</li>
<li>object 和 Object 是不同的</li>
<li>function 和 Function 是不同的</li>
<li>具体含义后面说</li>
</ul>
<h3 id="空格">空格</h3>
<p>大部分空格没有实际意义</p>
<ul>
<li>
<p><code>var    a    =    1</code> 和 <code>var a=1</code> 没有区别</p>
</li>
<li>
<p>加回车，大部分时候也不影响</p>
</li>
<li>
<p>只有一个地方不能加回车，那就是 return 后面</p>
<ul>
<li>
<p>return 后面不加东西，js 会自动补充成  return undefined</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="k">return</span> <span class="mi">3</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="k">return</span> <span class="p">[</span><span class="kc">undefined</span><span class="p">]</span>    <span class="c1">// return 和 3 之间加了一个回车，js会自动补充为 return undefined
</span><span class="c1"></span>  <span class="mi">3</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>  </p>
</li>
</ul>
<ul>
<li>唯独 return 后面不能加回车，其他多离谱的回车都没问题</li>
</ul>
</li>
</ul>
<h3 id="标识符">标识符</h3>
<h4 id="规则">规则</h4>
<ul>
<li>
<p>第一个字符，可以是 <code>Unicode 字母</code> /  <code>$</code> / <code>_</code>  /  <code>中文</code></p>
</li>
<li>
<p>后面的字符，除了上面所说，还可以有数字</p>
</li>
<li>
<p>注意，首位不能是数字</p>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="mi">9</span><span class="nx">$</span>
<span class="nx">Uncaught</span> <span class="nx">SyntaxError</span><span class="o">:</span> <span class="nx">Invalid</span> <span class="nx">or</span> <span class="nx">unexpected</span> <span class="nx">token</span> <span class="c1">// SyntaxError意为语法错误，token理解成字符串
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="变量名是标识符">变量名是标识符</h4>
<p>以下都是合法的标识符用法</p>
<ul>
<li><code>var _ = 1 </code></li>
<li><code>var $ = 2 </code></li>
<li><code>var ______= 6 </code></li>
<li><code>var 你好 = 'hi'</code></li>
<li>其他标识符用到再说</li>
</ul>
<h3 id="注释">注释</h3>
<blockquote>
<p>谣言：“ 写代码要多写注释。”</p>
<p>注释，分为：好的注释、不好的注释</p>
</blockquote>
<h4 id="不好的注释">不好的注释</h4>
<blockquote>
<p>不好的注释：告诉别人我写了什么</p>
</blockquote>
<ol>
<li>
<p>把代码翻译成中文</p>
<p>可能埋没了重要的注释。有用的信息和噪音的比例（信噪比）要低</p>
<p></p>
</li>
<li>
<p>过时的注释</p>
</li>
<li>
<p>发泄不满的注释</p>
</li>
</ol>
<h4 id="好的注释">好的注释</h4>
<blockquote>
<p>好的注释：告诉别人为什么我要这么写</p>
</blockquote>
<ol>
<li>
<p>踩坑注解</p>
</li>
<li>
<p>为什么代码会写得这么奇怪，遇到什么 bug</p>
<ul>
<li>遇到某个 bug，代码非得这么奇怪的写，才能避开这个 bug（这种也需要注释出来）</li>
</ul>
</li>
</ol>
<h3 id="区块-block">区块 block</h3>
<ul>
<li>
<p>把代码包在一起</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
  <span class="kd">let</span> <span class="nx">b</span><span class="o">=</span><span class="mi">2</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>常常与 if / for / while 合用</p>
</li>
</ul>
<h2 id="if-语句">if 语句</h2>
<blockquote>
<p>如果 … 那么 …</p>
</blockquote>
<h3 id="语法">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span><span class="nx">语句1</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">语句2</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>{ } 在语句只有一句的时候可以省略，不建议这样做</li>
</ul>
<h3 id="变态情况">变态情况</h3>
<ul>
<li>
<p>(表达式) 里可以非常变态，如 a=1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">2</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a是1&#39;</span><span class="p">)</span>   <span class="c1">// 最终打印这句，因为 = 是赋值，=== 才是判断是否相等
</span><span class="c1"></span><span class="p">}</span><span class="k">else</span><span class="p">{</span>
  <span class="nx">console</span><span class="mf">.1</span><span class="nx">og</span><span class="p">(</span><span class="s1">&#39;a不是1&#39;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>语句1 里可以非常变态，如嵌套的 if else</p>
</li>
<li>
<p>语句2 里可以非常变态，如嵌套的 if else</p>
</li>
<li>
<p>缩进也可以很变态，如面试题常常下套</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>上述代码执行结果为：</p>
<p>因为不写 { } 时，只默认<strong>第一个语句</strong>是跟随 if 条件的，有一个**无形的 { } **括住了第一句，相当于下面效果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>注：<strong>js 中是没有【行】的概念</strong>，即使两句写在一行，结果不变，仍是只括住<strong>第一个语句</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">);</span> <span class="p">}</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>如果用 逗号分隔呢？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span> <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a???&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li>逗号，表示这句话没结束。所以默认两个 console 就变成一个语句了（效果如上）</li>
<li>分号；表示这句话结束了。</li>
</ul>
</li>
</ul>
<h3 id="使用最没有歧义的写法">使用最没有歧义的写法</h3>
<h4 id="最推荐使用的写法">最推荐使用的写法</h4>
<blockquote>
<p>永远不要省略花括号 { }，即使只有一个语句。这是最不会产生歧义的写法</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
	<span class="nx">语句</span>
<span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
  <span class="nx">语句</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
  <span class="nx">语句</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="次推荐使用的写法">次推荐使用的写法</h4>
<blockquote>
<p>该写法，只在函数里有用</p>
<p>基于函数 return 的特点：执行 return ，函数就结束了，不再往下执行</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">表达式</span>
  <span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">表达式</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">表达式</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="switch-语句">switch 语句</h2>
<blockquote>
<p>if…else…升级版</p>
<p>JS 的 switch 语句设计的不算精致，但确实在某些情况时，比 if…else… 好用</p>
</blockquote>
<h3 id="语法-1">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">switch</span><span class="p">(</span><span class="nx">fruit</span><span class="p">){</span> 
  <span class="k">case</span> <span class="s2">&#34;banana&#34;</span><span class="err">：</span>
    <span class="c1">//...
</span><span class="c1"></span>    <span class="k">break</span><span class="err">；</span> 
  <span class="k">case</span> <span class="s2">&#34;apple&#34;</span><span class="o">:</span>
    <span class="c1">//...
</span><span class="c1"></span>    <span class="k">break</span><span class="err">；</span> 
  <span class="k">default</span><span class="o">:</span>
    <span class="c1">//...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="break">break</h3>
<ol>
<li>
<p>**大部分时候，省略 break 你就完蛋了 **</p>
<ul>
<li>当条件符合 banana 时，执行某些语句 …  ，遇到 break 跳出 switch</li>
<li>如果没有 break，就会向下跳过<code>case 'apple'</code>，直接执行 apple 的语句 …</li>
<li>看起来很鸡肋</li>
</ul>
</li>
<li>
<p><strong>少部分时候，可以利用 break</strong></p>
<ul>
<li>
<p>最早为什么这么设计 break 呢？</p>
</li>
<li>
<p>是为了方便「 满足多个条件（case）时 」的判断</p>
<ul>
<li>如下，case 1 可以默认贯穿到 case 3  （初衷是好的）</li>
</ul>
<p>​       </p>
</li>
</ul>
</li>
<li>
<p><a href="https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html" target="_blank" rel="noopener noreffer">Swift</a> 的 switch case 语句设计，完爆 JS 的 switch case  （apple 出的语言）</p>
<ul>
<li>执行完一个 case，默认跳出，无需 break</li>
<li>多条件判断：可以直接在一个 case 下写多个条件句 ，无需去掉 break 来表示贯穿</li>
<li>综上，JS 出现的太早了，没有抄到一个好的 switch case</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">switch</span> <span class="nx">some</span> <span class="nx">value</span> <span class="nx">to</span> <span class="nx">consider</span> <span class="p">{</span>
<span class="k">case</span> <span class="nx">value</span> <span class="mi">1</span><span class="o">:</span>
    <span class="nx">respond</span> <span class="nx">to</span> <span class="nx">value</span> <span class="mi">1</span>
<span class="k">case</span> <span class="nx">value</span> <span class="mi">2</span><span class="p">,</span>
     <span class="nx">value</span> <span class="mi">3</span><span class="o">:</span>
    <span class="nx">respond</span> <span class="nx">to</span> <span class="nx">value</span> <span class="mi">2</span> <span class="nx">or</span> <span class="mi">3</span>
<span class="k">default</span><span class="o">:</span>
    <span class="nx">otherwise</span><span class="p">,</span> <span class="k">do</span> <span class="nx">something</span> <span class="k">else</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ol>
<h2 id="问号冒号三元表达式">问号冒号（三元）表达式</h2>
<blockquote>
<p><strong><code>表达式1 ? 表达式2 : 表达式3 </code></strong>    表达式</p>
<p>最简单的 if…else… 的写法，能用问号冒号就不用 if…else…</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 求两个数的最大值
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">)</span> <span class="k">return</span> <span class="nx">a</span><span class="p">;</span>
  <span class="k">else</span> <span class="k">return</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">a</span><span class="o">&gt;</span><span class="nx">b</span> <span class="o">?</span> <span class="nx">a</span><span class="o">:</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="c1">// 求绝对值
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">abs</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">n</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">?</span> <span class="nx">n</span><span class="o">:</span> <span class="o">-</span><span class="nx">n</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="-短路逻辑">&amp;&amp; 短路逻辑</h2>
<p>与运算</p>
<blockquote>
<ul>
<li>A &amp;&amp; B &amp;&amp; C &amp;&amp; D
<ul>
<li>取第一个假值，后面就不看了</li>
<li>如果ABC都为真，就取 D。</li>
</ul>
</li>
<li>一般整句表达式的值，不会出现取 true / false，而是取 ABCD 中的一个</li>
<li>只要整个表达式中，有一个是假，整个式子就是假</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">b</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span>  <span class="c1">// 理解：a&amp;&amp;b 等价于，如果a是真，就执行b，否则就什么都不执行
</span><span class="c1"></span>  <span class="nx">b</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span> 
  
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">5</span> <span class="o">&amp;&amp;</span> <span class="mi">5</span>
<span class="kc">false</span>
<span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">5</span>
<span class="mi">5</span>
<span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;前面全对了&#39;</span><span class="p">)</span>
<span class="nx">前面全对了</span>
<span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">5</span><span class="o">&lt;</span><span class="mi">0</span>
<span class="kc">false</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">f1</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;f1存在&#39;</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 上下效果等价：如果 window.f1为 true ，就会执行 conosole.log(&#39;f1存在&#39;)
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">f1</span> <span class="o">&amp;&amp;</span> <span class="nx">conosole</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;f1存在&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>前端中，如果能写成 &amp;&amp; 的语句，就不写 if…else… 语句</p>
</blockquote>
<h3 id="最常见的用法">最常见的用法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">fn</span> <span class="o">&amp;&amp;</span> <span class="nx">fn</span><span class="p">()</span>  <span class="c1">// 如果 fn 存在就执行 fn
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>  
<span class="c1">// 如果console存在，就判断console.log是否存在，也存在，就执行打印 hi
</span><span class="c1"></span><span class="cm">/* 这么写有什么意义？
</span><span class="cm">   因为 IE 没有 console，如果用 IE 就不执行 console，不然 IE 会报错 */</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="-短路逻辑-1">|| 短路逻辑</h2>
<p>或运算</p>
<blockquote>
<ul>
<li>
<p>A || B || C || D</p>
<ul>
<li>
<p>取第一个真值，后面就都不看了。</p>
</li>
<li>
<p>如果ABC都为假，就取 D</p>
</li>
</ul>
</li>
<li>
<p>一般整句表达式的值，不会出现取 true / false，而是取 ABCD 中的一个</p>
</li>
<li>
<p>只要整个表达式中，有一个是真，整个式子就是 真</p>
</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">a</span><span class="o">||</span><span class="nx">b</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">){</span>  <span class="c1">// 理解：a||b 等价于，如果a不是真，就执行b，否则就什么都不执行
</span><span class="c1"></span>  <span class="nx">b</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
  
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>如果能写成 || 的语句，就不写 if…else…</p>
</blockquote>
<h3 id="最常见的用法-1">最常见的用法</h3>
<p>例：前端中经常有一个种写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">||</span> <span class="mi">100</span> 

<span class="c1">// 理解：如果a存在就什么都不做，否则 a=100
</span><span class="c1"></span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span>  <span class="c1">// 自己赋给自己，相当于什么都不做
</span><span class="c1"></span><span class="p">}</span><span class="k">else</span><span class="p">{</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="mi">100</span>  <span class="c1">// 保底值
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="总结条件语句">总结：条件语句</h2>
<ul>
<li>if … else…
<ul>
<li>if…else…的逻辑是最常用的，但是很多情况并不使用它。代码简短时，会用更简便的代码替代这种写法</li>
</ul>
</li>
<li>switch case
<ul>
<li>不能少了 break</li>
</ul>
</li>
<li>A ? B : C
<ul>
<li>相当常用（A若为真，执行B，A若为假，执行C）</li>
</ul>
</li>
<li>A &amp;&amp; B
<ul>
<li>相当常用，举例：fn &amp;&amp; fn()    （ fn 存在就执行 fn ）</li>
</ul>
</li>
<li>A || B
<ul>
<li>相当常用，举例： A = A || B    （A 存在时就什么都不执行，A 不存在时 B 就是 A 的保底值）</li>
</ul>
</li>
</ul>
<h2 id="while-循环">while 循环</h2>
<blockquote>
<p>用的不多</p>
</blockquote>
<h3 id="语法-2">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">while</span> <span class="p">(</span><span class="nx">表达式</span><span class="p">)</span> <span class="p">{</span> <span class="nx">语句</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>判断表达式的真假</li>
<li>当表达式为真，执行语句，执行完再判断表达式的真假</li>
<li>直到遇到表达式为假，跳出循环，执行后面的语句</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1">// 初始化
</span><span class="c1"></span><span class="k">while</span><span class="p">(</span><span class="nx">a</span> <span class="o">!==</span> <span class="mi">10</span><span class="p">){</span>   <span class="c1">// 判断条件
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>   <span class="c1">// 循环体
</span><span class="c1"></span>  <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span><span class="o">+</span><span class="mi">1</span>  <span class="c1">// 增长(为最终能跳出循环)
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>共需要四部分： 1. 初始化  2. 判断条件  3. 循环体  4. 增长</li>
</ul>
<h3 id="其他">其他</h3>
<ul>
<li>do &hellip; while 用得不多，自行了解</li>
</ul>
<h3 id="while-变态情况死循环">while 变态情况：死循环</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">while</span><span class="p">(</span><span class="nx">a</span><span class="o">!==</span><span class="mi">1</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="mf">0.1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>原因：浮点数不精确，导致死循环</p>
<p></p>
<h2 id="for-循环">for 循环</h2>
<blockquote>
<p>for循环 是 while循环 的语法糖</p>
</blockquote>
<h3 id="语法糖">语法糖</h3>
<ul>
<li>for 是 while 循环的方便写法
<ul>
<li>写 while 时需要四部分： 1. 初始化  2. 判断条件  3. 循环体  4. 增长</li>
<li>for 将 while 的写法升级、整合，如下
<ol>
<li>语句1 是用来初始化的</li>
<li>表达式2  是判断条件</li>
<li>语句3 是自增</li>
<li>循环体</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="语法-3">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="nx">语句1</span><span class="p">;</span><span class="nx">表达式2</span><span class="p">;</span><span class="nx">语句3</span><span class="p">){</span>
  <span class="nx">循环体</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ol>
<li>先执行语句1</li>
<li>然后判断表达式2
<ul>
<li>如果为真，执行循环体，然后再执行语句3</li>
<li>如果为假，直接退出循环，执行后面的语句</li>
</ul>
</li>
</ol>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>   <span class="c1">// 0 1 2 3 4
</span><span class="c1"></span><span class="p">}</span>
<span class="c1">// i 5
</span></code></pre></td></tr></table>
</div>
</div><h3 id="变态">变态</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// 5 5 5 5 5
</span><span class="c1"></span>    <span class="c1">// console.log(i + &#39;随机数&#39; + Math.random())  
</span><span class="c1"></span>  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// i 5
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>9 是 Chrome 的 bug。</p>
<p>5个5是正解。</p>
<p>每轮循环触发 setTimeout 相当于设置一个闹钟命令：过一会再执行 setTimeout 中的语句。而过一会之后，for循环已经走完，i 变为 5。然后闹钟到点，依次执行每轮触发的 setTimeout 中的语句，也就是执行 5轮 <code>console.log( i )</code> ，就会打印 5 个 5</p>
<h4 id="解决">解决</h4>
<p>把 var 替换成 let</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// 0 1 2 3 4 
</span><span class="c1"></span>  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="语法变形">语法变形</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="nx">语句1</span><span class="p">;</span><span class="nx">表达式2</span><span class="p">;</span><span class="nx">语句3</span><span class="p">){</span>
  <span class="nx">循环体</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>省略 语句 1 ，可在 for 循环外面定义变量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>    <span class="c1">// 0 1 2 3 4
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>省略 表达式 2 ，会进入死循环</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(;</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>    <span class="c1">// 0 1 2 3 4 5 6...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>省略 语句 2 &amp; 3 ，会进入死循环</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(;</span> <span class="p">;</span> <span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>    <span class="c1">// 0 0 0 0 0 0 0...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="break-和-continue">break 和 continue</h3>
<blockquote>
<p>break 退出所有循环</p>
<p>continue 退出当前一次循环</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">1</span><span class="p">){</span> <span class="c1">// 遇到奇数轮次，退出整个for循环
</span><span class="c1"></span>    <span class="k">break</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 1
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">1</span><span class="p">){</span> <span class="c1">// 遇到奇数轮次，跳过当次循环
</span><span class="c1"></span>    <span class="k">continue</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 0 2 4 6 8
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="label-语法">label 语法</h2>
<blockquote>
<p>用的很少，面试会考（概率5%）</p>
<p>这个知识点，除了用来做面试题之外，毫无用处</p>
</blockquote>
<h3 id="语法-4">语法</h3>
<p>label 语法：在任何情况下，写一个[标识符](# 标识符)，后面写一个代码块 { }（通常包含多句代码），或一句代码</p>
<h4 id="代码块">代码块</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">foo</span><span class="o">:</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">break</span> <span class="nx">foo</span><span class="p">;</span>   <span class="c1">// 跳出foo这个代码块
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;本行不会输出&#39;</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="一句代码">一句代码</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">foo</span><span class="o">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="面试">面试</h3>
<p>1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>   <span class="c1">// 表示代码块只有一行，叫做 1
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>3</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>  <span class="c1">// 一个代码块，第一行是一个标签，标签内容是 1，没有什么实际意义
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>问上面是什么</p>
<p>答： 是一个代码块（属于 label 语法），里面有一个标签 foo，语句就是一个 1</p>
<p>为什么不是一个对象？</p>
<p>答：如果写成下面形式，a 就是对象了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>如果单纯写一个代码块（如下），那就是一个 label，语句为 1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>JavaScript 的发展历史</title>
    <link>http://samrks.github.io/20200812-javascript%E7%9A%84%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/</link>
    <pubDate>Wed, 12 Aug 2020 21:13:23 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/20200812-javascript%E7%9A%84%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/</guid>
    <description><![CDATA[<p>简单了解「学 JS 的基本要求」，重点了解「JS 的诞生与历史」</p>
<p>​</p>
<h2 id="一些链接">一些链接</h2>
<ul>
<li>《<a href="https://www.bilibili.com/video/av15989846/" target="_blank" rel="noopener noreffer">Code Rush</a>》纪录片，记录了 Firefox 开源的过程，里面有 JS 之父的采访</li>
<li><a href="https://www.bilibili.com/video/av3745910/" target="_blank" rel="noopener noreffer">Chrome 的广告</a>，让你了解 Chrome 有多快</li>
<li><a href="https://www.jianshu.com/p/4eb60e47b4bf" target="_blank" rel="noopener noreffer">淘宝天猫不再支持 IE 6/7</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/24091492" target="_blank" rel="noopener noreffer">淘宝天猫不再支持 IE 8</a></li>
<li><a href="http://index.baidu.com/v2/main/index.html#/trend/%e5%89%8d%e7%ab%af?words=%e5%89%8d%e7%ab%af" target="_blank" rel="noopener noreffer">百度指数</a></li>
</ul>
<p>【JavaScript 诞生】相关文章：</p>
<ol>
<li><a href="https://zh.wikipedia.org/wiki/JavaScript#%e5%8e%86%e5%8f%b2" target="_blank" rel="noopener noreffer">JavaScript 的历史</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html" target="_blank" rel="noopener noreffer">JavaScript 诞生记</a>⭐</li>
<li><a href="http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html" target="_blank" rel="noopener noreffer">JavaScript 的10个设计缺陷</a></li>
</ol>
<p>​</p>
<h2 id="前端的门槛">前端的门槛</h2>
<blockquote>
<p>从 JavaScript 开始，你需要绞尽脑汁了</p>
</blockquote>
<p>​</p>
<h2 id="学-js-的基本要求">学 JS 的基本要求</h2>
<h3 id="软要求">软要求</h3>
<blockquote>
<p>对大脑的要求</p>
</blockquote>
<h4 id="一逻辑能力">一、逻辑能力</h4>
<p>逻辑分很多种：抽象逻辑、符号逻辑、三段论逻辑（最常用）…</p>
<p><strong>三段论逻辑</strong></p>
<p>示例</p>
<ul>
<li>JS的数据类型有 number / string / null / undefined / bool / symbol / object 【大前提】</li>
<li>JS的函数不是  number / string / null / undefined / bool / symbol 中的任意一种</li>
<li>所以，JS的函数是object 【根据前两句话，能推出第三句】</li>
</ul>
<p>好处</p>
<ul>
<li>写代码基本就是在<strong>编写逻辑</strong></li>
</ul>
<p>​</p>
<h4 id="二质疑自己的能力">二、质疑自己的能力</h4>
<blockquote>
<p>程序员不要相信人类，包括你自己</p>
</blockquote>
<p>质疑自己、推翻自己</p>
<p></p>
<ul>
<li>出现 bug ，先质疑自己、再质疑机器</li>
<li>大脑中有6个知识点，通过这6个知识点，写出一个bug，可能某个知识点记错了，不要纠结，不要认死理，懂得质疑和推翻自己。直接把错误的知识点从大脑中擦掉，灌入正确的知识点，来更新你的知识</li>
</ul>
<p><strong>回想一下</strong></p>
<p>你犯了多少错误</p>
<ul>
<li>拼错单词</li>
<li>多写了空格、少写了空格</li>
<li>把 O 看成 0，把 0 写成 O</li>
<li>把 iOS 写成 IOS 或者 ios</li>
</ul>
<blockquote>
<p>这不是粗心大意，这是人类不可克服的问题，通过 <strong>double check</strong> 可以缓解</p>
<ul>
<li>正着核对一遍，再反着核对一遍</li>
</ul>
</blockquote>
<p>​</p>
<h4 id="三抽象思维">三、抽象思维</h4>
<blockquote>
<p>高级程序员必备能力</p>
</blockquote>
<p><strong>什么是抽象能力</strong></p>
<p>举例</p>
<ul>
<li>
<p>你订了一份报纸</p>
</li>
<li>
<p>你关注了偶像明星蔡徐坤的微博</p>
</li>
<li>
<p>你用JS监听了一个按钮的点击事件</p>
<blockquote>
<p>对程序员来说，这三件事是一件事，拥有共同的模式：发布订阅模式。</p>
<p>这就是抽象，<strong>把事物的特征进行快速总结</strong>。</p>
<p>多练，初级程序员至少锻炼1年，才能具备这种抽象思维。</p>
<p>具备看到一个事物，就能把它抽离成代码示例的能力。</p>
</blockquote>
</li>
</ul>
<p>好处</p>
<ul>
<li>抽象思维，使你的代码能解决更多的问题</li>
<li>而不是兵来将挡、水来土掩，一个一个解决
<ul>
<li>新手程序员，遇到一个问题就写一段代码</li>
<li>高级程序员，将所有可能问题汇总，写一大坨代码解决全部问题</li>
<li>比如 Vue 和 React 的作者（一套框架解决问题）</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="硬要求">硬要求</h3>
<blockquote>
<p>客观上的要求</p>
</blockquote>
<h4 id="一足够的代码量">一、足够的代码量</h4>
<ul>
<li>达到 1000 行 - 新手</li>
<li>达到 10000 行 - 熟手（至少做过1个比较复杂的项目，常规项目都能做）</li>
<li>达到 50000 行 - 专业选手（至少做过2-3个比较复杂的项目，可能3-5年，看996时间积累）</li>
<li><strong>只能靠时间积累</strong></li>
</ul>
<p><strong>如何统计自己的代码行数</strong></p>
<ul>
<li>安装 <code>yarn global add cloc</code></li>
<li><code>cloc --vcs=git .</code></li>
<li>可以用来统计一个仓库里的有效代码</li>
</ul>
<p>注意</p>
<ul>
<li>如果仓库里有 node_modules 目录等不相关内容</li>
<li>需要把 /node_modules/ 写入 .gitignore 文件</li>
</ul>
<p>​</p>
<h4 id="二了解足够多的概念">二、了解足够多的概念</h4>
<blockquote>
<p>不仅要会写，还要会<del>扯</del>说（面试）</p>
</blockquote>
<p><strong>概览</strong></p>
<p>常用常考</p>
<ul>
<li>
<p>闭包、原型类、继承、MVC、Flux、高阶函数、前端工程化</p>
<blockquote>
<p>只会用，不会说，面试就完了</p>
</blockquote>
</li>
</ul>
<p>如何积累</p>
<ul>
<li>在课程中提炼
<ul>
<li>就是记笔记</li>
<li>面试如果能完整说出来，就是满分。新手能说出一般也达到要求了，面试新手就看思路对不对，不需要百分百实现</li>
</ul>
</li>
<li>在大脑中思考
<ul>
<li>JS需要思考清楚，这些代码到底是在做什么。为什么这样设计、为什么这样用</li>
<li>学JS，必须把疑问直接搞定，不能一直留着，不然会有越来越多的 bug</li>
</ul>
</li>
<li>在博客上总结
<ul>
<li>思考清楚了，一定要总结、记下来</li>
<li>用于面试</li>
</ul>
</li>
<li>在代码中实践</li>
</ul>
<p>​</p>
<h4 id="三有足够的踩坑经验">三、有足够的踩坑经验</h4>
<blockquote>
<p>你以为是工作经验吗？</p>
</blockquote>
<p><strong>踩坑经验</strong></p>
<p>何谓专家</p>
<ul>
<li>**“ 该领域内所有的错误都犯完的人，就是专家 ” **</li>
</ul>
<p>如何踩坑</p>
<ul>
<li>做项目，而且是个人项目</li>
<li>个人项目的意思是<strong>所有代码都是你一个人写的</strong>
<ul>
<li>团队合作的大项目，基本上只有两个人做，其他人都是打酱油的</li>
</ul>
</li>
<li>这样你才能<strong>全方位踩坑</strong></li>
</ul>
<p>​</p>
<h3 id="总结">总结</h3>
<p>软要求</p>
<ul>
<li>逻辑能力</li>
<li>质疑自己的能力</li>
<li>抽象能力</li>
</ul>
<p>硬要求</p>
<ul>
<li>足够多的代码（至少5000行，大项目1000-2000行，小项目200行左右）</li>
<li>足够多的概念</li>
<li>足够多的踩坑经验（记下来自己遇到过什么坑）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="javascript-的历史">JavaScript 的历史</h2>
<blockquote>
<p>历史和特点</p>
</blockquote>
<h3 id="发明人">发明人</h3>
<p>李爵士发明 HTML</p>
<p>赖先生发明 CSS</p>
<p><strong>布兰登发明 JS</strong></p>
<p>​</p>
<h4 id="布兰登的生平">布兰登的生平</h4>
<p></p>
<ul>
<li>生平1961年生于美国</li>
<li>物理学转数学与计算机学位</li>
<li>工作七年，负责操作系统与网络开发</li>
<li>又工作三年，负责微内核与电子信号处理相关工作</li>
<li>1995年进入网景公司，为其浏览器开发了 JS 功能</li>
<li>1998年协助成立 Mozilla.org，担任首席架构师</li>
<li>网景死亡（被收购）后，他成立了 Mozilla 基金会，Firefox 就是这个基金会维护的，有<a href="https://www.bilibili.com/video/av15989846/" target="_blank" rel="noopener noreffer">纪录片</a>记录了这一过程</li>
<li>2014年晋升为 Mozilla 的 CEO，十天后，被赶下台
<ul>
<li>原因是他曾捐助过反同性恋的法案（只有异性可结婚）</li>
</ul>
</li>
<li>2015年成立 Brave 公司，开发保护用户隐私的浏览器</li>
</ul>
<p>​</p>
<h3 id="总结-1">总结</h3>
<p>牛逼的程序员</p>
<ul>
<li>从来不会只学一门编程语言</li>
<li>不怕被辞退，总能找到事做</li>
<li>很容易创业，比外行人靠谱得多</li>
<li>可以干到 50 岁以上（基本上都是创办公司或很有钱了）</li>
</ul>
<p>JavaScript</p>
<ul>
<li>诞生之初，只是一个不起眼的小功能</li>
<li>同时 JS 有很多 bug，我们学习的时候要注意辨别</li>
</ul>
<p>​</p>
<h3 id="javascript-的诞生">JavaScript 的诞生</h3>
<p>布莱登临危受命</p>
<ul>
<li>公司要求给浏览器添加一个脚本功能</li>
<li>公司要求这个脚本必须蹭 Java 的流量</li>
<li>布莱登花十天设计了 JS 的最初版本（不是实现）</li>
</ul>
<p>JS的命名</p>
<ul>
<li>Mocha 摩卡 =&gt; LiveScript =&gt; JavaScript</li>
<li>Java 既是编程语言，也是一种咖啡</li>
<li>浏览器一开始同时就支持 Java 和 JavaScript</li>
<li>后来，JS 胜了（在浏览器上），Java就逐渐退出了浏览器平台</li>
</ul>
<p>​</p>
<h3 id="浏览器大战">浏览器大战</h3>
<blockquote>
<p>背景：1995年，网景推出 JS 功能，用户纷纷叫好，因为可以在页面上节省流量。</p>
<ul>
<li>当时的网速非常慢 2~3k/s，用户填写一个表单，点击提交按钮，等待一分钟才刷新页面，反馈结果。</li>
<li>有了 JS 功能之后，点击按钮，马上反馈用户表单信息是否正确，所以用户非常喜欢。</li>
<li>注意：此时的 JavaScript 只是网景提供的一个<strong>功能</strong>，并不是语言</li>
</ul>
</blockquote>
<p>微软的跟进</p>
<ul>
<li>1996年8月 IE 3 发布，支持 JScript（微软实现的JS）</li>
<li>浏览器大战开始，每家浏览器的脚本不太一样</li>
</ul>
<p>网景的反击</p>
<ul>
<li>1996年11月，网景向 ECMA 提交语言标准，由于版权问题，JS 语言标准不叫 JavaScript，叫 ECMAScript</li>
<li>ECMA 发音：ai ke ma</li>
</ul>
<p>​</p>
<h3 id="网景之死">网景之死</h3>
<p>被收购</p>
<ul>
<li>微软的 IE 浏览器由于捆绑进了 Windows，很快超越</li>
<li>1998年，网景浏览器节节败退，公司陷入内忧外患</li>
<li>同年，公司打算搏一搏，将浏览器<strong>开源</strong>（Firefox）</li>
<li>最终，市场并没有因为开源而重新青睐网景</li>
<li>年底，[美国在线 AOL] 宣布开始收购网景</li>
<li>收购后，网景团队里的程序员纷纷被解雇</li>
<li>布莱登在之后一直协助维护 Firefox 的运营</li>
</ul>
<p>​</p>
<h3 id="ie-6-如日中天">IE 6 如日中天</h3>
<p>你想象不到 IE 6 多么火</p>
<ul>
<li>2001年，IE 6 随着 Windows XP 一起发布</li>
<li>2004年，IE 6 全球市场占用率 80% 以上</li>
<li>然而，这款浏览器却不兼容 W3C 标准（主要是 CSS)</li>
<li>IE 6 也不断爆出安全漏洞</li>
<li>Firefox 打算涅槃重生，重新打败 IE</li>
<li>2005年，IE 7 发布，但打不过 IE 6</li>
<li>2006年，主流浏览器为 IE 6 和 Firefox</li>
<li>2010年，中国的大部分浏览器还是 IE 6</li>
<li>由于盗版 Windows XP 在中国的风行，在很多年里，IE 6 始终占据中国浏览器市场，是前端开发者的恶魔</li>
</ul>
<p>​</p>
<h3 id="ie-6-神奇的-bug">IE 6 神奇的 bug</h3>
<p>下面代码会让 IE 6 直接崩溃，当场死机</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span> 
  <span class="o">*</span> <span class="p">{</span> <span class="k">position</span><span class="p">:</span> <span class="kc">relative</span> <span class="p">}</span> 
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span> 
<span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span> 
  <span class="p">&lt;</span><span class="nt">input</span><span class="p">&gt;</span> 
<span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>补充：</p>
<ul>
<li>「<code>*{  }</code> 星号性能低下」的谣言，就是从 IE6 这个 bug ，开始传出来的</li>
<li>实际上星号没有这个问题，这是 IE6 自己有问题</li>
<li>如果现在还有人说「星号性能低下」，不要反驳他，八九年前的事情现在还在说
<ul>
<li>星号套星号…可能有问题，但是<strong>一个星号，是绝对不会有问题的</strong></li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="chrome-横空出世">Chrome 横空出世</h3>
<p>微软的懈怠</p>
<ul>
<li>由于 IE6 的巨大成功，微软觉得再花费精力不值得，而且没有竞争对手，所以直接解散了 IE6 开发团队</li>
<li>Firefox 的出现让微软重新组建 IE 团队，但不是同一队人，造成 IE7、8 一直问题不断</li>
</ul>
<p>谷歌抓住机会</p>
<ul>
<li>2004年，谷歌雇用了一些 Firefox 和 IE 的开发者</li>
<li><strong>2008年</strong>，Chrome 终于发布，迅速拿下 1% 份额</li>
<li>2011年，Chrome 份额超过 Firefox</li>
<li><strong>2016年</strong>，Chrome 全球份额 62%</li>
<li>欣赏一支 <a href="https://www.bilibili.com/video/av3745910/" target="_blank" rel="noopener noreffer">Chrome 的广告</a></li>
</ul>
<p>​</p>
<h3 id="移动市场兴起">移动市场兴起</h3>
<p>智能手机崛起</p>
<ul>
<li>2010年，iPhone 4 发布</li>
<li>2011年，微软 和 Nokia 联合起来，打算搞一波事情</li>
<li>后来的事情大家都知道，Nokia 手机业务完了</li>
<li>也就是说，手机上基本没有 IE 了</li>
<li>前端程序员表示欣喜若狂，IE 终于快要死了</li>
<li>2016年，淘宝天猫宣布<a href="https://www.jianshu.com/p/4eb60e47b4bf" target="_blank" rel="noopener noreffer">不再支持 IE6、IE7</a></li>
<li>同年年底，宣布<a href="https://zhuanlan.zhihu.com/p/24091492" target="_blank" rel="noopener noreffer">不再支持 IE 8</a></li>
<li>移动市场的兴起，让中国前端摆脱 IE 十年的恐怖支配</li>
<li>从此，前端快速，不对，是极速发展</li>
</ul>
<p>​</p>
<h3 id="ecmascript-标准的制定">ECMAScript 标准的制定</h3>
<p>时间</p>
<ul>
<li>1997年6月，第一版 ECMAScript 发布</li>
<li>1999年12月，<strong>第三版</strong>发布，这个版本使用最广（IE6支持）</li>
<li>第四版，流产。</li>
<li>2009年12月，第五版发布，增加了一些功能</li>
<li><strong>2015年</strong>6月，<strong>第六版</strong>发布，新浏览器都支持这一版</li>
<li>之后每年发布一版，版本号以年份命名</li>
</ul>
<h4 id="js-与-ecmascript-的关系">JS 与 ECMAScript 的关系</h4>
<ul>
<li>ECMAScript 是纸上的标准，JS 是浏览器的实现</li>
<li>纸上标准往往落后于浏览器，先实现，再写进标准
<ul>
<li>ECMA 只总结，不预演，这样就不会再导致标准流产（写进标准但没浏览器使用的情况）</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="javascript-兴起">JavaScript 兴起</h3>
<h4 id="杀手级应用-gmail">杀手级应用 Gmail</h4>
<ul>
<li>2004年愚人节，谷歌发布 Gmail 在线网页</li>
<li>当时的人们认为网页只能用来看新闻和图片</li>
<li>Gmail 的发布让用户和开发者（后端、客户端）眼前一亮</li>
<li>2005年，Jesse 将谷歌用到的技术命名为 AJAX</li>
<li><strong>从此，前端技术正式出现</strong></li>
<li>在此之前的网页开发，都是由 后端 和 设计师 完成</li>
<li>2006年，jQuery 发布，是目前最长寿的 JS 库</li>
<li>后来的十年，jQuery 大发异彩，直到 IE 不行了，jQuery 才稍微没有那么火</li>
</ul>
<p>​</p>
<h3 id="中国前端的发展">中国前端的发展</h3>
<p>正式出现时间</p>
<ul>
<li>
<p>2010年左右，中国才有专门的前端岗位</p>
<p><a href="http://index.baidu.com/v2/main/index.html#/trend/%E5%89%8D%E7%AB%AF?words=%E5%89%8D%E7%AB%AF,java,python,php" target="_blank" rel="noopener noreffer">百度搜索指数</a></p>
<p></p>
<p></p>
</li>
</ul>
<p>前端的来源</p>
<ul>
<li>一部分来自自学的<strong>后端</strong>程序员，他们把 Java 的思想代入 JavaScript，<strong>面向对象</strong>成了JS的主流思想</li>
<li>一部分来自<strong>设计师</strong>，他们开始学习 CSS，并独创了「重构工程师」岗位（现已没落）
<ul>
<li>比如张鑫旭，专门研究CSS</li>
</ul>
</li>
<li>上面这两种来源，一种赶鸭子上架，一种不够专业，导致前端特别缺人</li>
</ul>
<p>缺人</p>
<ul>
<li>最应该产出前端人才的大学，迟迟没有相关课程</li>
<li>由于早期前端工资比不上后端，所以大部分人选后者</li>
<li>就如同现在很多高材生选择机器学习一样</li>
<li>一些不小心进入前端领域的科班生成长非常迅速</li>
</ul>
<p>​</p>
<h3 id="javascript-爆发">JavaScript 爆发</h3>
<p>V8 快如闪电</p>
<ul>
<li>
<p>Chrome 的 JS 引擎叫做 V8（V1到V7是啥)</p>
</li>
<li>
<p>2009年，Ryan 基于 V8 创建了 Node.js</p>
</li>
<li>
<p>2010年，Isaac 基于 Node.js 写出了 npm</p>
</li>
<li>
<p>前端工程师可以在浏览器之外执行 JS 了，Node.js 快速风靡</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">例：node demo.js
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>同年，TJ 受 Sinatra 启发，发布了 Express.js</p>
</li>
<li>
<p>从此，前端工程师可以愉快地写后端应用了！</p>
</li>
</ul>
<p>爆发</p>
<ul>
<li>这期间出来的技术太多，以后慢慢介绍：gulp、grunt、yeoman、requirejs、webpack、Angular、React、Vue等</li>
<li>这些技术很多也已经过时了</li>
</ul>
<p>​</p>
<h3 id="总结-2">总结</h3>
<h4 id="js-是历史的选择">JS 是历史的选择</h4>
<ul>
<li>一开始浏览器支持很多东西：Java、Flash、VBScript</li>
<li>只有 JS 活到最后</li>
</ul>
<h4 id="js-的低开高走">JS 的低开高走</h4>
<ul>
<li>一开始 JS 就是一个玩具语言</li>
<li>但是 JS 每次都走对了风口
<ol>
<li>JS 推出标准</li>
<li>Gmail 的出现（当时的网站只能看新闻，用户第一次体验到输入网址就能打开一个工具）</li>
<li>移动端</li>
<li>node.js</li>
</ol>
</li>
</ul>
<h4 id="学习-js-时需要注意">学习 JS 时需要注意</h4>
<ul>
<li>JS 最初也很混乱，旧的、过时的东西了解就好，考前记忆一些</li>
<li>跟 IE 相关的知识一律忽略</li>
</ul>
<blockquote>
<p>前端是进入互联网行业的捷径</p>
</blockquote>]]></description>
</item><item>
    <title>前端也得懂点儿 HTTP (下) </title>
    <link>http://samrks.github.io/20200810-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8B/</link>
    <pubDate>Mon, 10 Aug 2020 18:49:11 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/20200810-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8B/</guid>
    <description><![CDATA[<p>🤞🏻 “Nobody knows HTTP better than me !! ” 🤥</p>
<p>​</p>
<h2 id="先导">先导</h2>
<ul>
<li>安装 Node.js 8+</li>
<li>理解 IP 和 端口</li>
<li>理解 URL 路径和查询参数</li>
</ul>
<p>​</p>
<h2 id="演示-nodejs-server-">演示 Node.js Server ⭐</h2>
<h3 id="请求与响应模型">请求与响应模型</h3>
<p></p>
<ul>
<li>服务器，就是没有显示器的电脑</li>
</ul>
<p>​</p>
<h3 id="如何发请求">如何发请求</h3>
<p>方法</p>
<ul>
<li>用 Chrome 地址栏</li>
<li>用 curl 命令</li>
</ul>
<p>概念</p>
<ul>
<li>帮你发请求的工具叫做「用户代理」
<ul>
<li>如果使用 Chrome 地址栏发送请求，那么 Chrome 就是我们的「用户代理」</li>
<li>如果使用 curl 命令发送请求，那么 curl 就是我们的「用户代理」</li>
</ul>
</li>
<li>「用户代理」 英文名 User Agent</li>
</ul>
<p>​</p>
<h3 id="如何做出一个响应-">如何做出一个响应 ⭐</h3>
<blockquote>
<p>用 Chrome 地址栏 或 用 curl 命令 ，可以发出一个请求</p>
<ul>
<li>那么如何做出一个响应呢？（演示自己发请求-自己响应的过程）</li>
</ul>
</blockquote>
<p>需要用到编程</p>
<ul>
<li>
<p>Node.js 有一个 http 模块可以做到</p>
</li>
<li>
<p>新建项目目录 node-demo / server.js，将下面代码粘入  ⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐</p>
<blockquote>
<p>代码细节先不管，直接复制使用。（注意这块目的不是学 nodejs，而是搞清楚 http 的请求和响应）</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
    
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">port</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;请指定端口号好不啦？\nnode server.js 8888 这样不会吗？&#39;</span><span class="p">)</span>
  <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="p">}</span>
    
<span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">parsedUrl</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
  <span class="kd">var</span> <span class="nx">pathWithQuery</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">url</span>
  <span class="kd">var</span> <span class="nx">queryString</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">pathWithQuery</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;?&#39;</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="nx">queryString</span> <span class="o">=</span> <span class="nx">pathWithQuery</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">pathWithQuery</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;?&#39;</span><span class="p">))</span> <span class="p">}</span>
  <span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">parsedUrl</span><span class="p">.</span><span class="nx">pathname</span>
  <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">parsedUrl</span><span class="p">.</span><span class="nx">query</span>
  <span class="kd">var</span> <span class="nx">method</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">method</span>
    
  <span class="cm">/******** 从这里开始看，上面不要看 ************/</span>
    
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;有个傻子发请求过来啦！路径（带查询参数）为：&#39;</span> <span class="o">+</span> <span class="nx">pathWithQuery</span><span class="p">)</span>
    
  <span class="k">if</span> <span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/html;charset=utf-8&#39;</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`二哈`</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="s1">&#39;/x&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/css;charset=utf-8&#39;</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`body{color: red;}`</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">404</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/html;charset=utf-8&#39;</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`你输入的路径不存在对应的内容`</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span>
    
  <span class="cm">/******** 代码结束，下面不要看 ************/</span>
<span class="p">})</span>
    
<span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;监听 &#39;</span> <span class="o">+</span> <span class="nx">port</span> <span class="o">+</span> <span class="s1">&#39; 成功\n请在空中转体720度然后用电饭煲打开 http://localhost:&#39;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>注意事项</p>
<ul>
<li>这些代码就是服务器代码，一般放在服务器上</li>
<li>path 是不带查询参数的路径 /x</li>
<li>query 是查询参数的对象形式 {a:1}</li>
<li>queryString 是查询参数的字符串形式 ?a=1</li>
<li>pathWithQuery 是带查询参数的路径，一般不用</li>
<li>request 是请求对象</li>
<li>response 是响应对象</li>
<li>\n 表示回车</li>
</ul>
<p>​</p>
<h4 id="运行机制">运行机制⭐</h4>
<ol>
<li>
<p>在终端中启动应用：</p>
<ol>
<li>运行 <code>node server.js</code>  未指定<strong>端口号</strong>，会有提示</li>
<li>按照提示执行即可  <code>node server.js 8888</code>  或者  <code>node server 8888</code>  这句话就意味着我们的电脑会开一个端口 8888，这个端口被 server.js 监听着</li>
<li>这时候只要有人请求了8888 端口，就会走入 server.js 的代码中，我们注释的那段代码就会运行一遍。每接收到一次请求，就运行一遍</li>
</ol>
</li>
<li>
<p>用 curl 发出请求 <code>curl http://127.0.0.1:8080/xxxx</code>。server.js 接收到请求，会做出响应。</p>
<p></p>
<p></p>
<ul>
<li>如果响应内容乱码，可能是 windows 系统的关系</li>
</ul>
</li>
<li>
<p>添加路由</p>
<ol>
<li>
<p>编辑 server.js 文件，添加 if else（限定条件，访问某个路径，响应对应内容）</p>
</li>
<li>
<p>重新运行 node server.js 8888（修改服务代码，需要重启）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span> <span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;有人访问/了&#39;</span><span class="p">)</span>
  <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;这就是访问/，响应的内容\n&#39;</span><span class="p">)</span>   <span class="c1">// 回车\n
</span><span class="c1"></span><span class="p">}</span> 
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>下面是，server.js 监听到 curl 命令 请求根路径时 执行的 console.log(…)</p>
<p></p>
</li>
</ol>
</li>
<li>
<p>后台启动应用：</p>
<ol>
<li>
<p><code>touch log </code>  创建一个 log 文件</p>
</li>
<li>
<p><code>node server.js 8888 &gt;log log 2&gt;&amp;1 &amp;</code></p>
<p>返回的数字1144就是这个<strong>进程的 ID</strong>（目前这个进程已经在后台运行了）</p>
</li>
</ol>
<p></p>
<ul>
<li>运行后，服务器在后台启动，不占用当前终端</li>
<li>怎么关闭这个后台进程呢？
<ul>
<li>执行 <code>kill -9 xxxx</code>   xxxx为后台进程的 id数字</li>
<li>kill -9 是最厉害的杀进程的方法</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>​</p>
<h4 id="代码逻辑">代码逻辑</h4>
<p>语法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="sb">`这种字符串`</span> <span class="nx">里面可以回车</span>
<span class="s1">&#39;这种字符串&#39;</span> <span class="nx">里面要回车</span><span class="err">，</span><span class="nx">只能用</span> <span class="err">\</span><span class="nx">n</span> <span class="nx">表示</span>
</code></pre></td></tr></table>
</div>
</div><p>逻辑</p>
<ol>
<li>
<p>每次收到请求都会把中间的代码执行一遍</p>
</li>
<li>
<p>用 if else 判断路径，并返回响应</p>
</li>
<li>
<p>如果是已知路径，一律返回 200</p>
</li>
<li>
<p>如果是未知路径，一律返回 404</p>
</li>
<li>
<p>Content-Type 表示内容的「类型/语法」（省略后缀，程序员从来不看后缀😎，后缀只是用来告诉计算机要用什么软件打开文件）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="sb">`text/html`</span><span class="err">、</span><span class="sb">`text/css`</span>
<span class="nx">path</span> <span class="nx">不写</span> <span class="o">/</span><span class="nx">x</span><span class="p">.</span><span class="nx">css</span> <span class="nx">而写</span> <span class="o">/</span><span class="nx">x</span><span class="err">，</span><span class="nx">因为</span> <span class="nx">content</span><span class="o">-</span><span class="nx">type</span> <span class="nx">中已经声明了类型</span><span class="o">/</span><span class="nx">语法</span><span class="err">，</span><span class="nx">所以可省略后缀</span> <span class="p">.</span><span class="nx">css</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>response.write() 可以填写返回的内容（写入响应内容）</p>
</li>
<li>
<p>调用 response.end() 表示响应可以发给用户了（调用 response.end() ，就会将响应发送给浏览器）</p>
<p>（ 以前不写 end 就会一直等待，现在可能优化了可以不写 end，严谨起见还是都写完整，明确告知可以响应给用户了 ）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"> <span class="k">if</span> <span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`
</span><span class="sb">        &lt;!DOCTYPE html&gt;
</span><span class="sb">        &lt;head&gt;
</span><span class="sb">                &lt;meta charset=&#34;UTF-8&#34;&gt;
</span><span class="sb">            &lt;link rel=&#34;stylesheet&#34; href=&#34;http://samrks.github.io/x&#34;&gt;  // &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 将 html 和 css 结合起来
</span><span class="sb">        &lt;/head&gt;
</span><span class="sb">        &lt;body&gt;
</span><span class="sb">                &lt;h1&gt;标题&lt;/h1&gt;
</span><span class="sb">            &lt;/body&gt;
</span><span class="sb">    `</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="s1">&#39;/x&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/css;charset=utf-8&#39;</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`body{color: red;}`</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li>
<p>如上图就是，通过 link 把 html 和 css 联系起来，成为一个网页，把这个网页通过 http 传送到浏览器上的整个过程：一个路径返回 html 字符串，一个路径响应 css  字符串。</p>
</li>
<li>
<p>这就是李爵士发明的 URL + HTTP + HTML</p>
</li>
</ul>
</li>
</ol>
<p>​</p>
<h4 id="注意符号-">注意符号 ``</h4>
<blockquote>
<p>反引号 ``  可以识别回车、语法</p>
<p>单引号 ‘’   不能识别回车语法，仅作为字符串</p>
</blockquote>
<p></p>
<p>​</p>
<p>​</p>
<h3 id="遥想当年李爵士">遥想当年李爵士</h3>
<p><strong>世界上第一个服务器程序</strong></p>
<ul>
<li>我们也写一个服务器程序</li>
</ul>
<p><strong>世界上第一个网页</strong></p>
<ul>
<li>
<p>我们在 / 路径返回一个 HTML 内容</p>
</li>
<li>
<p>然后在 /x 路径返回一个 CSS 内容</p>
</li>
<li>
<p>然后再 /y 路径返回一个 JS 内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"> <span class="k">if</span> <span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`
</span><span class="sb">        &lt;!DOCTYPE html&gt;
</span><span class="sb">        &lt;head&gt;
</span><span class="sb">                &lt;meta charset=&#34;UTF-8&#34;&gt;
</span><span class="sb">            &lt;link rel=&#34;stylesheet&#34; href=&#34;http://samrks.github.io/x&#34;&gt;   ←←←←←←←←←←←←←← 引入 css
</span><span class="sb">        &lt;/head&gt;
</span><span class="sb">        &lt;body&gt;
</span><span class="sb">                &lt;h1&gt;标题&lt;/h1&gt;
</span><span class="sb">                &lt;script src=&#34;http://samrks.github.io/y&#34;&gt;&lt;script&gt;   ←←←←←←←←←←←←←←← 引入 js
</span><span class="sb">            &lt;/body&gt;
</span><span class="sb">    `</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="s1">&#39;/x&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/css;charset=utf-8&#39;</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`body{color: red;}`</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="s2">&#34;/y&#34;</span><span class="p">){</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s2">&#34;Content-Type&#34;</span><span class="p">,</span> <span class="s2">&#34;text/javascript;charset=utf-8&#34;</span><span class="p">);</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`console.log(&#39;这是JS内容&#39;)`</span><span class="p">;</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">404</span><span class="p">;</span>
        <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/html;charset=utf-8&#39;</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`你输入的路径不存在对应的内容`</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p><strong>注意事项</strong></p>
<ul>
<li>关于后缀
<ul>
<li>即使写成 <code>path === &quot;/y.css&quot;</code> ，但如果在 Content-Type 中规定是 js 类型，就会按照 js 解析。所以，URL里的css 后缀卵用没有</li>
<li><strong>Content-Type 才是决定文件类型的关键</strong></li>
</ul>
</li>
</ul>
<p>​</p>
<h2 id="体系化学习-http">体系化学习 HTTP</h2>
<p>必须学会什么</p>
<ul>
<li>基础概念（有哪些是必会的）
<ul>
<li>请求、响应</li>
</ul>
</li>
<li>如何调试（用的是 Node.js，可以用 log / debugger )
<ul>
<li>本质是学习 HTTP，所以不要在 Nodejs 花费太多时间，只需要搞懂 nodejs 怎么调试即可</li>
</ul>
</li>
<li>在哪查资料（用的是 Node.js，所以看 Node.js 文档）</li>
<li>标准制定者是谁（ HTTP 规格文档：<a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener noreffer">RFC2616</a>（<a href="https://cloud.tencent.com/developer/chapter/13544" target="_blank" rel="noopener noreffer">中文</a>）等）</li>
</ul>
<p>如何学</p>
<ul>
<li>Copy-抄文档、抄老师</li>
<li>Run-放在自己的机器上运行成功</li>
<li>Modify-加入一点自己的想法，然后重新运行</li>
</ul>
<p>​</p>
<h2 id="http-基础概念">HTTP 基础概念</h2>
<blockquote>
<ul>
<li>
<p>必须点击 view source ，才能看到完整的请求、响应</p>
<p></p>
</li>
</ul>
</blockquote>
<h3 id="请求">请求</h3>
<p></p>
<ul>
<li><font color="redorage"><strong>请求动词 路径加查询参数 协议名/版本</strong></font>（所有请求都按照这个格式，简化版）例：<code>GET   /x?wd=hi   HTTP/1.1</code></li>
</ul>
<ul>
<li>
<p><font color="darkorange">Host: 就是域名或  IP</font>（包括端口号）</p>
</li>
<li>
<p><font color="darkorange">Accept: text/html</font>（表示浏览器想接收什么内容）</p>
<ul>
<li>
<p>测：根据 accept 返回不同内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">accept</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">headers</span><span class="p">[</span><span class="s1">&#39;accept&#39;</span><span class="p">];</span>  <span class="c1">// 获取请求头中的 accept 的值，赋给变量
</span><span class="c1"></span><span class="k">if</span><span class="p">(</span><span class="nx">accept</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;xml&#39;</span><span class="p">)){</span>
  <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;我知道你想访问 XML 内容&#39;</span><span class="p">)</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
  <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`&lt;!DOCTYPE html&gt;&lt;html&gt;...&lt;/html&gt;`</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>浏览器可接收的内容：accept。（大多来说浏览器就是接收 html）</p>
<p>默认先找 html，如果没有 html，可以接收 xhtml、xml、webp、png、igned-exchange（如下）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p><font color="darkorange">Content-Type: 表示请求体的格式</font>（例：text/javascript;charset=utf-8）</p>
</li>
<li>
<p><font color="grey">回车</font>（划分请求头、请求体的界线）</p>
</li>
<li>
<p><font color="redr">请求体（也就是上传内容）</font></p>
</li>
</ul>
<h4 id="细节">细节</h4>
<ul>
<li>
<p>请求有三部分，用回车隔开，分别是：（与 ↑↑ 对应颜色）</p>
<ul>
<li><font color="redorage">请求行</font>（因为只有一行，所以叫请求行）<code>GET   /x?wd=hi   HTTP/1.1</code></li>
<li><font color="darkorange">请求头</font></li>
<li><font color="redr">请求体</font>（请求体的格式，是在 content-type 中指定的）</li>
</ul>
</li>
<li>
<p>请求动词有 GET / POST / PUT / PATCH / DELETE 等</p>
<ul>
<li>
<p>GET 用于获取内容</p>
</li>
<li>
<p>POST 用于上传内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">发送post请求：curl -v -X POST --data &#39;上传内容&#39; http://localhost:8888/
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ul>
</li>
<li>
<p>请求体在 GET 请求中一般为空</p>
<ul>
<li>因为get请求通常用于获取内容，而请求体表示要上传的内容，所以GET请求一般没有请求体</li>
</ul>
</li>
<li>
<p>文档位于 <a href="https://tools.ietf.org/html/rfc2616#page-35" target="_blank" rel="noopener noreffer">RFC2616 第五章</a></p>
</li>
<li>
<p>大小写不敏感（随意），最好照着我的写</p>
</li>
</ul>
<p>​</p>
<h3 id="响应">响应</h3>
<p></p>
<ul>
<li><strong><font color="redorage">协议名/版本 状态码 状态字符串</font></strong></li>
<li><font color="darkorange">Content-Type: 响应体的格式</font></li>
<li><font color="gray">回车</font></li>
<li><font color="redr">响应体</font>（也就是下载内容）</li>
</ul>
<h4 id="细节-1">细节</h4>
<ul>
<li>响应有三部分，用回车隔开，分别是：
<ul>
<li><font color="redorage">状态行</font>（Status LIne）</li>
<li><font color="darkorange">响应头</font></li>
<li><font color="redr">响应体</font>（响应体的格式，在Content-Type中指定）</li>
</ul>
</li>
<li>常见的状态码是<strong>考点</strong>
<ul>
<li>200 成功</li>
<li>404 找不到</li>
</ul>
</li>
<li>文档位于 <a href="https://tools.ietf.org/html/rfc2616#page-39" target="_blank" rel="noopener noreffer">RFC2616 第六章</a></li>
</ul>
<p>​</p>
<h2 id="用-curl-构造请求">用 curl 构造请求</h2>
<h3 id="curl-用法">curl 用法</h3>
<blockquote>
<p>curl 可以用来改请求动词、查询参数，还可以改第二部分的请求头、第三部分的请求内容…</p>
<ul>
<li>什么都可以改，请求的东西都可以由自己觉得</li>
<li>只不过需要按照 http 的标准来写</li>
</ul>
</blockquote>
<blockquote>
<p>前提条件：server 要处于开启的状态：node server.js 8888</p>
</blockquote>
<p>例：<strong><code>curl -v http://localhost:8888</code></strong></p>
<blockquote>
<p>设置请求动词</p>
</blockquote>
<ul>
<li><code>-X POST</code></li>
<li>例：<strong><code>curl -v -X POST http://localhost:8888</code></strong>  设置为post请求</li>
<li>注意大小写</li>
</ul>
<blockquote>
<p>设置路径和查询参数</p>
</blockquote>
<ul>
<li>直接在 url 后面加</li>
<li>例：<strong><code>curl -v -X POST http://localhost:8888/xxx?id=xxx</code></strong></li>
<li>注：在 url 后添加 # 锚点是不会发送到服务器的</li>
</ul>
<blockquote>
<p>设置请求头</p>
</blockquote>
<ul>
<li><code>-H 'Name: Value' </code> 或者  <code>--header 'Name: Value'</code></li>
<li>例：<strong><code>curl -v -X POST -H 'Accept: text/html' http://localhost:8888</code></strong></li>
</ul>
<blockquote>
<p>设置请求体</p>
</blockquote>
<ul>
<li><code>-d '内容'</code>  或者  <code>--data '内容'</code></li>
</ul>
<ul>
<li>
<p><strong><code>curl -v -X POST -H 'ABC: abc' -H 'Content-Type: text/plain;charset=utf-8' -d '请求体内容' http://localhost:8888</code></strong></p>
<p>在请求体中设置一个 ABC: abc，没有实际意义但是成立的。</p>
<p>text/plain 表示上传的内容是纯文本，编码是 utf-8（中文），内容是&rsquo;请求体内容&rsquo;这5个字（每个字占2bytes）</p>
<p></p>
</li>
</ul>
<blockquote>
<p>总结：可以使用 curl 随心所欲的构造一个请求</p>
</blockquote>
<p>​</p>
<h3 id="用-nodejs-读取请求">用 Node.js 读取请求</h3>
<p>读取请求动词</p>
<ul>
<li>
<p><strong><code>request.method</code></strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;method:&#39;</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">method</span><span class="p">)</span>   <span class="c1">// method: GET ...
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>读取路径</p>
<ul>
<li>
<p><strong><code>request.url</code></strong> 路径，带查询参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;路径：&#39;</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">)</span> <span class="c1">// 路径：/xxxx?wd=hihihi
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong><code>path</code></strong> 纯路径，不带查询参数</p>
</li>
<li>
<p><strong><code>query</code></strong> 只有查询参数</p>
</li>
</ul>
<p>读取请求头</p>
<ul>
<li>
<p>**<code>request.headers['Accept']</code> **    读取请求头中的 Accept 值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;请求头：&#34;</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">headers</span><span class="p">)</span>  <span class="c1">// 请求头：{ host:xxx, ???:???, ... }
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>读取请求体</p>
<ul>
<li>比较复杂，先不讲</li>
</ul>
<p>​</p>
<h3 id="用-nodejs-设置响应">用 Node.js 设置响应</h3>
<p>设置响应状态码</p>
<ul>
<li><strong><code>response.statusCode = 200 </code></strong></li>
<li>状态码可以任意设置，状态字符串会根据设置的状态码自动改变</li>
<li>但是状态码是有统一的使用规则的，如 200 规定就是表示请求成功时返回的状态码，所以不要随意改变</li>
<li>404 表示请求的网页不存在 。404 页面就是一个普通页面，是 Chrome 提供的，当访问页面不存在时提醒用户</li>
</ul>
<p>设置响应头</p>
<ul>
<li><strong><code>response.setHeader(&quot;Content-Type&quot;, &quot;text/html&quot;); </code></strong></li>
</ul>
<p>设置响应体</p>
<ul>
<li>
<p><strong><code>response.write(&quot;内容&quot;） </code></strong></p>
</li>
<li>
<p>可追加内容</p>
</li>
</ul>
<p>​</p>
<h3 id="curl-的作用是什么">curl 的作用是什么</h3>
<blockquote>
<p>不单单是用来测试 http 的请求和响应。</p>
<p>curl 可以完成 Chrome 的大多基本功能，但 curl 通过命令行执行，所以不具有可视化能力</p>
</blockquote>
<ol>
<li>
<p>下载图片</p>
<p><code>curl 图片路径.jpg &gt; xxx.jpg</code>  （ 在命令行开启的目录中，下载图片并重命名为 xxx ）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">curl https://i.loli.net/2020/07/15/Q2dnHSgxCcbfhZW.jpg &gt; 3.jpg
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
<li>
<p>测试 请求和响应</p>
</li>
<li>
<p>…</p>
<p>curl 功能很强大，Chrome 的基本功能都可以实现，但不具有可视化</p>
</li>
</ol>
<p>​</p>
<h2 id="html--css--js-的本质都是字符串">HTML / CSS / JS 的本质都是字符串</h2>
<blockquote>
<p>HTML / CSS / JS 的<strong>本质都是字符串，不是文件</strong></p>
<ul>
<li>本质上我们看到的网页，都是通过 html字符串 渲染的，html字符串 里面请求了 css字符串、js字符串</li>
<li>从演示的 server.js 中就能体现这一点</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h2 id="consolelog-调试大法">console.log 调试大法</h2>
<blockquote>
<p>console.log（打印）这种调试方法，是在所有编程语言中都适用的</p>
<p>JS（console.log）、Java（print）、Python（print）、PHP（echo）…  语言/写法不一样，但原理相同</p>
</blockquote>
<ul>
<li>把可能有问题的代码，打印看看</li>
<li>debug 就是在不断质疑自己的过程</li>
<li>不要过分相信自己，而要相信 console.log() 可以告诉你对错</li>
<li>程序员每天都在问自己错在哪里</li>
</ul>]]></description>
</item><item>
    <title>前端也得懂点儿 HTTP (上) ——浅析 URL</title>
    <link>http://samrks.github.io/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/</link>
    <pubDate>Tue, 04 Aug 2020 23:58:43 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/20200804-%E5%89%8D%E7%AB%AF%E4%B9%9F%E5%BE%97%E6%87%82%E7%82%B9%E5%84%BFhttp%E4%B8%8A/</guid>
    <description><![CDATA[<p>本文主要围绕 URL ，为学 HTTP 做个铺垫。</p>
<p>​</p>
<h2 id="先导">先导</h2>
<h3 id="英语protocol">英语：protocol</h3>
<blockquote>
<p>protocol       /ˈproʊtəkɑːl/     协议、礼节、约定</p>
</blockquote>
<h3 id="李爵士发明的三样东西">李爵士发明的三样东西</h3>
<blockquote>
<p>WWW = URL + HTTP + HTML</p>
</blockquote>
<p>HTML 前面已经学了，html + css 本质就是网页</p>
<p>再认识了 URL 和 HTTP ，那么 WWW 我们就基本了解了（ URL 是为 HTTP 做铺垫）</p>
<p>​</p>
<h2 id="什么是-ip">什么是 IP</h2>
<blockquote>
<p>要学习 URL 、HTTP，得先从 IP 讲起（⭐剧透：HTTP 的 P  和  IP 的 P 之间有重要联系）</p>
</blockquote>
<p>IP：</p>
<ul>
<li>
<p>Internet（因特网==互联网，整个人类组成的网络就叫互联网，比WWW更加底层）protocol（协议）</p>
</li>
<li>
<p>由此可见 IP 也是非常底层的，没有 IP 就不能上网</p>
</li>
</ul>
<p>Internet Protocal 主要约定了两件事：</p>
<ul>
<li>一、<strong>如何定位一台设备</strong></li>
<li>二、如何封装数据报文，以跟其他设备交流
<ul>
<li>具体内容我们不关心</li>
</ul>
</li>
</ul>
<blockquote>
<p>只要你在互联网中，你就有至少一个独特的IP</p>
</blockquote>
<p>​</p>
<h3 id="ip-分为内网和外网">IP 分为内网和外网</h3>
<blockquote>
<p>内网和外网是不能直接相通的，只能通过路由器作为网关，来连通</p>
</blockquote>
<p></p>
<p>路由器：是一个非常重要的设备，连通了内网和外网</p>
<p>例：比如你在玩 LOL，按了一下Q键（第一个技能），怎么让网线那头的对手被Q到？</p>
<ul>
<li>Q 通过键盘传到路由器，路由器通过电信服务器传到 QQ 的游戏服务器， QQ 的游戏服务器接收到 Q 键后，就将 Q 键发送到对手那里，对手就被 Q 到了</li>
<li>整个过程是非常复杂的，但非常快，按下Q键立马响应，因为这个复杂的过程是以光速的形式来运行的，所以用户感受不到</li>
</ul>
<p>​</p>
<h3 id="如何获取外网-ip">如何获取外网 IP</h3>
<blockquote>
<p>必须有 外网IP 才能和小伙伴打 LOL、王者荣耀…</p>
</blockquote>
<ol>
<li>
<p>首先，你得从电信租用带宽，一年一千多。</p>
<p>（然后需要有个猫（调制解调器），猫是用来把信号转换成路由器能理解的信号。现在普遍是光猫，把光信号变成电信号，变成路由器能理解的网络信号）</p>
</li>
<li>
<p>你买了一个路由器，然后用电脑和手机分别连接路由器广播出来的无线 WIFl。</p>
<ul>
<li>有线连接和无线WiFi在本质上没有不同，但在实际使用中，无线可能慢于有线连接</li>
<li>有线连接的下载速度可能超过 10M/s，但无线WIFI连接的设备的下载速度可能无法超过 10M/s</li>
</ul>
</li>
<li>
<p>只要路由器连上电信的服务器，那么路由器就会有一个「外网 IP」 ，比如 [ 14.17.32.211 ] 就是一个外网 IP。这就是你在互联网中的地址。</p>
<ul>
<li>访问 <a href="https://ip138.com/">https://ip138.com/</a> 查看当前外网 IP（通常外网IP不要告诉别人，可以准确定位你的位置）</li>
<li>那么你的所有设备，就全都是这一个 外网 IP</li>
<li>那么如何区分是手机设备…还是笔记本呢？这就依靠「内网 IP」来区分了</li>
</ul>
</li>
<li>
<p>但是如果你重启路由器，那么你很有「可能」被重新分配一个「外网 IP」，也就是说你的路由器没有「固定的外网 IP」</p>
<ul>
<li>如果想固定外网IP ，需要花钱每个月五六千，可以得到一个固定的外网IP（在国内购买这些网络资源通常贵于国外）</li>
</ul>
</li>
<li>
<p>但是有个问题，你的路由器的外网 IP 如果是 14.17.32.211，那么你的手机和电脑的 IP 又是什么呢？答案是「内网IP」</p>
</li>
</ol>
<p>​</p>
<h3 id="内网-ip">内网 IP</h3>
<ol>
<li>
<p>路由器会在你家里创建一个内网，内网中的设备使用内网IP，一般来说这个IP的格式都是192.168.xxx.xxx。</p>
<ul>
<li>
<p>命令行：ipconfig ，查看当前设备的内网 IP  ：192.168.101.10</p>
<p></p>
<p>默认网关中的 IP：192.168.101.1  是路由器的 IP</p>
</li>
<li>
<p>如果你家足够大，路由器可能功率不够，覆盖不了整个家，用户可能需要买电力猫或再买一个小路由器做中介器之类的手段，来扩大覆盖范围到整个家。</p>
</li>
<li>
<p>如果家里五六十平米，那路由器基本可以全覆盖。</p>
</li>
</ul>
</li>
<li>
<p>一般路由会给自己分配一个好记的内网IP，如 192.168.1.1</p>
<ul>
<li>小米路由器的 IP ，一般都是 192.168.31.1，为了让出一个位置给光猫的 IP</li>
</ul>
</li>
<li>
<p>然后路由会给每一个内网中的设备分配一个不同的内网 IP，如电脑是 192.168.1.2，手机是 192.168.1.3，以此类推。</p>
</li>
</ol>
<p>​</p>
<h3 id="路由器的功能">路由器的功能</h3>
<blockquote>
<p>把内网的请求，路由到外部，把外部的响应，路由到内部。具有双向路由的功能，所以也被称为网关</p>
</blockquote>
<ol>
<li>现在路由器有两个 IP，一个外网 IP（电信分配的）和一个内网 IP（自己分配给自己的）</li>
<li>内网中的设备可以互相访问，但是不能直接访问外网</li>
<li>内网设备想要访问外网，就必须经过路由器中转</li>
<li>外网中的设备可以互相访问，但是无法访问你的内网</li>
<li>外网设备想要把内容送到内网，也必须通过路由器
<ul>
<li>想从网上（外网）下载内容，会先把内容下载到路由器，路由器再把内容下载到用户的设备上</li>
</ul>
</li>
<li>也就是说内网和外网就像两个隔绝的空间，无法互通，唯一的联通点就是路由器</li>
<li>所以路由器有时候也被叫做「网关]
<ul>
<li>一夫当关，万夫莫开。一旦把路由器拔了，那就与网络世界断联了</li>
</ul>
</li>
</ol>
<p>​</p>
<blockquote>
<p>用 http-server 可以创建一个服务</p>
<ul>
<li>
<p>命令行：http-server . -c-1</p>
<p></p>
</li>
<li>
<p>第一个地址 192.168.xxx.xxx:8080 ，是给手机访问的（需要手机端调试内容时，就可以使用）</p>
</li>
<li>
<p>第二个地址 127.0.0.1:8080 ，是给电脑访问的</p>
</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="几个特殊的-ip">几个特殊的 IP</h3>
<p>分别是</p>
<ol>
<li>127.0.0.1 表示自己（规定死的）</li>
<li>localhost 通过 <a href="C:%5cWindows%5cSystem32%5cdrivers%5cetc" rel="">hosts</a> 指定为自己</li>
<li>0.0.0.0 不表示任何设备</li>
</ol>
<p>​</p>
<h4 id="问hosts-文件在哪">问：hosts 文件在哪？</h4>
<blockquote>
<p>答： 在 Windows 系统中，hosts 位于 C:\Windows\System32\drivers\etc\hosts 。在 macOS / Linux系统中，hosts 位于 /etc/hosts</p>
</blockquote>
<p>hosts 文件，用于指定本机 IP （表示自己）</p>
<ul>
<li>127.0.0.1 / localhost  是 hosts 中默认的 （表示自己）</li>
<li>也可以在 hosts 文件中添加自定义 <strong>任何字符串</strong> 来表示自己（文件中的#内容均为注释，可删）
<ul>
<li>写法如下，定义后，就可以使用这些字符串来访问本地服务</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">+ 127.0.0.1 sam
+ 127.0.0.1 ryuuks
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注意：需要通过 http-server 开启本地服务后，下述地址才可以使用</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">http://localhost:8080/index.html
http://127.0.0.1:8080/index.html
http://sam:8080/index.html
http://ryuuks:8080/index.html
</code></pre></td></tr></table>
</div>
</div><p>上述地址，均可以访问到 index.html</p>
<p>​</p>
<p>​</p>
<h2 id="端口">端口</h2>
<blockquote>
<p>IP 有了，还需要什么？ 端口</p>
</blockquote>
<p>WWW（万维网）= URL + HTTP + HTML</p>
<ul>
<li>URL 就是用来定位服务器的，例如，定位百度的服务器 baidu.com</li>
</ul>
<blockquote>
<p>一台机器可以提供很多服务</p>
<p>每个服务一个号码，这个号码就叫端口号port</p>
</blockquote>
<h3 id="端口-port">端口 port</h3>
<h4 id="一个比喻">一个比喻</h4>
<ul>
<li>麦当劳提供两个窗口，一号快餐，二号咖啡</li>
<li>你去快餐窗口点咖啡会被拒绝，让你去另一个窗口</li>
<li>你去咖啡窗口点快餐结果一样</li>
</ul>
<blockquote>
<p>在计算机世界也是这样，你要提供不同的服务，就需要有不同的窗口。这个窗口，就是端口 port</p>
</blockquote>
<h4 id="一台机器可以提供不同服务">一台机器可以提供不同服务</h4>
<ul>
<li>要提供 HTTP 服务最好使用 80 端口</li>
<li>要提供 HTTPS 服务最好使用 443 端口</li>
<li>要提供 FTP 服务最好使用 21 端口</li>
<li>一共有 65535 个端口（基本够用）</li>
</ul>
<p>​</p>
<h3 id="我怎么知道应该用什么端口">我怎么知道应该用什么端口</h3>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/TCP/UDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8#0%E5%88%B01023%E5%8F%B7%E7%AB%AF%E5%8F%A3" target="_blank" rel="noopener noreffer">维基百科</a>一个一个列出来了，需要的时候就对应查找：每个端口用来做什么</p>
</blockquote>
<table>
<thead>
<tr>
<th>端口</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>80/TCP,UDP</td>
<td><a href="https://zh.wikipedia.org/wiki/%e8%b6%85%e6%96%87%e6%9c%ac%e4%bc%a0%e8%be%93%e5%8d%8f%e8%ae%ae" target="_blank" rel="noopener noreffer">超文本传输协议</a>（HTTP）或 <a href="https://zh.wikipedia.org/wiki/%e5%bf%ab%e9%80%9fUDP%e7%bd%91%e7%bb%9c%e8%bf%9e%e6%8e%a5" target="_blank" rel="noopener noreffer">快速UDP网络连接</a>- 用于传输网页</td>
</tr>
<tr>
<td></td>
<td>例如：百度服务器要给用户传输一个网页，那就必须用80端口，用其他端口会有问题</td>
</tr>
<tr>
<td>443/TCP</td>
<td><a href="https://zh.wikipedia.org/wiki/%e8%b6%85%e6%96%87%e6%9c%ac%e4%bc%a0%e8%be%93%e5%ae%89%e5%85%a8%e5%8d%8f%e8%ae%ae" target="_blank" rel="noopener noreffer">超文本传输安全协议</a>（HTTPS）或<a href="https://zh.wikipedia.org/wiki/QUIC" target="_blank" rel="noopener noreffer">QUIC</a></td>
</tr>
<tr>
<td></td>
<td>HTTPS 协议传输就必须用 443 端口，用其他端口也会有问题</td>
</tr>
<tr>
<td>21/TCP,UDP</td>
<td><a href="https://zh.wikipedia.org/wiki/%e6%96%87%e4%bb%b6%e4%bc%a0%e8%be%93%e5%8d%8f%e8%ae%ae" target="_blank" rel="noopener noreffer">文件传输协议</a>（FTP） - 控制端口</td>
</tr>
<tr>
<td></td>
<td>80后和早期的90后应该在学校见过FTP协议，传文件都是通过 FTP。95后00后可能没见过FTP了</td>
</tr>
</tbody>
</table>
<p>​</p>
<h3 id="端口使用还有什么规则">端口使用还有什么规则</h3>
<ol>
<li>0 到 1023（2的10次方减1）号端口是留给系统使用的
<ul>
<li>普通用户绝对不能使用</li>
<li>即使是管理员有使用权限，但也需要输入额外的密码才能使用这些端口，所以也不推荐管理员使用</li>
<li>通常使用 8080 端口做开发，真正部署服务器时，拥有服务器权限才能用 80 端口…</li>
</ul>
</li>
<li>你只有拥有了管理员权限后，才能使用这 1024 个端口</li>
<li>其他端口可以给普通用户使用</li>
<li>比如 http-server 默认使用 8080 端口</li>
<li>一个端口如果被占用，你就只能换一个端口</li>
</ol>
<h4 id="在其他端口开启服务">在其他端口开启服务</h4>
<ol>
<li>
<p>在 1234 端口开启服务</p>
<p>命令行：<code>hs -c-1 -p 1234</code>（hs：http-server 简写）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">http</span><span class="o">:</span><span class="c1">//192.168.101.10:1234
</span><span class="c1"></span><span class="nx">http</span><span class="o">:</span><span class="c1">//127.0.0.1:1234
</span></code></pre></td></tr></table>
</div>
</div><p>通过访问 http://localhost:1234/index.html 就可以浏览本地页面</p>
</li>
<li>
<p>可否强行使用 80 端口，开启服务呢？🉑</p>
<blockquote>
<p>仅在 windows 上能直接使用这个端口号，在 Linus 和 Mac 中都必须输入密码才能使用，不推荐</p>
</blockquote>
<p>命令行：<code>hs -c-1 -p 80</code>  （在 80 端口开启服务）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">http</span><span class="o">:</span><span class="c1">//192.168.101.10:80
</span><span class="c1"></span><span class="nx">http</span><span class="o">:</span><span class="c1">//127.0.0.1:80
</span></code></pre></td></tr></table>
</div>
</div><p>通过访问 http://localhost/index.html 就可以浏览本地页面（80 是默认端口，可省略）</p>
</li>
<li>
<p>端口被占用的情况，会有如下报错，换个其他的端口号即可（六万多个端口）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">hs</span> <span class="o">-</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span> <span class="o">-</span><span class="nx">p</span> <span class="mi">80</span>
<span class="p">=&gt;</span>  <span class="nb">Error</span><span class="o">:</span> <span class="nx">listen</span> <span class="nx">EADDRINUSE</span> <span class="mf">0.0.0.0</span><span class="o">:</span><span class="mi">80</span> <span class="c1">// EADDRINUSE: error address in use 错误地址正在使用中
</span><span class="c1"></span>    
<span class="nx">hs</span> <span class="o">-</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span> <span class="o">-</span><span class="nx">p</span> <span class="mi">1234</span>
<span class="p">=&gt;</span>  <span class="nb">Error</span><span class="o">:</span> <span class="nx">listen</span> <span class="nx">EADDRINUSE</span> <span class="mf">0.0.0.0</span><span class="o">:</span><span class="mi">1234</span> <span class="c1">// error address in use
</span><span class="c1"></span>    
<span class="nx">hs</span> <span class="o">-</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span> <span class="o">-</span><span class="nx">p</span> <span class="mi">2233</span>
<span class="p">=&gt;</span>  <span class="nx">http</span><span class="o">:</span><span class="c1">//192.168.101.10:2233
</span><span class="c1"></span><span class="p">=&gt;</span>  <span class="nx">http</span><span class="o">:</span><span class="c1">//127.0.0.1:2233
</span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<p>​</p>
<p>​</p>
<h2 id="ip-和端口缺一不可">IP 和端口缺一不可</h2>
<blockquote>
<p>总而言之：<strong>IP 和 端口 缺一不可</strong> （记住这句话）</p>
</blockquote>
<ul>
<li>IP 是用来定位一个<strong>设备</strong>。</li>
<li>端口是用来定位一个设备的<strong>服务。</strong></li>
<li>有了 IP 和端口，就可以定位一个设备提供的服务了。</li>
<li>例如：百度设备提供的网页服务。腾讯设备提供的聊天服务。淘宝设备提供的支付服务</li>
<li>这些服务都可以通过 IP + 端口 ，实现唯一确定</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="域名是什么">域名是什么</h2>
<blockquote>
<p>域名就是对 IP 起一个友好的名字。</p>
<p>域名是以 .com  .net  .org  …  结尾的字符串，仅此而已。需要花钱购买</p>
<p>如：qq.com</p>
</blockquote>
<ul>
<li>
<p>在前面搭建个人博客时，已经注册过域名。</p>
</li>
<li>
<p>我没有自己的服务器，而是将这个域名映射到（指向） github 的服务器上</p>
</li>
<li>
<p>github 给我 4 个 IP。用户访问时，会访问到这4台中的任何一台服务器。访问的内容都是一样的</p>
</li>
</ul>
<p>​</p>
<p>补充：</p>
<ul>
<li>.com 域名，比较便宜，一年50-80</li>
<li>t.tt，曾经是锤子手机的域名，转手价50W。访问 t.tt 跳转至锤子手机官网：smartisan.com</li>
<li>蔡文胜，2000年抢注十多万个域名，倒手生意。 qiyi.com 是百度旗下爱奇艺的域名</li>
<li>为什么我们需要向国外的人购买域名？发域名的机构也很赚钱。这就是美国人欧洲人赚钱的思维，我发明一套东西，用户都需要使用的，那使用一次就要交一次钱。
<ul>
<li>比如苹果有很多手机专利。谷歌买了摩托罗拉，摩托罗拉也有很多手机专利。谷歌发明了安卓系统，手机厂商用到安卓系统里面的谷歌服务，也需要给谷歌钱。</li>
<li>中国的 5G 出来了，如果以后世界的 5G 应用是由中国主导，关键技术是中国的，那么中国就可以躺着赚钱。如果中国的 5G 搞起来了，那就不单是 5G，周边的所有产业都会全面超过其他国家（所以川普联合各国抵制）</li>
</ul>
</li>
</ul>
<blockquote>
<p>在互联网，每一个新东西出来，都蕴藏着巨大的商机。  如5G</p>
</blockquote>
<p>​</p>
<h3 id="域名就是对-ip-的别称">域名就是对 IP 的别称</h3>
<p>baidu.com 对应什么 IP</p>
<ul>
<li>
<p>命令行：ping baidu.com</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mf">220.181.38.148</span>  <span class="c1">// 也有 39.156.69.79
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>qq.com 对应什么 IP</p>
<ul>
<li>
<p>命令行：ping qq.com</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">125.39.52.26
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>知识点</p>
<blockquote>
<p>先总结：IP 和 域名 之间，没有什么必然的一对一关系</p>
</blockquote>
<ol>
<li>
<p>一个域名可以对应不同 IP（这个叫 <strong>负载均衡</strong>）</p>
<ul>
<li>这个叫做均衡负载，防止一台机器扛不住</li>
</ul>
</li>
<li>
<p>一个 IP 可以对应不同域名（这个叫 <strong>共享主机</strong>）</p>
<ul>
<li>比如6个人合买一台主机，这台主机服务6个域名</li>
</ul>
<ul>
<li>就叫做共享主机，穷开发者会这么做</li>
<li>或者一个公司提供不同的网站，但不想买两台服务器，就把两个网站（两个域名）放在同一台主机上</li>
</ul>
</li>
</ol>
<p>​</p>
<blockquote>
<p>通常 ping 同一个域名，不一定会得到同一个 IP。这里涉及 <strong>负载均衡</strong> 的问题。</p>
<ul>
<li>假如，一万人同时访问百度，如果只有一个服务器，就要同时接纳一万人。</li>
<li>如果有100万人同时访问，，即使每人只分配1k内存，也需要 100万 k，那么这台服务器肯定容纳不了</li>
<li>解决方法，把这个域名绑定到4个不同的 IP 上，4个 IP 分别位于 华中、华南、华东、华北。</li>
<li>电信有全国服务器，告诉电信，如果用户来自华中，就访问华中服务器…（1/4分流）</li>
<li>如此实现负载均衡。分散负担，不至于让某个服务器因承受不了而宕机。（网站优化策略）</li>
</ul>
</blockquote>
<p>​</p>
<p>补充：</p>
<ul>
<li>
<p>ping 的作者写的一篇文章：<a href="https://ftp.arl.army.mil/~mike/ping.html" target="_blank" rel="noopener noreffer">The Story of the PING Program</a></p>
</li>
<li>
<p>皮卡丘站起来，是皮卡兵。皮卡丘跑起来是什么？<a href="%e7%9a%ae%e5%8d%a1%e4%b9%92%e3%80%81%e7%9a%ae%e5%8d%a1%e4%b9%93" rel="">答案</a> 😂</p>
</li>
</ul>
<p>​</p>
<h3 id="域名和-ip-是怎么对应起来的">域名和 IP 是怎么对应起来的</h3>
<blockquote>
<p>通过 DNS</p>
<ul>
<li>Domain Name System （域名系统、域名服务）</li>
</ul>
</blockquote>
<h4 id="当你输入-baiducom">当你输入 baidu.com</h4>
<p><strong>过程</strong></p>
<ol>
<li>
<p>你的 Chrome 浏览器会向电信/联通提供的 DNS 服务器询问 baidu.com 对应什么IP</p>
</li>
<li>
<p>电信/联通会回答一个 IP（具体过程很复杂，不研究）</p>
<ul>
<li>
<p>这个过程可以用 nslookup 模拟（ns域名，lookup寻找）命令行：nslookup baidu.com</p>
<p></p>
</li>
</ul>
</li>
<li>
<p>然后 Chrome 才会向对应 IP 的 80 / 443 端口发送请求</p>
</li>
<li>
<p>请求内容是查看 baidu.com 的首页</p>
<ul>
<li>baidu 收到请求，就会把你请求的页面的 index.html 发送给你，index.html 中又会请求 css 、js，加载完css、js，就可以看到 baidu.com 的完整页面</li>
</ul>
</li>
</ol>
<p>​</p>
<p><strong>在 network 中可以查看全部请求</strong></p>
<ul>
<li>
<p>Request URL:    <a href="https://www.baidu.com/">https://www.baidu.com/</a>（末尾的 / 表示请求的是baidu的根目录）</p>
<p></p>
</li>
<li>
<p>Response：[得到一个<code>&lt;html&gt;…&lt;/html&gt;</code>]，浏览器就会把这一串 html 渲染出来（中间遇到 link 会请求对应的图片、css、js等文件）</p>
</li>
</ul>
<p>​</p>
<p><strong>为什么是 80 或 443 端口？</strong></p>
<blockquote>
<p>因为这是规定。</p>
</blockquote>
<p>我们在地址栏输入 baidu.com 时，为什么不用写端口号？如 <code>baidu.com:443</code> （ IP 和端口不是缺一不可吗！）</p>
<ul>
<li>
<p>服务器默认用 80 提供 http 服务</p>
</li>
<li>
<p>服务器默认用 443 提供 https 服务</p>
</li>
<li>
<p>你可以在开发者工具里看到具体的端口</p>
<p>61.135.168.125:443  （ 前面就是服务器 IP ，后面就是网页服务的端口）</p>
<p></p>
<p>访问 http 就是 80，访问 https 就是 443</p>
</li>
</ul>
<p>​</p>
<h3 id="题外话">题外话</h3>
<blockquote>
<p>前端需要懂点域名知识</p>
</blockquote>
<h4 id="www">www</h4>
<ul>
<li><a href="http://www.baidu.com">www.baidu.com</a> 和 baidu.com</li>
<li>是同一个域名吗？不是</li>
</ul>
<h4 id="他们是什么关系">他们是什么关系</h4>
<blockquote>
<p><a href="http://www.baidu.com">www.baidu.com</a> 和 baidu.com</p>
</blockquote>
<ul>
<li>com 是顶级域名（com 全写 company 公司，org 非营利性组织）</li>
<li>baidu.com 是二级域名（俗称一级域名）父域名</li>
<li><a href="http://www.baidu.com">www.baidu.com</a> 是三级域名（俗称二级）子域名</li>
<li>他们是父子关系</li>
<li>github.io 把子域名 xxx.github.io 免费给你使用
<ul>
<li>所以 github.io（github公司）和 xxx.github.io（个人网站） 可能不是同一家公司，之间没什么关系</li>
</ul>
</li>
<li>所以你应该知道 <a href="http://www.baidu.com">www.baidu.com</a> 和 baidu.com 可以不是同一家公司，也可以是</li>
<li>www 是多余的吗？是的，非常多余。
<ul>
<li>早期人们为了表明自己是 www 而加的，实际上没有必要加，因为所有域名本身就存在与 万维网www中，写上www前缀反倒多此一举</li>
</ul>
</li>
</ul>
<p>​</p>
<h2 id="如何请求不同的页面">如何请求不同的页面</h2>
<p>访问不同的<strong>路径</strong>，就请求到不同的页面，如下（注意：路径后面不加后缀）</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">https://developer.mozilla.org/zh-CN/docs/Web/HTML</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">https://developer.mozilla.org/zh-CN/docs/Web/CSS</a></li>
</ul>
<p>工具</p>
<ul>
<li>使用 Chrome 开发者工具 Network 面板看看区别
<ul>
<li>只有 Request URL 不同</li>
</ul>
</li>
</ul>
<p>​</p>
<h2 id="同一个页面不同内容">同一个页面，不同内容</h2>
<p>不同的<strong>查询参数</strong>，返回不同的内容</p>
<ul>
<li><a href="http://www.baidu.com/s?wd=hi">www.baidu.com/s?wd=hi</a></li>
<li><a href="http://www.baidu.com/s?wd=hello">www.baidu.com/s?wd=hello</a></li>
</ul>
<p>​</p>
<h2 id="同一个内容不同位置">同一个内容，不同位置</h2>
<p><strong>锚点</strong>可以做到</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS#">https://developer.mozilla.org/zh-CN/docs/Web/CSS#</a>参考书</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS#">https://developer.mozilla.org/zh-CN/docs/Web/CSS#</a>教程</li>
</ul>
<p>注意</p>
<ul>
<li>锚点看起来有中文，实际不支持中文</li>
<li><code>#参考书</code> 会变成 <code>#%E5%8F%82%E8%80%83%E4%B9%A6</code>  重新编码</li>
<li>锚点是无法在 Network 面板看到的，因为锚点不会传给服务器。
<ul>
<li># 井号后面的内容会被浏览器直接吃掉，并不会传到服务器中</li>
<li>锚点仍在当前页面中，只是位置不同而已，并不需要重新请求数据</li>
<li><strong>注意</strong>：一定不要把用户传参拼接到 # 后面，会被浏览器当做锚点内容直接吃掉，服务器就无法获取到参数</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="一个-url-的完整内容">一个 URL 的完整内容</h2>
<blockquote>
<p><strong>协议  +  域名 或 IP  +  端口号  +  路径  +  查询字符串  +  锚点</strong></p>
</blockquote>
<ul>
<li>协议：分 HTTP 和 HTTPS</li>
<li>域名：用来表示IP对应的名称的字符串</li>
<li>IP ：用来定位一个设备的字符串（分为4段，最大值255）</li>
<li>端口号：提供一个服务，就要有对用端口号（有六万多个）</li>
<li>路径：就是一个字符串，用来判断用户访问什么网页</li>
<li>查询参数：就是这个网页中，用户要具体看什么内容，可能有分页</li>
<li>锚点：内容已经获取到了，通过锚点定位到用户想要具体查看的内容的位置（实现文档内部的定位）</li>
</ul>
<p>把上述全部加起来，就是 李爵士发明的 URL （统一资源定位符）</p>
<blockquote>
<p>URL</p>
<ul>
<li>
<p>U：Uniform 统一。国际化标准的</p>
</li>
<li>
<p>R：Resouce 资源。图片、网页…都是资源</p>
</li>
<li>
<p>L：Locator 定位符。</p>
</li>
</ul>
</blockquote>
<p>例：</p>
<ul>
<li>就算没写，你也应该知道端口
<ul>
<li>HTTPS 默认端口 443、HTTP 默认端口 80</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="http协议">HTTP（协议）</h2>
<blockquote>
<p>前面讲了 IP 协议：是用于表示每个设备的地址</p>
<p>而 HTTP 协议：是用来表示如何传输网页的</p>
<ul>
<li>HTTP协议，是基于 TCP 和 IP 两个协议</li>
<li>先有 TCP、IP，李爵士基于前人发明的这两个协议，发明了新的 HTTP 协议</li>
</ul>
</blockquote>
<p>​</p>
<h2 id="curl-命令">curl 命令</h2>
<ul>
<li>curl    /kɜːrl/     使…卷曲</li>
</ul>
<blockquote>
<p>如何用 curl 命令，发出 HTTP 的请求？</p>
</blockquote>
<h3 id="用-curl-可以发-http-请求">用 curl 可以发 HTTP 请求</h3>
<p><strong>示例1：</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl https://www.baidu.com
</code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li>执行命令，获取到整个文档。（中文默认 utf-8 编码，而控制台默认 GBK  所以中文会乱码）</li>
<li>我们在 Chrome 的地址栏中输入上述网址，Chrome 也是做了同样的事情，获取到这个html文档并解析</li>
</ul>
<p>​</p>
<p><strong>示例2：</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl -v http://baidu.com    只有域名没有路径
</code></pre></td></tr></table>
</div>
</div><ul>
<li>-v ： verbose   /vɜːrˈboʊs/   啰嗦（效果：会显示更多内容）</li>
</ul>
<p></p>
<blockquote>
<p>请求的内容</p>
</blockquote>
<ol>
<li>
<p>我们发出的 HTTP 请求中，只有域名没有路径，则默认请求根路径，会自动补全根路径的斜杠 /</p>
</li>
<li>
<p>开启代理，使用了一些代理的功能（非必须）</p>
</li>
<li>
<p>问了DNS：获取到 baidu.com 的 IP</p>
</li>
<li>
<p>获取到 IP 后，就开始启动 TCP</p>
</li>
<li>
<p>开始连接到 baidu.com（ 220.181.38.148 这个 IP） 的 80 端口</p>
</li>
<li>
<p>连接成功，往 baidu.com 发送了这5行内容</p>
<ol>
<li>GET请求，请求/根路径，使用 HTTP 协议 1.1 版本</li>
<li>因为一个IP（220.181.38.148）可能对应多个域名，说明需要访问的是这个IP上的 baidu.com 这个域名</li>
<li>说明我是用什么来访问的：用 curl 的 7.61.1 版本来访问的</li>
<li>期待返回什么内容：*/*    表示所有内容我都接收</li>
<li>空行（发送一个回车）   表示请求头部分结束</li>
</ol>
</li>
</ol>
<blockquote>
<p>返回的内容</p>
</blockquote>
<ul>
<li>
<p>响应头：先忽略 😂</p>
</li>
<li>
<p><code>&lt;html&gt; &lt;meta …&gt;  &lt;/html&gt;</code> meta 中内容，意为请重新访问 <a href="http://www.baidu.com">http://www.baidu.com</a></p>
<ul>
<li>说明 <a href="http://baidu.com">http://baidu.com</a> 这个 URL 被弃用了，只使用这个最早就有的 URL <a href="http://www.baidu.com">www.baidu.com</a></li>
<li>通常直接使用 baidu.com 访问百度的人，基本都是程序员，将程序员的流量导到 www 上</li>
</ul>
</li>
</ul>
<blockquote>
<p>上面请求失败，发起第二次请求   <code>curl -v http://www.baidu.com</code></p>
</blockquote>
<p></p>
<p>​</p>
<p><strong>示例3：</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl -s -v -- https://www.baidu.com
</code></pre></td></tr></table>
</div>
</div><ul>
<li>会比上面显示的内容更详细</li>
</ul>
<p>​</p>
<h3 id="需要理解以下流程">需要理解以下流程</h3>
<ul>
<li>url 会被 curl 工具重写，先请求 DNS 获得 IP</li>
<li>先进行 TCP 连接，TCP 连接成功后，开始发送 HTTP 请求</li>
<li>请求内容看一眼</li>
<li>响应内容看一眼</li>
<li>响应结束后，关闭TCP连接（curl 中没有直接写出来）</li>
<li>真正结束（只有TCP结束才是真正的结束）</li>
</ul>
<p>​</p>
<h3 id="http">HTTP</h3>
<blockquote>
<p>HTTP 到底做了什么</p>
<ul>
<li>规定请求的格式是什么，响应的格式是什么</li>
</ul>
</blockquote>
<p>HTTP 规定了请求怎么写： 如何写第6步中的5行请求</p>
<p>HTTP 规定了响应怎么写： 如何写下面响应的内容</p>
<p>​</p>
<blockquote>
<p>那么 HTTP 到底是怎么规定请求格式和响应格式的？  下回分解 ✋</p>
</blockquote>
<p>​</p>
<p>​</p>
<h2 id="习题">习题</h2>
<blockquote>
<p>关于 <a href="http://www.baidu.com">www.baidu.com</a> 和 baidu.com，正确的有（多选）<a href="2,3" rel="">答案</a></p>
</blockquote>
<ol>
<li>是同一个域名</li>
<li>是不同的域名</li>
<li>它们还有相同的一级域名 baidu.com</li>
</ol>
<blockquote>
<p>关于 hosts 文件，正确的有（多选） <a href="1,2,4" rel="">答案</a></p>
</blockquote>
<ol>
<li>hosts 文件中以 # 开头的表示注释</li>
<li>hosts 中可以添加一行 127.0.0.1 sam，让 sam 成为 127.0.0.1 的别称</li>
<li>hosts 中可以添加一行 sam 127.0.0.1，让 sam 成为 127.0.0.1 的别称</li>
<li>hosts 一般需要用管理员权限才能编辑</li>
</ol>
<blockquote>
<p>HTTP 的英文全称是 <strong>____</strong>（注意大小写不要错了）</p>
</blockquote>
<ul>
<li>HyperText Transfer Protocol</li>
</ul>
<blockquote>
<p>DNS 的英文全称是 <strong>____</strong>（注意大小写不要错了）</p>
</blockquote>
<ul>
<li>Domain Name System</li>
</ul>
<blockquote>
<p>URL 包含哪些部分？（多选）<a href="1,2,3,4,5,6" rel="">答案</a></p>
</blockquote>
<ol>
<li>协议</li>
<li>域名或IP</li>
<li>端口</li>
<li>路径</li>
<li>查询参数</li>
<li>锚点</li>
<li>get 或 post</li>
</ol>]]></description>
</item><item>
    <title>Re：从零开始の CSS 学习笔记——动画</title>
    <link>http://samrks.github.io/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/</link>
    <pubDate>Sun, 02 Aug 2020 01:19:27 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/20200802-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%8A%A8%E7%94%BB/</guid>
    <description><![CDATA[<p>浏览器的渲染流程、transform、transition、animation</p>
<p>​</p>
<h2 id="动画的原理">动画的原理</h2>
<blockquote>
<p>人脑的 bug</p>
</blockquote>
<h3 id="动画">动画</h3>
<h4 id="定义">定义</h4>
<ul>
<li>由许多静止的画面（帧），</li>
<li>以一定的速度（如每秒30张）连续播放时，</li>
<li>肉眼因视觉残象产生错觉，</li>
<li>而误以为是活动的画面。</li>
</ul>
<h4 id="概念">概念</h4>
<ul>
<li>帧：每个静止的画面都叫做帧</li>
<li>播放速度：每秒24帧（影视）或者每秒30帧（游戏）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="一个最简单的例子">一个最简单的例子</h2>
<h3 id="将div从左往右移动">将div从左往右移动</h3>
<blockquote>
<p><a href="http://js.jirengu.com/bagow/1/edit?html,css,js,output">http://js.jirengu.com/bagow/1/edit?html,css,js,output</a></p>
</blockquote>
<ul>
<li><a href="http://js.jirengu.com/wotud/3/edit" target="_blank" rel="noopener noreffer">JSBin 示例1</a>  通过循环定时器 + 定位 + left 实现动画。控制每隔一小段时间增加 left 值，实现位移</li>
<li><a href="http://js.jirengu.com/rogot/1/edit" target="_blank" rel="noopener noreffer">JSBin 示例2</a>  通过延时器 + 添加类名 + transition / transform 实现动画。控制添加类名</li>
</ul>
<h4 id="原理">原理</h4>
<ul>
<li>每过一段时间（用setlnterval做到），</li>
<li>将div移动一小段距离，</li>
<li>直到移动到目标地点。</li>
</ul>
<h4 id="注意性能">注意性能</h4>
<blockquote>
<p>需要先搞懂：<a href="#%e6%b5%8f%e8%a7%88%e5%99%a8%e6%b8%b2%e6%9f%93%e8%bf%87%e7%a8%8b" rel="">浏览器的渲染步骤</a>，以及 <a href="#%e6%af%8f%e4%b8%aa%e5%b1%9e%e6%80%a7%e8%a7%a6%e5%8f%91%e4%bb%80%e4%b9%88%e6%b5%81%e7%a8%8b" rel="">每个属性会触发什么流程</a></p>
</blockquote>
<ul>
<li>
<p>绿色表示重新绘制（repaint）了</p>
</li>
<li>
<p>CSS渲染过程依次包含布局、绘制、合成</p>
</li>
<li>
<p>其中布局和绘制有可能被省略</p>
</li>
</ul>
<p>​</p>
<h3 id="前端高手不用-left-做动画">前端高手不用 left 做动画</h3>
<h4 id="用-transform变形">用 transform（变形）</h4>
<ul>
<li><a href="http://js.jirengu.com/lojiz/1/edit?html,css,js,output" target="_blank" rel="noopener noreffer">JSBin 演示</a></li>
</ul>
<h4 id="原理-1">原理</h4>
<ul>
<li><code>transform: translateX(0=&gt;300px)</code></li>
<li>直接修改会被合成，需要等一会修改</li>
<li>transition 过渡属性可以自动脑补中间帧</li>
</ul>
<h4 id="注意性能-1">注意性能</h4>
<blockquote>
<p>需要先搞懂：<a href="#%e6%b5%8f%e8%a7%88%e5%99%a8%e6%b8%b2%e6%9f%93%e8%bf%87%e7%a8%8b" rel="">浏览器的渲染步骤</a>，以及 <a href="#%e6%af%8f%e4%b8%aa%e5%b1%9e%e6%80%a7%e8%a7%a6%e5%8f%91%e4%bb%80%e4%b9%88%e6%b5%81%e7%a8%8b" rel="">每个属性会触发什么流程</a></p>
</blockquote>
<ul>
<li>transform 优势在于，并没有 relayout（重新布局） 和 repaint（重新绘制）过程</li>
<li>transform 比 left 性能好很多（ 因为 left 会依次经过 relayout、 repaint、composite 3个过程）</li>
</ul>
<p>​</p>
<h3 id="如何查看性能">如何查看性能</h3>
<blockquote>
<p>上述 JSBin 示例1/2两种方式，在性能上有什么区别 ？</p>
</blockquote>
<h4 id="查看性能的方式">查看性能的方式</h4>
<ul>
<li>开启浏览器的【渲染 Rendering 】&gt;  【画图闪烁 Paint flashing】：突出显示需要重新绘制的页面区域（绿色）
<ul>
<li><strong>如果元素发生的重新渲染（绿）的次数多，则更耗性能</strong></li>
</ul>
</li>
</ul>
<p></p>
<ul>
<li>
<p>示例1：使用 setInterval ，控制 left 实现动画</p>
<p>（位移全程 demo元素 都呈绿色：说明全程都在进行demo元素的重新渲染绘制）</p>
</li>
</ul>
<p></p>
<ul>
<li>
<p>示例2：添加类名，通过 transition + transform 实现动画</p>
<p>（刷新后，初次渲染呈绿色，移动过程没有发生重新渲染，移动结束的位置重新渲染一次）</p>
<p></p>
</li>
<li>
<p><strong>总结</strong>：<strong>显然 ，示例1 更耗性能，全程都需要重新渲染</strong></p>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="浏览器的渲染原理">浏览器的渲染原理</h2>
<blockquote>
<ul>
<li>既然讲到这里，提到了性能、渲染，那就深入了解一下</li>
<li>了解浏览器的渲染流程后，再回头看前面2个示例，可能会更好理解它们的不同</li>
</ul>
</blockquote>
<h3 id="参考文章">参考文章</h3>
<h4 id="google-团队写的文章右上角中文">Google 团队写的文章（右上角中文）</h4>
<ul>
<li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction" target="_blank" rel="noopener noreffer">渲染树构建、布局及绘制</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/rendering/" target="_blank" rel="noopener noreffer">渲染性能</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count" target="_blank" rel="noopener noreffer">使用 transform 来实现动画</a></li>
</ul>
<h4 id="查看css各属性触发什么">查看CSS各属性触发什么</h4>
<ul>
<li><a href="https://csstriggers.com/" target="_blank" rel="noopener noreffer">CSSTriggers.com</a></li>
</ul>
<p>​</p>
<h3 id="浏览器渲染过程">浏览器渲染过程</h3>
<blockquote>
<p>浏览器在获取到 html 和 css 后做了什么？</p>
</blockquote>
<h4 id="步骤">步骤</h4>
<ol>
<li>根据 HTML 构建 HTML 树（DOM）</li>
<li>根据 CSS 构建 CSS 树（CSSOM）</li>
<li>将两棵树合并成一颗渲染树（render tree）</li>
<li>根据渲染树，进行 Layout 布局（<strong>文档流</strong>、盒模型、计算大小和位置）
<ul>
<li>先定位：某个标签是否在文档流中…<strong>（文档流的概念非常重要！！）</strong></li>
<li>定位后，要知道这个标签多高多宽、样式如何…</li>
</ul>
</li>
<li>Paint 绘制（填色：把边框颜色、文字颜色、阴影等画出来）</li>
<li>Composite 合成（根据层叠关系展示画面）</li>
</ol>
<h4 id="三棵树">三棵树</h4>
<blockquote>
<p>render tree 就是最终用户看到的树</p>
</blockquote>
<p></p>
<p>​</p>
<h2 id="如何更新样式">如何更新样式</h2>
<h3 id="一般我们用-js-来更新样式">一般我们用 JS 来更新样式</h3>
<ul>
<li>比如 <code>div.style.background='red'</code>  让内联背景变红色</li>
<li>比如 <code>div.style.display='none'</code>  让div消失</li>
<li>比如 <code>div.classList.add('red')</code>  （小白才直接加样式，高手从来只加类名）</li>
<li>比如 <code>div.remove()</code>直接删掉节点</li>
</ul>
<h3 id="那么这些方法有什么不同吗">那么这些方法有什么不同吗</h3>
<ul>
<li>有三种不同的渲染方式</li>
<li>详细看下面  ↓↓</li>
</ul>
<h3 id="三种更新方式">三种更新方式</h3>
<blockquote>
<p>使用 JS 来更新样式，要经过哪些步骤 ？</p>
<ul>
<li>
<p>下面有3种代码示例，配合开启浏览器渲染功能，清晰看到执行重新绘制（Paint）的元素</p>
</li>
<li>
<p>注意 JSBin 中最好<strong>全屏</strong>查看效果，在 iframe 里看可能有问题</p>
</li>
</ul>
</blockquote>
<p></p>
<h5 id="第一种流程全走一遍">第一种，流程全走一遍</h5>
<ul>
<li><a href="http://js.jirengu.com/jagel/1/edit?html,css,js,output" target="_blank" rel="noopener noreffer">div.remove()</a> 会触发当前消失，其他元素 relayout 重新布局</li>
</ul>
<h5 id="第二种跳过-layout">第二种，跳过 layout</h5>
<ul>
<li>说明没有改变元素的位置和大小，不需要变动布局</li>
</ul>
<ul>
<li>比如说：只<a href="http://js.jirengu.com/jidam/1/edit?html,css,js,output" target="_blank" rel="noopener noreffer">改变背景颜色</a>，直接 repaint + composite</li>
</ul>
<h5 id="第三种跳过-layout-和-paint">第三种，跳过 layout 和 paint</h5>
<ul>
<li>没有改变位置、大小，也没有改颜色，只需要合成</li>
</ul>
<ul>
<li>例如：只<a href="http://js.jirengu.com/wusew/1" target="_blank" rel="noopener noreffer">改变 transform</a>，则只需 composite 合成</li>
<li>注意必须全屏查看效果，在 iframe 里看有问题</li>
</ul>
<p>​</p>
<h3 id="每个属性触发什么流程">每个属性触发什么流程</h3>
<blockquote>
<p>CSS变态之处来了：挨个尝试吧</p>
</blockquote>
<p>还好，程序员喜欢分享</p>
<p><a href="https://csstriggers.com/">https://csstriggers.com/</a>  这个网站已经把所有属性全试过了</p>
<p></p>
<ul>
<li>Blink：谷歌 Chrome 浏览器的内核（一般只看 Chrome 性能渲染）</li>
<li>Gecko：火狐浏览器 Firefox</li>
<li>WebKit：苹果 Safari 浏览器</li>
<li>EdgeHTML：微软 Edge 浏览器</li>
</ul>
<blockquote>
<p>现在可以解释 <a href="#%e4%b8%80%e4%b8%aa%e6%9c%80%e7%ae%80%e5%8d%95%e7%9a%84%e4%be%8b%e5%ad%90" rel="">为什么</a> <strong>前端高手不用 left 做动画</strong>，而用 transform 做动画了</p>
<ul>
<li>因为执行 left 会触发3个流程：先布局、再绘制、最后合成</li>
<li>而执行 transform 只会触发 1个流程：只合成</li>
</ul>
</blockquote>
<p></p>
<p></p>
<p>​</p>
<p>​</p>
<h2 id="css动画优化">CSS动画优化</h2>
<blockquote>
<p>可以自己总结一篇博客。面试背不出来，可以让面试官去看博客</p>
</blockquote>
<blockquote>
<p>CSS 性能优化，除了把 left 变成 transform ，还有什么？</p>
<ul>
<li>面试可能考察，但这个问题<strong>没什么技术含量</strong>，就是背</li>
</ul>
</blockquote>
<h3 id="没什么技术含量">没什么技术含量</h3>
<p>答案都在 <a href="https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count" target="_blank" rel="noopener noreffer">Google写的文章</a> 里，谁看完谁牛 X</p>
<p></p>
<ul>
<li>
<p><a href="https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution" target="_blank" rel="noopener noreffer">优化 JS 的执行</a> （JavaScript）</p>
</li>
<li>
<p><a href="https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations" target="_blank" rel="noopener noreffer">缩小样式计算的范围并降低其复杂性</a> （优化 Style 过程）</p>
</li>
<li>
<p><a href="https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing" target="_blank" rel="noopener noreffer">避免大型、复杂的布局和布局抖动</a>（优化 Layout 布局过程）</p>
</li>
<li>
<p><a href="https://developers.google.com/web/fundamentals/performance/rendering/simplify-paint-complexity-and-reduce-paint-areas" target="_blank" rel="noopener noreffer">简化绘制的复杂度、减小绘制区域</a>（优化 Paint 绘制过程）</p>
</li>
<li>
<p><a href="https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count" target="_blank" rel="noopener noreffer">坚持仅合成器的属性和管理层计数</a>（优化 Composite 合成过程）</p>
</li>
</ul>
<blockquote>
<p>上述每篇文章中的优化方法，都总结在【<strong>TL;DR</strong>（too long don&rsquo;t read 太长不看）】部分</p>
<p>每条优化点之间，都没什么规律，就依靠死记硬背（面试问到，可能这些点，如果能答出1个，就得满分）</p>
</blockquote>
<h3 id="js优化">JS优化</h3>
<p>使用 requestAnimationFrame 代替 setTimeout 或 setInterval</p>
<h3 id="css优化">CSS优化</h3>
<p>使用 will-change 或 translate（transform）</p>
<h3 id="没错">没错</h3>
<blockquote>
<p>没错，完全就是死记硬背！</p>
</blockquote>
<blockquote>
<p>如果面试官问，“ CSS 怎么优化 ”？（通常就是问动画怎么优化，性能上更低耗）</p>
<ul>
<li>动画尽量使用 will-change 或 translate（transform），不直接使用 left</li>
<li>JS 控制的动画中，尽量不使用 setTimeout 和 setInterval，而使用 requestAnimationFrame</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h2 id="transform-全解">transform 全解</h2>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform" target="_blank" rel="noopener noreffer">MDN</a> 上讲的非常详细</p>
</blockquote>
<h3 id="transform">transform</h3>
<h4 id="四个常用功能">四个常用功能</h4>
<ul>
<li><a href="#transform%e4%b9%8btranslate" rel="">位移 translate</a>（常用）</li>
<li><a href="#transform%e4%b9%8bscale" rel="">缩放 scale</a>（常用）</li>
<li><a href="#transform%e4%b9%8brotate" rel="">旋转 rotate</a>（做加载动画可能用到）</li>
<li><a href="#transform%e4%b9%8bskew" rel="">倾斜 skew</a>（不常用）</li>
</ul>
<h4 id="经验">经验</h4>
<ul>
<li>一般都需要配合 transition 过渡</li>
<li>inline 元素不支持 transform，需要先变成 block</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="transform之translate">transform之translate</h3>
<h4 id="常用写法">常用写法</h4>
<blockquote>
<p>可以写长度length和百分号percentage， ?表示可省略值</p>
</blockquote>
<ul>
<li>
<p><code>translateX(&lt;length-percentage&gt;)</code>   （横向）</p>
</li>
<li>
<p><code>translateY（&lt;length-percentage&gt;)</code>    （纵向）</p>
</li>
<li>
<p><code>translate(&lt;length-percentage&gt;,&lt;length-percentage&gt;?) </code></p>
<ul>
<li>可省略第二个值，只写第一个值，默认x轴</li>
</ul>
</li>
<li>
<p><code>translateZ(&lt;length&gt;)</code> （垂直于屏幕的方向）</p>
<ul>
<li>
<p>在三维世界中，才能看出 Z 的变化。</p>
<ul>
<li>需要配合 perspective 属性，告知浏览器<strong>视点</strong>的位置 来形成三维。</li>
<li>例：<strong><code>perspective: 1000px</code></strong> 指视点在（位于画面中心）距离屏幕 1000 像素的位置上。</li>
</ul>
</li>
<li>
<p>注意：是给父容器设置 perspective</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;wrapper&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;demo&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="p">#</span><span class="nn">demo</span><span class="p">{</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">height</span><span class="p">:</span> <span class="mi">200</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
    <span class="k">margin</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="p">#</span><span class="nn">demo</span><span class="p">:</span><span class="nd">hover</span><span class="p">{</span>
    <span class="k">transform</span><span class="p">:</span> <span class="nb">translateZ</span><span class="p">(</span><span class="mi">50</span><span class="kt">px</span><span class="p">);</span>  <span class="c">/* 元素在z轴（默认垂直屏幕方向）上的位置 */</span>
  <span class="p">}</span>
  <span class="p">.</span><span class="nc">wrapper</span><span class="p">{</span>
    <span class="k">perspective</span><span class="p">:</span> <span class="mi">1000</span><span class="kt">px</span><span class="p">;</span>  <span class="c">/* 形成三维构图，标注视点位置 */</span>
    <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">black</span><span class="p">;</span>
  <span class="p">}</span> 
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>translate3d(x,y,z)</p>
<ul>
<li><strong><code>translate3d(50px,50px,200px);</code></strong>  同时设定3个轴上的位置</li>
</ul>
</li>
<li>
<p><a href="http://js.jirengu.com/xidiy/1/edit?html,css,output" target="_blank" rel="noopener noreffer">JSBin 演示</a></p>
</li>
</ul>
<h4 id="经验-1">经验</h4>
<ul>
<li>
<p>要学会看懂 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform" target="_blank" rel="noopener noreffer">MDN 的语法格式</a></p>
</li>
<li>
<p>translate(-50%，-50%) 可做绝对定位元素的<strong>居中</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">#</span><span class="nn">demo</span><span class="p">{</span>
  <span class="k">position</span><span class="p">:</span> <span class="kc">absolute</span><span class="p">;</span>
  <span class="k">left</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
  <span class="k">top</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
  <span class="k">transform</span><span class="p">:</span> <span class="nb">translate</span><span class="p">(</span><span class="mi">-50</span><span class="kt">%</span><span class="p">,</span> <span class="mi">-50</span><span class="kt">%</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="transform之scale">transform之scale</h3>
<h4 id="常用写法-1">常用写法</h4>
<ul>
<li><code>scaleX(&lt;number&gt;) </code></li>
<li><code>scaleY(&lt;number&gt;) </code></li>
<li><code>scale(&lt;number&gt;,&lt;number&gt;?)</code></li>
<li><a href="http://js.jirengu.com/jucal/1/edit?html,css,output" target="_blank" rel="noopener noreffer">JSBin 演示</a></li>
</ul>
<h4 id="经验-2">经验</h4>
<ul>
<li>用得较少，因为缩放容易出现模糊
<ul>
<li>border 也会跟随缩放</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="transform之rotate">transform之rotate</h3>
<h4 id="常用写法-2">常用写法</h4>
<blockquote>
<p>rotate 默认以 Z轴为中心轴，进行转动</p>
</blockquote>
<ul>
<li><code>rotate（[&lt;angle&gt;|&lt;zero&gt;]) </code>   以Z轴为中心旋转</li>
<li><code>rotateZ([&lt;angle&gt;|&lt;zero&gt;]) </code>   以Z轴为中心旋转</li>
<li><code>rotateX([&lt;angle&gt;|&lt;zero&gt;])  </code> 以X轴为中心旋转</li>
<li><code>rotateY（[&lt;angle&gt;|&lt;zero&gt;]) </code>   以Y轴为中心旋转</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/rotate3d" target="_blank" rel="noopener noreffer">rotate3d</a> 太复杂，无法用语言表述</li>
<li><a href="http://js.jirengu.com/jiquq/1/edit?html,css,output" target="_blank" rel="noopener noreffer">JSBin 演示</a></li>
</ul>
<h4 id="经验-3">经验</h4>
<ul>
<li>一般用于360度旋转制作 loading</li>
<li>用到时再搜索 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/rotate" target="_blank" rel="noopener noreffer">rotate MDN</a> 看文档</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="transform之skew">transform之skew</h3>
<h4 id="常用写法-3">常用写法</h4>
<ul>
<li><code>skewX([&lt;angle&gt;|&lt;zero&gt;]) </code></li>
<li><code>skewY（[&lt;angle&gt;|&lt;zero&gt;]) </code></li>
<li><code>skew([&lt;angle&gt;I&lt;zero&gt;],[&lt;angle&gt;|&lt;zero&gt;]?) </code></li>
<li><a href="http://js.jirengu.com/tazer/1/edit?html,css,output" target="_blank" rel="noopener noreffer">JSBin 演示</a></li>
</ul>
<h4 id="经验-4">经验</h4>
<ul>
<li>用得较少</li>
<li>用到时再搜 skew MDN 文档</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="transform-多重效果">transform 多重效果</h3>
<h4 id="组合使用">组合使用</h4>
<ul>
<li>
<p><strong><code>transform: scale(0.5) translate(-100%, -100%);</code></strong></p>
</li>
<li>
<p><strong><code>transform: none;</code></strong> 取消所有</p>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="实践用-transform-做红心">实践：用 transform 做红心</h2>
<h3 id="跳动的心">跳动的心</h3>
<ul>
<li><a href="http://js.jirengu.com/nonud/1/edit?html,css,output" target="_blank" rel="noopener noreffer">JSBin</a></li>
</ul>
<h3 id="心得">心得</h3>
<ul>
<li>CSS需要你有想象力，而不是逻辑</li>
<li>CSS给出的属性都很简单，但是可以组合得很复杂</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!doctype html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>beating heart<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
      <span class="o">*</span><span class="p">{</span>
        <span class="k">margin</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">box-sizing</span><span class="p">:</span> <span class="kc">border-box</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="p">#</span><span class="nn">heart</span><span class="p">{</span>
        <span class="k">margin</span><span class="p">:</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span>
        <span class="k">position</span><span class="p">:</span> <span class="kc">relative</span><span class="p">;</span>
        <span class="c">/*border: 1px solid black;*/</span>
        <span class="k">display</span><span class="p">:</span> <span class="kc">inline</span><span class="o">-</span><span class="kc">block</span><span class="p">;</span>
        <span class="k">transition</span><span class="p">:</span> <span class="kc">all</span> <span class="mf">.5</span><span class="kt">s</span> <span class="kc">ease</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="p">#</span><span class="nn">heart</span><span class="p">:</span><span class="nd">hover</span><span class="p">{</span>
        <span class="k">transform</span><span class="p">:</span> <span class="nb">scale</span><span class="p">(</span><span class="mf">1.5</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="p">#</span><span class="nn">heart</span><span class="o">&gt;</span><span class="p">.</span><span class="nc">bottom</span><span class="p">{</span>
        <span class="k">width</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
        <span class="k">height</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
        <span class="k">background-color</span><span class="p">:</span> <span class="kc">red</span><span class="p">;</span>
        <span class="c">/*border: 1px solid red;*/</span>
        <span class="k">transform</span><span class="p">:</span> <span class="nb">rotate</span><span class="p">(</span><span class="mi">45</span><span class="kt">deg</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="p">#</span><span class="nn">heart</span><span class="o">&gt;</span><span class="p">.</span><span class="nc">left</span><span class="p">{</span>
        <span class="k">width</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
        <span class="k">height</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
        <span class="k">background-color</span><span class="p">:</span> <span class="kc">red</span><span class="p">;</span>
        <span class="c">/*border: 1px solid red;*/</span>
        <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
        <span class="k">transform</span><span class="p">:</span> <span class="nb">rotate</span><span class="p">(</span><span class="mi">45</span><span class="kt">deg</span><span class="p">)</span> <span class="nb">translateX</span><span class="p">(</span><span class="mi">31</span><span class="kt">px</span><span class="p">);</span>
        <span class="k">position</span><span class="p">:</span> <span class="kc">absolute</span><span class="p">;</span>
        <span class="k">bottom</span><span class="p">:</span><span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
        <span class="k">right</span><span class="p">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="p">#</span><span class="nn">heart</span> <span class="o">&gt;</span> <span class="p">.</span><span class="nc">right</span> <span class="p">{</span>
        <span class="k">width</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
        <span class="k">height</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
        <span class="k">background-color</span><span class="p">:</span> <span class="kc">red</span><span class="p">;</span>
        <span class="c">/*border: 1px solid red;*/</span>
        <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span> <span class="mi">50</span><span class="kt">%</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">transform</span><span class="p">:</span> <span class="nb">rotate</span><span class="p">(</span><span class="mi">45</span><span class="kt">deg</span><span class="p">)</span> <span class="nb">translate</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">30</span><span class="kt">px</span><span class="p">);</span>
        <span class="k">position</span><span class="p">:</span> <span class="kc">absolute</span><span class="p">;</span>
        <span class="k">bottom</span><span class="p">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
        <span class="k">left</span><span class="p">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;heart&#34;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;left&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;right&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;bottom&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="transition-过渡">transition 过渡</h2>
<blockquote>
<p>学习资料：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition" target="_blank" rel="noopener noreffer">MDN</a></p>
</blockquote>
<h3 id="作用">作用</h3>
<ul>
<li>补充中间帧
<ul>
<li>已知开头位置，结尾位置，中间运动轨迹自动补齐</li>
</ul>
</li>
</ul>
<h3 id="语法">语法</h3>
<blockquote>
<p><strong><code>transition</code></strong> CSS 属性是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition-property" target="_blank" rel="noopener noreffer"><code>transition-property</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition-duration" target="_blank" rel="noopener noreffer"><code>transition-duration</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition-timing-function" target="_blank" rel="noopener noreffer"><code>transition-timing-function</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition-delay" target="_blank" rel="noopener noreffer"><code>transition-delay</code></a> 的一个<a href="https://developer.mozilla.org/en-US/docs/CSS/Shorthand_properties" target="_blank" rel="noopener noreffer">简写属性</a>。</p>
<blockquote>
<p><a href="http://js.jirengu.com/wasiv/1/edit?html,css,js,output" target="_blank" rel="noopener noreffer">JSBin 示例</a></p>
</blockquote>
</blockquote>
<ul>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="nt">transition</span><span class="o">:</span> <span class="nt">属性名</span> <span class="nt">时长</span> <span class="nt">过渡方式</span> <span class="nt">延迟</span>
</code></pre></td></tr></table>
</div>
</div><p><strong><code>transition: left 200ms linear </code></strong>   属性名是指要给哪个属性添加过渡效果</p>
</li>
<li>
<p>可以用 all 代表所有属性：width | height | left | right | margin-right  ……</p>
<p><strong><code>transition: all 200ms </code></strong></p>
</li>
<li>
<p>可以用逗号分隔两个不同属性</p>
<p><strong><code>transition: left 200ms, top 400ms </code></strong></p>
</li>
<li>
<p>时长 ：支持 秒 s  和  毫秒 ms 单位。0.5s 可以写成  .5s</p>
</li>
<li>
<p>过渡方式有：linear（线性匀速） | ease（默认值：缓动） | ease-in | ease-out | ease- in-out | cubic-bezier | step-start | step-end | steps</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/timing-function" target="_blank" rel="noopener noreffer">具体含义</a>要靠数学知识</li>
<li><a href="https://cubic-bezier.com/">https://cubic-bezier.com/</a>   测试运动曲线</li>
</ul>
</li>
</ul>
<h3 id="注意">注意</h3>
<blockquote>
<p>不学常态，学变态</p>
</blockquote>
<h4 id="并不是所有属性都能过渡">并不是所有属性都能过渡</h4>
<ul>
<li>
<p>一个元素，切换可见状态</p>
<ul>
<li>
<p>使用 display: none &lt;=&gt; display: block 没法过渡，会闪现、闪隐【元素消失，不占位置】</p>
</li>
<li>
<p>使用 opacity: 0 &lt;=&gt;  opacity: 1   透明度控制可见状态【可实现过渡效果，<strong>缺点</strong>是元素消失仍占位置】</p>
</li>
<li>
<p><strong>推荐</strong>使用 <strong><code>visibility: hidden</code></strong> &lt;=&gt; <strong><code>visibility: visible</code></strong> （不要问为什么）【缺点没法过渡、元素消失仍占位置】</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">button</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">demo</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">);</span>
  <span class="cm">/* 解决隐藏后仍占位问题：延迟1s后，将元素删除 */</span>
  <span class="cm">/* 方法一：使用延时器 */</span>
  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">demo</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span> <span class="p">}</span> <span class="p">,</span><span class="mi">1000</span><span class="p">)</span>  
  <span class="cm">/* 方法二: on事件可能有bug，推荐使用事件监听器 */</span>
  <span class="nx">demo</span><span class="p">.</span><span class="nx">ontransitionend</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">demo</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span> <span class="p">}</span>  <span class="cm">/* on事件 */</span>
  <span class="nx">demo</span><span class="p">.</span><span class="nx">addEventLisener</span><span class="p">(</span><span class="s1">&#39;transitionend&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">demo</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span> <span class="p">})</span>   <span class="cm">/* 事件监听器 */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>display 和 visibility 的区别</p>
<ul>
<li>
<p><a href="https://www.cnblogs.com/zrenj/p/9785835.html">https://www.cnblogs.com/zrenj/p/9785835.html</a></p>
<p></p>
</li>
</ul>
</li>
<li>
<p>background 颜色可以过渡吗？可以 。</p>
<ul>
<li><a href="http://js.jirengu.com/wasiv/3/edit?html,css,js,output" target="_blank" rel="noopener noreffer">查看示例</a></li>
</ul>
</li>
<li>
<p>opacity 透明度可以过渡吗？ 可以 。</p>
<ul>
<li><a href="http://js.jirengu.com/wasiv/5/edit?html,css,js,output" target="_blank" rel="noopener noreffer">查看示例</a></li>
<li><strong>不推荐用透明度控制显示隐藏，推荐 visibility</strong></li>
<li>opacity: 0 &lt;=&gt;  opacity: 1   可实现过渡效果，<strong>缺点</strong>是元素消失仍占位置，可通过 js 控制 remove() 该元素</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="过渡必须要有起始">过渡必须要有起始</h3>
<blockquote>
<p>起始：指一个属性的开始是一个值，该属性的结尾也有一个值。这样才能实现某属性的属性值的变化过渡，中间过渡的效果浏览器会自动补充</p>
</blockquote>
<ul>
<li>一般只有一次动画，或者两次
<ul>
<li>一次：指只有进入动画</li>
<li>两次：①进入动画、②离开动画</li>
</ul>
</li>
<li>比如 hover 和 非 hover 状态的过渡，就是两次动画</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="如果除了起始还有中间点怎么办">如果除了起始，还有中间点，怎么办</h2>
<blockquote>
<p>例如：从红色，先变黄色，最后再变绿色，怎么实现</p>
</blockquote>
<p>有如下两种办法</p>
<h3 id="方法-使用两次-transform">方法① 使用两次 transform</h3>
<ul>
<li>
<p>流程：   .a === transform ===&gt; .b    然后   .b === transform ===&gt; .c</p>
</li>
<li>
<p>如何知道到了中间点呢？</p>
<ul>
<li>
<p>用 setTimeout 或者监听 transitionend 事件。</p>
<blockquote>
<p>给元素添加新的类名：执行第二段 transform 效果。</p>
<ul>
<li>注意：第二段 transform 中必须包含第一段动画效果，不然执行第二段动画可能还原初始位置，有 bug，可自行测试。</li>
</ul>
</blockquote>
</li>
<li>
<p><a href="http://js.jirengu.com/vehuz/2/edit" target="_blank" rel="noopener noreffer">JSBin 示例</a></p>
</li>
</ul>
</li>
</ul>
<h3 id="方法-使用-animation">方法② 使用 animation</h3>
<ul>
<li>声明关键帧</li>
<li>添加动画</li>
<li><a href="http://js.jirengu.com/peran/1/edit?html,css,output" target="_blank" rel="noopener noreffer">JSBin 示例</a></li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="animation-动画">animation 动画</h2>
<h3 id="提问">提问</h3>
<blockquote>
<p>如何让动画停在最后一帧？</p>
</blockquote>
<ul>
<li>
<p>搜索 css animation stop at end</p>
<ul>
<li>
<p>网友给出的答案是：加个 forwards</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="nt">animation</span><span class="o">:</span> <span class="nt">xxx</span> <span class="nt">1</span><span class="p">.</span><span class="nc">5s</span> <span class="nt">forwards</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p><a href="http://js.jirengu.com/lodoy/1/edit?html,css,output" target="_blank" rel="noopener noreffer">JSBin 演示</a></p>
</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="keyframes-完整语法">@keyframes 完整语法</h3>
<h4 id="标准写法">标准写法</h4>
<ul>
<li>搜索 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes" target="_blank" rel="noopener noreffer">keyframes MDN</a> 讲得很清楚
<ul>
<li>一种写法是 from to ：只支持两种状态</li>
<li>另一种写法是百分数：支持添加 n 个帧状态</li>
</ul>
</li>
</ul>
<p></p>
<p></p>
<p>​</p>
<h3 id="animation-缩写语法">animation 缩写语法</h3>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation" target="_blank" rel="noopener noreffer">animation MDN</a></p>
</blockquote>
<blockquote>
<p><strong>animation</strong> 属性是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-name" target="_blank" rel="noopener noreffer"><code>animation-name</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-duration" target="_blank" rel="noopener noreffer"><code>animation-duration</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-timing-function" target="_blank" rel="noopener noreffer"><code>animation-timing-function</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-delay" target="_blank" rel="noopener noreffer"><code>animation-delay</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-iteration-count" target="_blank" rel="noopener noreffer"><code>animation-iteration-count</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-direction" target="_blank" rel="noopener noreffer"><code>animation-direction</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-fill-mode" target="_blank" rel="noopener noreffer"><code>animation-fill-mode</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-play-state" target="_blank" rel="noopener noreffer"><code>animation-play-state</code></a> 属性的一个简写属性形式。</p>
<p><a href="https://xiedaimala.com/tasks/597dbc7b-15e1-4f27-b814-d2151a63c34b/video_tutorials/046dd8ef-8f6f-4051-a233-d4c997113e24" target="_blank" rel="noopener noreffer">Jirengu 视频讲解</a></p>
<p><a href="http://js.jirengu.com/gaxed/2/edit?html,css,js,output" target="_blank" rel="noopener noreffer">JSBin 演示</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="nt">animation</span><span class="o">:</span> <span class="nt">时长</span> <span class="o">|</span> <span class="nt">过渡方式</span> <span class="o">|</span> <span class="nt">延迟</span> <span class="o">|</span> <span class="nt">次数</span> <span class="o">|</span> <span class="nt">方向</span> <span class="o">|</span> <span class="nt">填充模式</span> <span class="o">|</span> <span class="nt">是否暂停</span> <span class="o">|</span> <span class="nt">动画名</span> <span class="o">;</span>  <span class="c">/* 位置任意 */</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>时长：1s 或者 1000ms</p>
</li>
<li>
<p>过渡方式：跟 transition 取值一样，如 linear 。默认是 ease 先快后慢</p>
</li>
<li>
<p>延迟时间：1s 或 1000ms</p>
</li>
<li>
<p>次数：3 或者 2.4 或者 <a href="" rel="">infinite</a>（无限次）</p>
</li>
<li>
<p>方向：reverse | <strong><a href="" rel="">alternate</a></strong>（交替，非常适合做加载动画） | alternate-reverse</p>
</li>
<li>
<p>填充模式：none | <a href="" rel="">forwards</a>（保持在动画终点位置） | backwards | both</p>
</li>
<li>
<p>是否暂停：paused | running</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">pauseBtn</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">demo</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">animationPlayState</span> <span class="o">=</span> <span class="s1">&#39;paused&#39;</span> <span class="p">}</span> 
<span class="cm">/* 点击按钮，暂停demo元素的动画 */</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>更多属性值的效果，需要自己尝试。<a href="http://js.jirengu.com/gaxed/3/edit" target="_blank" rel="noopener noreffer">JSBin 演示</a></p>
</li>
<li>
<p>以上所有属性都有对应的单独属性</p>
<ul>
<li>
<pre><code>**animation** 只是这些单独属性的**缩写**，上述效果可以通过单独的属性设置
</code></pre>
</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="实践用-animation-做红心">实践：用 animation 做红心</h2>
<blockquote>
<p><a href="http://js.jirengu.com/hosug/1/edit?html,css,output" target="_blank" rel="noopener noreffer">JSBin 示例</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!doctype html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>beating heart-animation<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
      <span class="o">*</span> <span class="p">{</span>
        <span class="k">margin</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">box-sizing</span><span class="p">:</span> <span class="kc">border-box</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="p">@</span><span class="k">keyframes</span> <span class="nt">beating</span> <span class="p">{</span>
        <span class="nt">0</span><span class="o">%</span> <span class="p">{</span><span class="k">transform</span><span class="p">:</span> <span class="nb">scale</span><span class="p">(</span><span class="mi">1</span><span class="p">)}</span>
        <span class="c">/*25% {transform: scale(1.25)}*/</span>
        <span class="c">/*50% {transform: scale(1.5)}*/</span>
        <span class="c">/*75% {transform: scale(1.25)}*/</span>
        <span class="nt">100</span><span class="o">%</span> <span class="p">{</span><span class="k">transform</span><span class="p">:</span> <span class="nb">scale</span><span class="p">(</span><span class="mf">1.5</span><span class="p">)}</span>
      <span class="p">}</span>
      <span class="p">#</span><span class="nn">heart</span> <span class="p">{</span>
        <span class="c">/*border: 1px solid black;*/</span>
        <span class="k">display</span><span class="p">:</span> <span class="kc">inline</span><span class="o">-</span><span class="kc">block</span><span class="p">;</span>
        <span class="k">position</span><span class="p">:</span> <span class="kc">relative</span><span class="p">;</span>
        <span class="k">margin</span><span class="p">:</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="p">#</span><span class="nn">heart</span><span class="p">:</span><span class="nd">hover</span> <span class="p">{</span>
        <span class="k">animation</span><span class="p">:</span> <span class="n">beating</span> <span class="mf">.5</span><span class="kt">s</span> <span class="kc">ease</span> <span class="kc">infinite</span> <span class="kc">alternate</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="p">#</span><span class="nn">heart</span> <span class="o">&gt;</span> <span class="p">.</span><span class="nc">left</span> <span class="p">{</span>
        <span class="k">position</span><span class="p">:</span> <span class="kc">absolute</span><span class="p">;</span>
        <span class="k">bottom</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
        <span class="k">left</span><span class="p">:</span> <span class="mi">-50</span><span class="kt">px</span><span class="p">;</span>
        <span class="k">width</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
        <span class="k">height</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
        <span class="c">/*border: 1px solid red;*/</span>
        <span class="k">background</span><span class="p">:</span> <span class="kc">red</span><span class="p">;</span>
        <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
        <span class="k">transform</span><span class="p">:</span> <span class="nb">rotate</span><span class="p">(</span><span class="mi">45</span><span class="kt">deg</span><span class="p">)</span> <span class="nb">translateX</span><span class="p">(</span><span class="mi">43</span><span class="kt">px</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="p">#</span><span class="nn">heart</span> <span class="o">&gt;</span> <span class="p">.</span><span class="nc">right</span> <span class="p">{</span>
        <span class="k">position</span><span class="p">:</span> <span class="kc">absolute</span><span class="p">;</span>
        <span class="k">bottom</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
        <span class="k">right</span><span class="p">:</span> <span class="mi">-50</span><span class="kt">px</span><span class="p">;</span>
        <span class="k">width</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
        <span class="k">height</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
        <span class="c">/*border: 1px solid red;*/</span>
        <span class="k">background</span><span class="p">:</span> <span class="kc">red</span><span class="p">;</span>
        <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
        <span class="k">transform</span><span class="p">:</span> <span class="nb">rotate</span><span class="p">(</span><span class="mi">45</span><span class="kt">deg</span><span class="p">)</span> <span class="nb">translateY</span><span class="p">(</span><span class="mi">45</span><span class="kt">px</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="p">#</span><span class="nn">heart</span> <span class="o">&gt;</span> <span class="p">.</span><span class="nc">bottom</span> <span class="p">{</span>
        <span class="k">width</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
        <span class="k">height</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
        <span class="c">/*border: 1px solid red;*/</span>
        <span class="k">background</span><span class="p">:</span> <span class="kc">red</span><span class="p">;</span>
        <span class="k">transform</span><span class="p">:</span> <span class="nb">rotate</span><span class="p">(</span><span class="mi">45</span><span class="kt">deg</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;heart&#34;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;left&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;right&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;bottom&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Re：从零开始の CSS 学习笔记——定位</title>
    <link>http://samrks.github.io/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/</link>
    <pubDate>Wed, 29 Jul 2020 13:01:21 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/20200729-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%AE%9A%E4%BD%8D/</guid>
    <description><![CDATA[<p>复习盒模型、div 的分层、新属性 position 详解、层叠上下文</p>
<p>​</p>
<h2 id="布局和定位的区别">布局和定位的区别</h2>
<p>区别大了</p>
<ul>
<li>布局是<strong>屏幕平面</strong>上的</li>
<li>定位是<strong>垂直于屏幕</strong>的</li>
</ul>
<p>​</p>
<h2 id="css-定位">CSS 定位</h2>
<blockquote>
<p>还得从<strong>文档流</strong>和<strong>盒模型</strong>说起（两个非常重要的概念）</p>
</blockquote>
<p>​</p>
<h2 id="复习盒模型">复习盒模型</h2>
<p>margin 外边距、border 边框、padding 内边距、content 内容</p>
<p>background 背景</p>
<p></p>
<h3 id="问两个问题">问两个问题</h3>
<h4 id="背景的范围是从哪到哪">背景的范围是从哪到哪？</h4>
<ul>
<li>【A】border 内边沿围成的区域 ？【B】border 外边沿围成的区域 ？</li>
</ul>
<ul>
<li>如何验证自己的猜想？
<ul>
<li>border 半透明试试，答案是【B】</li>
<li>注意：在浏览器的元素样式中，可通过 【alt + 上下方向键】，对半透明数值进行 0.1 的 ± 调整</li>
</ul>
</li>
</ul>
<h4 id="从左边看一个-div是什么样子">从左边看一个 div，是什么样子？</h4>
<blockquote>
<p>元素是有层叠关系的，脑内模拟一个三维立体结构，从左边看一个 div，是什么样子？</p>
</blockquote>
<ul>
<li>background 在文字后面然后呢？</li>
<li>如何验证自己的猜想？用代码证明即可。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;demo&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">text</span><span class="p">&gt;</span>你好<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="p">.</span><span class="nc">demo</span><span class="p">{</span>
    <span class="k">box-sizing</span><span class="p">:</span> <span class="kc">border-box</span><span class="p">;</span>
    <span class="k">border</span><span class="p">:</span> <span class="mi">5</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">height</span><span class="p">:</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">background</span><span class="p">:</span> <span class="kc">blue</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="p">.</span><span class="nc">text</span><span class="p">{</span>
    <span class="k">font-size</span><span class="p">:</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span>  <span class="c">/* 让字足够大，测试字能否覆盖住border */</span>
    <span class="k">color</span><span class="p">:</span> <span class="kc">green</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>结论：</p>
<ul>
<li>文字在最上层，中间是 border，最底层是 background 背景</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="代码验证一个-div-的分层">代码验证：一个 div 的分层</h2>
<blockquote>
<p>三维立体模型 （SketchUp）</p>
</blockquote>
<ul>
<li>先给出结论（三维图），再在下面进行代码验证</li>
</ul>
<p></p>
<p></p>
<p>​</p>
<h3 id="块级子元素与内联子元素的分层位置">块级子元素与内联子元素的分层位置</h3>
<blockquote>
<p>让块级元素与内联元素，出现重叠，就可以判断哪个层级更高</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="p">.</span><span class="nc">demo</span><span class="p">{</span>
    <span class="k">background</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="mi">120</span><span class="p">,</span><span class="mi">184</span><span class="p">,</span><span class="mi">211</span><span class="p">);</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">200</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">height</span><span class="p">:</span> <span class="mi">200</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">border</span><span class="p">:</span> <span class="mi">15</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
    <span class="k">padding</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="p">.</span><span class="nc">childDiv</span><span class="p">{</span>
    <span class="k">background</span><span class="p">:</span> <span class="kc">white</span><span class="p">;</span>
    <span class="k">height</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">margin-top</span><span class="p">:</span> <span class="mi">-10</span><span class="kt">px</span><span class="p">;</span>  <span class="c">/* 测试块级元素与文字的分层位置，将div向上移动，与文字重叠，看是否会遮挡文字 */</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;demo&#34;</span><span class="p">&gt;</span>
  文字内容
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;childDiv&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>如上，<code>“文字内容”</code> 和 <code>div.childDiv</code> 属于同级关系</p>
</li>
<li>
<p>结论：</p>
<ul>
<li>
<p>块级元素位于文字下层</p>
<p></p>
</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="浮动子元素与内联子元素的分层位置">浮动子元素与内联子元素的分层位置</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="p">.</span><span class="nc">demo</span><span class="p">{</span> <span class="err">...</span> <span class="p">}</span>
  <span class="p">.</span><span class="nc">float</span><span class="p">{</span>
    <span class="k">float</span><span class="p">:</span> <span class="kc">left</span><span class="p">;</span>
    <span class="k">background</span><span class="p">:</span> <span class="kc">white</span><span class="p">;</span>
    <span class="k">height</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">margin-right</span><span class="p">:</span> <span class="mi">-10</span><span class="kt">px</span><span class="p">;</span>  
  	<span class="c">/* 测试浮动元素与文字的分层位置，将浮动元素向右移动，与文字重叠，看是否会遮挡文字 */</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;demo&#34;</span><span class="p">&gt;</span>
  文字内容
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;float&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>结论：</p>
<ul>
<li>
<p>浮动元素位于文字下层</p>
<p></p>
</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="浮动子元素与块级子元素的分层位置">浮动子元素与块级子元素的分层位置</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="p">.</span><span class="nc">demo</span><span class="p">{</span><span class="err">...</span><span class="p">}</span>
  <span class="p">.</span><span class="nc">float</span><span class="p">{</span><span class="err">...</span><span class="p">}</span>
  <span class="p">.</span><span class="nc">childDiv</span><span class="p">{</span>
    <span class="k">height</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">background</span><span class="p">:</span> <span class="kc">orange</span><span class="p">;</span>
    <span class="k">margin-top</span><span class="p">:</span> <span class="mi">-10</span><span class="kt">px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;demo&#34;</span><span class="p">&gt;</span>
  文字内容
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;float&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;childDiv&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>结论：
<ul>
<li>
<p>浮动内容（脱离文档流），高于 childDiv（普通文档流元素），低于文字</p>
</li>
<li>
<p>所以，==脱离文档流==，实际上就是从普通文档流中跳出，<strong>比文档流的层级稍微高一点</strong></p>
<p></p>
</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="结论">结论</h3>
<ul>
<li>
<p>文字内容层级最高，代码写在下面的文字内容，会覆盖上面的</p>
</li>
<li>
<p>只有浮动元素会<strong>脱离文档流</strong>（从普通文档流中跳出），比普通文档流的层级稍高</p>
<p></p>
<p></p>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="新属性-position">新属性 position</h2>
<h3 id="position-取值">position 取值</h3>
<ul>
<li>
<p>static 默认值，当前元素待在文档流里</p>
</li>
<li>
<p>relative 相对定位，升起来，但不脱离文档流</p>
</li>
<li>
<p>absolute 绝对定位，定位基准是相对于祖先里的非 static 祖先进行定位</p>
</li>
<li>
<p>fixed 固定定位，定位基准是 viewport 视口</p>
<ul>
<li>有诈：后来 css 出的 transform 属性，使 fixed 无法相对 viewport 视口定位，这就是 CSS 的不正交</li>
</ul>
</li>
<li>
<p>sticky 粘滞定位，不好描述直接举例 ↓↓</p>
<ul>
<li>
<p>特别适合做导航：正常状态会存在于文档流中，当向下滚动到 sticky 元素且 sticky 元素即将移出视口时，sticky 元素会始终保持在视口顶部，不会随文档流继续滚动。</p>
</li>
<li>
<p>兼容性特别差，可以在 <a href="https://caniuse.com/#search=sticky" target="_blank" rel="noopener noreffer">caniuse</a> 中查询。 （黄色是需要加前缀or部分支持）</p>
</li>
</ul>
</li>
</ul>
<h3 id="经验">经验</h3>
<ul>
<li>如果你写了 absolute，一般都得补一个 relative</li>
<li>如果你写了 absolute 或 fixed，一定要补 top 和 left</li>
<li>sticky 兼容性很差，主要用于<strong>面试装逼</strong></li>
</ul>
<p>​</p>
<h3 id="position-relative">position: relative</h3>
<h4 id="使用场景">使用场景</h4>
<ul>
<li>用于做位移（很少用），将两个元素对齐</li>
<li>用于给 absolute 元素做爸爸</li>
</ul>
<h4 id="配合-z-index">配合 z-index</h4>
<ul>
<li><code>z-index: auto</code> 默认值，不创建新<a href="#%e4%bb%80%e4%b9%88%e6%98%af%e5%b1%82%e5%8f%a0%e4%b8%8a%e4%b8%8b%e6%96%87" rel="">层叠上下文</a></li>
<li><code>z-index: 0/1/2</code></li>
<li><code>z-index: -1/-2</code></li>
</ul>
<h4 id="经验-1">经验</h4>
<ul>
<li>写 <code>z-index: 9999</code> 的都是 菜B</li>
<li>要学会管理 z-index</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="position-absolute">position: absolute</h3>
<h4 id="使用场景-1">使用场景</h4>
<ul>
<li>
<p>脱离原来的位置，另起一层，比如<strong>对话框的关闭按钮</strong>，通常是通过绝对定位实现的</p>
</li>
<li>
<p>鼠标提示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;height:100px;&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>
  点击
  <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;tips&#34;</span><span class="p">&gt;</span>提示内容<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    
<span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="nt">button</span><span class="p">{</span> <span class="k">position</span><span class="p">:</span> <span class="kc">relative</span><span class="p">;</span> <span class="p">}</span>
  <span class="nt">button</span> <span class="nt">span</span><span class="p">{</span>
    <span class="k">position</span><span class="p">:</span> <span class="kc">absolute</span><span class="p">;</span>
    <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
    <span class="k">white-space</span><span class="p">:</span> <span class="kc">nowrap</span><span class="p">;</span>
    <span class="k">bottom</span><span class="p">:</span> <span class="nb">calc</span><span class="p">(</span><span class="mi">100</span><span class="kt">%</span> <span class="o">+</span> <span class="mi">10</span><span class="kt">px</span><span class="p">);</span>
    <span class="k">left</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
    <span class="k">transform</span><span class="p">:</span> <span class="nb">translateX</span><span class="p">(</span><span class="mi">-50</span><span class="kt">%</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nt">button</span> <span class="nt">span</span><span class="p">{</span> <span class="k">display</span><span class="p">:</span> <span class="kc">none</span><span class="p">;</span> <span class="p">}</span>
  <span class="nt">button</span><span class="p">:</span><span class="nd">hover</span> <span class="nt">span</span><span class="p">{</span> <span class="k">display</span><span class="p">:</span> <span class="kc">inline</span><span class="o">-</span><span class="kc">block</span><span class="p">;</span> <span class="p">}</span>   <span class="c">/* 鼠标悬浮时，显示span */</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="配合-z-index-1">配合 z-index</h4>
<h4 id="经验-2">经验</h4>
<ul>
<li>
<p>很多 菜B 都以为 absolute 是相对于 relative 定位的</p>
<ul>
<li><strong>absolute 是相对于 祖先元素中最近的一个定位元素</strong>
<ul>
<li>只要 position 属性值不是 static 的元素，就是定位元素</li>
</ul>
</li>
</ul>
</li>
<li>
<p>某些浏览器上，如果写了 absolute，不写 top / left / bottom / right 会位置错乱  （4个至少写2个）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">demo</span><span class="p">{</span>
  <span class="k">position</span><span class="p">:</span> <span class="kc">absolute</span><span class="p">;</span>
  <span class="k">top</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">left</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>善用 <code>left: 100%</code> （效果通常是该元素会出现在定位元素的最右边）</p>
</li>
<li>
<p>善用 <code>left: 50%;</code> + 加负 margin （负宽度的一半）：实现居中</p>
<ul>
<li>也可以用  <code>left: 50%;</code> + <code>transform: translateX(-50%);</code>  实现，优点是不需要自己计算宽度的一半</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="position-fixed">position: fixed</h3>
<blockquote>
<p>fixed 是相对于【视口】定位的</p>
<ul>
<li>视口，就是浏览器中普通用户能看到的部分（不包括滚动条）</li>
</ul>
</blockquote>
<h4 id="使用场景-2">使用场景</h4>
<ul>
<li>烦人的广告</li>
<li>回到顶部按钮</li>
</ul>
<h4 id="配合-z-index-2">配合 z-index</h4>
<h4 id="经验-3">经验</h4>
<ul>
<li>
<p>如果 fixed 元素所在的容器，具有某些属性，可能会导致 fixed 元素不再相对于视口定位。</p>
<ul>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">container</span><span class="p">{</span> <span class="k">position</span><span class="p">:</span> <span class="kc">relative</span><span class="p">;</span> <span class="p">}</span>
<span class="p">.</span><span class="nc">container</span> <span class="o">&gt;</span> <span class="p">.</span><span class="nc">fixed</span><span class="p">{</span> <span class="k">position</span><span class="p">:</span> <span class="kc">fixed</span><span class="p">;</span> <span class="k">left</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span> <span class="k">bottom</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span> <span class="p">}</span>  
<span class="p">.</span><span class="nc">container</span><span class="p">{</span> <span class="k">transform</span><span class="p">:</span> <span class="nb">scale</span><span class="p">(</span><span class="mf">0.9</span><span class="p">);</span> <span class="p">}</span> <span class="c">/* 此时fixed元素就不再相对于视口定位 */</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>总结：<strong>不要把 fixed 元素放到 具有 transform 属性的容器中</strong>，可能会产生奇怪的bug（不正交：调这个元素却影响了另一个元素）</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><strong>手机上尽量不要用这个属性</strong>，坑很多，无穷无尽的bug。不信你搜索一下「 移动端 fixed 」
<ul>
<li>用了，可能就开始996了。一个bug可能引出10个bug</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="层叠上下文">层叠上下文</h2>
<h3 id="div分层-与-position">div分层 与 position</h3>
<blockquote>
<ul>
<li>任意一个元素的 position 取值非 static 时，就成为了定位元素。定位元素的层级，立马超越内联文字，成为最上层元素（跑到所有元素最上层）</li>
<li>z-index，默认是 auto
<ul>
<li>所有定位元素，会以内联文字层为底层，随着 z-index 递增，层级也会递增</li>
<li>如果 z-index 为负值，则层级比 background 还低</li>
<li>（可以无限向下，但是不能低于层叠上下文，也就是不能低于 html ，低于html还有什么意义）</li>
</ul>
</li>
</ul>
</blockquote>
<p></p>
<h3 id="什么是层叠上下文">什么是层叠上下文</h3>
<blockquote>
<p>也叫堆叠上下文</p>
<p>层叠上下文，会把所有元素包起来。</p>
<ul>
<li>
<p>默认的层叠上下文，是 html 元素，html 就是会把所有元素包起来</p>
</li>
<li>
<p>其他元素，也会因为拥有某些属性而变成层叠上下文（导致 z-index 需要重新计算）</p>
</li>
</ul>
</blockquote>
<p>​</p>
<h4 id="比喻">比喻</h4>
<blockquote>
<p>层叠上下文对 z-index 的影响</p>
</blockquote>
<ul>
<li>每个层叠上下文就是一个新的小世界（作用域）</li>
<li>这个小世界里面的 z-index 跟外界无关</li>
<li><strong>处在同一个小世界的 z-index 才能比较</strong></li>
<li><a href="http://js.jirengu.com/gewob/1/edit?html,css,output" target="_blank" rel="noopener noreffer">JSBin 示例</a>
<ul>
<li>a 和 b2 处于同一个层叠小世界，由 container 创造的，如果 container 没有设定 z-index，那么 a 和 b2 就同处于 html 的作用域里面，是具有可比性的。</li>
</ul>
</li>
</ul>
<p>​</p>
<h4 id="哪些不正交的属性可以创建层叠上下文">哪些不正交的属性可以创建层叠上下文</h4>
<blockquote>
<p>最简单的就是定位元素设置 z-index = 0 ，就会创建一个层叠上下文</p>
</blockquote>
<ul>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context" target="_blank" rel="noopener noreffer">MDN文档</a>有写</p>
<ol>
<li>文档根元素 html 自成一个层叠上下文</li>
<li>z-index 不为 auto 的定位元素，会开启一个小世界（作用域）</li>
<li>元素的 opacity 小于1，就会创建一个层叠上下文（因为 opacity 会影响内部所有元素）</li>
<li><code>position: fixed;</code> 一定会创建层叠上下文</li>
<li>…</li>
</ol>
<ul>
<li>需要记忆的有：
<ul>
<li>z-index=0时会创建层叠上下文</li>
<li>flex元素内部会形成层叠上下文</li>
<li>opacity 不为1 ，就会创建层叠上下文</li>
<li>具有 transform 的元素，会形成一个 层叠上下文</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>知道这些知识的面试官也不太多，不用花时间背</strong></p>
</li>
<li>
<p>忘了就搜「 层叠上下文 MDN 」</p>
</li>
<li>
<p>你说 CSS 为什么不单独创建一个属性做这个事</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="nt">例如</span><span class="err">：</span> <span class="nt">xxxdisabled</span><span class="o">:</span> <span class="nt">true</span><span class="o">;</span> <span class="c">/* true就创建层叠上下文，false就不创建；css并没有这种直接功能开关*/</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>这就是css的难学之处，互相交叉影响，错综复杂（不正交）</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="负-z-index-与层叠上下文的关系">负 z-index 与层叠上下文的关系</h3>
<blockquote>
<p><a href="http://js.jirengu.com/modez/1/edit?html,css,output" target="_blank" rel="noopener noreffer">JSBin 示例</a></p>
<ul>
<li>.demo 的 z-index = -1，会使 demo 出现在文档流的 bg 的后面</li>
<li>z-index 是默认 auto 时，不具有层叠上下文</li>
</ul>
</blockquote>
<blockquote>
<p>记住 ：负 z-index 逃不出 层叠上下文的小世界</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;demo&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">container</span><span class="p">{</span>
  <span class="k">background</span><span class="p">:</span> <span class="nb">rgba</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mf">0.5</span><span class="p">);</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">200</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">position</span><span class="p">:</span> <span class="kc">relative</span><span class="p">;</span>
  <span class="c">/* z-index 是默认 auto 时，不具有层叠上下文，所以添加z-index=0，创建层叠上下文 */</span>
  <span class="k">z-index</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span> <span class="c">/* 注释这行看看 */</span>    
<span class="p">}</span>
<span class="p">.</span><span class="nc">container</span> <span class="o">&gt;</span> <span class="p">.</span><span class="nc">demo</span><span class="p">{</span>
  <span class="k">width</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">background</span><span class="p">:</span> <span class="kc">red</span><span class="p">;</span>
  <span class="k">position</span><span class="p">:</span> <span class="kc">absolute</span><span class="p">;</span>
  <span class="k">z-index</span><span class="p">:</span> <span class="mi">-1</span><span class="p">;</span> <span class="c">/* 因为上面z-index:0创建了层叠上下文，所以demo无法逃出这个小世界，不可能比container低 */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>图一：当 container 不是层叠上下文（也就是没有 z-index: 0; ）时，demo 是 <code>z-index = -1</code> 存在于容器bg之下</p>
<p>图二：当 container 创建层叠上下文，demo 就无法跳出容器之外</p>
<p>​</p>
<p>总结：</p>
<blockquote>
<p>z-index = -1  不一定存在于容器的背景之下。当这个容器是一个层叠上下文时，就不可能存在于容器之外</p>
</blockquote>]]></description>
</item><item>
    <title>Re：从零开始の CSS 学习笔记——布局（下）</title>
    <link>http://samrks.github.io/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/</link>
    <pubDate>Sun, 26 Jul 2020 13:26:52 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/20200726-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8B/</guid>
    <description><![CDATA[<p>CSS 布局篇（下）：Grid 布局。</p>
<p>​</p>
<h2 id="如何在两套布局中切换">如何在两套布局中切换</h2>
<blockquote>
<p>一个css中，写两种布局，使用 @media 媒体查询来切换</p>
</blockquote>
<p>​</p>
<h2 id="grid-布局">Grid 布局</h2>
<blockquote>
<p>Grid 布局兼容性并不好，在一两年内都可能不会非常广泛的使用（现在可以不用学的那么仔细）</p>
<p>但功能确实非常强大</p>
</blockquote>
<ul>
<li>flex 更擅长 一维布局，要么横着布局，要么竖着布局</li>
<li>一维布局用 Flex</li>
</ul>
<p>​</p>
<h2 id="二维布局用-grid">二维布局用 Grid</h2>
<blockquote>
<p>以下内容主要来自 CSS Tricks 的一篇文章  <a href="https://css-tricks.com/snippets/css/complete-guide-grid/" target="_blank" rel="noopener noreffer">A Complete Guide to Grid</a></p>
</blockquote>
<ul>
<li>查看本地代码</li>
</ul>
<p>​</p>
<h3 id="grid-也分-container-和-items">Grid 也分 container 和 items</h3>
<blockquote>
<p>分别记忆</p>
</blockquote>
<h3 id="成为-container">成为 container</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">container</span><span class="p">{</span>
	<span class="k">display</span><span class="p">:</span> <span class="k">grid</span> <span class="o">|</span> <span class="kc">inline</span><span class="o">-</span><span class="k">grid</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="行和列">行和列</h3>
<blockquote>
<p>类似 table 表格（grid 被称为新时代的表格）</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">container</span><span class="p">{</span>
	<span class="k">display</span><span class="p">:</span> <span class="k">grid</span><span class="p">;</span>
  <span class="n">grid-tamplate-columns</span><span class="p">:</span> <span class="mi">40</span><span class="kt">px</span> <span class="mi">50</span><span class="kt">px</span> <span class="kc">auto</span> <span class="mi">50</span><span class="kt">px</span> <span class="mi">40</span><span class="kt">px</span><span class="p">;</span>   <span class="c">/* 每列宽度（有n个值对应生成n列） */</span>
    			         <span class="c">/*  第1列 第2列 第3列 第4列 第5列  */</span>
  
  <span class="n">grid-tamplate-rows</span><span class="p">:</span> <span class="mi">25</span><span class="kt">%</span> <span class="mi">100</span><span class="kt">px</span> <span class="kc">auto</span><span class="p">;</span>   <span class="c">/* 每行高度（有n个值对应生成n行） */</span>
                 <span class="c">/*  第1行 第2行 第3行  */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>[1]  [2]  [3]  …  [6]   指的是线的序号。用于划分 items  的范围（<a href="#%e7%ac%ac%e4%ba%8c%e6%ad%a5" rel="">具体使用见 items 部分 </a>）</p>
</blockquote>
<p>​</p>
<h4 id="缩写--grid-template">缩写  grid-template</h4>
<blockquote>
<p><code>grid-template</code>是<code>grid-template-rows</code>（行高）和<code>grid-template-columns</code>（列宽）的缩写形式。</p>
<p>比如说，<code>grid-template: 50% 50% / 200px;</code>将创建一个具有两行的网格，每一行占据50%，以及一个200像素宽的列。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="c">/* 需要包括你的花园上部的60%，以及左侧的200像素。 */</span>
<span class="p">#</span><span class="nn">garden</span> <span class="p">{</span>
  <span class="k">display</span><span class="p">:</span> <span class="k">grid</span><span class="p">;</span>
  <span class="k">grid-template</span><span class="p">:</span> <span class="mi">60</span><span class="kt">%</span> <span class="mi">40</span><span class="kt">%</span> <span class="o">/</span> <span class="mi">200</span><span class="kt">px</span> <span class="nb">calc</span><span class="p">(</span><span class="mi">100</span><span class="kt">%</span> <span class="o">-</span> <span class="mi">200</span><span class="kt">px</span><span class="p">)</span> <span class="p">;</span>
  			 	<span class="c">/*	行高↑↑       列宽↑↑   */</span>
<span class="p">}</span>

<span class="p">#</span><span class="nn">water</span> <span class="p">{</span>
  <span class="k">grid-column</span><span class="p">:</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">grid-row</span><span class="p">:</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="c">/* 你的花园看起来很棒。现在，你在花园的底部留下了50像素的小路，其他的空间用来种植胡萝卜。
</span><span class="c">不幸的是，胡萝卜地的20%已经杂草丛生了，最后一次用CSS网格布局来规划你的花园吧！ */</span>
<span class="p">#</span><span class="nn">garden</span> <span class="p">{</span>
  <span class="k">display</span><span class="p">:</span> <span class="k">grid</span><span class="p">;</span>
  <span class="k">grid-template</span><span class="p">:</span> <span class="nb">calc</span><span class="p">(</span><span class="mi">100</span><span class="kt">%</span> <span class="o">-</span> <span class="mi">50</span><span class="kt">px</span><span class="p">)</span> <span class="mi">50</span><span class="kt">px</span><span class="o">/</span><span class="mi">20</span><span class="kt">%</span> <span class="mi">80</span><span class="kt">%</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h3 id="指定-items-布局">指定 items 布局</h3>
<h4 id="第一步">第一步</h4>
<blockquote>
<ul>
<li>
<p>搭出大框架：几行几列</p>
</li>
<li>
<p>有几个区域，就建立几个 items</p>
</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="o">*</span> <span class="p">{</span>
    <span class="k">margin</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">box-sizing</span><span class="p">:</span> <span class="kc">border-box</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="p">.</span><span class="nc">container</span> <span class="p">{</span>
    <span class="k">display</span><span class="p">:</span> <span class="k">grid</span><span class="p">;</span>
    <span class="k">grid-template-columns</span><span class="p">:</span> <span class="mi">40</span><span class="kt">px</span> <span class="mi">50</span><span class="kt">px</span> <span class="kc">auto</span> <span class="mi">50</span><span class="kt">px</span> <span class="mi">40</span><span class="kt">px</span><span class="p">;</span>   <span class="c">/* 5列（auto会撑满该行余下空间） */</span>
    <span class="k">grid-template-rows</span><span class="p">:</span> <span class="mi">100</span><span class="kt">px</span> <span class="mi">300</span><span class="kt">px</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span>  <span class="c">/* 3行（每行高度累加，成为container的总高度） */</span>
    <span class="k">border</span><span class="p">:</span> <span class="mi">3</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="p">.</span><span class="nc">a</span><span class="o">,</span> <span class="p">.</span><span class="nc">b</span><span class="o">,</span> <span class="p">.</span><span class="nc">c</span><span class="o">,</span> <span class="p">.</span><span class="nc">d</span><span class="o">,</span> <span class="p">.</span><span class="nc">e</span> <span class="p">{</span>
    <span class="k">border</span><span class="p">:</span> <span class="mi">3</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">black</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p">&gt;</span>
  <span class="c">&lt;!-- emmet快捷键: 键入.a+.b+.c+.d ——&gt; tab 创建出5个div，class分别为abcde --&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;a&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>  <span class="c">&lt;!--第1行, 第1列--&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;b&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>  <span class="c">&lt;!--第1行, 第2列--&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;c&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>  <span class="c">&lt;!--第1行, 第3列--&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;d&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>  <span class="c">&lt;!--第1行, 第4列--&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;e&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>  <span class="c">&lt;!--第1行, 第5列--&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>container 中的子元素，<strong>与列数一一对应</strong>。且默认只占据第一行。所以添加 border 后 效果如下图所示</li>
</ul>
<p></p>
<h4 id="第二步">第二步</h4>
<blockquote>
<p>给每个 item 指定区域、设置范围</p>
</blockquote>
<h5 id="grid-xxx-start--grid-xxx-end">grid-xxx-start / grid-xxx-end</h5>
<blockquote>
<p>grid-row-start、grid-row-end</p>
<p>grid-column-start、grid-column-end</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">a</span><span class="p">{</span>
  <span class="k">grid-row-start</span><span class="p">:</span> <span class="mi">1</span><span class="p">;</span>  <span class="c">/* a从哪条线开始 */</span>     
  <span class="k">grid-row-end</span><span class="p">:</span> <span class="mi">3</span><span class="p">;</span>    <span class="c">/* a到哪条线结束 */</span>         
  <span class="c">/* 指定的两条【线】的中间区域，就是a所占的【行】 */</span>

  <span class="k">grid-column-start</span><span class="p">:</span> <span class="mi">1</span><span class="p">;</span>   
  <span class="k">grid-column-end</span><span class="p">:</span> <span class="mi">2</span><span class="p">;</span>
  <span class="c">/* 指定的两条【线】的中间区域，就是a所占的【列】 */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="grid-row--grid-column">grid-row / grid-column</h5>
<blockquote>
<p>grid-row：grid-row-start / grid-row-end;</p>
<p>grid-column:  grid-column-start / grid-column-end;</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="c">/* 上面写法，可以缩写成 ↓ */</span>
<span class="p">.</span><span class="nc">a</span><span class="p">{</span>
  <span class="k">grid-row</span><span class="p">:</span> <span class="mi">1</span><span class="o">/</span><span class="mi">3</span> <span class="p">;</span>
  <span class="k">grid-column</span><span class="p">:</span> <span class="mi">1</span><span class="o">/</span><span class="mi">2</span> <span class="p">;</span>   
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="grid-area">grid-area</h5>
<blockquote>
<p>grid-area属性接受4个由&rsquo;/&lsquo;分开的值：grid-row-start, grid-column-start, grid-row-end, 最后是 grid-column-end。</p>
<p>​																					起始行 ↑↑            起始列 ↑↑           终止行 ↑↑                      终止列 ↑↑</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="c">/* 再进一步缩写 */</span>
<span class="p">.</span><span class="nc">a</span><span class="p">{</span>
  <span class="k">grid-area</span><span class="p">:</span> <span class="mi">1</span><span class="o">/</span><span class="mi">1</span><span class="o">/</span><span class="mi">3</span><span class="o">/</span><span class="mi">2</span> <span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>最终效果</p>
<p></p>
</li>
</ul>
<p>​</p>
<h4 id="可以给线起名字">可以给线起名字</h4>
<blockquote>
<p>但没必要，代码太麻烦。就按照序号就很好</p>
</blockquote>
<p></p>
<p>取名结果：如图↘</p>
<p></p>
<p>item可以设置范围，直接用线的名称</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">item-a</span><span class="p">{</span> 
  <span class="k">grid-column-start</span><span class="p">:</span> <span class="mi">2</span><span class="p">;</span> 
  <span class="k">grid-column-end</span><span class="p">:</span> <span class="n">five</span><span class="p">;</span>
  <span class="k">grid-row-start</span><span class="p">:</span> <span class="n">rowl-start</span><span class="p">;</span> 
  <span class="k">grid-row-end</span><span class="p">:</span> <span class="mi">3</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><hr>
<p>​</p>
<p>​</p>
<h3 id="fr-单位份">fr ：单位【份】</h3>
<blockquote>
<p>容器属性</p>
</blockquote>
<blockquote>
<p>全称  free space   自由空间</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;a&#34;</span><span class="p">&gt;</span>a<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;b&#34;</span><span class="p">&gt;</span>b<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;c&#34;</span><span class="p">&gt;</span>c<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;d&#34;</span><span class="p">&gt;</span>d<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;e&#34;</span><span class="p">&gt;</span>e<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="c">&lt;!-- &lt;div class=&#34;f&#34;&gt;f&lt;/div&gt; --&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="o">&lt;</span><span class="nt">style</span><span class="o">&gt;</span>
<span class="o">*</span> <span class="p">{</span><span class="k">margin</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span><span class="k">padding</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span><span class="k">box-sizing</span><span class="p">:</span> <span class="kc">border-box</span><span class="p">;}</span>
<span class="p">.</span><span class="nc">container</span> <span class="p">{</span>
  <span class="k">display</span><span class="p">:</span> <span class="k">grid</span><span class="p">;</span>
  <span class="k">grid-template-columns</span><span class="p">:</span> <span class="mi">1</span><span class="n">fr</span> <span class="mi">1</span><span class="n">fr</span> <span class="mi">1</span><span class="n">fr</span><span class="p">;</span>   <span class="c">/* fr=份，与flex的份类似：共3列每列占1份，也就是均分 */</span>
  <span class="k">grid-template-rows</span><span class="p">:</span> <span class="mi">1</span><span class="n">fr</span> <span class="mi">1</span><span class="n">fr</span><span class="p">;</span>  <span class="c">/* 共2行，每行占1份，均分 */</span>
  <span class="k">border</span><span class="p">:</span> <span class="mi">3</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
  <span class="k">min-height</span><span class="p">:</span> <span class="mi">500</span><span class="kt">px</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">a</span><span class="o">,</span> <span class="p">.</span><span class="nc">b</span><span class="o">,</span> <span class="p">.</span><span class="nc">c</span><span class="o">,</span> <span class="p">.</span><span class="nc">d</span><span class="o">,</span> <span class="p">.</span><span class="nc">e</span> <span class="p">{</span>
  <span class="k">border</span><span class="p">:</span> <span class="mi">3</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">black</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">e</span><span class="p">{</span>
  <span class="k">grid-column-start</span><span class="p">:</span> <span class="mi">2</span><span class="p">;</span>    <span class="c">/* 再单独定义e版块占两列空间 */</span>
  <span class="k">grid-column-end</span><span class="p">:</span> <span class="mi">4</span><span class="p">;</span>
  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#ccc</span><span class="p">;</span>
<span class="p">}</span>
<span class="o">&lt;/</span><span class="nt">style</span><span class="o">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h4 id="变形">变形</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">container</span> <span class="p">{</span>
  <span class="k">display</span><span class="p">:</span> <span class="k">grid</span><span class="p">;</span>
  <span class="k">grid-template-rows</span><span class="p">:</span> <span class="mi">1</span><span class="n">fr</span> <span class="mi">3</span><span class="n">fr</span><span class="p">;</span>   <span class="c">/* 2行：第2行占3份 */</span>
  <span class="k">grid-template-columns</span><span class="p">:</span> <span class="mi">1</span><span class="n">fr</span> <span class="mi">2</span><span class="n">fr</span> <span class="mi">1</span><span class="n">fr</span><span class="p">;</span>   <span class="c">/* 3列：第2列占2份 */</span>
  <span class="err">...</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h4 id="平均布局-grid-gap">平均布局 grid-gap</h4>
<blockquote>
<p>fr 主要用于实现平均布局</p>
</blockquote>
<blockquote>
<p>容器属性：grid-gap  用于控制间距</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="c">&lt;!-- 应用下面grid布局样式，可实现任意添加.image，都可以实现一排4个、间距12px的布局 --&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="o">*</span><span class="p">{</span>
    <span class="k">margin</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">box-sizing</span><span class="p">:</span> <span class="kc">border-box</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="p">.</span><span class="nc">container</span><span class="p">{</span>
    <span class="k">margin-right</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>
    <span class="k">margin-left</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>
    <span class="k">margin-top</span><span class="p">:</span> <span class="mi">30</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">outline</span><span class="p">:</span> <span class="mi">5</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">800</span><span class="kt">px</span><span class="p">;</span>
    <span class="c">/* 开启grid布局 */</span>
    <span class="k">display</span><span class="p">:</span> <span class="k">grid</span><span class="p">;</span>
    <span class="k">grid-template-columns</span><span class="p">:</span> <span class="mi">1</span><span class="n">fr</span> <span class="mi">1</span><span class="n">fr</span> <span class="mi">1</span><span class="n">fr</span> <span class="mi">1</span><span class="n">fr</span><span class="p">;</span>  <span class="c">/* 格子布局：1排4个 */</span>
    <span class="k">grid-template-rows</span><span class="p">:</span> <span class="mi">1</span><span class="n">fr</span> <span class="mi">1</span><span class="n">fr</span><span class="p">;</span>   
    <span class="k">grid-gap</span><span class="p">:</span> <span class="mi">12</span><span class="kt">px</span><span class="p">;</span>  <span class="c">/* 计算每项边距，自动计算位置，四边上的会紧贴 */</span>
  <span class="p">}</span>
  <span class="p">.</span><span class="nc">container</span><span class="o">&gt;</span><span class="nt">div</span><span class="p">{</span>
    <span class="k">border</span><span class="p">:</span> <span class="mi">2</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">black</span><span class="p">;</span>
    <span class="k">background-color</span><span class="p">:</span> <span class="mh">#ccc</span><span class="p">;</span>
    <span class="k">height</span><span class="p">:</span> <span class="mi">191</span><span class="kt">px</span><span class="p">;</span> <span class="c">/* 宽800px，1排4个产品，计算得出：每个产品可占宽191px，则间距为12px */</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">191</span><span class="kt">px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h3 id="分区-grid-template-areas">分区 grid template-areas</h3>
<blockquote>
<p>名字很长，但非常好用</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">header</span><span class="p">&gt;</span>header<span class="p">&lt;/</span><span class="nt">header</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">aside</span><span class="p">&gt;</span>aside<span class="p">&lt;/</span><span class="nt">aside</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">main</span><span class="p">&gt;</span>main<span class="p">&lt;/</span><span class="nt">main</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;ad&#34;</span><span class="p">&gt;</span>ad<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">footer</span><span class="p">&gt;</span>footer<span class="p">&lt;/</span><span class="nt">footer</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="p">.</span><span class="nc">container</span> <span class="p">{</span>
    <span class="k">min-height</span><span class="p">:</span> <span class="mi">100</span><span class="kt">vh</span><span class="p">;</span>   <span class="c">/* 最小高度为占满整个屏幕 */</span>
    <span class="k">display</span><span class="p">:</span> <span class="k">grid</span><span class="p">;</span>
    <span class="k">grid-template-rows</span><span class="p">:</span> <span class="mi">60</span><span class="kt">px</span> <span class="kc">auto</span> <span class="mi">60</span><span class="kt">px</span><span class="p">;</span>  <span class="c">/* 行高 */</span>
    <span class="k">grid-template-columns</span><span class="p">:</span> <span class="mi">190</span><span class="kt">px</span> <span class="kc">auto</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span>    <span class="c">/* 列宽 */</span>
    <span class="c">/* 布局：以版块名称直接写出布局、位置 */</span>
    <span class="k">grid-template-areas</span><span class="p">:</span>  
      <span class="s2">&#34;header header header&#34;</span>
      <span class="s2">&#34;aside main ad&#34;</span>
      <span class="s2">&#34;. footer .&#34;</span><span class="p">;</span>  <span class="c">/* 空格通常会写一个不存在的名称，如【.】点 */</span>
    <span class="k">grid-gap</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>  <span class="c">/* 设置空隙 */</span>
  <span class="p">}</span>
  <span class="p">.</span><span class="nc">container</span> <span class="o">&gt;</span> <span class="o">*</span> <span class="p">{</span>
    <span class="k">border</span><span class="p">:</span> <span class="mi">2</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span>
  <span class="p">}</span>
  <span class="p">.</span><span class="nc">container</span> <span class="o">&gt;</span> <span class="nt">header</span> <span class="p">{</span><span class="k">grid-area</span><span class="p">:</span> <span class="n">header</span><span class="p">;}</span>   <span class="c">/* 版块命名 */</span>
  <span class="p">.</span><span class="nc">container</span> <span class="o">&gt;</span> <span class="nt">aside</span> <span class="p">{</span><span class="k">grid-area</span><span class="p">:</span> <span class="n">aside</span><span class="p">;}</span>
  <span class="p">.</span><span class="nc">container</span> <span class="o">&gt;</span> <span class="nt">aside</span> <span class="p">{</span><span class="k">grid-area</span><span class="p">:</span> <span class="n">aside</span><span class="p">;}</span>
  <span class="p">.</span><span class="nc">container</span> <span class="o">&gt;</span> <span class="nt">main</span> <span class="p">{</span><span class="k">grid-area</span><span class="p">:</span> <span class="n">main</span><span class="p">;}</span>
  <span class="p">.</span><span class="nc">container</span> <span class="o">&gt;</span> <span class="p">.</span><span class="nc">ad</span> <span class="p">{</span><span class="k">grid-area</span><span class="p">:</span> <span class="n">ad</span><span class="p">;}</span>
  <span class="p">.</span><span class="nc">container</span> <span class="o">&gt;</span> <span class="nt">footer</span> <span class="p">{</span><span class="k">grid-area</span><span class="p">:</span> <span class="n">footer</span><span class="p">;}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="grid-gap-设置间距">grid-gap 设置间距</h4>
<blockquote>
<p>grid-gap：通用间距</p>
<p>grid-row-gap :   行间距</p>
<p>grid-column-gap： 列间距</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">container</span><span class="p">{</span>
  <span class="err">...</span>
  <span class="k">grid-gap</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">container</span><span class="p">{</span>
  <span class="err">...</span>
  <span class="k">grid-row-gap</span><span class="p">:</span> <span class="mi">20</span><span class="kt">px</span><span class="p">;</span>  <span class="c">/* 行间距 */</span>
  <span class="k">grid-column-gap</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>   <span class="c">/* 列间距 */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<h2 id="实践">实践</h2>
<h3 id="布局">布局</h3>
<blockquote>
<p>Grid 尤其适合不规则布局</p>
</blockquote>
<h3 id="经验">经验</h3>
<blockquote>
<ul>
<li>等到 Grid 普及了，前端对CSS的要求会进一步降低</li>
<li>目前你简单尝试一下 Grid 就可以了</li>
</ul>
</blockquote>
<h3 id="示例">示例</h3>
<h4 id="第一步根据设计图划分行列需求给每块区域命名">第一步：根据设计图，划分行列需求，给每块区域命名</h4>
<p></p>
<h4 id="第二步书写容器样式">第二步：书写【容器】样式</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">header</span><span class="p">&gt;</span>header<span class="p">&lt;/</span><span class="nt">header</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image bigImage&#34;</span><span class="p">&gt;</span>big<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image smallImage&#34;</span><span class="p">&gt;</span>small<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image smallImage&#34;</span><span class="p">&gt;</span>small<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image smallImage&#34;</span><span class="p">&gt;</span>small<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image middleImage&#34;</span><span class="p">&gt;</span>middle<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image middleImage&#34;</span><span class="p">&gt;</span>middle<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image middleImage&#34;</span><span class="p">&gt;</span>middle<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="o">*</span> <span class="p">{</span>
    <span class="k">margin</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">box-sizing</span><span class="p">:</span> <span class="kc">border-box</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="p">.</span><span class="nc">container</span> <span class="p">{</span>
    <span class="k">display</span><span class="p">:</span> <span class="k">grid</span><span class="p">;</span>
    <span class="k">grid-template-rows</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span> <span class="mi">200</span><span class="kt">px</span> <span class="nf">repeat</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">100</span><span class="kt">px</span><span class="p">);</span> <span class="c">/* 重复4个120px，可以使用repeat()缩写语法 */</span>
    <span class="k">grid-template-columns</span><span class="p">:</span> <span class="mi">240</span><span class="kt">px</span> <span class="mi">240</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">grid-template-areas</span><span class="p">:</span>
      <span class="s2">&#34;header header&#34;</span>
      <span class="s2">&#34;big mid1&#34;</span>
      <span class="s2">&#34;big mid2&#34;</span>
      <span class="s2">&#34;sm1 mid2&#34;</span>
      <span class="s2">&#34;sm2 mid3&#34;</span>
      <span class="s2">&#34;sm3 mid3&#34;</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="第三步指定每项的名称所属">第三步：指定每项的名称（所属）</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">container</span> <span class="o">&gt;</span> <span class="o">*</span> <span class="p">{</span>
  <span class="k">border</span><span class="p">:</span> <span class="mi">2</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">black</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">container</span> <span class="o">&gt;</span> <span class="nt">header</span> <span class="p">{</span><span class="k">grid-area</span><span class="p">:</span> <span class="n">header</span><span class="p">;}</span>
<span class="p">.</span><span class="nc">container</span> <span class="o">&gt;</span> <span class="p">.</span><span class="nc">image</span><span class="p">:</span><span class="nd">nth-child</span><span class="o">(</span><span class="nt">2</span><span class="o">)</span> <span class="p">{</span><span class="k">grid-area</span><span class="p">:</span> <span class="n">big</span><span class="p">;}</span>
<span class="p">.</span><span class="nc">container</span> <span class="o">&gt;</span> <span class="p">.</span><span class="nc">image</span><span class="p">:</span><span class="nd">nth-child</span><span class="o">(</span><span class="nt">3</span><span class="o">)</span> <span class="p">{</span><span class="k">grid-area</span><span class="p">:</span> <span class="n">sm2</span><span class="p">;}</span>
<span class="p">.</span><span class="nc">container</span> <span class="o">&gt;</span> <span class="p">.</span><span class="nc">image</span><span class="p">:</span><span class="nd">nth-child</span><span class="o">(</span><span class="nt">4</span><span class="o">)</span> <span class="p">{</span><span class="k">grid-area</span><span class="p">:</span> <span class="n">sm3</span><span class="p">;}</span>
<span class="p">.</span><span class="nc">container</span> <span class="o">&gt;</span> <span class="p">.</span><span class="nc">image</span><span class="p">:</span><span class="nd">nth-child</span><span class="o">(</span><span class="nt">5</span><span class="o">)</span> <span class="p">{</span><span class="k">grid-area</span><span class="p">:</span> <span class="n">mid1</span><span class="p">;}</span>
<span class="p">.</span><span class="nc">container</span> <span class="o">&gt;</span> <span class="p">.</span><span class="nc">image</span><span class="p">:</span><span class="nd">nth-child</span><span class="o">(</span><span class="nt">6</span><span class="o">)</span> <span class="p">{</span><span class="k">grid-area</span><span class="p">:</span> <span class="n">mid2</span><span class="p">;}</span>
<span class="p">.</span><span class="nc">container</span> <span class="o">&gt;</span> <span class="p">.</span><span class="nc">image</span><span class="p">:</span><span class="nd">nth-child</span><span class="o">(</span><span class="nt">7</span><span class="o">)</span> <span class="p">{</span><span class="k">grid-area</span><span class="p">:</span> <span class="n">mid3</span><span class="p">;}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<h3 id="游戏">游戏</h3>
<p><a href="https://cssgridgarden.com/#zh-cn">https://cssgridgarden.com/#zh-cn</a></p>
<p>忘记用法时，可以通过游戏来快速回忆</p>
<p>​</p>
<h4 id="grid-area-1">grid-area</h4>
<blockquote>
<p>grid-area属性接受4个由&rsquo;/&lsquo;分开的值：grid-row-start, grid-column-start, grid-row-end, 最后是 grid-column-end。</p>
<p>​																					起始行 ↑↑            起始列 ↑↑           终止行 ↑↑                      终止列 ↑↑</p>
</blockquote>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">#</span><span class="nn">garden</span> <span class="p">{</span>
  <span class="k">display</span><span class="p">:</span> <span class="k">grid</span><span class="p">;</span>
  <span class="k">grid-template-columns</span><span class="p">:</span> <span class="mi">20</span><span class="kt">%</span> <span class="mi">20</span><span class="kt">%</span> <span class="mi">20</span><span class="kt">%</span> <span class="mi">20</span><span class="kt">%</span> <span class="mi">20</span><span class="kt">%</span><span class="p">;</span>
  <span class="k">grid-template-rows</span><span class="p">:</span> <span class="mi">20</span><span class="kt">%</span> <span class="mi">20</span><span class="kt">%</span> <span class="mi">20</span><span class="kt">%</span> <span class="mi">20</span><span class="kt">%</span> <span class="mi">20</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">#</span><span class="nn">water-1</span> <span class="p">{</span>
  <span class="k">grid-area</span><span class="p">:</span> <span class="mi">1</span> <span class="o">/</span> <span class="mi">4</span> <span class="o">/</span> <span class="mi">6</span> <span class="o">/</span> <span class="mi">5</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">#</span><span class="nn">water-2</span> <span class="p">{</span>
  <span class="k">grid-area</span><span class="p">:</span> <span class="mi">2</span> <span class="o">/</span> <span class="mi">3</span> <span class="o">/</span> <span class="mi">5</span> <span class="o">/</span> <span class="mi">6</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="order">order</h4>
<blockquote>
<p>如果网格项不是以<code>grid-area</code>、<code>grid-column</code>、<code>grid-row</code> 等显示的，它们会自动按照它们在源程序中出现的位置摆放。同样我们也可以使用<code>order</code>属性来重写它的顺序，这也是网格布局优于表格布局的好处之一。</p>
<p>默认情况下，所有的网格项的<code>order</code>都是0，但是顺序也可以被任意设置为正数或者负数，就像<code>z-index</code>一样。</p>
</blockquote>
<p>​</p>
<h4 id="fr-与-px-结合">fr 与 px 结合</h4>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">#</span><span class="nn">garden</span> <span class="p">{</span>
  <span class="k">display</span><span class="p">:</span> <span class="k">grid</span><span class="p">;</span>
  <span class="k">grid-template-columns</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span> <span class="mi">1</span><span class="n">fr</span> <span class="mi">1</span><span class="n">fr</span> <span class="mi">1</span><span class="n">fr</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">grid-template-rows</span><span class="p">:</span> <span class="mi">20</span><span class="kt">%</span> <span class="mi">20</span><span class="kt">%</span> <span class="mi">20</span><span class="kt">%</span> <span class="mi">20</span><span class="kt">%</span> <span class="mi">20</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">#</span><span class="nn">water</span> <span class="p">{</span>
  <span class="k">grid-area</span><span class="p">:</span> <span class="mi">1</span> <span class="o">/</span> <span class="mi">1</span> <span class="o">/</span> <span class="mi">6</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">#</span><span class="nn">poison</span> <span class="p">{</span>
  <span class="k">grid-area</span><span class="p">:</span> <span class="mi">1</span> <span class="o">/</span> <span class="mi">5</span> <span class="o">/</span> <span class="mi">6</span> <span class="o">/</span> <span class="mi">6</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">#</span><span class="nn">garden</span> <span class="p">{</span>
  <span class="k">display</span><span class="p">:</span> <span class="k">grid</span><span class="p">;</span>
  <span class="k">grid-template-columns</span><span class="p">:</span> <span class="mi">20</span><span class="kt">%</span> <span class="mi">20</span><span class="kt">%</span> <span class="mi">20</span><span class="kt">%</span> <span class="mi">20</span><span class="kt">%</span> <span class="mi">20</span><span class="kt">%</span><span class="p">;</span>
  <span class="k">grid-template-rows</span><span class="p">:</span> <span class="mi">1</span><span class="n">fr</span> <span class="mi">1</span><span class="n">fr</span> <span class="mi">1</span><span class="n">fr</span> <span class="mi">1</span><span class="n">fr</span> <span class="nb">calc</span><span class="p">(</span><span class="mi">100</span><span class="kt">%</span> <span class="o">-</span> <span class="mi">50</span><span class="kt">px</span><span class="p">);</span>
<span class="p">}</span>

<span class="p">#</span><span class="nn">water</span> <span class="p">{</span>
  <span class="k">grid-column</span><span class="p">:</span> <span class="mi">1</span> <span class="o">/</span> <span class="mi">6</span><span class="p">;</span>
  <span class="k">grid-row</span><span class="p">:</span> <span class="mi">5</span> <span class="o">/</span> <span class="mi">6</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Re：从零开始の CSS 学习笔记——布局（上）</title>
    <link>http://samrks.github.io/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/</link>
    <pubDate>Sat, 25 Jul 2020 16:16:55 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/20200725-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%B8%83%E5%B1%80-%E4%B8%8A/</guid>
    <description><![CDATA[<p>CSS 布局篇（上）： Float 布局、Flex 布局 。</p>
<p>​</p>
<p>​</p>
<p>Float 示例代码  <a href="https://jsbin.com/vobenim/edit?html,css,output">https://jsbin.com/vobenim/edit?html,css,output</a></p>
<p>Flex 示例代码  <a href="https://jsbin.com/biluwan/edit?html,css,output">https://jsbin.com/biluwan/edit?html,css,output</a></p>
<p>Flex 青蛙游戏  <a href="https://flexboxfroggy.com/#zh-cn">https://flexboxfroggy.com/#zh-cn</a></p>
<p>​</p>
<h2 id="布局是什么">布局是什么</h2>
<blockquote>
<p>把页面分成一块一块，按左中右、上中下等排列</p>
</blockquote>
<h3 id="布局分类">布局分类</h3>
<h4 id="两种">两种</h4>
<ul>
<li>固定宽度布局，一般宽度为960/1000/1024px （淘宝pc）</li>
<li>不固定宽度布局，主要靠文档流的原理来布局（常用在移动端、响应式，会跟随设备宽度变化）</li>
</ul>
<h4 id="还记得吗">还记得吗</h4>
<ul>
<li>文档流本来就是自适应的，不需要加额外的样式</li>
</ul>
<h4 id="第三种布局">第三种布局</h4>
<ul>
<li>响应式布局
<ul>
<li>意思就是PC上固定宽度，手机上不固定宽度</li>
<li>也就是一种混合布局</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="布局的两种思路">布局的两种思路</h3>
<h4 id="从大到小">从大到小</h4>
<ul>
<li>先定下大局</li>
<li>然后完善每个部分的小布局</li>
</ul>
<h4 id="从小到大">从小到大</h4>
<ul>
<li>先完成小布局</li>
<li>然后组合成大布局</li>
</ul>
<h4 id="两种均可">两种均可</h4>
<ul>
<li>新人推荐用第二种，因为小的简单</li>
<li>老手一般用第一种，因为熟练有大局观</li>
</ul>
<p>​</p>
<h3 id="布局需要用到哪些属性">布局需要用到哪些属性</h3>
<blockquote>
<p>不多哔哔，直接给你所有套路</p>
</blockquote>
<p>以前经常说 DIV+CSS 布局，但是现在已经无意于用 DIV 了，就说用 CSS 布局</p>
<ul>
<li>main、header、footer、nav、aside … 这些标签的出现，已经可以代替 div 了</li>
</ul>
<p>需要兼容 IE9 吗</p>
<ul>
<li>不用，只做手机页面（闲鱼），阿里巴巴在顺应手机时代</li>
<li>很老的手机产品要兼容吗？兼容最新浏览器吗？</li>
</ul>
<p></p>
<p>​</p>
<p>​</p>
<h2 id="float-布局">Float 布局</h2>
<blockquote>
<p>float 主要是针对 IE 的，而现在公司基本不需要兼容 IE6789。</p>
</blockquote>
<h3 id="步骤">步骤</h3>
<ol>
<li>
<p>子元素上加 <code> float: left</code>  和 <code> width</code></p>
</li>
<li>
<p>在父元素上加  <code>.clearfix</code>（清除浮动的影响）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="c">&lt;!-- header中没有文档流元素，子元素都浮动了(脱离文档流) ，所以header的高度为0 --&gt;</span>
<span class="c">&lt;!-- 添加 clearfix 后，可以清除浮动的影响 --&gt;</span>
<span class="p">&lt;</span><span class="nt">header</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;clearfix&#34;</span><span class="p">&gt;</span>    
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;logo&#34;</span><span class="p">&gt;</span>XDML<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
   <span class="p">&lt;</span><span class="nt">nav</span><span class="p">&gt;</span>导航<span class="p">&lt;/</span><span class="nt">nav</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">header</span><span class="p">&gt;</span>
     
<span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
   <span class="p">.</span><span class="nc">logo</span><span class="p">{</span><span class="k">float</span><span class="p">:</span> <span class="kc">left</span><span class="p">;</span><span class="err">...</span><span class="p">}</span>   <span class="c">/* 脱离文档流 */</span>
   <span class="nt">nav</span><span class="p">{</span><span class="k">float</span><span class="p">:</span> <span class="kc">left</span><span class="p">;</span><span class="err">...</span><span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">clearfix</span><span class="p">:</span><span class="nd">after</span><span class="p">{</span>    
  <span class="k">content</span><span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
  <span class="k">display</span><span class="p">:</span> <span class="kc">block</span><span class="p">;</span>
  <span class="k">clear</span><span class="p">:</span> <span class="kc">both</span><span class="p">;</span>
<span class="p">}</span>
<span class="c">/* 请背过 clearfix 的写法 */</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="经验">经验</h3>
<ul>
<li>
<p>有经验者会留一些空间或者最后一个不设 width （或者可以给个 <code>max-width: xxxpx;</code>）</p>
</li>
<li>
<p>不需要做响应式，因为手机上没有IE，而<strong>这个布局是专门为 IE 准备的</strong></p>
</li>
<li>
<p>IE6/7 存在双倍 margin bug（给浮动元素设置 margin: 10px 在 IE6/7 中实际距离会变成 margin: 20px 的效果）</p>
<ul>
<li>
<p>解决办法有两个</p>
<ul>
<li>
<p>一是将错就错，针对 IE6/7 把 margin 减半</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">logo</span><span class="p">{</span>
  <span class="k">float</span><span class="p">:</span> <span class="kc">left</span><span class="p">;</span>
  <span class="k">margin-top</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>  <span class="c">/* 其他浏览器 只能识别这句，无法识别下面属性 */</span>
  <span class="n">_margin-top</span><span class="p">:</span> <span class="mi">5</span><span class="kt">px</span><span class="p">;</span>  <span class="c">/* IE6/7在属性前加 下划线 或 星号 都能识别 */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>二是神来一笔，再加一个 <code>display: inline-block</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">logo</span><span class="p">{</span>
  <span class="k">float</span><span class="p">:</span> <span class="kc">left</span><span class="p">;</span>
  <span class="k">margin-top</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span> 
  <span class="k">display</span><span class="p">:</span> <span class="kc">inline</span><span class="o">-</span><span class="kc">block</span><span class="p">;</span>  <span class="c">/* 微软说：IE6/7遇到margin乘2的bug，就添加这句 */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>为什么可以这样？你问我，我问谁…</p>
</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="实践">实践</h3>
<h4 id="不同布局">不同布局</h4>
<ul>
<li>用 float 做两栏布局（如顶部条）</li>
<li>用 float 做三栏布局（如内容区）</li>
<li>用 float 做四栏布局（如导航）</li>
<li><a href="#float%e5%ae%9e%e7%8e%b0%e5%b9%b3%e5%9d%87%e5%b8%83%e5%b1%80" rel="">用 float 做平均布局</a>（如产品列表展示区）—— <strong>负margin</strong></li>
<li>曾经淘宝的前端发明了双飞翼布局，不要学，已过时代码</li>
</ul>
<h4 id="经验-1">经验</h4>
<ul>
<li>加上头尾，即可满足所有PC页面需求</li>
<li>手机页面傻子才用float</li>
<li>float要程序员自己计算宽度，不灵活</li>
<li>float用来应付IE足以</li>
</ul>
<h4 id="技术总结">技术总结</h4>
<blockquote>
<p><a href="https://jsbin.com/vobenim/edit?html,css,output" target="_blank" rel="noopener noreffer">JSbin 演示</a>，总结如下</p>
</blockquote>
<h5 id="outline">outline</h5>
<blockquote>
<p>现象描述：计算宽度时，内部3个元素的宽度和=300，外层容器=300，但是还会把最后一个元素挤下去，说明子元素的宽度超出容器的宽度。</p>
</blockquote>
<ul>
<li>原因可能是，虽然设定容器宽度为 300，但是容器添加了<strong>边框</strong> border : 1像素，所以容器的内容区域的宽度实际只有 298 px。(仅限 border-box 情况)</li>
<li>解决：
<ul>
<li>把容器的边框删了</li>
<li>改用 <code> outline: 1px solid red;</code>  outline 是在外侧的，不占内部区域，但是outline 样式上会有点奇怪</li>
<li>改用 背景颜色 标识区域</li>
</ul>
</li>
</ul>
<h5 id="居中">居中</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="c">/* margin: 0 auto;  下面两句的写法更好，这句还覆盖了margin上下的距离，css原则是不要写多余的 */</span>    
<span class="nt">margin-left</span><span class="o">:</span> <span class="nt">auto</span><span class="o">;</span>
<span class="nt">margin-right</span><span class="o">:</span> <span class="nt">auto</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>只有==块级元素==，才能使用 margin … auto，实现居中。</p>
</blockquote>
<h5 id="float实现平均布局">float实现平均布局</h5>
<blockquote>
<p>添加一个 父元素 x ，进行 ==负margin== 操作（这个词基本都是高手才懂）</p>
<p>注意：添加 父元素后，clearfix 的位置也需要相应移动到，浮动元素的直属父级上</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;imageList&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;x clearfix&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="c">&lt;!--&lt;div class=&#34;image&#34;&gt;&lt;/div&gt;--&gt;</span>
    <span class="c">&lt;!--&lt;div class=&#34;image&#34;&gt;&lt;/div&gt;--&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="p">.</span><span class="nc">imageList</span> <span class="p">{</span>
    <span class="k">outline</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">green</span><span class="p">;</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">800</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">margin-left</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>
    <span class="k">margin-right</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>
    <span class="k">margin-top</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="p">.</span><span class="nc">imageList</span> <span class="o">&gt;</span> <span class="p">.</span><span class="nc">x</span> <span class="o">&gt;</span> <span class="p">.</span><span class="nc">image</span> <span class="p">{</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">191</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">height</span><span class="p">:</span> <span class="mi">191</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">background-color</span><span class="p">:</span> <span class="mh">#555</span><span class="p">;</span>
    <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
    <span class="k">float</span><span class="p">:</span> <span class="kc">left</span><span class="p">;</span>
    <span class="k">margin-bottom</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">margin-right</span><span class="p">:</span> <span class="mi">12</span><span class="kt">px</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="p">.</span><span class="nc">imageList</span> <span class="o">&gt;</span> <span class="p">.</span><span class="nc">x</span> <span class="p">{</span>
    <span class="k">margin-right</span><span class="p">:</span> <span class="mi">-12</span><span class="kt">px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<h2 id="缩写">缩写</h2>
<blockquote>
<p>html、css  （√）</p>
<p>navigator  &mdash;&gt;   nav   （√）</p>
<ul>
<li>不能缩写未经约定、达成统一的单词
<ul>
<li>content   —&gt;  cnt    （x）     container 也可以缩写成 cnt  容易误会，所以不要用</li>
</ul>
</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h2 id="flex-布局">Flex 布局</h2>
<ul>
<li>教程（来自 <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener noreffer">CSS Tricks</a>)</li>
<li>把教程过一遍，然后忘掉</li>
<li>完成 <a href="https://flexboxfroggy.com/" target="_blank" rel="noopener noreffer">Flex青蛙游戏</a></li>
<li>开始用flex！</li>
</ul>
<h3 id="容器-container-有哪些属性">容器 container 有哪些属性</h3>
<ul>
<li>container ：表示容器，一般用于做父元素</li>
<li>items ：表示容器里面的、直接的子元素，就称为 items（项）</li>
</ul>
<p></p>
<blockquote>
<p>以下都是 container 的样式</p>
</blockquote>
<p>​</p>
<h4 id="让一个元素变成-flex-容器">让一个元素变成 flex 容器</h4>
<p>只有下面两种写法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">container</span><span class="p">{</span>
  <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>     <span class="c">/* 或 display: inline-flex; */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="改变-items-流动方向主轴">改变 items 流动方向（主轴）</h4>
<blockquote>
<p>默认，所有项都会挤在主轴，主轴占满会平均压缩每项宽度，以保证在主轴存放下所有项</p>
</blockquote>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">container</span><span class="p">{</span>
  <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
  <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
  <span class="k">flex-direction</span><span class="p">:</span> <span class="kc">row</span><span class="p">;</span>  <span class="c">/* 【默认值】横向（从左到右） */</span>
  <span class="k">flex-direction</span><span class="p">:</span> <span class="kc">column</span><span class="p">;</span>  <span class="c">/* 纵向（从上到下） */</span>
  <span class="k">flex-direction</span><span class="p">:</span> <span class="kc">row</span><span class="o">-</span><span class="kc">reverse</span><span class="p">;</span> <span class="c">/* 横向反向（从右到左） */</span>
  <span class="k">flex-direction</span><span class="p">:</span> <span class="kc">column</span><span class="o">-</span><span class="kc">reverse</span><span class="p">;</span> <span class="c">/* 纵向反向（从上到下） */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="改变折行">改变折行</h4>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">container</span><span class="p">{</span>
  <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
  <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
  <span class="k">flex-direction</span><span class="p">:</span> <span class="kc">row</span><span class="p">;</span>  <span class="c">/* 默认横向 */</span>
  <span class="k">flex-wrap</span><span class="p">:</span> <span class="kc">wrap</span><span class="o">-</span><span class="kc">reverse</span><span class="p">;</span>  <span class="c">/* 反向折行, 效果如下图，基本没用 */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p><code>flex-direction</code>和<code>flex-wrap</code>两个属性经常会一起使用，所以有缩写属性<code>flex-flow</code>。这个缩写属性接受两个属性的值，两个值中间以空格隔开。</p>
<p>举个例子，你可以用<code>flex-flow: row wrap</code>去设置行并自动换行。</p>
</blockquote>
<p>​</p>
<p>​</p>
<h4 id="主轴对齐方式">主轴对齐方式</h4>
<blockquote>
<p>默认主轴是 横轴</p>
<p>除非你改变了 flex-direction 方向</p>
</blockquote>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">.container {
  justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;
}
</code></pre></td></tr></table>
</div>
</div><ul>
<li>space-around： 每项左右两边的空间一样</li>
<li>space-evenly：每项间距一样</li>
<li>space-between：把空间放到中间，元素分布两边</li>
</ul>
<p>​</p>
<h4 id="次轴对齐">次轴对齐</h4>
<blockquote>
<p>默认次轴是 纵轴</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">container</span><span class="p">{</span>
  <span class="k">align-items</span><span class="p">:</span> <span class="kc">stretch</span> <span class="p">[</span><span class="err">默认值</span><span class="p">]</span> <span class="o">|</span> <span class="kc">flex</span><span class="o">-</span><span class="kc">start</span> <span class="o">|</span> <span class="kc">flex</span><span class="o">-</span><span class="kc">end</span> <span class="o">|</span> <span class="kc">center</span> <span class="o">|</span> <span class="kc">baseline</span><span class="err">（不需要）</span> 
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li>
<p>stretch【默认值】</p>
<ul>
<li>默认所有 items 的高度 与 高度最高的 item 保持一致</li>
<li>如下图，3个 item 都与 2 号 item 一样高</li>
</ul>
<p></p>
</li>
<li>
<p>flex-start</p>
<p></p>
</li>
<li>
<p>flex-end</p>
<p></p>
</li>
<li>
<p>center</p>
<p></p>
</li>
</ul>
<p>​</p>
<h4 id="多行分布">多行分布</h4>
<blockquote>
<p>很少用到</p>
</blockquote>
<blockquote>
<ul>
<li>
<p>默认平均分  ：  <code>align-content: stretch</code> (如图)</p>
<p></p>
</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">container</span><span class="p">{</span>
  <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
  <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
  <span class="k">flex-wrap</span><span class="p">:</span> <span class="kc">wrap</span><span class="p">;</span>
  <span class="err">height：400px；</span>
  <span class="k">align-content</span><span class="p">:</span> <span class="kc">flex</span><span class="o">-</span><span class="kc">start</span><span class="p">;</span>   <span class="c">/* 全部集中到顶部 */</span>
  <span class="k">align-content</span><span class="p">:</span> <span class="kc">flex</span><span class="o">-</span><span class="kc">end</span><span class="p">;</span>   <span class="c">/* 全部集中到底部 */</span>
  <span class="k">align-content</span><span class="p">:</span> <span class="kc">center</span><span class="p">;</span>   <span class="c">/* 全部集中到中间 */</span>
  <span class="k">align-content</span><span class="p">:</span> <span class="kc">space</span><span class="o">-</span><span class="n">between</span><span class="p">;</span>
  <span class="k">align-content</span><span class="p">:</span> <span class="kc">space</span><span class="o">-</span><span class="n">around</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<h3 id="flex-item-有哪些属性">flex item 有哪些属性</h3>
<blockquote>
<p>以下都是 item 的属性</p>
</blockquote>
<h4 id="item-上加-order">item 上加 order</h4>
<ul>
<li>
<p><strong>默认 order 为 0</strong></p>
</li>
<li>
<p>指定 order 后，item 会按照 order 顺序从小到大排列（可以指定为负数）</p>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;item&#34;</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;item&#34;</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>  
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;item&#34;</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;item&#34;</span><span class="p">&gt;</span>4<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    
<span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="p">.</span><span class="nc">container</span><span class="p">{</span>
    <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
    <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="p">.</span><span class="nc">item</span><span class="p">{</span>
    <span class="k">width</span><span class="p">:</span><span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">height</span><span class="p">:</span><span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">green</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="p">.</span><span class="nc">item</span><span class="p">:</span><span class="nd">first-child</span><span class="p">{</span> <span class="k">order</span><span class="p">:</span> <span class="mi">100</span><span class="p">;</span> <span class="p">}</span>    <span class="c">/* 最后 */</span>
  <span class="p">.</span><span class="nc">item</span><span class="p">:</span><span class="nd">nth-child</span><span class="o">(</span><span class="nt">2</span><span class="o">)</span><span class="p">{</span> <span class="k">order</span><span class="p">:</span> <span class="mi">2</span><span class="p">;</span> <span class="p">}</span>			
  <span class="p">.</span><span class="nc">item</span><span class="p">:</span><span class="nd">nth-child</span><span class="o">(</span><span class="nt">3</span><span class="o">)</span><span class="p">{</span> <span class="k">order</span><span class="p">:</span> <span class="mi">3</span><span class="p">;</span> <span class="p">}</span>
  <span class="p">.</span><span class="nc">item</span><span class="p">:</span><span class="nd">last-child</span><span class="p">{</span> <span class="k">order</span><span class="p">:</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>    <span class="c">/* 最前 */</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ul>
<p>​</p>
<h4 id="item-上加-flex-grow">item 上加 flex-grow</h4>
<blockquote>
<p>用于分配多余的空间（控制变胖）</p>
<ul>
<li>flex-grow： 默认为 0.   就是 item 宽度由内容撑开，没内容的话宽度就是0，不会占用多余的空间</li>
<li>给 item 设置 flex-grow  值为 n （&gt;0），就是将分配多余空间给当前 item 占 n 份。
<ul>
<li>如果一共有3个item，那就平均分配多余空间，每个 item 占 n/3.</li>
</ul>
</li>
</ul>
</blockquote>
<p></p>
<ul>
<li>
<p>当我们不给 item 设置宽度时，item 的宽度是能有多窄有多窄（宽度由内容撑开）</p>
<p></p>
</li>
<li>
<p>实现宽度能有多宽有多宽，就给 item 添加 flex-grow</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">item</span><span class="p">{</span>
  <span class="k">flex-grow</span><span class="p">:</span> <span class="mi">1</span><span class="p">;</span>    <span class="c">/* 每一个 item 平均分配宽度，来占满多余的空间（不是占满整行空间） */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
<li>
<p>需求：从多余的空间中，给2,3 的宽度占 2 份;   给 1,4 占 1 份 空间</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">container</span><span class="p">{</span>
  <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
  <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">item</span><span class="p">{</span>
  <span class="k">height</span><span class="p">:</span><span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">green</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">item</span><span class="p">:</span><span class="nd">first-child</span><span class="p">{</span> <span class="k">flex-grow</span><span class="p">:</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
<span class="p">.</span><span class="nc">item</span><span class="p">:</span><span class="nd">nth-child</span><span class="o">(</span><span class="nt">2</span><span class="o">)</span><span class="p">{</span> <span class="k">flex-grow</span><span class="p">:</span> <span class="mi">2</span><span class="p">;</span> <span class="p">}</span>
<span class="p">.</span><span class="nc">item</span><span class="p">:</span><span class="nd">nth-child</span><span class="o">(</span><span class="nt">3</span><span class="o">)</span><span class="p">{</span> <span class="k">flex-grow</span><span class="p">:</span> <span class="mi">2</span><span class="p">;</span> <span class="p">}</span>
<span class="p">.</span><span class="nc">item</span><span class="p">:</span><span class="nd">last-child</span><span class="p">{</span> <span class="k">flex-grow</span><span class="p">:</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ul>
<h5 id="经验-2">经验</h5>
<ul>
<li>当 3 栏布局，如下
<ul>
<li>只给【导航】设置<strong><code> flex-grow: 1</code></strong>（实现导航宽度的响应式），logo、头像固定宽度</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;item&#34;</span><span class="p">&gt;</span>logo<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;item&#34;</span><span class="p">&gt;</span>导航<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>  
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;item&#34;</span><span class="p">&gt;</span>头像<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="p">.</span><span class="nc">container</span><span class="p">{</span>
    <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
    <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="p">.</span><span class="nc">item</span><span class="p">{</span>
    <span class="k">height</span><span class="p">:</span><span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">green</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="p">.</span><span class="nc">item</span><span class="p">:</span><span class="nd">nth-child</span><span class="o">(</span><span class="nt">2</span><span class="o">)</span><span class="p">{</span>   
    <span class="k">flex-grow</span><span class="p">:</span> <span class="mi">1</span><span class="p">;</span> 
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h4 id="flex-shrink-控制如何变瘦">flex-shrink 控制如何变瘦</h4>
<blockquote>
<p>当界面不断变窄，无法存放每项的给定宽度时，每项都需要变窄，flex-shrink 就控制谁瘦的多，谁瘦的少</p>
<ul>
<li>默认是1（所有item平均收缩，要缩一起缩）</li>
<li>一般写 <strong><code>flex-shrink: 0;</code></strong>  防止变瘦（被设置为 0 的这一项，就算空间不够时，也不会收缩。要缩别找我）</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">item</span><span class="p">{</span>
  <span class="k">width</span><span class="p">:</span> <span class="mi">150</span><span class="kt">px</span><span class="p">;</span>  <span class="c">/* 合计宽度最小450px */</span>
  <span class="k">height</span><span class="p">:</span><span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">green</span><span class="p">;</span>
  <span class="k">flex-grow</span><span class="p">:</span> <span class="mi">1</span><span class="p">;</span>  <span class="c">/* 每项会均分多余空间 */</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">item</span><span class="p">:</span><span class="nd">first-child</span><span class="p">{</span>
  <span class="k">flex-shrink</span><span class="p">:</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">item</span><span class="p">:</span><span class="nd">nth-child</span><span class="o">(</span><span class="nt">2</span><span class="o">)</span><span class="p">{</span> 
  <span class="k">flex-shrink</span><span class="p">:</span> <span class="mi">50</span><span class="p">;</span>   <span class="c">/* 2 的收缩比例较大 */</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">item</span><span class="p">:</span><span class="nd">last-child</span><span class="p">{</span>
  <span class="k">flex-shrink</span><span class="p">:</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>当宽度缩小达到450px以内，每项宽度不足，此时每项会开始收缩， flex-shrink 值越大，则收缩的越大，flex-shrink 值越小，越不会受到收缩的影响
<ul>
<li>如下图，宽度收缩450px以内，【导航】最先开始发生了较大的收缩，因为设定了较大的 flex-shrink 值</li>
<li>【logo】和【头像】版块，基本不收缩</li>
</ul>
</li>
</ul>
<p></p>
<p>​</p>
<h4 id="flex-basis-控制基准宽度">flex-basis 控制基准宽度</h4>
<blockquote>
<p>用法：</p>
<ul>
<li>默认是 auto（与 item 的 width 值保持一致）</li>
<li>指定宽度：<code>flex-basis: 100px;</code>  相当于指定了 width 值</li>
</ul>
</blockquote>
<p>这个属性比较迷：不是很重要的属性</p>
<ul>
<li>可以直接用 width 来代替这个属性</li>
</ul>
<p>​</p>
<h4 id="缩写成-flex">缩写成 flex</h4>
<blockquote>
<p>flex  相当于  flex-grow  flex-shrink   flex-basis</p>
<p>习惯上我一般不写缩写，容易记错位置</p>
</blockquote>
<ul>
<li>flex  只有以下 4 种形式的写法</li>
</ul>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">item</span><span class="p">:</span><span class="nd">first-child</span><span class="p">{</span>
  <span class="k">flex</span><span class="p">:</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span>    <span class="c">/* grow-1，shrink-1，宽100px */</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">item</span><span class="p">:</span><span class="nd">nth-child</span><span class="o">(</span><span class="nt">2</span><span class="o">)</span><span class="p">{</span>
  <span class="k">flex</span><span class="p">:</span> <span class="mi">1</span> <span class="mi">100</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span>    <span class="c">/* grow-1，shrink-100，宽100px */</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">item</span><span class="p">:</span><span class="nd">last-child</span><span class="p">{</span>
  <span class="k">flex</span><span class="p">:</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span>    <span class="c">/* grow-1，shrink-1，宽100px */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>上述，3个item，宽度为100px
<ul>
<li>grow撑开时每个item平均占满所有多余空间</li>
<li>宽度不足时，2 号主要进行收缩</li>
</ul>
</li>
</ul>
<p>​</p>
<h4 id="align-self-定制-align-items">align-self 定制 align-items</h4>
<blockquote>
<p>用的很少</p>
<ul>
<li>默认在垂直方向上，都是顶端对齐的</li>
<li>align-self  可以让某一个 item，在垂直方向上，特例独行的展示（指定一个特别的对齐方式）</li>
</ul>
</blockquote>
<p></p>
<p>实现：单独设置，最后一个 item 底部对齐</p>
<p></p>
<p>​</p>
<p>​</p>
<h3 id="重点">重点</h3>
<ul>
<li>记住这些代码</li>
<li><strong><code>display: flex</code></strong>     开启flex布局</li>
<li><strong><code>flex-direction: row / column </code></strong>   主轴是横向还是纵向</li>
<li><strong><code>flex-wrap: wrap </code></strong>   空间不足时是否换行</li>
<li><strong><code>just-content: center / space-between</code></strong>   主轴方向上的对齐方式：居中/分开</li>
<li><strong><code>align-items: center  </code></strong>    次轴方向上的对齐方式：居中，顶，底</li>
<li>工作中基本只用这些</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="实践-1">实践</h3>
<h4 id="不同布局-1">不同布局</h4>
<ul>
<li>用 flex 做两栏布局</li>
<li>用 flex 做三栏布局</li>
<li>用 flex 做四栏布局</li>
<li>用 flex 做平均布局 —— <a href="#%e8%b4%9fmargin%e6%96%b9%e6%a1%88" rel="">负 margin</a></li>
<li>用 flex 组合使用，做更复杂的布局</li>
<li><a href="https://jsbin.com/biluwan/edit?html,css,output" target="_blank" rel="noopener noreffer">JSBin 代码</a></li>
</ul>
<h4 id="经验-3">经验</h4>
<ul>
<li>永远不要把 width 和 height 写死，除非特殊说明
<ul>
<li>PC端通常可以写死。移动端不能写死，需要适配各种尺寸：平板/手机…</li>
</ul>
</li>
<li>用  min-width  /  max-width  /  min-height  /  max-height</li>
<li>flex 可以基本满足所有需求</li>
<li>flex  和  <code>margin-xxx : auto</code>  配合有意外的效果——例：<a href="#%e5%b7%a6%e5%8f%b3%e5%b8%83%e5%b1%80" rel="">左右布局</a></li>
</ul>
<p>​</p>
<h4 id="什么叫写死">什么叫写死</h4>
<h5 id="写死">写死</h5>
<ul>
<li>width:100px</li>
</ul>
<h5 id="不写死">不写死</h5>
<ul>
<li>width: 50%</li>
<li>max-width: 100px</li>
<li>width: 30vw   （屏幕宽度的百分之30）</li>
<li>min-width: 80%</li>
<li>特点：不使用 px，或者加 min max 前缀</li>
</ul>
<blockquote>
<p>css 最忌讳把宽高写死</p>
</blockquote>
<p>​</p>
<h4 id="技术总结-1">技术总结</h4>
<h5 id="左右布局">左右布局</h5>
<ul>
<li>表示两栏布局-贴左、贴右：可通过以下两句中的任意一句来实现</li>
<li>margin-xxx:  auto 更灵活</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="p">.</span><span class="nc">header</span> <span class="p">{</span>
    <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
    <span class="k">border</span><span class="p">:</span><span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">black</span><span class="p">;</span>
    <span class="c">/*justify-content: space-between; ---------------二者任选其一----------------------*/</span>
  <span class="p">}</span>
  <span class="nt">ul</span> <span class="p">{</span>
    <span class="c">/* margin-left: auto; -------------------------二者任选其一【推荐】------------------*/</span>
    <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
    <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">green</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nt">ul</span> <span class="o">&gt;</span> <span class="nt">li</span> <span class="p">{</span>
    <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">header</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;header&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;logo&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">img</span> <span class="na">alt</span><span class="o">=</span><span class="s">&#34;&#34;</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;./logo.png&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>首页<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>课程<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>优惠<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>关于<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">header</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="产品展示格子布局">产品展示格子布局</h5>
<h6 id="失败方案">失败方案</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;imageList&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">imageList</span><span class="p">{</span>
  <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
  <span class="k">width</span><span class="p">:</span> <span class="mi">800</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">margin-right</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>
  <span class="k">margin-left</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>
  <span class="k">margin-top</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
  <span class="k">flex-wrap</span><span class="p">:</span> <span class="kc">wrap</span><span class="p">;</span>
  <span class="k">justify-content</span><span class="p">:</span> <span class="kc">space</span><span class="o">-</span><span class="n">between</span><span class="p">;</span>  <span class="c">/* 会导致产品不足数的行 --&gt; 错位 */</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">image</span><span class="p">{</span>
  <span class="k">width</span><span class="p">:</span> <span class="mi">191</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">191</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#ccc</span><span class="p">;</span>
  <span class="k">margin-bottom</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">green</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h6 id="负margin方案">负margin方案</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;imageList&#34;</span><span class="p">&gt;</span>
  <span class="c">&lt;!-- 可以命名为 inner 或者 wrapper --&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;x&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;image&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">imageList</span> <span class="p">{</span>
  <span class="k">outline</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>   <span class="c">/* 注意：边框去掉或者放在外面，否则占据宽度 */</span>
  <span class="k">width</span><span class="p">:</span> <span class="mi">800</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">margin-right</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>
  <span class="k">margin-left</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>
  <span class="k">margin-top</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">imageList</span> <span class="o">&gt;</span> <span class="p">.</span><span class="nc">x</span> <span class="p">{</span>
  <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
  <span class="k">flex-wrap</span><span class="p">:</span> <span class="kc">wrap</span><span class="p">;</span>
  <span class="k">margin-right</span><span class="p">:</span> <span class="mi">-12</span><span class="kt">px</span><span class="p">;</span>    <span class="c">/* 负margin */</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">image</span> <span class="p">{</span>
  <span class="k">width</span><span class="p">:</span> <span class="mi">191</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">191</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#ccc</span><span class="p">;</span>
  <span class="k">margin-bottom</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">green</span><span class="p">;</span>
  <span class="k">margin-right</span><span class="p">:</span> <span class="mi">12</span><span class="kt">px</span><span class="p">;</span>  <span class="c">/* 每个的间距 */</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>]]></description>
</item><item>
    <title>Re：从零开始の CSS 学习笔记——基础篇</title>
    <link>http://samrks.github.io/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/</link>
    <pubDate>Sat, 25 Jul 2020 02:12:24 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/20200724-re%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84css%E5%9F%BA%E7%A1%80%E7%AF%87/</guid>
    <description><![CDATA[<p>熬夜总结 – CSS 基础篇 。</p>
<p></p>
<h2 id="css-的历史">CSS 的历史</h2>
<h3 id="css-是谁发明的">CSS 是谁发明的</h3>
<blockquote>
<p>李爵士的挪威同事赖先生，首先<a href="https://www.w3.org/People/howcome/p/cascade.html" target="_blank" rel="noopener noreffer">提出 CSS</a></p>
<p>Håkon Wium Lie （挪威语）</p>
</blockquote>
<h3 id="赖先生的生平">赖先生的生平</h3>
<h4 id="生平">生平</h4>
<ul>
<li>
<p>1991年获得MIT媒体实验室视觉研究理学硕士学位</p>
</li>
<li>
<p>1994年提出CSS概念而闻名</p>
</li>
<li>
<p>1999年任Opera的CTO（首席技术官，不分前端后端、只要是技术就负责）</p>
</li>
<li>
<p>2005年他写公开信给比尔盖茨问为什么IE不支持Web标准，盖茨说IE 7马上发布，他写了 Acid2 用来验证</p>
</li>
<li>
<p>2006年通过了博士论文答辩</p>
</li>
<li>
<p>2006年他倡议 Web 网页应使用通用字体格式</p>
</li>
<li>
<p>2007年他倡议浏览器可以支持video标签</p>
</li>
</ul>
<h4 id="观点">观点</h4>
<ul>
<li>
<p>微软的IE常常成为他的批评对象</p>
</li>
<li>
<p>他也是Web打印概念的倡导者，用HTML和CSS写书</p>
</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="css-的牛-x-之处在哪">CSS 的牛 X 之处在哪？</h3>
<blockquote>
<p>CSS（Cascading Style Sheets）：==层叠==样式表</p>
</blockquote>
<h4 id="样式层叠">样式层叠</h4>
<p>可以多次对同一选择器进行样式声明</p>
<h4 id="选择器层叠">选择器层叠</h4>
<p>可以用不同选择器对同一个元素进行样式声明</p>
<h4 id="文件层叠">文件层叠</h4>
<p>可以用多个文件进行层叠</p>
<h4 id="这些特性使得-css-极度灵活">这些特性使得 CSS 极度灵活</h4>
<p>这也为 CSS 后来被吐槽留下了隐患</p>
<p>​</p>
<p>​</p>
<h3 id="css-的版本">CSS 的版本</h3>
<blockquote>
<p>⭐目前使用最广泛的css版本：css 2.1 版本</p>
<ul>
<li>2004-2011年间不断更新，没有具体发布时间</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th><strong>版本</strong></th>
<th><strong>时间</strong></th>
<th><strong>重点</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>CSS  1</td>
<td>1996年</td>
<td>不用管</td>
</tr>
<tr>
<td>CSS  2</td>
<td>1998年</td>
<td>添加定位、z-index、media，不用管</td>
</tr>
<tr>
<td>**CSS  2.1 **</td>
<td>2004~2011年</td>
<td>使用最广泛的版本（IE支持）</td>
</tr>
<tr>
<td>CSS  3</td>
<td>1999年开始起草</td>
<td>现代版本，分模块（IE  8 部分支持）</td>
</tr>
<tr>
<td>CSS  4*</td>
<td>分模块升级</td>
<td></td>
</tr>
</tbody>
</table>
<p>​</p>
<p>​</p>
<h3 id="浏览器对css的支持兼容性">浏览器对CSS的支持（兼容性）</h3>
<blockquote>
<p>怎么知道，哪些浏览器，支持哪些特性？</p>
<ul>
<li>方法一：几十种浏览器全部跑一遍</li>
<li>方法二：使用 <a href="https://www.caniuse.com/#search=flex" target="_blank" rel="noopener noreffer">caniuse.com</a></li>
</ul>
</blockquote>
<p></p>
<ul>
<li>红色：不支持flex</li>
<li>黄色：部分支持</li>
<li>绿色：完全支持</li>
</ul>
<h4 id="caniusecom-使用方法">caniuse.com 使用方法</h4>
<h5 id="请收藏此网站">请收藏此网站</h5>
<ul>
<li>
<p>输入你关心的样式，比如 border-radius 或 filter</p>
</li>
<li>
<p>查看大部分浏览器的支持情况</p>
</li>
<li>
<p>如果想看更多，点击 Show All</p>
</li>
<li>
<p>下方会详细说明兼容 bug 有哪些（翻译成中文）</p>
</li>
</ul>
<h5 id="这个网站是怎么运作的">这个网站是怎么运作的</h5>
<ul>
<li>
<p>网站主一开始<a href="http://tests.caniuse.com/" target="_blank" rel="noopener noreffer">自己测试</a>了一部分浏览器</p>
</li>
<li>
<p>社区的前端工程师帮助测试各种各样的浏览器</p>
</li>
<li>
<p>UC 浏览器和 QQ 浏览器当然主要是中国开发者测试</p>
</li>
<li>
<p>大家把测试结果提交到 GitHub 上</p>
</li>
<li>
<p>这就是<u>开发者社区</u>的力量、</p>
<ul>
<li>
<p>什么是社区？</p>
<p>社区不是一个准确存在的概念，大家你帮我我帮你，互相学习，互相分享，就形成了社区。</p>
<p>是一种弱联系。</p>
<p>社区通过汇集的力量将事情给解决好</p>
</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="css-是艺术">CSS 是艺术</h2>
<blockquote>
<p>就像画画、折纸</p>
<p>你需要用感性思维来理解 CSS</p>
</blockquote>
<h3 id="不要用理性思维">不要用理性思维</h3>
<ul>
<li>
<p>即不要问「为什么会这样」，而是说「原来是这样」</p>
</li>
<li>
<p>浏览器说是怎么样，就是怎么样</p>
</li>
<li>
<p>当然有极少情况是浏览器出错了</p>
</li>
</ul>
<h3 id="为什么-color-red-能让字变红">为什么 color: red 能让字变红</h3>
<ul>
<li>
<p>不要问「为什么」</p>
</li>
<li>
<p>要说「原来是这样」</p>
</li>
<li>
<p>所见即所学</p>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="体系化学习">体系化学习</h2>
<blockquote>
<ul>
<li>有生之年都不太可能把css所有知识学完，因为它太、多、了。只文档可能就有几百页，目录全看一遍都很累：<a href="https://www.w3.org/Style/CSS/specs.en.html" target="_blank" rel="noopener noreffer">css标准文档</a>（google 搜 css spec）</li>
<li>不是把所有知识都学完，而是在一个新知识点到来的时候，马上学会它。这才是学习CSS体系化最重要的手段</li>
</ul>
</blockquote>
<blockquote>
<p>体系化学习 CSS 和 HTML 的过程完全一致</p>
</blockquote>
<h3 id="学一门语言必须学会什么">学一门语言必须学会什么</h3>
<ul>
<li>
<p><a href="#%e8%af%ad%e6%b3%95" rel="">语法</a>（怎么写代码）</p>
</li>
<li>
<p>css 语法非常简单</p>
</li>
<li>
<p>[如何调试](#如何调试 CSS)（怎么知道自己代码写错了）</p>
<ul>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="o">-</span><span class="nx">w3c</span><span class="o">-</span><span class="nx">validator</span> <span class="o">-</span><span class="nx">i</span> <span class="nx">index</span><span class="p">.</span><span class="nx">html</span>    <span class="c1">// 查错
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p><a href="#%e5%9c%a8%e5%93%aa%e6%9f%a5%e8%b5%84%e6%96%99" rel="">在哪查资料</a>（其实就是为了抄代码）</p>
</li>
<li>
<p>MDN</p>
</li>
<li>
<p>标准制定者是谁</p>
<ul>
<li>尝试所有方法仍不能解决问题的话，就必须看<a href="https://www.w3.org/Style/CSS/specs.en.html" target="_blank" rel="noopener noreffer">标准文档</a>了</li>
</ul>
</li>
</ul>
<h3 id="如何学">如何学</h3>
<ul>
<li>
<p>Copy - 抄文档、抄老师</p>
</li>
<li>
<p>Run - 放在自己的机器上运行成功</p>
</li>
<li>
<p>Modify - 加入一点自己的想法，然后重新运行</p>
</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="语法">语法</h3>
<blockquote>
<p>超级简单</p>
</blockquote>
<h4 id="语法一样式语法">语法一：样式语法</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="nt">选择器</span> <span class="p">{</span>
  <span class="err">属性名:</span> <span class="err">属性值</span><span class="p">;</span>
  <span class="c">/*注释*/</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="注意事项">注意事项</h5>
<blockquote>
<p>不学常态，学变态</p>
</blockquote>
<ul>
<li>
<p>所有符号都是英文符号，如果写错了，浏览器会警告（样式会被<del>划掉</del>）</p>
</li>
<li>
<p>区分大小写，a 和 A 是不同的东西（特别是大小写很相似的字母，很容易错）</p>
</li>
<li>
<p>没有 // 注释，只有 <code>/* 注释 */</code>  这种形式</p>
</li>
<li>
<p>最后一个分号可以省略，但建议不要省略</p>
</li>
<li>
<p>任何地方写错了，都不会报错，浏览器会直接忽略</p>
</li>
<li>
<p>那我怎么知道自己写没写错呢？一会说</p>
</li>
</ul>
<h4 id="语法二at-httpsdevelopermozillaorgzh-cndocswebcssat-rule语法httpsdevelopermozillaorgzh-cndocswebcssat-rule">语法二：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/At-rule" target="_blank" rel="noopener noreffer">at </a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/At-rule" target="_blank" rel="noopener noreffer">语法</a></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">@</span><span class="k">charset</span> <span class="s2">&#34;UTF-8&#34;</span><span class="p">;</span>    <span class="c">/* 声明字符编码，必须放在第一行 */</span>
<span class="p">@</span><span class="k">import</span> <span class="nt">url</span><span class="o">(</span><span class="nt">2</span><span class="p">.</span><span class="nc">css</span><span class="o">)</span><span class="p">;</span>   <span class="c">/* 导入一个额外的css文件 */</span>
<span class="p">@</span><span class="k">media</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">100px</span><span class="o">)</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-width</span><span class="o">:</span> <span class="nt">200px</span><span class="o">)</span> <span class="p">{</span>    <span class="c">/* 媒体查询 */</span>
  <span class="nt">语法一</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="注意事项-1">注意事项</h5>
<ul>
<li>
<p>@charset 必须放在第一行</p>
</li>
<li>
<p>前两个 at 语法必须以分号 ; 结尾</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">@</span><span class="k">charset</span> <span class="s2">&#34;UTF-8&#34;</span><span class="p">;</span>
<span class="p">@</span><span class="k">import</span> <span class="nt">url</span><span class="o">(</span><span class="nt">2</span><span class="p">.</span><span class="nc">css</span><span class="o">)</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>@media 语法会单独教学</p>
</li>
<li>
<p>charset 是字符集的意思，但 UTF-8 是字符编码 encoding（并不是字符集），这是历史遗留问题</p>
<ul>
<li>最早只有 ASCII 这一种字符集（英文），这个字符集的编码形式就是它自己</li>
<li>后来中国人发现 ASCII 不能表示中文，所以就发明了 GB2312，由中国国家标准局（国标局）发行，GB 就是国家标准的缩写。
<ul>
<li>GB2312 是一个支持中文简体汉字的字符集。它对应的编码形式，是它自己</li>
</ul>
</li>
<li>后来日本、韩国的文字，我们的 GB2312 也表示不了。国标局还没开始动作，微软先一步发明 GBK，k表示扩展。GBK 可以同时表示  中文、日文、韩文（CJK）</li>
<li>后来中国发现还需要和更多国家建立联系，国标库根本就搞不定，就有一个叫 Unicode 的组织，给全球制作了一个字符集，叫做 Unicode（万国码）。这个码包含非常多国家，特别长，所以必须采用不同的编码形式。
<ul>
<li>编码形式包含：UTF8/UTF16/UTF32 （选择任意一个即可）</li>
<li>从 Unicode开始字符集和编码形式就不统一了，之前都是统一的</li>
</ul>
</li>
<li>html 1993年左右发明，css 发明于1996年左右，Unicode在1996年之后发明。</li>
<li>charset 原本后面写一个【字符集的名字】，写 GBK/GB2312 ….这种，对应编码形式也是同名的。但是Unicode发明后，字符集名称和编码形式不统一了，所以我们为了表明自己使用的是 Unicode 的那种编码形式，就只能将Unicode的编码形式，写在表示字符集的 charset 的位置。</li>
<li>==【这就是这个历史问题的发展经过】==</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>字符集</th>
<th>编码形式</th>
</tr>
</thead>
<tbody>
<tr>
<td>ASCII</td>
<td>ASCII</td>
</tr>
<tr>
<td>GB2312</td>
<td>GB2312</td>
</tr>
<tr>
<td>GBK</td>
<td>GBK</td>
</tr>
<tr>
<td>Unicode</td>
<td>UTF8/UTF16/UTF32</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>问： @charset “UTF-8”  指的是什么？</p>
<blockquote>
<ul>
<li>
<p>回答 ：字符集（charset） 是错误的</p>
</li>
<li>
<p><strong>“UTF-8”<strong>指定的不是字符集 charset，而是</strong>指定的【 文件编码 】</strong></p>
<ul>
<li>虽然charset本身是字符集的意思，但后面的 utf-8 指的是  Unicode字符集的**【编码形式】**的一种。这是一个历史遗留问题</li>
</ul>
</li>
</ul>
</blockquote>
</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="如何调试-css">如何调试 CSS</h3>
<h4 id="方法">方法</h4>
<ul>
<li>
<p>使用 W3C 验证器（<a href="https://jigsaw.w3.org/css-validator/" target="_blank" rel="noopener noreffer">在线</a> / 命令行工具）不用试了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="o">-</span><span class="nx">w3c</span><span class="o">-</span><span class="nx">validator</span> <span class="o">-</span><span class="nx">i</span> <span class="nx">index</span><span class="p">.</span><span class="nx">html</span>    <span class="c1">// 可能需要先安装java环境，才能运行 node-w3c-validator
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="https://www.cnblogs.com/SNNA/p/12531886.html" target="_blank" rel="noopener noreffer">Java环境安装、配置</a></li>
</ul>
</li>
<li>
<p>使用 VSCode 看颜色</p>
</li>
<li>
<p>使用 WebStorm 看颜色</p>
</li>
<li>
<p>使用开发者工具看警告</p>
<ul>
<li>浏览器预览页面，右键检查，查看Element中，一般会给出问题警告。有问题的css会被<del>划删除线</del></li>
</ul>
</li>
</ul>
<h4 id="如何使用开发者工具">如何使用开发者工具</h4>
<ul>
<li>
<p>找到你脑中的标签</p>
</li>
<li>
<p>看它是否有选择器</p>
</li>
<li>
<p>看它的样式是否被划掉</p>
</li>
<li>
<p>看它的样式是否有警告</p>
</li>
</ul>
<h4 id="border-调试法">Border 调试法</h4>
<h5 id="步骤">步骤</h5>
<ul>
<li>怀疑某个元素有问题</li>
<li>就给这个元素加 border</li>
<li>border 展示效果没出现？说明选择器错了或者语法错了
<ul>
<li>通常是 border 上面的代码有问题（因为上面代码执行遇到问题，就会影响下面样式的输出）</li>
</ul>
</li>
<li>border 出现了？看看边界是否符合预期
<ul>
<li>说明选择器没有错、border以上的代码没有错</li>
<li>可以继续往下测试、查找错误</li>
</ul>
</li>
<li>bug 解决了才可以把 border 删掉</li>
</ul>
<h5 id="记住">记住</h5>
<ul>
<li>CSS 的 border 调试法</li>
<li>就相当于 JS 的 log 调试法</li>
<li>我会再每节课重复这个调试法</li>
</ul>
<p>​</p>
<h4 id="新人常见错误">新人常见错误</h4>
<h5 id="低级错误">低级错误</h5>
<ul>
<li>选择器拼写错误</li>
<li>属性名拼写错误</li>
<li>属性值拼写错误</li>
<li>大小写错误</li>
<li>没写分号</li>
<li>中文冒号</li>
<li>没写反花括号</li>
<li>没加单位</li>
</ul>
<h5 id="非低级错误">非低级错误</h5>
<ul>
<li>没有非低级错误</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="在哪查资料">在哪查资料</h3>
<h4 id="网站推荐">网站推荐</h4>
<ul>
<li>Google 搜索关键词时加 MDN</li>
<li>CSS tricks（英文），专门收集 css 小技巧的网站
<ul>
<li>使用方式：在google 搜  <code>[技术名词] css tricks</code>    <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">https://css-tricks.com/snippets/css/a-guide-to-flexbox/</a></li>
</ul>
</li>
<li>张鑫旭的博客：可能是中国花时间最多来学css的人
<ul>
<li>使用方式：搜  [技术名词] 张鑫旭</li>
</ul>
</li>
</ul>
<h4 id="书籍推荐">书籍推荐</h4>
<ul>
<li>不推荐买任何书</li>
<li>CSS 和 HTML 一样，以练为主</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="在哪搜练习素材">在哪搜练习素材</h3>
<h4 id="psd">PSD</h4>
<ul>
<li>Freepik 搜索 <a href="https://www.freepik.com/search?query=web&amp;type=psd" target="_blank" rel="noopener noreffer">PSD web</a>  英文（下载免费的 psd）
<ul>
<li>如果下载慢，就把域名加入翻墙插件</li>
</ul>
</li>
<li>中文免费 PSD 网站较少，需要多搜一下</li>
<li>365PSD 里的 <a href="https://cn.365psd.com/free-psd/ui-kits" target="_blank" rel="noopener noreffer">UI </a><a href="https://cn.365psd.com/free-psd/ui-kits" target="_blank" rel="noopener noreffer">套件</a>还行</li>
</ul>
<h4 id="效果图不提供下载">效果图（不提供下载）</h4>
<ul>
<li>dribbble.com 顶级设计师社区</li>
<li>可以用肉眼模仿它</li>
</ul>
<h4 id="商业网站">商业网站</h4>
<ul>
<li>直接模仿你常去的网站</li>
</ul>
<p>​</p>
<h3 id="不要沉迷临摹">不要沉迷临摹</h3>
<blockquote>
<p>每个类型的临摹一两个即可</p>
<ul>
<li>
<p>PC 网站、手机网站、UI 套件</p>
</li>
<li>
<p>再多无益</p>
</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="遇到查不到的问题怎么办">遇到查不到的问题，怎么办</h3>
<blockquote>
<p>遇到查不到的问题，应该去哪里查文档？  ——找标准制定者</p>
</blockquote>
<blockquote>
<p>李爵士、赖先生</p>
</blockquote>
<ul>
<li>W3C</li>
<li>搜索 CSS spec 可以找到 <a href="https://www.w3.org/Style/CSS/specs.en.html" target="_blank" rel="noopener noreffer">CSS 最新标准</a>
<ul>
<li>没人能看完它</li>
<li>你可以看看 CSS 2.1 标准的<a href="http://www.ayqy.net/doc/css2-1/cover.html" target="_blank" rel="noopener noreffer">中文版</a></li>
<li>正确学 css ，应该是遇到问题，再查资料</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="基本概念">基本概念</h2>
<h3 id="要理解几个重要的概念">要理解几个重要的概念</h3>
<ul>
<li><a href="#%e6%96%87%e6%a1%a3%e6%b5%81" rel="">文档流</a> Normal Flow</li>
<li><a href="#%e5%9d%97%e3%80%81%e5%86%85%e8%81%94%e3%80%81%e5%86%85%e8%81%94%e5%9d%97" rel="">块、内联、内联块</a></li>
<li><a href="#margin%e5%90%88%e5%b9%b6" rel="">margin 合并</a></li>
<li><a href="#%e7%9b%92%e6%a8%a1%e5%9e%8b" rel="">两种盒模型</a>（border-box 更符合人类思维）</li>
</ul>
<p>​</p>
<h3 id="文档流">文档流</h3>
<blockquote>
<p>文档流的英文名称叫做  Normal Flow</p>
<p>文档流方向：默认，内联元素从左到右，块级元素从上到下</p>
</blockquote>
<p></p>
<p></p>
<p>emmet:  <code>span{第$个span元素}*6</code> + tab</p>
<p>​</p>
<h3 id="块内联内联块">块、内联、内联块</h3>
<blockquote>
<ul>
<li>将元素分为：内联元素、块级元素。是一种已经过时的分法。
<ul>
<li>在新的 HTML5 标准中，元素不分内联、块级。所有元素都可以是内联元素，所有元素都可以是块级元素。</li>
</ul>
</li>
<li>看样式：如果 <strong><code>display:inline</code></strong>， 就是内联元素。如果 <strong><code>display: block</code></strong>  就是块级元素。</li>
<li>内联块：不会出现如【内联元素首尾可以在不同行】的情况，内联块会同行展示，但是又保有 block 的一个特点：不会跨两行（这就是inline和inline-block在流动方向上相似又稍微不同的点）</li>
</ul>
</blockquote>
<h4 id="流动方向">流动方向</h4>
<ul>
<li>inline 元素从左到右，到达最右边才会换行</li>
<li>block 元素从上到下，每一个都另起一行</li>
<li>inline-block 也是从左到右</li>
</ul>
<h4 id="宽度">宽度</h4>
<h5 id="inline-元素"><strong>inline 元素</strong></h5>
<ol>
<li>宽度为 内部 inline 元素的和。</li>
<li>不接受用 width 指定宽度。加了也不变化</li>
<li><strong>不要</strong>在 inline元素内部，再写 block 元素。它的计算可能乱套的，出现后果自负</li>
</ol>
<h5 id="block-元素"><strong>block 元素</strong></h5>
<ol>
<li>
<p>默认自动计算宽度，可用 width 指定</p>
<ul>
<li><code>width: 200px; </code>（200像素）、<code>width: 20em;</code> （20个字宽）</li>
</ul>
</li>
<li>
<p>不指定宽度，宽度默认是 <strong><code>width: auto</code></strong>。不是 width: 100%，<strong>是能有多宽就占多宽</strong>，最大可以占 100%</p>
<ul>
<li>如下图，每个div元素都有边框，【div默认宽度】=100%-边框宽度。如果【设置div宽度为100%】，那么相当于，整行宽度= div宽度100%+边框宽度，所以会多出边框宽度的一小块位置</li>
<li>==经验之谈==：给任何元素都尽量，<strong>不要设置 width: 100% 的样式</strong>。大部分情况写了就等于 bug。</li>
</ul>
<p></p>
</li>
</ol>
<h5 id="inline-block-元素"><strong>inline-block 元素</strong></h5>
<ol>
<li>
<p>结合前两者特点，可用 width</p>
<ul>
<li>
<p>默认情况，与 inline 一致</p>
</li>
<li>
<p>但是又可以用 width 指定宽度，这一点又与 block 一致</p>
</li>
</ul>
</li>
</ol>
<h4 id="高度">高度</h4>
<h5 id="inline-高度">inline 高度</h5>
<ol>
<li>
<p>由 <strong>line-height（行高）</strong> <strong>间接</strong>确定，跟 height 无关 （设置height无效）</p>
<ul>
<li>
<p>如下图，为什么外层的 绿div 没有包住 红span、被撑高呢？</p>
<ul>
<li>因为 span 的高度，不是【内容高+padding】决定的。<strong>padding 改变的不是 span 的实际高度</strong>，只是改变了可视的高度。div 框的高度才是 span 的<strong>实际高度</strong>。</li>
</ul>
<p></p>
<hr>
<ul>
<li>span 的实际高度，由 <strong>行高</strong> 间接确定。如下图，虽然span的红框仍然没变，但是 div高度变化了。而div包裹的高度才是 span 的<strong>实际高度</strong>（只需关注外层div高度即可，红框的高度并不是span实际高度）</li>
</ul>
<p></p>
</li>
<li>
<p>“间接” 怎么理解？</p>
<blockquote>
<p>即使设置行高100px，span的高度也有可能不是100px高</p>
</blockquote>
<ul>
<li>
<p>设置不同的<strong>字体</strong>，会改变 span 的实际高度。经测试：↓↓</p>
<ul>
<li>默认，微软雅黑字体、行高是100px的话，实际高度就是100px。</li>
<li>改成宋体、行高是100px，span 的实际高度变成 101px。</li>
<li>改成 monospace(等宽字体)、行高是100px。 实际高度变成 102px</li>
</ul>
</li>
<li>
<p>具体知识点叫做：<strong>行盒</strong></p>
<p>（可以看<a href="https://zhuanlan.zhihu.com/p/25808995" target="_blank" rel="noopener noreffer">文章</a>，能看懂就看，面试官可能都看不懂，前期可以不用研究这么深）</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h5 id="block-高度">block 高度</h5>
<ul>
<li>
<p>默认高度，由内部所有 <strong>文档流元素</strong> 的<strong>高度总和</strong> 决定的。（由默认行高间接决定）
</p>
<ul>
<li>
<p>内层div是脱离文档流的元素，外层div就无法计算上它的高度</p>
<ul>
<li>
<p>后面会介绍：如何<strong>脱离文档流</strong>、脱离后去哪里了</p>
<p></p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>同时也可以自定义设置 height 高度。这种情况，就忽略内部元素高度。</p>
</li>
<li>
<p>如果div中没有任何内容，高度为0。区别于span，span中没有内容，也有高度，由 默认的 line-height 决定。</p>
<p></p>
</li>
</ul>
<h5 id="inline-block-高度">inline-block 高度</h5>
<ul>
<li>默认高度的计算，跟 block 一样。</li>
<li>也可以自定义设置 height。</li>
</ul>
<h3 id="overflow-溢出">overflow 溢出</h3>
<blockquote>
<p>当内容大于容器</p>
</blockquote>
<ul>
<li>当内容的宽度或高度大于容器的，会溢出
<ul>
<li>可用 overflow 来设置是否显示滚动条</li>
<li>auto 是灵活设置</li>
<li>scroll 是永远显示（基本不用）</li>
<li>hidden 是直接隐藏溢出部分</li>
<li>visible 是直接显示溢出部分（默认值）</li>
<li>overflow 可以分为 overflow-x 和 overflow-y，通常只用overflow。x和y可能最终效果会与实际需求有差</li>
</ul>
</li>
</ul>
<ul>
<li>
<p>示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;width: 10em; height: 200px;&#34;</span><span class="p">&gt;</span>内容......<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="nt">overflow</span><span class="o">:</span> <span class="nt">visible</span><span class="o">;</span>   <span class="c">/* 默认 */</span>
<span class="nt">overflow</span><span class="o">:</span> <span class="nt">hidden</span><span class="o">;</span>   <span class="c">/* 超出部分隐藏 */</span>
<span class="nt">overflow</span><span class="o">:</span> <span class="nt">scroll</span><span class="o">;</span>   <span class="c">/* 超出部分可滚动预览，很少有人用。因为内容没溢出时，仍显示滚动条，非常丑 */</span>
<span class="nt">overflow</span><span class="o">:</span> <span class="nt">auto</span><span class="o">;</span> 		<span class="c">/* 超出时显示滚动条，不超出不显示 */</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
<li>
<p>横向滚动条</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;width: 10em; height: 200px;&#34;</span><span class="p">&gt;</span>
  内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;width:1000px;&#34;</span><span class="p">&gt;</span>
    内容
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    
<span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
<span class="nt">div</span><span class="p">{</span>
  <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">green</span><span class="p">;</span>
  <span class="k">overflow</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">span</span><span class="p">{</span>
  <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>内部文档流元素宽度超出外层父元素，就会出现横向滚动条</p>
</li>
<li>
<p>同时原本的内容，不会因为宽度被内部元素撑开而平铺显示，仍会只显示在第一屏中</p>
<p></p>
</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="脱离文档流">脱离文档流</h3>
<h4 id="回忆一下">回忆一下</h4>
<ul>
<li>
<p>block 高度由内部文档流元素决定，可以设 height</p>
</li>
<li>
<p>这句话的意思是不是说，有些元素可以不在文档流中</p>
</li>
</ul>
<h4 id="哪些元素脱离文档流">哪些元素脱离文档流</h4>
<blockquote>
<p>脱离文档流的元素，那么它所在的容器，就不会把它计算进高度中</p>
<ul>
<li><strong>脱离文档流</strong>，就是从普通文档流中跳出，比普通文档流的层级稍高</li>
</ul>
</blockquote>
<ul>
<li>
<p>float</p>
</li>
<li>
<p>position: absolute / fixed</p>
</li>
</ul>
<h4 id="怎么让元素不脱离文档流">怎么让元素不脱离文档流</h4>
<ul>
<li>不要用上面属性不就不脱离了</li>
</ul>
<p>​</p>
<h3 id="盒模型">盒模型</h3>
<blockquote>
<p>content box &amp; border box</p>
<p>css 盒模型分为两种：一种是 content-box ，一种是 border-box</p>
<p>二者的区别是：</p>
<ul>
<li>content-box 的宽度，只包含 content 部分</li>
<li>border-box 的宽度，包含 border、padding 和 content</li>
</ul>
</blockquote>
<p></p>
<h4 id="分别是">分别是</h4>
<ul>
<li>content-box 内容盒 - 内容，就是盒子的边界</li>
<li>border-box 边框盒 - 边框，才是盒子的边界</li>
</ul>
<h4 id="公式">公式</h4>
<ul>
<li>content-box width = 内容宽度</li>
<li>border-box width = 内容宽度 + padding + border</li>
</ul>
<h4 id="哪个好用">哪个好用</h4>
<ul>
<li>border-box 好用</li>
<li>同时指定 padding、width、border 就知道为什么了</li>
</ul>
<p>​</p>
<h3 id="margin合并">margin合并</h3>
<h4 id="哪些情况会合并">哪些情况会合并</h4>
<ul>
<li>
<p>兄弟 margin 合并</p>
<ul>
<li>上方元素的 margin-bottom，会和下方元素的 margin-top 重合</li>
</ul>
</li>
<li>
<p>父子 margin 合并</p>
<ul>
<li>给子元素添加 margin-top，效果会作用在父元素上（bf：嵌套崩塌）</li>
<li>第一个子元素的 margin-top，会和 最后一个子元素的 margin-bottom，效果会作用在父元素的 margin-top/bottom 或 和父元素的 margin-top/bottom 重合</li>
</ul>
<blockquote>
<p>记住：只有上下会重叠，左右从来不重叠</p>
</blockquote>
</li>
</ul>
<h4 id="如何阻止合并">如何阻止合并</h4>
<blockquote>
<p>不要问为什么，CSS 很多效果是试出来了，无法解释清楚</p>
</blockquote>
<ul>
<li>父子合并用 padding / border 挡住
<ul>
<li>可以用很小的 padding/border 来挡住，让父子的margin无法穿透并重叠</li>
</ul>
</li>
<li>父子合并用 overflow: hidden 挡住</li>
<li>父子合并用 display: flex，不知道为什么，试出来的</li>
<li>兄弟合并是符合预期的</li>
<li>兄弟合并可以用 <code>display: inline-block</code> 消除</li>
</ul>
<p>总之要一条一条死记。</p>
<p>而且 CSS 的属性逐年增多，每年都可能有新的</p>
<blockquote>
<p>为什么css 难学？</p>
<ul>
<li>不正交
<ul>
<li>因为很多没有道理，需要死记硬背的点。</li>
<li>为什么 <code>display: inline-block</code> 可以消除 margin 合并。</li>
<li>并没有 <code>enable-margin-callapse: false</code>  这种选项，翻译一下就知道它是用来单独控制margin合并的。</li>
<li>无法知道 现在写的这句 css，到底会影响哪些属性</li>
</ul>
</li>
<li>什么叫正交？
<ul>
<li>当我们调节显示器的亮度时，显示器的对比度不会改变。</li>
<li>而 css 是不正交的，因为我们在写某一个属性时，可能就会改变其他属性的状态、效果</li>
</ul>
</li>
</ul>
</blockquote>
<p></p>
<p>​</p>
<p>​</p>
<h3 id="基本单位">基本单位</h3>
<h4 id="长度单位">长度单位</h4>
<ul>
<li>px 像素</li>
<li>em 相对于自身 font-size 的倍数</li>
<li>百分数</li>
<li>整数</li>
<li>rem：等你把 em 滚瓜烂熟了再问 rem</li>
<li>vw 和 vh</li>
<li>其他长度单位都用得很少，不用了解</li>
</ul>
<h4 id="颜色">颜色</h4>
<ul>
<li>十六进制 <code>#FF6600</code> 或者 <code>#F60</code> <code>#000</code>
<ul>
<li>也支持最后添加 alpha。 <code>#FF660000</code> 全透明、 <code>#FF6600FF</code> 不透、 <code>#FF660088</code> 半透。但<strong>兼容性不确定</strong></li>
</ul>
</li>
<li>RGBA 颜色 <code>rgb(0,0,0)</code> 或者<code> rgba(0,0,0,1)</code></li>
<li>hsl 颜色 <code>hsl(360,100%,100%)</code>：色相、饱和度、明度
<ul>
<li><code>hsla(360,100%,100%, 0.5)</code></li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="实践做一个彩虹">实践：做一个彩虹</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>JS Bin<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;rainbow&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
              <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                  
                <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
              <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
          <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="o">*</span> <span class="p">{</span>
  <span class="k">box-sizing</span><span class="p">:</span> <span class="kc">border-box</span><span class="p">;</span>
  <span class="k">margin</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">body</span><span class="p">{</span>
  <span class="k">background</span><span class="p">:</span> <span class="kc">white</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="p">{</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">200</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">overflow</span><span class="p">:</span> <span class="kc">hidden</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="nt">div</span> <span class="p">{</span>
  <span class="k">overflow</span><span class="p">:</span> <span class="kc">hidden</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
  <span class="k">width</span><span class="p">:</span> <span class="mi">400</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">400</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">background</span><span class="p">:</span> <span class="kc">red</span><span class="p">;</span>
  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="o">&gt;</span> <span class="nt">div</span><span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
  <span class="k">background</span><span class="p">:</span> <span class="nb">hsl</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="mi">80</span><span class="kt">%</span><span class="p">,</span> <span class="mi">50</span><span class="kt">%</span><span class="p">);</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">380</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">margin</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="o">&gt;</span> <span class="nt">div</span><span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
  <span class="k">background</span><span class="p">:</span> <span class="nb">hsl</span><span class="p">(</span><span class="mi">120</span><span class="p">,</span> <span class="mi">80</span><span class="kt">%</span><span class="p">,</span> <span class="mi">50</span><span class="kt">%</span><span class="p">);</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">360</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">margin</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="o">&gt;</span> <span class="nt">div</span><span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
  <span class="k">background</span><span class="p">:</span> <span class="nb">hsl</span><span class="p">(</span><span class="mi">180</span><span class="p">,</span> <span class="mi">80</span><span class="kt">%</span><span class="p">,</span> <span class="mi">50</span><span class="kt">%</span><span class="p">);</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">340</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">margin</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="o">&gt;</span> <span class="nt">div</span><span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span><span class="nt">div</span> <span class="p">{</span>
  <span class="k">background</span><span class="p">:</span> <span class="nb">hsl</span><span class="p">(</span><span class="mi">240</span><span class="p">,</span> <span class="mi">80</span><span class="kt">%</span><span class="p">,</span> <span class="mi">50</span><span class="kt">%</span><span class="p">);</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">320</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">margin</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="o">&gt;</span> <span class="nt">div</span><span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span><span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
  <span class="k">background</span><span class="p">:</span> <span class="nb">hsl</span><span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="mi">80</span><span class="kt">%</span><span class="p">,</span> <span class="mi">50</span><span class="kt">%</span><span class="p">);</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">300</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">margin</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="o">&gt;</span> <span class="nt">div</span><span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span><span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
  <span class="k">background</span><span class="p">:</span> <span class="nb">hsl</span><span class="p">(</span><span class="mi">330</span><span class="p">,</span> <span class="mi">80</span><span class="kt">%</span><span class="p">,</span> <span class="mi">50</span><span class="kt">%</span><span class="p">);</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">280</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">margin</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nc">rainbow</span> <span class="o">&gt;</span> <span class="nt">div</span><span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span><span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
  <span class="k">background</span><span class="p">:</span> <span class="nb">hsl</span><span class="p">(</span><span class="mi">330</span><span class="p">,</span> <span class="mi">80</span><span class="kt">%</span><span class="p">,</span> <span class="mi">100</span><span class="kt">%</span><span class="p">);</span>
  <span class="k">height</span><span class="p">:</span> <span class="mi">260</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">margin</span><span class="p">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
  <span class="k">border-radius</span><span class="p">:</span> <span class="mi">50</span><span class="kt">%</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>]]></description>
</item></channel>
</rss>

<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>语法 - 标签 - Sam&#39;s Garage</title>
        <link>http://samrks.github.io/tags/%E8%AF%AD%E6%B3%95/</link>
        <description>语法 - 标签 - Sam&#39;s Garage</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ryuukousen@gmail.com (Sam)</managingEditor>
            <webMaster>ryuukousen@gmail.com (Sam)</webMaster><lastBuildDate>Mon, 24 Aug 2020 22:15:53 &#43;0800</lastBuildDate><atom:link href="http://samrks.github.io/tags/%E8%AF%AD%E6%B3%95/" rel="self" type="application/rss+xml" /><item>
    <title>JS 的基本语法🤓</title>
    <link>http://samrks.github.io/javascript-basic-syntax/</link>
    <pubDate>Mon, 24 Aug 2020 22:15:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-basic-syntax/</guid>
    <description><![CDATA[<p>内容包括「什么是表达式和语句」「标识符的规则」「 if else 语句」「 while for 语句」「 label 」</p>
<h2 id="推荐书籍">推荐书籍</h2>
<ol>
<li>适合入门《<a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener noreffer">网道 JavaScript 教程</a>》</li>
<li>适合进阶《<a href="https://book.douban.com/subject/26351021/" target="_blank" rel="noopener noreffer">你不知道的 JavaScript（上卷）</a>》</li>
</ol>
<h2 id="js-语法-">JS 语法 ⭐️</h2>
<blockquote>
<p>开始学习</p>
</blockquote>
<h3 id="表达式与语句">表达式与语句</h3>
<p>表达式</p>
<ul>
<li>1+2 表达式的值为 3</li>
<li>add(1,2) 表达式的值为函数的<strong>返回值</strong></li>
<li>console.log 表达式的值为函数本身（因为没加括号）</li>
<li>console.log(3) 表达式的值为多少？（<strong>面试</strong>)
<ul>
<li>表达式的值就是函数的返回值 ，log函数的返回值为 undefined</li>
<li>所以 console.log(3) 表达式的值为 undefined</li>
</ul>
</li>
</ul>
<p>语句</p>
<ul>
<li>var a=1 是一个语句</li>
</ul>
<p>二者的区别</p>
<ul>
<li>表达式一般都有值，语句可能有也可能没有</li>
<li>语句一般会改变环境（声明、赋值）</li>
<li>上面两句话并不是绝对的</li>
</ul>
<h3 id="大小写敏感">大小写敏感</h3>
<p>不要写错</p>
<ul>
<li>var a 和 var A 是不同的</li>
<li>object 和 Object 是不同的</li>
<li>function 和 Function 是不同的</li>
<li>具体含义后面说</li>
</ul>
<h3 id="空格">空格</h3>
<p>大部分空格没有实际意义</p>
<ul>
<li>
<p><code>var    a    =    1</code> 和 <code>var a=1</code> 没有区别</p>
</li>
<li>
<p>加回车，大部分时候也不影响</p>
</li>
<li>
<p>只有一个地方不能加回车，那就是 return 后面</p>
<ul>
<li>
<p>return 后面不加东西，js 会自动补充成  return undefined</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="k">return</span> <span class="mi">3</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="k">return</span> <span class="p">[</span><span class="kc">undefined</span><span class="p">]</span>    <span class="c1">// return 和 3 之间加了一个回车，js会自动补充为 return undefined
</span><span class="c1"></span>  <span class="mi">3</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>  </p>
</li>
</ul>
<ul>
<li>唯独 return 后面不能加回车，其他多离谱的回车都没问题</li>
</ul>
</li>
</ul>
<h3 id="标识符">标识符</h3>
<h4 id="规则">规则</h4>
<ul>
<li>
<p>第一个字符，可以是 <code>Unicode 字母</code> /  <code>$</code> / <code>_</code>  /  <code>中文</code></p>
</li>
<li>
<p>后面的字符，除了上面所说，还可以有数字</p>
</li>
<li>
<p>注意，首位不能是数字</p>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="mi">9</span><span class="nx">$</span>
<span class="nx">Uncaught</span> <span class="nx">SyntaxError</span><span class="o">:</span> <span class="nx">Invalid</span> <span class="nx">or</span> <span class="nx">unexpected</span> <span class="nx">token</span> <span class="c1">// SyntaxError意为语法错误，token理解成字符串
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="变量名是标识符">变量名是标识符</h4>
<p>以下都是合法的标识符用法</p>
<ul>
<li><code>var _ = 1 </code></li>
<li><code>var $ = 2 </code></li>
<li><code>var ______= 6 </code></li>
<li><code>var 你好 = 'hi'</code></li>
<li>其他标识符用到再说</li>
</ul>
<h3 id="注释">注释</h3>
<blockquote>
<p>谣言：“ 写代码要多写注释。”</p>
<p>注释，分为：好的注释、不好的注释</p>
</blockquote>
<h4 id="不好的注释">不好的注释</h4>
<blockquote>
<p>不好的注释：告诉别人我写了什么</p>
</blockquote>
<ol>
<li>
<p>把代码翻译成中文</p>
<p>可能埋没了重要的注释。有用的信息和噪音的比例（信噪比）要低</p>
<p></p>
</li>
<li>
<p>过时的注释</p>
</li>
<li>
<p>发泄不满的注释</p>
</li>
</ol>
<h4 id="好的注释">好的注释</h4>
<blockquote>
<p>好的注释：告诉别人为什么我要这么写</p>
</blockquote>
<ol>
<li>
<p>踩坑注解</p>
</li>
<li>
<p>为什么代码会写得这么奇怪，遇到什么 bug</p>
<ul>
<li>遇到某个 bug，代码非得这么奇怪的写，才能避开这个 bug（这种也需要注释出来）</li>
</ul>
</li>
</ol>
<h3 id="区块-block">区块 block</h3>
<ul>
<li>
<p>把代码包在一起</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
  <span class="kd">let</span> <span class="nx">b</span><span class="o">=</span><span class="mi">2</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>常常与 if / for / while 合用</p>
</li>
</ul>
<h2 id="if-语句">if 语句</h2>
<blockquote>
<p>如果 … 那么 …</p>
</blockquote>
<h3 id="语法">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span><span class="nx">语句1</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">语句2</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>{ } 在语句只有一句的时候可以省略，不建议这样做</li>
</ul>
<h3 id="变态情况">变态情况</h3>
<ul>
<li>
<p>(表达式) 里可以非常变态，如 a=1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">2</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a是1&#39;</span><span class="p">)</span>   <span class="c1">// 最终打印这句，因为 = 是赋值，=== 才是判断是否相等
</span><span class="c1"></span><span class="p">}</span><span class="k">else</span><span class="p">{</span>
  <span class="nx">console</span><span class="mf">.1</span><span class="nx">og</span><span class="p">(</span><span class="s1">&#39;a不是1&#39;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>语句1 里可以非常变态，如嵌套的 if else</p>
</li>
<li>
<p>语句2 里可以非常变态，如嵌套的 if else</p>
</li>
<li>
<p>缩进也可以很变态，如面试题常常下套</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>上述代码执行结果为：</p>
<p>因为不写 { } 时，只默认<strong>第一个语句</strong>是跟随 if 条件的，有一个**无形的 { } **括住了第一句，相当于下面效果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>注：<strong>js 中是没有【行】的概念</strong>，即使两句写在一行，结果不变，仍是只括住<strong>第一个语句</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">);</span> <span class="p">}</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>如果用 逗号分隔呢？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span> <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a???&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li>逗号，表示这句话没结束。所以默认两个 console 就变成一个语句了（效果如上）</li>
<li>分号；表示这句话结束了。</li>
</ul>
</li>
</ul>
<h3 id="使用最没有歧义的写法">使用最没有歧义的写法</h3>
<h4 id="最推荐使用的写法">最推荐使用的写法</h4>
<blockquote>
<p>永远不要省略花括号 { }，即使只有一个语句。这是最不会产生歧义的写法</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
	<span class="nx">语句</span>
<span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
  <span class="nx">语句</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
  <span class="nx">语句</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="次推荐使用的写法">次推荐使用的写法</h4>
<blockquote>
<p>该写法，只在函数里有用</p>
<p>基于函数 return 的特点：执行 return ，函数就结束了，不再往下执行</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">表达式</span>
  <span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">表达式</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">表达式</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="switch-语句">switch 语句</h2>
<blockquote>
<p>if…else…升级版</p>
<p>JS 的 switch 语句设计的不算精致，但确实在某些情况时，比 if…else… 好用</p>
</blockquote>
<h3 id="语法-1">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">switch</span><span class="p">(</span><span class="nx">fruit</span><span class="p">){</span> 
  <span class="k">case</span> <span class="s2">&#34;banana&#34;</span><span class="err">：</span>
    <span class="c1">//...
</span><span class="c1"></span>    <span class="k">break</span><span class="err">；</span> 
  <span class="k">case</span> <span class="s2">&#34;apple&#34;</span><span class="o">:</span>
    <span class="c1">//...
</span><span class="c1"></span>    <span class="k">break</span><span class="err">；</span> 
  <span class="k">default</span><span class="o">:</span>
    <span class="c1">//...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="break">break</h3>
<ol>
<li>
<p>**大部分时候，省略 break 你就完蛋了 **</p>
<ul>
<li>当条件符合 banana 时，执行某些语句 …  ，遇到 break 跳出 switch</li>
<li>如果没有 break，就会向下跳过<code>case 'apple'</code>，直接执行 apple 的语句 …</li>
<li>看起来很鸡肋</li>
</ul>
</li>
<li>
<p><strong>少部分时候，可以利用 break</strong></p>
<ul>
<li>
<p>最早为什么这么设计 break 呢？</p>
</li>
<li>
<p>是为了方便「 满足多个条件（case）时 」的判断</p>
<ul>
<li>如下，case 1 可以默认贯穿到 case 3  （初衷是好的）</li>
</ul>
<p>​       </p>
</li>
</ul>
</li>
<li>
<p><a href="https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html" target="_blank" rel="noopener noreffer">Swift</a> 的 switch case 语句设计，完爆 JS 的 switch case  （apple 出的语言）</p>
<ul>
<li>执行完一个 case，默认跳出，无需 break</li>
<li>多条件判断：可以直接在一个 case 下写多个条件句 ，无需去掉 break 来表示贯穿</li>
<li>综上，JS 出现的太早了，没有抄到一个好的 switch case</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">switch</span> <span class="nx">some</span> <span class="nx">value</span> <span class="nx">to</span> <span class="nx">consider</span> <span class="p">{</span>
<span class="k">case</span> <span class="nx">value</span> <span class="mi">1</span><span class="o">:</span>
    <span class="nx">respond</span> <span class="nx">to</span> <span class="nx">value</span> <span class="mi">1</span>
<span class="k">case</span> <span class="nx">value</span> <span class="mi">2</span><span class="p">,</span>
     <span class="nx">value</span> <span class="mi">3</span><span class="o">:</span>
    <span class="nx">respond</span> <span class="nx">to</span> <span class="nx">value</span> <span class="mi">2</span> <span class="nx">or</span> <span class="mi">3</span>
<span class="k">default</span><span class="o">:</span>
    <span class="nx">otherwise</span><span class="p">,</span> <span class="k">do</span> <span class="nx">something</span> <span class="k">else</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ol>
<h2 id="问号冒号三元表达式">问号冒号（三元）表达式</h2>
<blockquote>
<p><strong><code>表达式1 ? 表达式2 : 表达式3 </code></strong>    表达式</p>
<p>最简单的 if…else… 的写法，能用问号冒号就不用 if…else…</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 求两个数的最大值
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">)</span> <span class="k">return</span> <span class="nx">a</span><span class="p">;</span>
  <span class="k">else</span> <span class="k">return</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">a</span><span class="o">&gt;</span><span class="nx">b</span> <span class="o">?</span> <span class="nx">a</span><span class="o">:</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="c1">// 求绝对值
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">abs</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">n</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">?</span> <span class="nx">n</span><span class="o">:</span> <span class="o">-</span><span class="nx">n</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="-短路逻辑">&amp;&amp; 短路逻辑</h2>
<p>与运算</p>
<blockquote>
<ul>
<li>A &amp;&amp; B &amp;&amp; C &amp;&amp; D
<ul>
<li>取第一个假值，后面就不看了</li>
<li>如果ABC都为真，就取 D。</li>
</ul>
</li>
<li>一般整句表达式的值，不会出现取 true / false，而是取 ABCD 中的一个</li>
<li>只要整个表达式中，有一个是假，整个式子就是假</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">b</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span>  <span class="c1">// 理解：a&amp;&amp;b 等价于，如果a是真，就执行b，否则就什么都不执行
</span><span class="c1"></span>  <span class="nx">b</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span> 
  
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">5</span> <span class="o">&amp;&amp;</span> <span class="mi">5</span>
<span class="kc">false</span>
<span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">5</span>
<span class="mi">5</span>
<span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;前面全对了&#39;</span><span class="p">)</span>
<span class="nx">前面全对了</span>
<span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">5</span><span class="o">&lt;</span><span class="mi">0</span>
<span class="kc">false</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">f1</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;f1存在&#39;</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 上下效果等价：如果 window.f1为 true ，就会执行 conosole.log(&#39;f1存在&#39;)
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">f1</span> <span class="o">&amp;&amp;</span> <span class="nx">conosole</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;f1存在&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>前端中，如果能写成 &amp;&amp; 的语句，就不写 if…else… 语句</p>
</blockquote>
<h3 id="最常见的用法">最常见的用法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">fn</span> <span class="o">&amp;&amp;</span> <span class="nx">fn</span><span class="p">()</span>  <span class="c1">// 如果 fn 存在就执行 fn
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>  
<span class="c1">// 如果console存在，就判断console.log是否存在，也存在，就执行打印 hi
</span><span class="c1"></span><span class="cm">/* 这么写有什么意义？
</span><span class="cm">   因为 IE 没有 console，如果用 IE 就不执行 console，不然 IE 会报错 */</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="-短路逻辑-1">|| 短路逻辑</h2>
<p>或运算</p>
<blockquote>
<ul>
<li>
<p>A || B || C || D</p>
<ul>
<li>
<p>取第一个真值，后面就都不看了。</p>
</li>
<li>
<p>如果ABC都为假，就取 D</p>
</li>
</ul>
</li>
<li>
<p>一般整句表达式的值，不会出现取 true / false，而是取 ABCD 中的一个</p>
</li>
<li>
<p>只要整个表达式中，有一个是真，整个式子就是 真</p>
</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">a</span><span class="o">||</span><span class="nx">b</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">){</span>  <span class="c1">// 理解：a||b 等价于，如果a不是真，就执行b，否则就什么都不执行
</span><span class="c1"></span>  <span class="nx">b</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
  
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>如果能写成 || 的语句，就不写 if…else…</p>
</blockquote>
<h3 id="最常见的用法-1">最常见的用法</h3>
<p>例：前端中经常有一个种写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">||</span> <span class="mi">100</span> 

<span class="c1">// 理解：如果a存在就什么都不做，否则 a=100
</span><span class="c1"></span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span>  <span class="c1">// 自己赋给自己，相当于什么都不做
</span><span class="c1"></span><span class="p">}</span><span class="k">else</span><span class="p">{</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="mi">100</span>  <span class="c1">// 保底值
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="总结条件语句">总结：条件语句</h2>
<ul>
<li>if … else…
<ul>
<li>if…else…的逻辑是最常用的，但是很多情况并不使用它。代码简短时，会用更简便的代码替代这种写法</li>
</ul>
</li>
<li>switch case
<ul>
<li>不能少了 break</li>
</ul>
</li>
<li>A ? B : C
<ul>
<li>相当常用（A若为真，执行B，A若为假，执行C）</li>
</ul>
</li>
<li>A &amp;&amp; B
<ul>
<li>相当常用，举例：fn &amp;&amp; fn()    （ fn 存在就执行 fn ）</li>
</ul>
</li>
<li>A || B
<ul>
<li>相当常用，举例： A = A || B    （A 存在时就什么都不执行，A 不存在时 B 就是 A 的保底值）</li>
</ul>
</li>
</ul>
<h2 id="while-循环">while 循环</h2>
<blockquote>
<p>用的不多</p>
</blockquote>
<h3 id="语法-2">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">while</span> <span class="p">(</span><span class="nx">表达式</span><span class="p">)</span> <span class="p">{</span> <span class="nx">语句</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>判断表达式的真假</li>
<li>当表达式为真，执行语句，执行完再判断表达式的真假</li>
<li>直到遇到表达式为假，跳出循环，执行后面的语句</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1">// 初始化
</span><span class="c1"></span><span class="k">while</span><span class="p">(</span><span class="nx">a</span> <span class="o">!==</span> <span class="mi">10</span><span class="p">){</span>   <span class="c1">// 判断条件
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>   <span class="c1">// 循环体
</span><span class="c1"></span>  <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span><span class="o">+</span><span class="mi">1</span>  <span class="c1">// 增长(为最终能跳出循环)
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>共需要四部分： 1. 初始化  2. 判断条件  3. 循环体  4. 增长</li>
</ul>
<h3 id="其他">其他</h3>
<ul>
<li>do &hellip; while 用得不多，自行了解</li>
</ul>
<h3 id="while-变态情况死循环">while 变态情况：死循环</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">while</span><span class="p">(</span><span class="nx">a</span><span class="o">!==</span><span class="mi">1</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="mf">0.1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>原因：浮点数不精确，导致死循环</p>
<p></p>
<h2 id="for-循环">for 循环</h2>
<blockquote>
<p>for循环 是 while循环 的语法糖</p>
</blockquote>
<h3 id="语法糖">语法糖</h3>
<ul>
<li>for 是 while 循环的方便写法
<ul>
<li>写 while 时需要四部分： 1. 初始化  2. 判断条件  3. 循环体  4. 增长</li>
<li>for 将 while 的写法升级、整合，如下
<ol>
<li>语句1 是用来初始化的</li>
<li>表达式2  是判断条件</li>
<li>语句3 是自增</li>
<li>循环体</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="语法-3">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="nx">语句1</span><span class="p">;</span><span class="nx">表达式2</span><span class="p">;</span><span class="nx">语句3</span><span class="p">){</span>
  <span class="nx">循环体</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ol>
<li>先执行语句1</li>
<li>然后判断表达式2
<ul>
<li>如果为真，执行循环体，然后再执行语句3</li>
<li>如果为假，直接退出循环，执行后面的语句</li>
</ul>
</li>
</ol>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>   <span class="c1">// 0 1 2 3 4
</span><span class="c1"></span><span class="p">}</span>
<span class="c1">// i 5
</span></code></pre></td></tr></table>
</div>
</div><h3 id="变态">变态</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// 5 5 5 5 5
</span><span class="c1"></span>    <span class="c1">// console.log(i + &#39;随机数&#39; + Math.random())  
</span><span class="c1"></span>  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// i 5
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>9 是 Chrome 的 bug。</p>
<p>5个5是正解。</p>
<p>每轮循环触发 setTimeout 相当于设置一个闹钟命令：过一会再执行 setTimeout 中的语句。而过一会之后，for循环已经走完，i 变为 5。然后闹钟到点，依次执行每轮触发的 setTimeout 中的语句，也就是执行 5轮 <code>console.log( i )</code> ，就会打印 5 个 5</p>
<h4 id="解决">解决</h4>
<p>把 var 替换成 let</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// 0 1 2 3 4 
</span><span class="c1"></span>  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="语法变形">语法变形</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="nx">语句1</span><span class="p">;</span><span class="nx">表达式2</span><span class="p">;</span><span class="nx">语句3</span><span class="p">){</span>
  <span class="nx">循环体</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>省略 语句 1 ，可在 for 循环外面定义变量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>    <span class="c1">// 0 1 2 3 4
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>省略 表达式 2 ，会进入死循环</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(;</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>    <span class="c1">// 0 1 2 3 4 5 6...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>省略 语句 2 &amp; 3 ，会进入死循环</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(;</span> <span class="p">;</span> <span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>    <span class="c1">// 0 0 0 0 0 0 0...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="break-和-continue">break 和 continue</h3>
<blockquote>
<p>break 退出所有循环</p>
<p>continue 退出当前一次循环</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">1</span><span class="p">){</span> <span class="c1">// 遇到奇数轮次，退出整个for循环
</span><span class="c1"></span>    <span class="k">break</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 1
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">1</span><span class="p">){</span> <span class="c1">// 遇到奇数轮次，跳过当次循环
</span><span class="c1"></span>    <span class="k">continue</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 0 2 4 6 8
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="label-语法">label 语法</h2>
<blockquote>
<p>用的很少，面试会考（概率5%）</p>
<p>这个知识点，除了用来做面试题之外，毫无用处</p>
</blockquote>
<h3 id="语法-4">语法</h3>
<p>label 语法：在任何情况下，写一个[标识符](# 标识符)，后面写一个代码块 { }（通常包含多句代码），或一句代码</p>
<h4 id="代码块">代码块</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">foo</span><span class="o">:</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">break</span> <span class="nx">foo</span><span class="p">;</span>   <span class="c1">// 跳出foo这个代码块
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;本行不会输出&#39;</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="一句代码">一句代码</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">foo</span><span class="o">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="面试">面试</h3>
<p>1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>   <span class="c1">// 表示代码块只有一行，叫做 1
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>3</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>  <span class="c1">// 一个代码块，第一行是一个标签，标签内容是 1，没有什么实际意义
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>问上面是什么</p>
<p>答： 是一个代码块（属于 label 语法），里面有一个标签 foo，语句就是一个 1</p>
<p>为什么不是一个对象？</p>
<p>答：如果写成下面形式，a 就是对象了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>如果单纯写一个代码块（如下），那就是一个 label，语句为 1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>测试 Markdown 语法</title>
    <link>http://samrks.github.io/tools-test-markdown/</link>
    <pubDate>Tue, 14 Jul 2020 20:10:04 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/tools-test-markdown/</guid>
    <description><![CDATA[这里是文章描述，本文用于测试一些 Markdown 语法和样式展现]]></description>
</item></channel>
</rss>

<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>增删改查 - 标签 - Sam&#39;s Garage</title>
        <link>http://samrks.github.io/tags/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</link>
        <description>增删改查 - 标签 - Sam&#39;s Garage</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ryuukousen@gmail.com (Sam)</managingEditor>
            <webMaster>ryuukousen@gmail.com (Sam)</webMaster><lastBuildDate>Sat, 24 Oct 2020 01:23:34 &#43;0800</lastBuildDate><atom:link href="http://samrks.github.io/tags/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/" rel="self" type="application/rss+xml" /><item>
    <title>jQuery 的设计思想（上）</title>
    <link>http://samrks.github.io/dom-jquery-handwritten/</link>
    <pubDate>Sat, 24 Oct 2020 01:23:34 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/dom-jquery-handwritten/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="前言">前言</h2>
<ul>
<li>本节内容，把上节封装的 dom 代码，改用 jQuery 风格再次重新封装</li>
<li>jQuery 非常简单</li>
</ul>
<p>​</p>
<h2 id="用-jquery-风格重新封装">用 jQuery 风格重新封装</h2>
<blockquote>
<p>这节课你可能经常对自己说：我怎么没想到？！</p>
</blockquote>
<h2 id="准备工作">准备工作</h2>
<blockquote>
<p>每节的准备工作都差不多，溜溜的用起来</p>
</blockquote>
<p>新建项目目录 <a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c7-JS%e7%bc%96%e7%a8%8b%e6%8e%a5%e5%8f%a3%5c3-jQuery%e4%b8%ad%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%9e%8b%ef%bc%88%e4%b8%8a%ef%bc%89" rel="">dom-2</a>   &gt;    src    &gt;    index.html 、 main.js 、 jquery.js</p>
<h3 id="indexhtml">index.html</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh-CN&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span>
        <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,viewport-fit=cover&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>手写jQuery<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
  你好
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;jquery.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;main.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="jqueryjs">jquery.js</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 第一步，声明  window.jQuery 是一个函数（？！先不用管为什么是函数）
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`我是jQuery`</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="mainjs">main.js</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">jQuery</span><span class="p">()</span> <span class="c1">// window.jQuery()    // output：我是jQuery
</span></code></pre></td></tr></table>
</div>
</div><h3 id="开启本地服务">开启本地服务</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">yarn</span> <span class="nx">global</span> <span class="nx">add</span> <span class="nx">parcel</span>
<span class="nx">parcel</span> <span class="nx">src</span><span class="o">/</span><span class="nx">index</span><span class="p">.</span><span class="nx">html</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="链式风格-">链式风格 ❤️</h2>
<blockquote>
<p>看一下我们就要实现一个什么的代码 👇</p>
</blockquote>
<h3 id="也叫-jquery-风格">也叫 jQuery 风格</h3>
<ul>
<li>window.jQuery() 是我们提供的全局函数</li>
</ul>
<h3 id="特殊函数-jquery">特殊函数 jQuery</h3>
<ul>
<li><code>jQuery(选择器) </code> 用于获取对应的元素</li>
<li>但它却不返回这些元素</li>
<li>相反，它返回一个对象，称为 <strong>jQuery 构造出来的对象</strong>    <a href="" rel="">（ 也就是最初代码中的那个 api ）</a></li>
<li>这个对象可以操作对应的元素</li>
<li>听不懂？直接写代码！</li>
<li><a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c7-JS%e7%bc%96%e7%a8%8b%e6%8e%a5%e5%8f%a3%5c3-jQuery%e4%b8%ad%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%9e%8b%ef%bc%88%e4%b8%8a%ef%bc%89" rel="">本地项目dom-2</a></li>
</ul>
<p>​</p>
<h3 id="代码-">代码 ⭕️</h3>
<h4 id="indexhtml-1">index.html</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;test&#34;</span><span class="p">&gt;</span>你好1<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;test&#34;</span><span class="p">&gt;</span>你好2<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;test&#34;</span><span class="p">&gt;</span>你好3<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;jquery.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;main.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="jqueryjs-1">jquery.js</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 第一步，声明  window.jQuery 是一个函数（？！）（先不用管为什么是函数）
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span>  <span class="c1">// 获取 selector 的全部元素（得到一个数组）
</span><span class="c1"></span>  <span class="c1">// return elements
</span><span class="c1"></span>  <span class="c1">// 常规操作：就直接返回这个通过选择器找到的元素。
</span><span class="c1"></span>  <span class="c1">// 但jQuery做了反常规的操作：获取到元素后，没有返回这个元素，而是返回了可以操作这个元素的 api
</span><span class="c1"></span>  <span class="c1">// 如下：
</span><span class="c1"></span>  <span class="c1">// api 可以操作 elements
</span><span class="c1"></span>  <span class="c1">// api 是个对象，里面包含各种可以操作 elements 的函数。
</span><span class="c1"></span>  <span class="c1">// 如，addClass 就是给 elements 添加类名的函数
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// 函数内访问了函数外部的变量，这就是「闭包」
</span><span class="c1"></span>    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// elements 是 addClass 这个函数外部的变量
</span><span class="c1"></span>      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 遍历所有获取到的元素，添加类名
</span><span class="c1"></span>        <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
        
      <span class="p">}</span>
      <span class="c1">// return null
</span><span class="c1"></span>      <span class="k">return</span> <span class="nx">api</span>  <span class="c1">// 返回值是 api，而 api 里有很多方法，所以可以通过返回值继续调用.addClass 形成一个链条
</span><span class="c1"></span>    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">api</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="mainjs-1">main.js</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">(</span><span class="s2">&#34;.test&#34;</span><span class="p">)</span> <span class="c1">// 通过选择器获取到元素，但不返回该元素，返回 api 对象 (api对象里有很多方法)
</span><span class="c1">// console.log(api.addClass)
</span><span class="c1">// 遍历所有获取到的元素，添加 .red 类名
</span><span class="c1"></span><span class="nx">api</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&#34;red&#34;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>
<span class="c1">// api.addClass 返回值是 api，而 api 里有很多方法，所以可以通过返回值继续调用.addClass 形成一个链条
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h3 id="jquery-代码变型-1">jQuery 代码变型 1️⃣</h3>
<blockquote>
<p>下面的 return 的变化，必须理解</p>
</blockquote>
<h4 id="return-的骚操作--1">return 的骚操作  1️⃣</h4>
<blockquote>
<p>用 this 代替 api</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span>  <span class="c1">// 获取 selector 的全部元素（得到一个数组）
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> 
        <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
        
      <span class="p">}</span>
      <span class="c1">// return api
</span><span class="c1"></span>      <span class="k">return</span> <span class="k">this</span>  
      <span class="cm">/*
</span><span class="cm">      * 如果用一个对象来调用函数，那么这个函数中的this，就是前面的对象
</span><span class="cm">      * obj.fn(p1) 等价于 ↓
</span><span class="cm">      * obj.fn.call(obj, p1)   // 在fn中，this就是obj
</span><span class="cm">      * 调用时 api.addClass(&#34;red&#34;) =&gt; 同理，在 addClass 中 this 就是 api，二者等价
</span><span class="cm">      * 那 addClass 函数中，原本是 return api，就可以换成 return this
</span><span class="cm">      * 注：this 的值，与调用时前面写了什么有关，只在函数被调用时才能确定this指代什么
</span><span class="cm">      * */</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">api</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="return-的骚操作--2">return 的骚操作  2️⃣</h4>
<blockquote>
<p>完全去掉 jQuery 中的 <code>api</code></p>
<ul>
<li>既然先创建了 api 对象，然后返回 api 对象，那是不是可以直接返回对象，省略 api 的赋值环节 呢？</li>
<li>岂不是「多此一举」</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> 
  <span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="p">{</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
        
      <span class="p">}</span>
      <span class="k">return</span> <span class="k">this</span> 
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">api</span>    <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span><span class="p">}</span>

<span class="c1">// 省略 api 的赋值环节 👇 
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span>  <span class="c1">// 获取 selector 的全部元素（得到一个数组）
</span><span class="c1"></span>  <span class="c1">// const api = {
</span><span class="c1"></span>  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
        
      <span class="p">}</span>
      <span class="k">return</span> <span class="k">this</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="c1">// return api 
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="jquery-的核心思想">jQuery 的核心思想</h3>
<blockquote>
<p>第一个核心点：闭包</p>
</blockquote>
<ol>
<li>jQuery 函数，接收一个 css 选择器</li>
<li>通过选择器，获取到这个元素 elements（但不会返回这个元素），它会返回一个对象</li>
<li>返回的对象中，包含很多函数。这些函数都可以操作这个元素 elements</li>
</ol>
<p>原理：</p>
<ul>
<li>用「闭包」去维持这个 elements
<ul>
<li>因为 addClass 函数在访问 elements。被访问的变量，是不会随便就被浏览器回收掉的</li>
<li>这就是 jQuery 的核心思想之一</li>
</ul>
</li>
</ul>
<blockquote>
<p>第二个核心点：链式操作</p>
</blockquote>
<ul>
<li>addClass 函数，肯定能猜到：用户在调用 addClass 时，肯定是通过<code> jQuery(选择器)</code> 得到的 api 来调用的</li>
<li>所以才会大胆的 return this。</li>
<li>addClass 函数，希望把 「点 . 」前面的东西，作为 addClass 的返回值  <code>api.addClass(&quot;red&quot;)</code></li>
<li>这样就相当于，api 从 addClass 函数前面，传递到了函数后面，这样就可以接着调用 addClass
<code>👇api.addClass(&quot;red&quot;)👇.addClass(&quot;blue&quot;)</code></li>
<li>这就是 「链式操作」</li>
</ul>
<p>​</p>
<h3 id="jquery-代码变型-2">jQuery 代码变型 2️⃣</h3>
<h4 id="mainjs-简化调用">main.js 简化调用</h4>
<blockquote>
<p>去掉变量 x</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">(</span><span class="s2">&#34;.test&#34;</span><span class="p">)</span>  <span class="c1">// 声明出来 x ，接着直接使用。那赋值操作，显得多此一举
</span><span class="c1"></span><span class="nx">x</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&#34;red&#34;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;blue&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>

<span class="c1">// 👇 最终写成 👇
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s2">&#34;.test&#34;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&#34;red&#34;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;blue&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="小总结">小总结</h3>
<ul>
<li>所谓高级的前端代码，就是把中间过程全部省掉了</li>
<li>把所有多次一举、无关紧要的东西，都尽量删掉。</li>
<li>最后只留下一个最少信息的、最精炼的代码。</li>
<li>虽然代码特别简洁、优雅，但对于学习者来说，就是看不懂。（说明「源码」真的不适合学习者）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="jquery-是构造函数吗">jQuery 是构造函数吗？</h2>
<blockquote>
<p>讲到这里可能会有这个疑问 👆</p>
</blockquote>
<blockquote>
<p>构造函数的特点：① 前面有 new      ② 构造出对象</p>
<ul>
<li>结合这两个特点，可以认为  jQuery 是构造函数，也可以认为不是构造函数</li>
</ul>
</blockquote>
<h3 id="是">是</h3>
<ul>
<li>因为 jQuery 函数确实构造出了一个对象</li>
</ul>
<h3 id="不是">不是</h3>
<ul>
<li>因为不需要写 new jQuery() 就能构造一个对象</li>
<li>以前讲的构造函数都要结合 new 才行</li>
</ul>
<h3 id="结论">结论</h3>
<ul>
<li>jQuery 是一个不需要加 new （就可以构造出对象）的构造函数</li>
<li>jQuery 不是常规意义（严格意义）上的构造函数</li>
<li>这是因为 jQuery 用了一些技巧（目前没必要讲，讲了新手就更迷惑了）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="术语">术语</h2>
<h3 id="口头约定-">口头约定 👄</h3>
<blockquote>
<p>[前面](# 特殊函数 jQuery)提到：jQuery 函数，返回一个对象，称为 **jQuery 构造出来的对象 ** <a href="" rel="">（ 也就是最初代码中的那个 api ）</a></p>
</blockquote>
<p>口头约定：</p>
<ul>
<li>以后说到 <strong>jQuery对象</strong> 就代指 <a href="" rel="">jQuery函数 构造出来的对象</a>   （为了省事，少说几个字）</li>
<li>不是说 「 jQuery 这个对象 」</li>
<li>一定要记清楚</li>
</ul>
<p>​</p>
<h3 id="其他举例">其他举例</h3>
<ul>
<li>Object 是个函数</li>
<li><strong>Object 对象</strong>，表示 Object 这个构造函数 构造出来的对象（不是 Object 本身是对象）</li>
<li>Array 是个函数</li>
<li><strong>Array 对象/数组对象</strong>，表示 Array 构造出来的对象（不是 Array 本身是对象）</li>
<li>Function 是个函数</li>
<li><strong>Function 对象 / 函数对象</strong>，表示 Function 构造出来的对象（不是 Function 本身是对象）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="更多功能的封装-">更多功能的封装 ⭕️</h2>
<blockquote>
<p>链式风格</p>
</blockquote>
<blockquote>
<p>📌📌📌📌📌📌📌📌更多代码实现、解析、注释，请查看<a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c7-JS%e7%bc%96%e7%a8%8b%e6%8e%a5%e5%8f%a3%5c3-jQuery%e4%b8%ad%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%9e%8b%ef%bc%88%e4%b8%8a%ef%bc%89" rel="">本地项目dom-2</a> 📌📌📌📌📌📌📌📌</p>
</blockquote>
<h3 id="查">查</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">)</span>                <span class="c1">// 返回值并不是元素，而是一个api对象 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.red&#39;</span><span class="p">)</span>   <span class="c1">// 查找#xxx里的.red元素 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">parent</span><span class="p">()</span>       <span class="c1">// 获取爸爸 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">children</span><span class="p">()</span>     <span class="c1">// 获取儿子 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">siblings</span><span class="p">()</span>     <span class="c1">// 获取兄弟 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">index</span><span class="p">()</span>        <span class="c1">// 获取排行老几（从0开始） 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">next</span><span class="p">()</span>         <span class="c1">// 获取弟弟 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">prev</span><span class="p">()</span>         <span class="c1">// 获取哥哥 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;.red&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span>       <span class="c1">// 遍历并对每个元素执行fn
</span></code></pre></td></tr></table>
</div>
</div><h4 id="代码">代码</h4>
<p><a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c7-JS%e7%bc%96%e7%a8%8b%e6%8e%a5%e5%8f%a3%5c3-jQuery%e4%b8%ad%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%9e%8b%ef%bc%88%e4%b8%8a%ef%bc%89" rel="">本地项目dom-2</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/*
</span><span class="cm">  * elements 永远表示选择器的目标元素的集合（伪数组）
</span><span class="cm">  * */</span>
  <span class="kd">let</span> <span class="nx">elements</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">selectorOrArray</span> <span class="o">===</span> <span class="s2">&#34;string&#34;</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 重载
</span><span class="c1"></span>    <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">selectorOrArray</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">elements</span> <span class="o">=</span> <span class="nx">selectorOrArray</span>
  <span class="p">}</span>
  <span class="c1">// 👇 返回 jQuery函数 构造的对象 api（this就是这个api、api可以操作elements）
</span><span class="c1"></span>  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="k">this</span>
    <span class="p">},</span>
    <span class="nx">find</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">array</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)))</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 重点理解这句 【代码分析，见本地项目dom-2的注释】
</span><span class="c1"></span>    <span class="p">},</span>
    <span class="nx">oldApi</span><span class="o">:</span> <span class="nx">selectorOrArray</span><span class="p">.</span><span class="nx">oldApi</span><span class="p">,</span>
    <span class="nx">end</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">oldApi</span>
    <span class="p">},</span>
    <span class="nx">each</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">elements</span><span class="p">)</span>  <span class="c1">// 遍历每项，对每一项都执行某个方法
</span><span class="c1"></span>      <span class="p">}</span>
      <span class="k">return</span> <span class="k">this</span>
    <span class="p">},</span>
    <span class="nx">print</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">elements</span><span class="p">)</span>
      <span class="k">return</span> <span class="k">this</span>
    <span class="p">},</span>
		<span class="nx">parent</span><span class="p">()</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">node</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 去重 
</span><span class="c1"></span>          <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span>
        <span class="p">}</span>
      <span class="p">})</span>
      <span class="nx">array</span><span class="p">.</span><span class="nx">oldApi</span> <span class="o">=</span> <span class="k">this</span>
      <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="nx">children</span><span class="p">()</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">node</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span> <span class="p">{</span> 
          <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(...</span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>        <span class="p">}</span>
      <span class="p">})</span>
      <span class="nx">array</span><span class="p">.</span><span class="nx">oldApi</span> <span class="o">=</span> <span class="k">this</span>
      <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="cm">/********************* 下面的课上未讲 *********************/</span>
    <span class="cm">/*
</span><span class="cm">    siblings()
</span><span class="cm">    index()
</span><span class="cm">    next()
</span><span class="cm">    prev()
</span><span class="cm">    */</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="练习">练习</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="cm">/*
</span><span class="cm">  &lt;div id=&#34;test&#34;&gt;
</span><span class="cm">    &lt;div class=&#34;child&#34;&gt;1&lt;/div&gt;
</span><span class="cm">    &lt;div class=&#34;child&#34;&gt;2&lt;/div&gt;
</span><span class="cm">    &lt;div class=&#34;child&#34;&gt;3&lt;/div&gt;
</span><span class="cm">  &lt;/div&gt;
</span><span class="cm">*/</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">){</span>
  <span class="kd">let</span> <span class="nx">elements</span>
  <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">selectorOrArray</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">){</span>
    <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span>
  <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">selectorOrArray</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">){</span>
    <span class="nx">elements</span> <span class="o">=</span> <span class="nx">selectorOrArray</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">){</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">n</span><span class="p">=&gt;</span><span class="nx">n</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">))</span>
    <span class="p">},</span>
    <span class="nx">find</span><span class="p">(</span><span class="nx">selector</span><span class="p">){</span>
      <span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">n</span><span class="p">=&gt;{</span>
        <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(...</span><span class="nx">n</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">))</span>
      <span class="p">})</span>
      <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="nx">each</span><span class="p">(</span><span class="nx">fn</span><span class="p">){</span>
      <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
        <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">i</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#test&#39;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.child&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">)</span> <span class="c1">// 请确保这句话成功执行
</span></code></pre></td></tr></table>
</div>
</div><h3 id="增">增</h3>
<blockquote>
<p>只捋一捋思路，<a href="https://github.com/FrankFang/dom-2-prototype/blob/master/src/jquery.js" target="_blank" rel="noopener noreffer">最终代码</a></p>
</blockquote>
<h4 id="代码-1">代码</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 先简单回顾 dom 创建节点 👇（两种方式）
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  <span class="c1">// ①传入标签名
</span><span class="c1"></span><span class="nx">template</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span>  <span class="c1">// ②传入html结构，最后返回 template.content.firstChild
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">elements</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">selectorOrArrayOrTemplate</span> <span class="o">===</span> <span class="s2">&#34;string&#34;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s2">&#34;&lt;&#34;</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 创建 div
</span><span class="c1"></span>      <span class="nx">elements</span> <span class="o">=</span> <span class="p">[</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">)];</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">// 查找 div
</span><span class="c1"></span>      <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">elements</span> <span class="o">=</span> <span class="nx">selectorOrArrayOrTemplate</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">createElement</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;template&#34;</span><span class="p">);</span>
    <span class="nx">container</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">string</span><span class="p">.</span><span class="nx">trim</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">container</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">;</span>
  <span class="p">}</span>
	
  <span class="c1">// 返回jQuery创建的api
</span><span class="c1"></span>  <span class="k">return</span><span class="p">{</span>
    <span class="nx">appendTo</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">node</span> <span class="k">instanceof</span> <span class="nx">Element</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">el</span> <span class="p">=&gt;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">el</span><span class="p">));</span>
      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">jquery</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">el</span> <span class="p">=&gt;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">el</span><span class="p">));</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="c1">// ...
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 创建 div，插入到 body 中
</span><span class="c1"></span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&lt;span&gt;1&lt;/span&gt;&lt;/div&gt;&#39;</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span> 
</code></pre></td></tr></table>
</div>
</div><h3 id="删">删</h3>
<blockquote>
<p>和dom实现逻辑一样</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$div</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span> 
<span class="nx">$div</span><span class="p">.</span><span class="nx">empty</span><span class="p">()</span>  
</code></pre></td></tr></table>
</div>
</div><h3 id="改">改</h3>
<blockquote>
<p>和dom实现逻辑一样</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$div</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="o">?</span><span class="p">)</span> <span class="c1">// 读写文本内容  // 传了参数就是「写」，不传参数就是「读」
</span><span class="c1"></span><span class="nx">$div</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="o">?</span><span class="p">)</span> <span class="c1">// 读写HTML内容  // 传了参数就是「写」，不传参数就是「读」
</span><span class="c1"></span><span class="nx">$div</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="o">?</span><span class="err">）</span>  <span class="c1">// 读写属性 
</span><span class="c1"></span><span class="nx">$div</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span><span class="p">})</span>  <span class="c1">// 读写style // 注意方法名是css
</span><span class="c1"></span><span class="nx">$div</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span> 
<span class="nx">$div</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> 
<span class="nx">$div</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="err">·</span>  
</code></pre></td></tr></table>
</div>
</div><h4 id="注意">注意</h4>
<ul>
<li>$div 大部分时候，对应了多个 div 元素</li>
<li>一定要默认  $div 是一个数组，然后遍历它 （每个操作都要遍历）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="window--windowjquery">window.$ = window.jQuery</h2>
<blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#test&#39;</span><span class="p">)</span> <span class="c1">// 每次使用都要这么写，很麻烦
</span></code></pre></td></tr></table>
</div>
</div><p>什么？你嫌  jQuery  太长</p>
<ul>
<li>你是对的</li>
<li>jQuery 这个单词，确实不好拼写（还要大小写区分）</li>
<li>怎么让 jQuery 变得更短呢？</li>
<li>还记得 bash alias 吗，添加一个别名即可</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 一定在代码最后添加
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">){...}</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>之后在任何地方使用 $ 就相当于使用 jQuery</li>
<li>还可以再省事 👇</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">){...}</span>   
<span class="c1">// 写在一行上，顺序是从右向左执行
</span><span class="c1">// 先执行 window.jQuery = function(){}
</span><span class="c1">// 然后再把 window.jQuery 的结果，赋值给 window.$
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>这就是很多高级程序员会使用的写法</li>
</ul>]]></description>
</item><item>
    <title>手写 DOM 库</title>
    <link>http://samrks.github.io/dom-dom-handwritten/</link>
    <pubDate>Thu, 22 Oct 2020 15:49:13 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/dom-dom-handwritten/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="前言">前言</h2>
<p><a href="https://github.com/samrks/dom-1" target="_blank" rel="noopener noreffer">本节代码地址</a></p>
<p>​</p>
<p>​</p>
<h2 id="什么叫封装">什么叫封装</h2>
<blockquote>
<p>可以理解成「把一些复杂的东西，打包成盒」，通过简单的命令就可使用</p>
</blockquote>
<h3 id="举例">举例</h3>
<ul>
<li>电脑笔记本就是 CPU、内存、硬盘、主板、显卡 的封装</li>
<li>用户只需要接触显示器、键盘、鼠标、触控板等设备</li>
<li>即可操作复杂的计算机</li>
</ul>
<h3 id="接口">接口</h3>
<ul>
<li>
<p>被封装的东西需要暴露一些功能给外部</p>
</li>
<li>
<p>这些功能就是<strong>接口</strong>，如 USB 接口、HDMI 接口</p>
<ul>
<li>接口都是需要有规范的文档来说明的</li>
<li>全世界厂商都可以根据 USB 接口文档，来生产具有 USB 接口的硬件</li>
<li>深圳华强北就是根据各种文档，很快的复制生产出苹果数据线 … （功能差不多、价格更便宜）</li>
<li>这就是接口的好处，只要知道它的功能和实现细节，所有厂商都能做</li>
</ul>
</li>
<li>
<p>设备只要支持这些接口，即可与被封装的东西通讯</p>
<ul>
<li>比如在键盘上打字，计算机就能接收到我们敲了哪个键</li>
</ul>
</li>
<li>
<p>比如键盘、鼠标支持 USB 接口</p>
</li>
<li>
<p>显示器支持 HDMI 接口</p>
<ul>
<li>全世界所有显示器厂商的产品，都可以连接到任何一台电脑，就是因为有<strong>接口的统一标准</strong>存在</li>
<li>旧的有：VGA 接口（体积大、传输慢）</li>
<li>最新的有：雷电接口、HDMI 接口 （都有新的标准）</li>
</ul>
</li>
</ul>
<p>（示意图）</p>
<p></p>
<p></p>
<p>本节的实现的《我的库》里面就封装了 DOM 的各种奇葩操作</p>
<ul>
<li>document.getElementById   单词太长，封装后就叫 get 或者 find</li>
<li>封装成一个 create 就可以实现创建元素，不需要写 document.createElement … 这么复杂的单词</li>
<li>封装出来的  get、find、create  这些函数，就是接口</li>
<li>所有的页面中，都可以调用这些接口</li>
</ul>
<h2 id="术语">术语</h2>
<h3 id="库">库</h3>
<ul>
<li>我们把提供给其他人用的工具代码，叫做「库」
<ul>
<li>就是把一些好用的函数统一放到一个地方，这个地方就是「库」</li>
</ul>
</li>
<li>比如 jQuery、Underscore 它们就是库（提供了很多函数，供用户调用）</li>
</ul>
<h3 id="api">API</h3>
<ul>
<li>「库」暴露出来的函数或属性（功能）叫做 API（应用编程接口）</li>
<li>API： Application Programming Interface</li>
</ul>
<h3 id="框架">框架</h3>
<ul>
<li>当你的库变得很大，并且<strong>需要学习才能看懂</strong></li>
<li>那么这个库就叫「框架」，比如 Vue / React</li>
</ul>
<h3 id="注意">注意</h3>
<ul>
<li>
<p>编程界的术语大部分都很随便，没有固定的解释</p>
<ul>
<li>可能程序员写了套东西，涵盖很多内容，作者本人也搞不清楚应该怎么定性，就随意的称为「库」</li>
<li>如果遇到有人反驳，那就慢慢讨论、定性</li>
</ul>
</li>
<li>
<p>所以意会即可</p>
<ul>
<li>我们就把「小的功能」叫库，「大的功能」叫框架</li>
</ul>
<p>​</p>
</li>
</ul>
<h2 id="封装技术">封装技术</h2>
<blockquote>
<p>下面我们开始学习封装技术</p>
</blockquote>
<blockquote>
<p>会用两种不同的风格，封装 DOM 操作</p>
<ol>
<li>对象风格（命名空间风格）</li>
<li>链式风格（ jQuery 风格）</li>
</ol>
</blockquote>
<p>​</p>
<p>​</p>
<h2 id="dom-库的初始化-">DOM 库的初始化 ⭕️</h2>
<blockquote>
<p>创建 dom-1 项目目录  &gt;  src 目录  &gt;   index.html、main.js、dom.js</p>
</blockquote>
<h3 id="indexhtml">index.html</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
  示例
  <span class="c">&lt;!-- 注意：要先引入 dom.js；
</span><span class="c">       否则 main 中先引用了dom.js的 API 就会报错：dom is not defined --&gt;</span>
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;dom.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;main.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="domjs">dom.js</h3>
<blockquote>
<p>dom 库（对象） 和 封装的函数（create），有两种呈现关系的形式</p>
</blockquote>
<p>1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">dom</span> <span class="o">=</span> <span class="p">{}</span>
<span class="nx">dom</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{}</span>   <span class="c1">// window.dom.create 省略前缀 window
</span></code></pre></td></tr></table>
</div>
</div><p>2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">dom</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">create</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{}</span>
<span class="p">}</span>
<span class="c1">//  👆可进一步简化：省略 function   // ES6
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">dom</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">create</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="举例封装-create-代码">举例：封装 create 代码</h3>
<blockquote>
<p>更多代码，请直接查看<a href="https://github.com/samrks/dom-1" target="_blank" rel="noopener noreffer">地址</a></p>
</blockquote>
<blockquote>
<p>create  创建节点</p>
</blockquote>
<h4 id="写法-1">写法 1</h4>
<ul>
<li>调用时填入要创建的标签名</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">dom</span> <span class="o">=</span> <span class="p">{}</span>
<span class="nx">dom</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">tagName</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">tagName</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="写法-2">写法 2</h4>
<h5 id="初版有-bug">初版有 bug</h5>
<ul>
<li>调用时直接填入标签结构</li>
<li>但填入 td / tr / tbody … 这种表格内的标签，就会返回 undefined。</li>
<li>这些标签不能直接放入 div 中，通常需要外层有 table 标签包裹才行</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">html</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// const container = document.createElement(&#39;div&#39;)  
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;template&#39;</span><span class="p">)</span>
  <span class="c1">// 如果容器是 div ，不能容纳 td ... 等
</span><span class="c1"></span>  <span class="c1">// 使用 &lt;template&gt;&lt;/template&gt; 作为容器，可以容纳任意元素。
</span><span class="c1"></span>  <span class="nx">container</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">html</span>
  <span class="k">return</span> <span class="nx">container</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="正确代码">正确代码</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">html</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;template&#34;</span><span class="p">)</span>
  <span class="nx">container</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">html</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span>
  <span class="c1">// trim 去掉字符串的两端空格
</span><span class="c1"></span>  <span class="c1">// 因为使用firstChild获取元素，如果传入的html前面有空格，就会只获取到空格(文本元素)，而不是标签元素。
</span><span class="c1"></span>  <span class="c1">// 所以必须提前trim()一下
</span><span class="c1"></span>  <span class="k">return</span> <span class="nx">container</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">firstChild</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="mainjs">main.js</h3>
<h4 id="写法-1-的调用">写法 1 的调用</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">dom</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="s2">&#34;div&#34;</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>   <span class="c1">// (标签) &lt;div&gt;&lt;/div&gt;
</span></code></pre></td></tr></table>
</div>
</div><h4 id="写法-2-的调用">写法 2 的调用</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">dom</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="s2">&#34;&lt;div&gt;&lt;span&gt;123&lt;/span&gt;&lt;/div&gt;&#34;</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>   <span class="c1">// (标签) &lt;div&gt;&lt;span&gt;123&lt;/span&gt;&lt;/div&gt;
</span></code></pre></td></tr></table>
</div>
</div><h2 id="对象风格">对象风格</h2>
<h3 id="也叫-命名空间风格">也叫 命名空间风格</h3>
<ul>
<li>window.dom 是我们提供的全局对象</li>
</ul>
<blockquote>
<p>下面从增删改查 4 个方面，来说明 window.dom 是干什么的（代码量很大哦）、</p>
</blockquote>
<blockquote>
<p><a href="https://github.com/samrks/dom-1" target="_blank" rel="noopener noreffer">本节代码地址</a></p>
</blockquote>
<h3 id="增">增</h3>
<blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/after" target="_blank" rel="noopener noreffer">after()</a>：2020刚出的</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/insertBefore" target="_blank" rel="noopener noreffer">insertBefore</a> 语法：<code>父节点.insertBefore(要插入的子节点，插入到哪个子节点的前面)</code></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">create</span><span class="err">（</span><span class="s1">&#39;&lt;div&gt;hi&lt;/div&gt;&#39;</span><span class="p">)</span>   <span class="c1">// 用于创建节点
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">after</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span><span class="nx">node2</span><span class="p">)</span>          <span class="c1">// 用于新增弟弟
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">before</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span><span class="nx">node2</span><span class="p">)</span>         <span class="c1">// 用于新增哥哥
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">parent</span><span class="p">,</span><span class="nx">child</span><span class="p">)</span>       <span class="c1">// 用于新增儿子
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">wrap</span><span class="p">(</span><span class="sb">`&lt;div&gt;&lt;/div&gt;`</span><span class="p">)</span>        <span class="c1">// 用于新增爸爸
</span></code></pre></td></tr></table>
</div>
</div><p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">dom</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="nx">create</span><span class="p">(</span><span class="nx">string</span><span class="p">){</span> <span class="c1">// 创建节点
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;template&#34;</span><span class="p">)</span>
    <span class="nx">container</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">string</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span>
    <span class="k">return</span> <span class="nx">container</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">firstChild</span>
  <span class="p">},</span>
  <span class="nx">after</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">node2</span><span class="p">){</span> <span class="c1">// 新增兄弟节点
</span><span class="c1"></span>    <span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">node2</span><span class="p">,</span> <span class="nx">node</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">)</span>
  <span class="p">},</span> 
  <span class="nx">before</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">node2</span><span class="p">){</span> <span class="c1">// 新增兄弟节点
</span><span class="c1"></span>    <span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">node2</span><span class="p">,</span> <span class="nx">node</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">append</span><span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="nx">node</span><span class="p">){</span> <span class="c1">// 新增子节点
</span><span class="c1"></span>    <span class="nx">parent</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
  <span class="p">},</span> 
  <span class="nx">wrap</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">parent</span><span class="p">){</span> <span class="c1">// 新增父节点
</span><span class="c1"></span>    <span class="nx">dom</span><span class="p">.</span><span class="nx">before</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">parent</span><span class="p">)</span> 
    <span class="nx">dom</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="nx">node</span><span class="p">)</span> 
  <span class="p">}</span> 
<span class="p">}</span><span class="err">；</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="删">删</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span><span class="nx">用于删除节点</span> 
<span class="nx">dom</span><span class="p">.</span><span class="nx">empty</span><span class="p">(</span><span class="nx">parent</span><span class="p">)</span><span class="nx">用于删除后代</span>
</code></pre></td></tr></table>
</div>
</div><p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">dom</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">remove</span><span class="p">(</span><span class="nx">node</span><span class="p">){</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">node</span>
  <span class="p">},</span>
  <span class="nx">empty</span><span class="p">(</span><span class="nx">node</span><span class="p">){</span>
    <span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">firstChild</span>   
    <span class="c1">// 这块是讲数据结构时最常用的思路，类似用循环实现的递归（不停找下一个，直到全删完了）
</span><span class="c1"></span>    <span class="k">while</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">dom</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">x</span><span class="p">))</span>
      <span class="nx">x</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">firstChild</span> 
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">array</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="改">改</h3>
<blockquote>
<p>用到了【重载】和【适配】</p>
<ul>
<li>重载：传不同个数的参数，执行不同的代码</li>
<li>适配：做很多判断（js 数据类型），什么情况下执行这句、什么情况下执行那句</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="o">?</span><span class="p">)</span>        <span class="c1">// 用于读写属性 
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="o">?</span><span class="p">)</span>                 <span class="c1">// 用于读写文本内容 
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="o">?</span><span class="p">)</span>                 <span class="c1">// 用于读写HTML内容 
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="p">{</span><span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span><span class="p">})</span>   <span class="c1">// 用于修改 
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="kr">class</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">)</span>       <span class="c1">// 用于添加 
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="kr">class</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">)</span>    <span class="c1">// 用于删除
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>         <span class="c1">// 用于添加事件监听 
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>        <span class="c1">// 用于删除事件监听
</span></code></pre></td></tr></table>
</div>
</div><p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">attr</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">text</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span> 
  <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span> 
    <span class="k">if</span> <span class="p">(</span><span class="s2">&#34;innerText&#34;</span> <span class="k">in</span> <span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">node</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">string</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">node</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">string</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="s2">&#34;innerText&#34;</span> <span class="k">in</span> <span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">innerText</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">textContent</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">html</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">string</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> 
    <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">innerHTML</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">style</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 3种调用形式
</span><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">name</span> <span class="o">===</span> <span class="s2">&#34;string&#34;</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">name</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">)</span> <span class="p">{</span> 
      <span class="kr">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="nx">name</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">object</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">node</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">object</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="kr">class</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">add</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">remove</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">has</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">on</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">node</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">off</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">node</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="查">查</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;选择器&#39;</span><span class="p">)</span>    <span class="c1">// 用于获取标签或标签们
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">parent</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>     <span class="c1">// 用于获取父元素
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>   <span class="c1">// 用于获取子元素
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">siblings</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>   <span class="c1">// 用于获取兄弟姐妹元素
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>       <span class="c1">// 用于获取弟弟
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">previous</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>   <span class="c1">// 用于获取哥哥
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">nodes</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>  <span class="c1">// 用于遍历所有节点
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">index</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>      <span class="c1">// 用于获取排行老几
</span></code></pre></td></tr></table>
</div>
</div><p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">find</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selector</span><span class="p">,</span> <span class="nx">scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span><span class="nx">scope</span> <span class="o">||</span> <span class="nb">document</span><span class="p">).</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> 
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">parent</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">children</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">children</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">siblings</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">children</span><span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="nx">n</span> <span class="p">=&gt;</span> <span class="nx">n</span> <span class="o">!==</span> <span class="nx">node</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">nextSibling</span>
  <span class="k">while</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&amp;&amp;</span> <span class="nx">x</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span> 
    <span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">nextSibling</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">x</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">previous</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">previousSibling</span>
  <span class="k">while</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&amp;&amp;</span> <span class="nx">x</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">previousSibling</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">x</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">each</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">nodeList</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">nodeList</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">nodeList</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">index</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">children</span>
  <span class="kd">let</span> <span class="nx">i</span>
  <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">break</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">i</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="总结1">总结1</h2>
<ul>
<li>上面代码，除了「创建节点，用了 template」，其他方法基本都是使用 DOM 的原生 API 来实现</li>
<li>不管是多么高深的库，最后都是用 if-else、for循环、while循环 就搞定了
<ul>
<li>不论什么语言，实现逻辑只需要三种表达形式：顺序执行、if/else、循环</li>
</ul>
</li>
</ul>
<p>​</p>
<h2 id="总结2">总结2</h2>
<ul>
<li>最好的学习方法，就是去看作者的思路，照着他的思路实现一下。比如，vue的作者，就把所有思路写在 vue 文档里，就去看文档就好了。</li>
</ul>
<p>​</p>
<blockquote>
<p>这是许多程序员多年摸索出来的经典代码。
你只需要站在巨人的肩膀上，继续向上探索</p>
</blockquote>
<p>​</p>]]></description>
</item><item>
    <title>DOM 编程 </title>
    <link>http://samrks.github.io/dom-dom-manipulate/</link>
    <pubDate>Wed, 21 Oct 2020 00:41:12 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/dom-dom-manipulate/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="前言">前言</h2>
<blockquote>
<p>本节是 DOM 最基础的部分</p>
</blockquote>
<p>​</p>
<h2 id="前置知识">前置知识</h2>
<blockquote>
<p>需要什么知识</p>
</blockquote>
<ul>
<li>理解简单的 JS 语法，如 变量、if else、循环</li>
<li>会背 JS 的七种数据类型（四基两空一对象、bigInt）</li>
<li>会背 JS 的五个 falsy 值 （0，NaN，null，undefined，空字符串）</li>
<li>知道函数是对象，数组也是对象</li>
<li>会用 div 和 span 标签</li>
<li>会简单的 CSS 布局（flex）</li>
</ul>
<p>​</p>
<h2 id="网页其实是一棵树">网页其实是一棵树</h2>
<blockquote>
<p>第一个知识点</p>
</blockquote>
<p></p>
<p>画成「树」</p>
<p></p>
<h3 id="js-如何操作这棵树">JS 如何操作这棵树</h3>
<ul>
<li>JS 只能操作 JS，是操作不了网页的</li>
<li>**浏览器提供了功能，往 window 上添加了一个 document **</li>
<li>只要有 document 这个对象， JS 就可以操作这棵树了</li>
</ul>
<p>示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">用chrome打开任意网站</span>
<span class="nx">在控制台键入</span><span class="err">：</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span>  <span class="nx">得到一个</span> <span class="err">#</span><span class="nb">document</span> 
<span class="nx">鼠标放在</span> <span class="sb">`#document`</span> <span class="nx">上会发现整个网页被选中了</span><span class="err">，</span><span class="nx">说明document包含整个网页</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>通过 window.document 得到网页的根节点</p>
<ul>
<li>根节点下有 head 、 body …</li>
</ul>
</blockquote>
<p></p>
<p>​</p>
<h3 id="js-用-document-操作网页">JS 用 document 操作网页</h3>
<blockquote>
<p>这就是 Document Object Model 文档对象模型</p>
</blockquote>
<ul>
<li>「用一个 document 对象来操作整个网页」这种思想(模型)，全称叫做 「Document Object Model」</li>
<li>简称 DOM</li>
</ul>
<h3 id="dom-很难用">DOM 很难用</h3>
<blockquote>
<p>请记住这个事实</p>
</blockquote>
<ul>
<li>之前讲过「JS 的原创之处并不优秀，优秀之处并非原创」</li>
<li>DOM 可能比 JS 还要难用</li>
<li>难用到「都没人愿意使用 DOM」</li>
</ul>
<blockquote>
<p>下面会想办法，解决这个难题</p>
</blockquote>
<p>​</p>
<h3 id="如果你觉得-dom-很智障">如果你觉得 DOM 很智障</h3>
<blockquote>
<p>不要怀疑自己，你觉得的是对的</p>
</blockquote>
<ul>
<li>DOM 的接口设计的非常反人类</li>
<li>导致前端人员，不得不使用 jQuery 来操作 DOM</li>
<li>后来 jQuery 又被 Vue 代替了，于是大多数人就用 Vue 来操作 DOM</li>
<li>后来又有 React 了，就用 React 来操作 DOM</li>
<li>从来不会用 DOM 自带的功能来操作 DOM，自带的功能实在是非常反人类</li>
</ul>
<p>​</p>
<p> <a href="https://javascript.info/dom-navigation" target="_blank" rel="noopener noreffer">图片来自</a></p>
<p>​</p>
<p>​</p>
<h2 id="获取元素的-api">获取元素的 API</h2>
<blockquote>
<p>获取元素，也叫标签</p>
</blockquote>
<blockquote>
<p>什么是 API —— 没有准确定义，听多了你自然就知道什么是 API 了</p>
</blockquote>
<h3 id="有很多-api">有很多 API</h3>
<h4 id="通过-id">通过 id</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">id名</span>
<span class="nx">id名</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;id名&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>举例 👇</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">input</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;kw&#34;</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">kw</span>                     <span class="c1">// &lt;input id=&#34;kw&#34;&gt;   （直接获取到这个标签）
</span><span class="c1"></span><span class="nx">kw</span>                            <span class="c1">// &lt;input id=&#34;kw&#34;&gt;
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;kw&#39;</span><span class="p">)</span> <span class="c1">// &lt;input id=&#34;kw&#34;&gt;   （已经有上面两个特别简单的写法，谁还用这个）
</span></code></pre></td></tr></table>
</div>
</div><p>特例 👇</p>
<blockquote>
<p>当 id 名为 JS 关键字/属性时，就不能通过前面两个简单的写法来获取到元素</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 如下图所示
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">parent</span>                      <span class="c1">// parent 在这里是【获取 window 的上一层窗口】的意思
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;parent&#39;</span><span class="p">)</span>  <span class="c1">// 此时，只能通过此写法
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>所以，只要 id 不与全局属性冲突，就可以最简单的直接用这个 id
如果不小心冲突了，就只能退而求其次，用这个很长的 API</p>
</blockquote>
<p>​</p>
<h4 id="通过-标签名">通过 标签名</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="cm">/*
</span><span class="cm"> *  找到所有标签名为 div 的元素。
</span><span class="cm"> *  拿到的是一个数组（伪数组）
</span><span class="cm"> *  要获取到具体某一个 div，需要用下标（也可以遍历）
</span><span class="cm">*/</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>   
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="通过-class-获取元素">通过 class 获取元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="cm">/*
</span><span class="cm"> *  找到所有 class 为 red 的元素。
</span><span class="cm"> *  拿到的是一个数组（伪数组）
</span><span class="cm"> *  要获取到具体某一个 red 元素，需要用下标（也可以遍历）
</span><span class="cm">*/</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="最新的-api-query">最新的 API ：query</h4>
<blockquote>
<p>虽然是 query 开头，但并不是 jQuery 提供的 API，而是 JS 原生的
<a href="https://www.imooc.com/article/13027" target="_blank" rel="noopener noreffer">querySelector 和 getElement(s)ByXxx 方法的区别</a></p>
</blockquote>
<blockquote>
<p>querySelector()，接收一个CSS选择符，返回与该模式匹配的第一个元素
querySelectorAll()，用于选择匹配到的所有元素</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#id名&#39;</span><span class="p">)</span>    <span class="c1">// 借用了css语法，css怎么找到这个标签，括号中就怎么写
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;.red&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="用哪一个-">用哪一个 ⭕️</h3>
<ul>
<li>工作中用最新的， querySelector 和 querySelectorAll</li>
<li>做 demo 直接用 idxxx，千万别让人发现</li>
<li>要兼容 IE 的可怜虫才用 getElement(s)ByXxx</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="获取特定元素的-api">获取特定元素的 API</h3>
<h4 id="获取-html-元素">获取 html 元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="获取-head-元素">获取 head 元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">head</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="获取-body-元素">获取 body 元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">body</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="获取窗口窗口不是元素">获取窗口（窗口不是元素）</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="获取所有元素">获取所有元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">all</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>这个 document.all 是个奇葩，第 6 个falsy值</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="获取到的元素是个啥">获取到的元素是个啥</h2>
<blockquote>
<p>显然是一个对象，我们需要搞清它的<strong>原型</strong></p>
</blockquote>
<h3 id="抓一只-div-对象来看看">抓一只 div 对象来看看</h3>
<p>（图示见[下一P](# div 完整原型链)）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-JS" data-lang="JS"><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>   <span class="c1">// www.baidu.com
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>  
<span class="c1">// 用 dir 可以打印出结构。 （ 如下图，会有很多属性，都是构造函数添加的 ）
</span><span class="c1">// 重点关注【原型链】 
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>注意：这里写的 HTMLDivElment 不是真正的原型</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">HTMLDivElment</span>            <span class="c1">// false
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">HTMLDivElment</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// true   
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// JS 经典公式
</span><span class="c1"></span><span class="nx">对象</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">其构造函数</span><span class="p">.</span><span class="nx">prototype</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>console.dir(div)  开始查看原型链</p>
</blockquote>
<ol>
<li>
<p>点开最外层 <code>div#wrapper.wrapper_new</code>，最先看到的是这个 <strong>div 自身的属性</strong></p>
</li>
<li>
<p>第一层原型 <strong>HTMLDivElement</strong>.prototype</p>
<ul>
<li>点开，这里面也是有很多属性，是<strong>所有 div 共有的属性</strong>，不用细看</li>
</ul>
</li>
<li>
<p>第二层原型 <strong>HTMLElement</strong>.prototype</p>
<ul>
<li>这里面是<strong>所有 HTML 标签共有的属性</strong>，不用细看</li>
</ul>
</li>
<li>
<p>第三层原型 <strong>Element</strong>.prototype</p>
<ul>
<li>这里面是<strong>所有 XML、HTML 标签的共有属性</strong>，你不会以为浏览器只能展示 HTML 吧</li>
<li>AJAX 的 X 指的就是 XML。在没有发明 json 之前，全部处理的都是 XML（XML 里也有标签）</li>
<li>具体这里包含 XML、HTML、SVG、… 各种不同标签都共有的属性，所以叫 Element</li>
<li>在 Element 各种元素之上，我们还有👇节点node的属性</li>
</ul>
</li>
<li>
<p>第四层原型 <strong>Node</strong>.prototype</p>
<ul>
<li>这里面是<strong>所有节点共有的属性</strong>，节点包括 XML 标签文本注释、HTML 标签文本注释等等</li>
</ul>
</li>
<li>
<p>第五层原型 <strong>EventTarget</strong>.prototype</p>
<ul>
<li>只有 3 个共有属性：addEventListener、dispatchEvent、removeEventListener</li>
</ul>
<ul>
<li>最重要的函数属性是 <strong>addEventListener</strong></li>
</ul>
</li>
<li>
<p>最后一层原型就是 <strong>Object</strong>.prototype（根对象）了</p>
<ul>
<li>再往上就是 null 了</li>
</ul>
</li>
</ol>
<blockquote>
<p>综上，div 是个非常复杂的对象</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="div-完整原型链">div 完整原型链</h3>
<blockquote>
<p>自身属性和共有属性，<a href="https://i.loli.net/2020/10/21/bwt5rm24PC8IXa6.png" target="_blank" rel="noopener noreffer">点击查看</a></p>
<p><a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c7-JS%e7%bc%96%e7%a8%8b%e6%8e%a5%e5%8f%a3%5c1-DOM%e7%bc%96%e7%a8%8b%5cdiv%e5%ae%8c%e6%95%b4%e5%8e%9f%e5%9e%8b%e9%93%be.png" rel="">本地查看</a></p>
</blockquote>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;.red&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>由于 div 是由 HTMLDivElement 构造的</li>
<li>HTMLDivElement 构造函数往 this 上添加了一些属性 （this 指代 div）</li>
<li>div 也继承了 Element，所以 Element 也往 this 上添加了一些属性</li>
<li>还继承了 node 构造函数，添加了一些属性</li>
<li>综上，每一层构造函数，都会往 div 身上添加了属性</li>
</ul>
<p>​</p>
<blockquote>
<p>例 👇</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">requestFullScreen</span><span class="p">()</span>   <span class="c1">// 请求全屏（是所有Element的共有属性）
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">head</span><span class="p">.</span><span class="nx">requestFullScreen</span><span class="p">()</span> <span class="c1">// head元素全屏显示  // 这个 API 兼容性一般不是很好，通常不会使用
</span><span class="c1">// 每一个元素都可以要求自己跟屏幕一样大
</span><span class="c1">// head 能调用到这个 API , 就是因为顺着【原型链】继承而来
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="总结">总结</h3>
<ul>
<li>这样我们就可以清楚的知道，获取到的 div  是个啥了</li>
<li>就是个对象，且有 6 层原型</li>
</ul>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="节点类型-nodetype">节点类型 nodeType</h2>
<p>节点？元素？傻傻分不清</p>
<blockquote>
<p>一个网页里面，节点包括很多种。最常见的就是元素、也叫标签</p>
</blockquote>
<blockquote>
<p>节点 Node 包括以下几种</p>
</blockquote>
<ul>
<li>1   表示元素 Element，也叫标签 Tag  （最常见）</li>
<li>3   表示文本 Text</li>
<li>8   表示注释 Comment</li>
<li>9   表示文档 Document</li>
<li>11  表示文档片段 DocumentFragment</li>
</ul>
<p>（记住 1 和 3 即可）</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType" target="_blank" rel="noopener noreffer">MDN</a> 有完整描述，通过 **x.nodeType ** 得到一个数字</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 在任何一个元素上通过 .nodeType 就可以获取到这个元素的类型
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">nodeType</span>  <span class="c1">// 1  表示标签
</span></code></pre></td></tr></table>
</div>
</div><p>示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// www.baidu.com
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
<span class="nx">div</span><span class="p">.</span><span class="nx">nodeType</span>  <span class="c1">// 1
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">childNodes</span>  <span class="c1">// 查看div的所有子节点  // 得到 Nodelist(5) 伪数组。 0: text 第一个子节点就是文本
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">firstChild</span>  <span class="c1">// #text  获取到文本节点
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">.</span><span class="nx">textContext</span>  <span class="c1">// 获取文本里面的内容  &#34;  &#34;  是个空格
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">.</span><span class="nx">nodeType</span>  <span class="c1">// 3  获取到div的第一个子节点的节点类型就是 3 文本
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="节点的增删改查">节点的增删改查</h2>
<blockquote>
<p>程序员的宿命就是增删改查</p>
<ul>
<li>后端，对【数据库】进行增删改查</li>
<li>前端，对【页面元素】进行增删改查</li>
</ul>
</blockquote>
<h2 id="增">增</h2>
<h3 id="创建一个标签节点">创建一个标签节点</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  <span class="c1">// “DOM反人类”再次得到验证：创建一个元素居然写这么长的单词
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;style&#39;</span><span class="p">)</span> 
<span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">)</span> 
<span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">)</span>
<span class="c1">// &lt;div&gt;&lt;/div&gt; 、 &lt;style&gt;&lt;/style&gt; 、 &lt;script&gt;&lt;/script&gt; 、 &lt;li&gt;&lt;/li&gt;
</span></code></pre></td></tr></table>
</div>
</div><h3 id="创建一个文本节点">创建一个文本节点</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">text1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="s1">&#39;你好&#39;</span><span class="err">）</span> 
<span class="c1">// 为什么不能直接写成 text1=&#39;你好&#39;
</span><span class="c1">// 因为 &#39;你好&#39; 是一个字符串；而文本节点是一个【对象】（包含很多原型、函数什么的）
</span></code></pre></td></tr></table>
</div>
</div><h3 id="标签里面插入文本">标签里面插入文本</h3>
<blockquote>
<p>两种形式、3 种写法</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">text1</span><span class="p">)</span> 
<span class="nx">div1</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="s1">&#39;你好&#39;</span>   <span class="nx">或者</span>   <span class="nx">div1</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;你好&#39;</span>
<span class="c1">// 但是不能用 div1.appendChild(&#39;你好&#39;）
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/appendChild" target="_blank" rel="noopener noreffer">appendChild</a> 是 Node 构造函数 添加的</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/textContent" target="_blank" rel="noopener noreffer">textContent</a>  也是 Node 构造函数 添加的</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/innerText" target="_blank" rel="noopener noreffer">innerText</a> 是 HTMLElement 构造函数 添加的</li>
</ul>
<blockquote>
<ul>
<li>
<p>喜欢        Node        就用         Node        提供的接口
喜欢 HTMLElement 就用 HTMLElement 提供的接口</p>
</li>
<li>
<p><strong>但是不能混着用</strong>
示例如下图，会报错：appendChild 只能接收一个 node 节点</p>
</li>
</ul>
</blockquote>
<p></p>
<h3 id="综上">综上</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>你好<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 通过 DOM 创建上面这个html标签 👆
</span><span class="c1">// 需要下面 3 行代码，才能实现
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">div1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>
<span class="kd">let</span> <span class="nx">text1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="s1">&#39;你好&#39;</span><span class="err">）</span>
<span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">text1</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>此时的 div1 并不会显示在页面中，只是在 JS 内存中存活
只有插入页面中，这个 div1 才能生效（显示）</p>
</blockquote>
<p>​</p>
<h3 id="插入页面中">插入页面中</h3>
<ul>
<li>创建的标签，默认处于 JS 线程中
<ul>
<li>不会显示在页面中，只是在 JS 内存中存活</li>
</ul>
</li>
<li>你必须把它插到 head 或者 body 里面，它才会生效、显示在页面中
<ul>
<li>创建的是 style 或 link 元素 …  就需要传入到 head 里才能生效</li>
</ul>
</li>
<li>appendChild 会把元素插入到目标容器的<strong>末尾</strong></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span> 
<span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>
<span class="c1">// 或者
</span><span class="c1"></span><span class="nx">已在页面中的元素</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  <span class="c1">// 创建div元素
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">text1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="s1">&#39;你好&#39;</span><span class="err">）</span><span class="c1">// 创建文本节点
</span><span class="c1"></span><span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">text1</span><span class="p">)</span>  <span class="c1">// 通过appendChild把文本节点添加到div元素中。此时div仍在内存中，不在页面显示
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span> <span class="c1">// &lt;body&gt;&lt;div&gt;你好&lt;/div&gt;&lt;/body&gt;  此时 div 显示在页面中
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="appendchild-疑问">appendChild 疑问</h3>
<h4 id="一个元素只能插入一处">一个元素，只能插入一处</h4>
<blockquote>
<p>页面中有 div#test1 和 div#test2</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span> 
<span class="nx">test1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span> 
<span class="nx">test2</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>  
<span class="c1">// 创建一个 div 元素，先后插入到另外两个div中
</span><span class="c1">// 请问新创建的这一个 div 元素，最终会出现在哪里？
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>请问最终 div 出现在哪里？</p>
<ul>
<li>
<p>选项1、test1 里面</p>
</li>
<li>
<p>选项2、test2 里面</p>
</li>
<li>
<p>选项3、test1 里面 和 test2 里面</p>
</li>
</ul>
</li>
<li>
<p>答案：（鼠标选中显示答案）👉 <font color="white">最终 div 出现在 test2 里面</font></p>
<blockquote>
<p>因为<strong>一个元素不能出现在两个地方，除非复制一份</strong></p>
</blockquote>
<p>同理：送子观音，把一个孩子送到第一户人家，又把他送到第二户人家，那最后在哪降生？ 答：第二户人家
因为一个孩子只会有一个亲生家庭</p>
</li>
</ul>
<p>​</p>
<p>示例</p>
<blockquote>
<p>尝试用 appendChild，把创建好的元素，先后添加到两个地方（无法实现一个元素插入多处）</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  
<span class="kd">let</span> <span class="nx">text1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="s1">&#39;你好&#39;</span><span class="p">)</span>
<span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">text1</span><span class="p">)</span>  
<span class="nx">div1</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="s1">&#39;white&#39;</span>
<span class="nx">div1</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">fontSize</span> <span class="o">=</span> <span class="s1">&#39;100px&#39;</span>
<span class="c1">// 此时内存中有一个 &lt;div&gt;你好&lt;/div&gt; 元素。 背景白色，字体100像素
</span><span class="c1">// 把这个 div1 元素，先后插入到 head 和 body 中
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span>  <span class="c1">// 最终div1元素只会出现在body中 
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h4 id="复制元素使插入多处">复制元素，使插入多处</h4>
<blockquote>
<p>用「克隆节点」 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/cloneNode" target="_blank" rel="noopener noreffer">cloneNode MDN</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div2</span> <span class="o">=</span> <span class="nx">div1</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>  
<span class="c1">// true 深拷贝：该节点的所有后代节点也都会被克隆 //  false 浅拷贝：只克隆该节点本身
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="删">删</h2>
<h3 id="两种方法">两种方法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 旧方法 👇
</span><span class="c1"></span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">childNode</span><span class="p">)</span>  <span class="c1">// 必须找到父节点，来删除子节点 （反人类）
</span><span class="c1"></span>
<span class="c1">// 新方法 👇
</span><span class="c1"></span><span class="nx">childNode</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>  <span class="c1">// IE不支持（兼容性有问题）
</span></code></pre></td></tr></table>
</div>
</div><h4 id="临时探讨为什么-ie-总搞独立">临时探讨：为什么 IE 总搞独立？</h4>
<ul>
<li>实际上在最初，IE 确实是最厉害的浏览器。其他各家浏览器公司为了反制 IE 才搞出「标准」</li>
<li>所以不是 IE 搞独立，而是标准出的太晚了</li>
<li>IE 一家独大的时候，标准还没有出台。IE 也不会提前知道标准的内容。
而且标准中某些内容还会故意跟 IE 反着写</li>
<li>比如 IE 发明了 innerText，标准出台表示不用 innerText 而用 textContent（就导致开发者两个写法都要记😭）</li>
<li>所以并不一定是 IE 故意搞独立，会不会是「标准」在故意使坏呢 ?!  （🤔盲生你发现了华点）</li>
</ul>
<p>​</p>
<h4 id="旧方法">旧方法</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 先创建出 div1，再克隆出 div2
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">div1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  
<span class="kd">let</span> <span class="nx">text1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="s1">&#39;你好&#39;</span><span class="p">)</span>
<span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">text1</span><span class="p">)</span>
<span class="kd">let</span> <span class="nx">div2</span> <span class="o">=</span> <span class="nx">div1</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>

<span class="c1">// 把 div1/div2 元素，分别插入到 head/body 中
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div2</span><span class="p">)</span> 

<span class="c1">// 再删除节点
</span><span class="c1"></span><span class="nx">div1</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span>
<span class="nx">div2</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">div2</span><span class="p">)</span>

<span class="c1">// 删除后还能再添加回来吗 ？
</span><span class="c1">// 可以的。因为删除节点后，节点还在内存里面，所以还可以添加回来
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div2</span><span class="p">)</span>  
</code></pre></td></tr></table>
</div>
</div><h4 id="新方法">新方法</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 先创建出 div1，再克隆出 div2
</span><span class="c1">// 把 div1/div2 元素，分别插入到 head/body 中
</span><span class="c1"></span>
<span class="c1">// 再删除节点
</span><span class="c1"></span><span class="nx">div1</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>
<span class="nx">div2</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>

<span class="c1">// 删除后还能再添加回来吗 ？
</span><span class="c1">// 可以的。因为删除节点后，节点还在内存里面，所以还可以添加回来  // 跟旧方法的效果一模一样
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>由于【 <code>ele.remove()</code> 】是后发明的，所以不兼容 IE</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="思考">思考</h3>
<ul>
<li>如果一个 node 被移出页面（DOM 树）</li>
<li>那么它还可以再次回到页面中吗？
<ul>
<li>答案：可以。（示例参考上面）</li>
<li>只是被移出来，并没有被彻底干掉，所以还可以存在在 JS 内存中</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="如何彻底干掉元素">如何彻底干掉元素</h3>
<blockquote>
<p>即元素被删除后，就彻底消失、不存在在内存中、也无法重新添加回页面</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 彻底干掉元素，先把元素移出页面
</span><span class="c1"></span><span class="nx">div1</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>
<span class="nx">div2</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>  
<span class="c1">// 这时 div1/div2 都在内存中
</span><span class="c1"></span><span class="nx">div1</span> <span class="o">=</span> <span class="kc">null</span>
<span class="nx">div2</span> <span class="o">=</span> <span class="kc">null</span>  
<span class="c1">// 等于空，div1/div2 就与内存断开联系了，就会被【垃圾回收】掉
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<p>​</p>
<h2 id="改-">改 💡</h2>
<h3 id="改属性">改属性</h3>
<h4 id="写标准属性">写标准属性</h4>
<h5 id="改-class">改 class</h5>
<blockquote>
<p>科普：早期 JS 对象是不能拥有一个「保留字」作为 key 的</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div1</span><span class="p">.</span><span class="k">if</span>  
<span class="c1">// JS引擎的解析器看到 if 会认为是不是 if 语句，而实际上 if 是 对象 div1 的 一个key
</span><span class="c1">// 这就会导致歧义
</span><span class="c1">// 所以 JS 不接受「保留字(JS关键字...)」作为 key
</span><span class="c1"></span>
<span class="nx">div1</span><span class="p">.</span><span class="kr">class</span> <span class="o">=</span> <span class="s2">&#34;red&#34;</span>  <span class="c1">// 修改失败
</span><span class="c1">// 因为 class 也是JS关键字，所以不能使用
</span><span class="c1">// 于是就起了新的名字，用 className 表示标签の类名 class
</span></code></pre></td></tr></table>
</div>
</div><p>正确写法 👇</p>
<blockquote>
<p>注意：每次用 className 修改类名，都会把之前的类名 直接覆盖掉</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 如果只是想【追加】类名
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s1">&#39;red blue&#39;</span>  <span class="c1">// 用 className 就把所有类名都写上
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">)</span>    <span class="c1">// 或者通过👈方式追加类名
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">classList</span>  <span class="c1">// 可以查看div元素当前已有的class类名组成的数组
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h5 id="改-style">改 style</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">style</span> <span class="o">=</span> <span class="s1">&#39;width:100px;color:blue;&#39;</span>  <span class="c1">// 全覆盖  【不推荐】
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="s1">&#39;200px&#39;</span>              <span class="c1">// 改一部分【推荐】
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="s1">&#39;white&#39;</span>    <span class="c1">// 注意「驼峰命名」的大小写
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>JS 不支持有「中划线 - 」的 key 值</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">background</span><span class="o">-</span><span class="nx">color</span>    <span class="c1">// ❌ 中划线会被理解成：减号
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="s1">&#39;background-color&#39;</span><span class="p">]</span> <span class="c1">// ⭕ 就是某些情况支持 key 包含中划线，也只能用[]中括号的形式
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span>     <span class="c1">// ✅
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h5 id="改-data--属性">改 data-* 属性</h5>
<blockquote>
<p>以前有段时间，需要往元素上添加自定义属性。现在基本没人用了（库开发者可能会用到）</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 添加自定义属性
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;data-x&#39;</span><span class="p">,</span> <span class="s1">&#39;test&#39;</span><span class="p">)</span>  <span class="c1">// &lt;div data-x=&#34;test&#34;&gt;&lt;/div&gt;
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">xx</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span>              <span class="c1">// &lt;div data-xx=&#34;sam&#34;&gt;&lt;/div&gt;
</span><span class="c1"></span>
<span class="c1">// 获取自定义属性的属性值
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;data-x&#39;</span><span class="p">)</span>   <span class="c1">// test  
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">xx</span>               <span class="c1">// sam
</span><span class="c1"></span>
<span class="c1">// 修改自定义属性的值
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">xx</span> <span class="o">=</span> <span class="s1">&#39;jack&#39;</span>      
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h4 id="读标准属性">读标准属性</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">id</span>
<span class="nx">div</span><span class="p">.</span><span class="nx">classList</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">href</span> 
<span class="c1">// 👆 大多是属性都是一一对应，直接读就可以
</span></code></pre></td></tr></table>
</div>
</div><h5 id="获取原本的属性值">获取原本的属性值</h5>
<blockquote>
<p>不想被浏览器加工</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">)</span>
<span class="nx">div</span><span class="p">.</span><span class="nx">classList</span>

<span class="nx">a</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">)</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">href</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>两种方法都可以，但值可能稍微有些不同（大多情况两种方法获取的结果是一样的）</p>
</blockquote>
<ul>
<li>一种是简单的书写方式，「xxx.属性名」，但值可能被加工</li>
<li>一种是较长的书写方式，「xxx.getAttribute(&lsquo;属性名&rsquo;)」，虽然长，但可确保结果更准确，更保险一点</li>
</ul>
<h5 id="举例a-标签的特殊情况httpsjsbincomsuqesaredithtmljsconsole-">举例：a 标签的<a href="https://jsbin.com/suqesar/edit?html,js,console" target="_blank" rel="noopener noreffer">特殊情况</a> 👇</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">id</span><span class="o">=</span><span class="s">test</span> <span class="na">href</span><span class="o">=</span><span class="s">&#39;/xxx&#39;</span><span class="p">&gt;&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test</span><span class="p">.</span><span class="nx">href</span><span class="p">)</span>  <span class="c1">// https://null.jsbin.com/xxx  浏览器把域名给补全了
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>如果直接用 js 的属性，读出值。得出的结果，有可能会被浏览器加工</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="改事件处理函数">改事件处理函数</h3>
<h4 id="divonclick-默认为-null">div.onclick 默认为 null</h4>
<blockquote>
<p><a href="https://jsbin.com/qujosiw/edit?html,js,console,output" target="_blank" rel="noopener noreffer">代码在线编译</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;test&#34;</span><span class="p">&gt;</span>test<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test</span><span class="p">.</span><span class="nx">onclick</span><span class="p">)</span>  <span class="c1">// null 
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">test</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">test</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>  <span class="c1">// this: test
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>     <span class="c1">//    x: event
</span><span class="c1"></span><span class="p">}</span>
<span class="c1">// 调用原理：test.onclick.call(test, event)
</span><span class="c1">// 所以 this 和 event ，实际上是浏览器在用户点击时，用 call 传进来的
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>每一个元素都有 onclick 属性，该属性的默认值为 null</li>
<li>默认点击 div 不会有任何事情发生</li>
<li>但是如果你把 div.onclick 改为一个函数 fn
<ul>
<li>那么点击 div 的时候，浏览器就会调用这个函数</li>
<li>并且是这样调用的 fn.call(div, event)
<ul>
<li>div 会被当做 this   （如果要用到 this 就不能用箭头函数、必须用 function）</li>
<li>event 则包含了点击事件的所有信息，如坐标</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>​</p>
<h4 id="divaddeventlistener">div.addEventListener</h4>
<blockquote>
<p>是 div.onclick 的升级版，之后的课程单独讲 DOM Event</p>
</blockquote>
<ul>
<li>div.onclick 只能写一个函数（点击时，执行的所有操作，都必须写在一个函数中）</li>
<li>div.addEventListener 可以写无数个函数（点击时，执行的所有操作，可以写作不同的函数，对于复杂的操作情况非常友好）</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="改内容">改内容</h3>
<h4 id="改文本内容">改文本内容</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>    <span class="c1">// 早期 IE 发明的
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>  <span class="c1">// 出台「标准」中规定的
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>两者几乎没有区别</li>
<li>现在所有浏览器基本都是同时支持这两种写法的</li>
</ul>
<p>​</p>
<h4 id="改html内容">改HTML内容</h4>
<p><a href="https://jsbin.com/vokuqoj/edit?html,js,output" target="_blank" rel="noopener noreffer">代码在线编译</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;strong&gt;重要内容&lt;/strong&gt;&#39;</span> 
</code></pre></td></tr></table>
</div>
</div><ul>
<li>innerText ：所有内容都会被识别为 文本</li>
<li>innerHTML ： 会解析内容、识别标签…
（内容需要注意长度，超过一定限度，如20000个字符，可能会导致浏览器卡爆）</li>
</ul>
<p>​</p>
<h4 id="改标签">改标签</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>      <span class="c1">// 先清空 
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div2</span><span class="p">)</span>   <span class="c1">// 再加内容
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="改爸爸">改爸爸</h3>
<blockquote>
<p>想要找一个新爸爸</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">newParent</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>  <span class="c1">// 直接把div添加到新的父节点内，以前父节点中的div就自动消失了
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>直接这样就可以了，直接从原来的地方消失</li>
</ul>
<h2 id="查">查</h2>
<h3 id="查爸爸">查爸爸</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span> 
<span class="c1">// 或者 
</span><span class="c1"></span><span class="nx">node</span><span class="p">.</span><span class="nx">parentElement</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="查爷爷">查爷爷</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">parentNode</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="查子代">查子代</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">childNodes</span>  <span class="c1">// 包含文本节点
</span><span class="c1">// 或者 
</span><span class="c1"></span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span>    <span class="c1">// 【优先使用】不包含文本节点
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><a href="https://jsbin.com/miqahoj/edit?html,js,console,output" target="_blank" rel="noopener noreffer">查看在线代码</a></p>
</blockquote>
<h4 id="childnodes">childNodes</h4>
<p>例1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">test</span><span class="p">&gt;</span>
	<span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>   <span class="c1">// 7
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>第 1 个子节点是：回车 + 空格，最终缩成一个**空格 **（最开始讲 html 时就讲过，不论几个回车空格，都会缩成一个空格）</li>
<li>第 2 个子节点是：li</li>
<li>第 3 个子节点是：回车 + 空格，最终缩成一个**空格 **</li>
<li>第 4 个子节点是：li</li>
<li>第 5 个子节点是：回车 + 空格，最终缩成一个**空格 **</li>
<li>第 6 个子节点是：li</li>
<li>第 7 个子节点是：回车 + 空格，最终缩成一个**空格 **</li>
</ul>
<p>例2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">test2</span><span class="p">&gt;&lt;</span><span class="nt">li</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">li</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">li</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test2</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>   <span class="c1">// 3   // 因为没有回车和空格
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="children">children</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">test</span><span class="p">&gt;</span>
	<span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>   <span class="c1">// 3     // 即使有回车空格，子元素也是 3 个
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>所以「查子代」优先使用 children</p>
</blockquote>
<p>​</p>
<h4 id="思考元素节点的变化">思考：元素节点的变化</h4>
<blockquote>
<p>当子代变化时，childNodes 和 children 也会实时变化吗？</p>
</blockquote>
<p><a href="https://jsbin.com/rulicaz/edit?html,js,console,output" target="_blank" rel="noopener noreffer">在线代码：children / childNodes</a></p>
<p>答：如果子元素变化，children / childNodes 的长度**也会变化 **</p>
<p><a href="https://jsbin.com/duqexed/edit?html,js,console,output" target="_blank" rel="noopener noreffer">在线代码：querySelectorAll</a></p>
<p>答：通过 document.querySelectorAll 获取子元素集合。如果子元素变化，集合的长度**不会变化 **
querySelectorAll 不会实时根据元素变化，去改变自己。获取过一次之后，就不再变化</p>
<p>​</p>
<p>​</p>
<h3 id="查兄弟姐妹">查兄弟姐妹</h3>
<blockquote>
<p>没有 API 可以直接获取到「任一元素的兄弟元素」，只能通过「先获取到父元素，再获取父元素的子元素」的方式</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">childNodes</span>   <span class="c1">// parentNode 可以和 parentElement 互换
</span><span class="c1"></span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">children</span>     <span class="c1">// 同上
</span><span class="c1"></span>
<span class="c1">// 发现问题：上面获取到的数组，都包含了自己，而需求是只要兄弟元素，过滤掉自己  // 只能遍历
</span><span class="c1">// children 遍历排除自己
</span><span class="c1">// childNodes 遍历排除自己和所有文本节点（更麻烦）
</span></code></pre></td></tr></table>
</div>
</div><h4 id="例">例</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
<span class="c1">// div2 有多少个兄弟姐妹
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">siblings</span> <span class="o">=</span> <span class="p">[]</span>
<span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">div2</span><span class="p">.</span><span class="nx">parentElement</span><span class="p">.</span><span class="nx">children</span> <span class="c1">// 先获取到父亲的所有子代，再遍历从中排除自己
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!==</span> <span class="nx">div2</span><span class="p">){</span>
    <span class="nx">silblins</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="查看第一个子代">查看第一个子代</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">firstChild</span>    <span class="c1">// node.parentNode.children[0]
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="查看最后一个子代">查看最后一个子代</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">lastChild</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="查看上一个兄弟">查看上一个兄弟</h3>
<p>距离自己最近的上一个兄弟节点（哥哥）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">previousSibling</span>          <span class="c1">// 如果上一个节点是文本节点(空格、回车...)，就会获取到文本节点
</span><span class="c1"></span><span class="nx">node</span><span class="p">.</span><span class="nx">proviousElementSibling</span>   <span class="c1">// 会避开文本节点，只找元素节点
</span></code></pre></td></tr></table>
</div>
</div><p>补充：[节点类型](# 节点类型 nodeType)</p>
<p>​</p>
<h3 id="查看下一个兄弟">查看下一个兄弟</h3>
<p>距离自己最近的下一个兄弟节点（弟弟）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">nextSibling</span>         <span class="c1">// 下一个兄弟节点 （包含文本节点）
</span><span class="c1"></span><span class="nx">node</span><span class="p">.</span><span class="nx">nextElementSibling</span>  <span class="c1">// 下一个元素兄弟节点 （只包含元素节点）
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="遍历一个-div-里面的所有元素">遍历一个 div 里面的所有元素</h3>
<blockquote>
<p>与前面的「数据结构——遍历树」逻辑相同</p>
</blockquote>
<blockquote>
<p>DOM 就是一棵树。数据结构中「树」的所有算法都可以用到 DOM 中</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">travel</span> <span class="o">=</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>   <span class="c1">// 与遍历树节点的代码逻辑一致
</span><span class="c1"></span>  <span class="nx">fn</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">){</span> 
    <span class="k">for</span><span class="p">(</span><span class="mi">1</span><span class="nx">et</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="err">；</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
      <span class="nx">travel</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">fn</span><span class="p">)</span> 
    <span class="p">}</span> 
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">travel</span><span class="p">(</span><span class="nx">div1</span><span class="p">,</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">)</span> 
</code></pre></td></tr></table>
</div>
</div><ul>
<li>看，数据结构多么有用</li>
</ul>
<h2 id="dom-操作是跨线程的详解">DOM 操作是跨线程的（详解）📌</h2>
<blockquote>
<p>面接常问：为什么 DOM 操作比较慢？
因为 DOM 操作和 JS 是两个不同的东西。</p>
</blockquote>
<blockquote>
<p>下面就详细解释：什么叫「DOM 操作是跨线程的」</p>
</blockquote>
<h3 id="浏览器功能划分">浏览器功能划分</h3>
<blockquote>
<p>在《JS世界》那一节里，讲过浏览器功能划分</p>
</blockquote>
<ul>
<li>浏览器有两个重要功能：「渲染引擎」和「JS 引擎」
<ul>
<li>渲染引擎：专门用来渲染 html 和 css</li>
<li>JS 引擎：专门用来执行 JS</li>
</ul>
</li>
<li>这两个引擎在不同的线程中，互不相干</li>
</ul>
<p>​</p>
<h3 id="跨线程操作">跨线程操作</h3>
<h4 id="这两个线程-各司其职">这两个线程-各司其职</h4>
<ul>
<li>
<p>JS 引擎，不能操作页面，只能操作 JS （window对象、object 对象、document对象…之类的）</p>
<ul>
<li>虽然存在 document 对象，但不能通过它操作任何事情，它只能操作document对象本身 —— 只能操作 JS</li>
</ul>
</li>
<li>
<p>渲染引擎，不能操作 JS，只能操作页面</p>
</li>
<li>
<p>这就是【各司其职】</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span>  
<span class="c1">// 但是执行这句JS的调用语句，却使页面发生了改变。这不就违背了【各司其职】的原则 ❓❓
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>既然是各司其职：JS 引擎 只能操作 JS，渲染引擎 只能操作 页面</p>
<ul>
<li>怎么让 div 出现在屏幕中的 ？</li>
<li>理论上，它只能出现在 body 的内存里面</li>
<li>这句 JS 的调用语句到底是如何操作、改变页面的  ❓❓   —— [跨线程通信](# 跨线程通信)</li>
</ul>
</blockquote>
<p>​</p>
<h4 id="跨线程通信">跨线程通信</h4>
<ul>
<li>当浏览器发现 JS 要在 body 里添加一个 div1 对象</li>
<li>浏览器就会通知渲染引擎：
<ul>
<li>在页面里也新增一个 div 元素</li>
<li>新增的 div <strong>元素</strong>的所有属性，都照抄 div1 <strong>对象</strong></li>
</ul>
</li>
</ul>
<blockquote>
<p>所以不是 JS 去渲染、改变了页面，而是浏览器去渲染、改变了页面</p>
</blockquote>
<p>​</p>
<h4 id="图示跨线程操作">图示跨线程操作</h4>
<p></p>
<ul>
<li>
<p>左【JS 执行线程】、中【浏览器】、右【渲染线程】  各自独立的</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  <span class="c1">// 不会影响页面，只改变了JS 执行线程的内存
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;hi&#39;</span>              <span class="c1">// 也不会影响页面（第1次改变文本内容）
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>      
<span class="c1">// 浏览器发现JS往body里添加了div节点，浏览器就通知了渲染引擎【慢】。
</span><span class="c1">// 渲染引擎接到通知，就往body里添加了div元素（div元素的属性照搬div节点的属性）
</span><span class="c1"></span><span class="p">...</span>
<span class="nx">div</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span>   
<span class="c1">// 浏览器发现div节点中的文本内容改变了，于是通知渲染引擎【慢】，照搬操作（第2次改变文本内容）
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>大量的时间花费在【中间过程】，也就是「浏览器通知渲染引擎」的过程中</p>
<ul>
<li>这就使得： div 的操作，会比其他几行单线程操作，都慢很多</li>
<li>「第 2 次改变文本内容」需通知渲染引擎。所以「第 2 次改变文本内容」的操作，肯定比「第 1 次」慢</li>
<li>[思考](# DOM 操作慢？)：执行速度变慢，这是模块化的缺点吗 ？</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="dom-操作慢-">DOM 操作慢 ❓❗️</h3>
<blockquote>
<p>网上都说 DOM 操作慢，实际上只是比 JS 操作慢，DOM 操作比网络请求还是快很多的。
关于这一部分内容，大家可以延伸阅读一些文章：</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000004114594" target="_blank" rel="noopener noreffer">为什么说DOM操作很慢</a></li>
<li><a href="https://stackoverflow.com/questions/6817093/but-whys-the-browser-dom-still-so-slow-after-10-years-of-effort" target="_blank" rel="noopener noreffer">为什么经过10年的努力DOM操作还是这么慢</a></li>
</ul>
<p>注意，网上的文章说的不一定都是对的，作为参考了解一下即可。</p>
</blockquote>
<blockquote>
<p>「跨线程操作，使得执行速度变慢」，这是模块化的缺点吗？  答 👇</p>
</blockquote>
<ul>
<li>
<p>虽然变慢了，但是可以实现各线程内部单独的优化。</p>
</li>
<li>
<p>比如，在渲染引擎中可以单独优化渲染，不需要理会 JS 的各种变量的问题 … 因为根本就看不见它们，所以也就无需考虑</p>
</li>
<li>
<p>总结</p>
<ul>
<li>「模块化」可以让划分的每一块，都比较简单、容易优化、容易代替</li>
<li>虽然损失了时间，但「模块化的优点」却是更显著的</li>
</ul>
</li>
</ul>
<h3 id="插入新标签的完整过程生命周期">插入新标签的完整过程（生命周期）</h3>
<blockquote>
<p>这个 div 经历了 3 个过程（vue 也有生命周期：之前、之时、之后）</p>
</blockquote>
<h4 id="在-div1-放入页面之前">在 div1 放入页面之前</h4>
<ul>
<li>你对 div1 所有的操作都属于 JS 线程内的操作</li>
</ul>
<h4 id="把-div1-放入页面之时">把 div1 放入页面之时</h4>
<ol>
<li>浏览器会发现 JS 的意图</li>
<li>就会通知渲染线程在页面中渲染 div1 对应的元素</li>
</ol>
<h4 id="把-div1-放入页面之后">把 div1 放入页面之后</h4>
<blockquote>
<p>为什么要说「可能会 ~，也可能不会」这种看似无意义的话</p>
<ul>
<li>因为不同的浏览器，有不同的逻辑</li>
<li>以下 4 点均以 Chrome 为例</li>
</ul>
</blockquote>
<ol>
<li>
<p>你对 div1 的操作都<strong>有可能</strong>会触发重新渲染</p>
</li>
<li>
<p><code>div1.id='newId'</code> 可能会重新渲染，也可能不会</p>
<ul>
<li>比如，改的这个 id 有 css 样式，那就会触发重新渲染</li>
</ul>
</li>
<li>
<p><code>div1.title = 'new'</code> ，即使改 title**<a href="https://css-tricks.com/css-content/#article-header-id-4" target="_blank" rel="noopener noreffer">也可能会重新渲染</a>**，也可能不会</p>
<ul>
<li>
<p>貌似看起来改 title 不应该影响页面。实际上 title 有时也会渲染在页面里</p>
</li>
<li>
<p>举例 👇</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">title</span><span class="o">=</span><span class="s">&#39;titleHi&#39;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="nt">div</span><span class="p">::</span><span class="nd">after</span><span class="p">{</span> <span class="k">content</span><span class="p">:</span> <span class="nb">attr</span><span class="p">(</span><span class="n">title</span><span class="p">);</span> <span class="p">}</span>   <span class="c">/* 页面中显示出了 `titleHi` */</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
<span class="c">&lt;!-- 
</span><span class="c">   div 的伪元素内容，就是获取了 div 的 title 属性。
</span><span class="c">   这种情况如果改了 div 的 title，页面一定会重新渲染
</span><span class="c">--&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>如果你连续对 div1 多次操作，浏览器可能会<strong>合并成一次操作</strong>，也可能不会（<strong>之前在动画里提到过</strong>）</p>
<ul>
<li>
<p>需求动画效果：让 test 元素的宽度从 100 px 渐变成 200 px</p>
</li>
<li>
<p><a href="http://js.jirengu.com/yefac/1/edit?html,css,js,output" target="_blank" rel="noopener noreffer">代码见链接</a>。这样写为什么不会发生动画 ？</p>
<ul>
<li>在短时间内，对这个元素的 classList 进行了两次操作（两次添加类名）</li>
<li>JS 认为 执行两次、渲染两次是浪费时间，何不合并、渲染一次，更节约渲染时间</li>
<li>由于合并 ，导致动画效果出不来。</li>
</ul>
</li>
<li>
<p>怎么才能不合并、展示出动效</p>
<ul>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">test</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;start&#39;</span><span class="p">)</span>
<span class="c1">// 中间多执行一步
</span><span class="c1"></span><span class="nx">test</span><span class="p">.</span><span class="nx">clientWidth</span>  
<span class="c1">// 获取test的客户端宽度。看似这句代码人畜无害的，但事实并非如此
</span><span class="c1">// 因为这里要获取宽度，使得上面添加class的操作，必须立即渲染
</span><span class="c1">// 所以就不会合并操作（从而展示出动效）
</span><span class="c1"></span><span class="nx">test</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
<ul>
<li>在中间读取宽度，导致 JS 必须先渲染出 start，然后告诉你宽度，最后渲染 end（强行拆分）</li>
<li>又因为中间存在 css 的过渡效果 transition，所以就会展示动画啦</li>
</ul>
</li>
</ol>
<blockquote>
<p>这其实是非常高深的一点  ，很少有人能这么清晰的分析出原因</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="提问">提问</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  
<span class="nx">div</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;hi&#39;</span>          <span class="c1">// 不触发重新渲染
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>  <span class="c1">// div插入页面之时
</span><span class="c1"></span><span class="p">...</span>
<span class="nx">div</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span>   <span class="c1">// 在div插入页面之后，修改 div 的文本内容，一定会触发重新渲染
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>在 div 插入页面之后</p>
<ul>
<li>修改 div 的文本内容，一定会触发重新渲染</li>
<li><strong>那是否「修改 div 的所有属性，都会触发重新渲染」呢？</strong></li>
</ul>
</blockquote>
<p><a href="http://js.jirengu.com/meviw/2/edit?html,js,output" target="_blank" rel="noopener noreffer">示例代码</a></p>
<ul>
<li>html 中，div 元素有三个不同的属性：<code>id</code>、<code>x</code>、<code>data-x</code>，属性值都是 <code>test</code></li>
<li>JS 中，获取到这个 div 元素为 div1，再分别修改这三个属性的值为 <code>frank</code></li>
<li>那最终页面中的这个 div 元素，是否会三个属性都修改成功了呢 ？
<ul>
<li><code>id</code> 修改成功、<code>x</code> 修改失败、<code>data-x</code> 修改成功</li>
</ul>
</li>
</ul>
<blockquote>
<p>可修改的属性，存在什么规律吗？</p>
</blockquote>
<ul>
<li>如果这个属性是在「标准属性」中、或在「data 属性」中</li>
<li>那么浏览器会自动同步这个修改结果到渲染的页面中</li>
<li>id 属于标准属性、data-x 属于 data 属性，
而 x 属于非标准属性，修改它就不会影响（渲染）到页面</li>
</ul>
<blockquote>
<p>总结「属性同步」的标准，[见下](# 属性同步)</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="属性同步">属性同步</h3>
<h4 id="标准属性">标准属性</h4>
<ul>
<li>对 div1 的标准属性的修改，会被浏览器自动同步到页面中</li>
<li>比如 id、className、title 等（你改了就会直接变）</li>
</ul>
<h4 id="data--属性">data-* 属性</h4>
<ul>
<li>同上</li>
</ul>
<h4 id="非标准属性">非标准属性</h4>
<ul>
<li>对非标准属性的修改，则只会停留在 JS 线程中</li>
<li>不会同步到页面里</li>
<li>比如 x 属性，<a href="http://js.jirengu.com/meviw/2/edit?html,js,output" target="_blank" rel="noopener noreffer">示例代码</a></li>
</ul>
<h4 id="启示">启示</h4>
<ul>
<li>如果你想自定义属性，又想被同步到页面中，请使用 data-  作为前缀（data 属性）</li>
<li>不要使用类似 <code>x</code> 这种属性</li>
</ul>
<h4 id="图示">图示</h4>
<p></p>
<ul>
<li>div 的【标准属性】，自动同步</li>
<li>div 的【data 属性】，自动同步
<ul>
<li>【data 属性】中的【x 属性】，自动同步</li>
</ul>
</li>
<li>div 的 x 属性，什么东西，滚</li>
</ul>
<blockquote>
<p>补充：</p>
<ul>
<li>JS 线程中的属性叫「properties」，渲染线程中的属性叫「attributes」 （[对比](# Property  vs  Attribute)）</li>
<li>所以 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getAttribute" target="_blank" rel="noopener noreffer">Element.getAttribute()</a> 这个 API 获取的是页面中的属性</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="property--vs--attribute">Property  vs  Attribute</h3>
<h4 id="property-属性">property 属性</h4>
<ul>
<li>
<p>JS 线程中 div1 的所有属性，叫做 div1 的 property</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div1</span><span class="p">.</span><span class="nx">style</span>
<span class="nx">div1</span><span class="p">.</span><span class="nx">id</span>
<span class="nx">div1</span><span class="p">.</span><span class="nx">className</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="attribute-也是属性">attribute 也是属性</h4>
<ul>
<li>
<p>渲染引擎中 div1 对应标签的属性，叫做 attribute</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;test&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;test&#34;</span> <span class="na">data-x</span><span class="o">=</span><span class="s">&#34;test&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h4 id="区别">区别</h4>
<ul>
<li>大部分时候，同名的 property 和 attribute ，值相等</li>
<li>但如果<strong>不是标准属性</strong>，那么它俩只会在一开始时相等
<ul>
<li>非标准属性 x，一开始左右相等。后来 JS 线程中修改了 x 的值，但是渲染线程并不知道，导致不等</li>
</ul>
</li>
<li>但注意 <strong>attribute 只支持字符串</strong>
<ul>
<li>页面中的标签属性的值，只能是字符串，<code>&lt;div id=1&gt; &lt;/div&gt;</code> 中的 id=1 也只是省略了引号的字符串 1</li>
</ul>
</li>
<li>而 property 支持字符串、布尔等类型</li>
</ul>]]></description>
</item><item>
    <title>JS 对象的基本用法</title>
    <link>http://samrks.github.io/javascript-crud-of-object-prototype/</link>
    <pubDate>Wed, 02 Sep 2020 21:50:44 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-crud-of-object-prototype/</guid>
    <description><![CDATA[<p>「增」「删」「改」「查」「原型」</p>
<h2 id="回顾">回顾</h2>
<h3 id="七种数据类型">七种数据类型</h3>
<ul>
<li>number、string、booleansymbol</li>
<li>undefined、null</li>
<li>object</li>
</ul>
<p>四基(本类型)两空一对象</p>
<p>(bigInt)</p>
<h3 id="五个-falsy-值">五个 falsy 值</h3>
<ul>
<li>null、undefined</li>
<li>0、NaN</li>
<li><code>''</code> （空字符串）</li>
</ul>
<p>​</p>
<h2 id="js-对象">JS 对象</h2>
<blockquote>
<p>是学习 JS 的三座大山之一</p>
<ul>
<li>
<p>对象（原型）</p>
</li>
<li>
<p>this</p>
</li>
<li>
<p>AJAX</p>
</li>
</ul>
</blockquote>
<p>​</p>
<h2 id="对象-object">对象 object</h2>
<blockquote>
<p>对象的基础知识</p>
</blockquote>
<blockquote>
<p>object ，是第七种数据类型，唯一 一种「复杂类型」</p>
<p>其他六种（numbe、string、boolean、symbol、null、undefined），叫做「简单类型」。因为这六种不包含其他任何东西，而 object 对象包含其他内容</p>
</blockquote>
<h3 id="定义">定义</h3>
<ul>
<li>无序的数据集合</li>
<li>键值对的集合</li>
</ul>
<h3 id="写法">写法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">对象名</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">key</span><span class="o">:</span> <span class="nx">value</span>    <span class="c1">// 属性名/键名 :  属性值
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>对象的写法，与 block（代码块）类似，只是碰巧都有 { } 。</li>
<li>要注意区分 { }  是对象，还是代码块</li>
</ul>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="o">:</span> <span class="mi">18</span> <span class="p">}</span>   <span class="c1">// 不论&#39;name&#39;/&#39;age&#39;(属性名)是否有引号，它都只能是字符串
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">({</span><span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">})</span>    <span class="c1">// 正规写法
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span> <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="o">:</span> <span class="mi">18</span> <span class="p">})</span>  <span class="c1">// 创建匿名对象
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>JS 既然可以通过<strong><code>字面量</code></strong>方式创建对象，为什么还要有第二种 <strong><code>new Object()</code></strong> 的方式创建 ?
<ul>
<li>实际上<strong>第二种 <code>new Object()</code> 才是正规创建对象的写法</strong>，第一种属于简化版</li>
<li>因为简化了代码，所以通常都是用第一种写法</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="细节">细节</h3>
<ul>
<li>
<p>==<strong>键名是字符串</strong>==，不是标识符，可以包含任意字符</p>
<blockquote>
<p>只要是<strong>字符串</strong>就行：空串、空格串、emoji 、数字字符串 … （任何一个 Unicode 能表达的串都 ok ）</p>
<p>标识符 规则：（变量）不能以数字开头</p>
</blockquote>
</li>
<li>
<p>属性名的引号可省略，省略之后需按照标识符的规则命名，特例：允许纯数字的键名</p>
</li>
<li>
<p><strong>就算引号省略了，键名也还是字符串（重要）</strong></p>
</li>
</ul>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;&#39;</span><span class="o">:</span> <span class="mi">1</span> <span class="p">}</span>
<span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">2</span><span class="o">:</span> <span class="mi">123</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;fff&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="o">:</span><span class="mi">12</span> <span class="p">}</span>
<span class="kd">var</span> <span class="nx">obj3</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;  &#39;</span><span class="o">:</span> <span class="mi">2</span> <span class="p">}</span>
<span class="kd">var</span> <span class="nx">obj4</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;👍&#39;</span><span class="o">:</span> <span class="s1">&#39;zan&#39;</span> <span class="p">}</span>


<span class="c1">// Object.keys(对象名)  获取对象中的 key名 组成的数组
</span><span class="c1"></span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj1</span><span class="p">)</span>  <span class="c1">// [&#34;&#34;] // 空串也是字符串，合法
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj2</span><span class="p">)</span>  <span class="c1">// [&#34;2&#34;, &#34;name&#34;, &#34;age&#34;]
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj3</span><span class="p">)</span>  <span class="c1">// [&#34;  &#34;]
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj4</span><span class="p">)</span>  <span class="c1">// [&#34;👍&#34;]
</span><span class="c1"></span>
<span class="c1">// 所以不论怎么写，key 都是字符串
</span></code></pre></td></tr></table>
</div>
</div><h4 id="属性名">属性名</h4>
<blockquote>
<p>每个 key 都是对象的属性名（property）</p>
</blockquote>
<h4 id="属性值">属性值</h4>
<blockquote>
<p>每个 value 都是对象的属性值</p>
</blockquote>
<p>​</p>
<h3 id="奇怪的属性名">奇怪的属性名</h3>
<p>所有属性名会自动变成字符串</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="mi">1</span><span class="o">:</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span>       <span class="c1">// &#34;1&#34;
</span><span class="c1"></span>  <span class="mf">3.2</span><span class="o">:</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span>     <span class="c1">// &#34;3.2&#34;
</span><span class="c1"></span>  <span class="mi">1</span><span class="nx">e2</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>    <span class="c1">// &#34;100&#34;
</span><span class="c1"></span>  <span class="mi">1</span><span class="nx">e</span><span class="o">-</span><span class="mi">2</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// &#34;0.01&#34;
</span><span class="c1"></span>  <span class="mf">.234</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// &#34;0.234&#34;
</span><span class="c1"></span>  <span class="mh">0xFF</span><span class="o">:</span> <span class="kc">true</span>    <span class="c1">// &#34;255&#34;
</span><span class="c1"></span><span class="p">};</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// [&#34;1&#34;, &#34;100&#34;, &#34;255&#34;, &#34;3.2&#34;, &#34;0.01&#34;, &#34;0.234&#34;]
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>JS 可能会自动换算「属性名」，所以如果不想被自动换算，给属性名加上「引号」即可解决</p>
</blockquote>
<h4 id="细节-1">细节</h4>
<ul>
<li><strong><code>Object.keys(obj)</code></strong> 可以得到 obj 的所有 key 组成的数组</li>
<li>这个 API 需要会使用</li>
</ul>
<h4 id="变量作属性名">「变量」作属性名</h4>
<p>如何用变量做属性名</p>
<ul>
<li>
<p>之前都是用<strong>常量</strong>做属性名（所有不是变量的都是常量）</p>
</li>
<li>
<p><strong><code>let p1 = 'name'</code></strong></p>
</li>
<li>
<p><strong><code>let obj = { p1 : 'sam'}</code></strong> 这样写，属性名为 <strong><code>'p1'</code></strong></p>
</li>
<li>
<p><strong><code>let obj = { [p1] : 'sam' }</code></strong> 这样写，属性名为 <strong><code>'name'</code></strong>    （ ES 6 ）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">aa</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>  <span class="c1">// 想用变量a作为属性名
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">aa</span><span class="o">:</span> <span class="mi">1111</span> <span class="p">}</span>     <span class="c1">// {aa: 1111}
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;aa&#39;</span><span class="o">:</span> <span class="mi">1111</span> <span class="p">}</span>   <span class="c1">// {aa: 1111}
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="p">[</span><span class="nx">aa</span><span class="p">]</span><span class="o">:</span> <span class="mi">1111</span> <span class="p">}</span>   <span class="c1">// {xxx: 1111}  // ES6之后
</span></code></pre></td></tr></table>
</div>
</div><p>ES6之前，实现变量作属性名  ↓↓ ，需两行代码实现。ES6之后一行 ↑↑ 即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">aa</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span> 
<span class="nx">obj</span><span class="p">[</span><span class="nx">aa</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1111</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// {xxx: 1111}
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>对比</p>
<ul>
<li>
<p>不加 <i class="far fa-square fa-fw"></i> 的属性名会自动变成字符串</p>
</li>
<li>
<p>加了 <i class="far fa-square fa-fw"></i> 则会当做变量求值</p>
</li>
<li>
<p>值如果不是字符串，则会自动变成字符串</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">[</span><span class="mi">1</span><span class="o">+</span><span class="mi">2</span><span class="o">+</span><span class="mi">3</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">:</span> <span class="s1">&#39;十&#39;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// { 10: &#34;十&#34; }
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// [ &#34;10&#34; ]
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h3 id="对象的隐藏属性原型-">对象的隐藏属性（原型 💡）</h3>
<p>隐藏属性</p>
<ul>
<li>JS 中，每一个对象 都有一个 隐藏属性  <code>__proto__</code></li>
<li>这个隐藏属性，储存着其 <strong>共有属性组成的对象</strong>的地址</li>
<li>这个<strong>共有属性组成的对象</strong>，叫做原型</li>
<li>也就是说，隐藏属性 储存着 原型的地址
<ul>
<li><code>__proto__</code> 存储了一个地址，这个地址所代表的内存空间中的对象，叫做原型 / 共有属性</li>
</ul>
</li>
</ul>
<p>代码示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="c1">// 居然不报错
</span></code></pre></td></tr></table>
</div>
</div><p>因为 obj 的隐藏属性<strong>对应的对象</strong>（原型 / 共有属性）上有 toString()</p>
<p>​</p>
<blockquote>
<p>举个栗子：什么叫共有属性</p>
<ul>
<li>将共有的属性，提取出来单独存储成一个对象。最大的好处，就是<strong>省内存</strong></li>
<li>每次声明一个 chinese 时，无需重复写入：国籍、肤色、发色 … 等 chinese 公共的属性，直接用一个<strong>特定属性</strong>（–proto–），<strong>存储</strong>共有属性所在的<strong>内存地址</strong>即可</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">chinese1</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;小兰&#39;</span> <span class="p">}</span>
<span class="kd">var</span> <span class="nx">chinese2</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;小红&#39;</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<h3 id="超纲知识">超纲知识</h3>
<blockquote>
<p>前面提到，对象中所有的 key 都是字符串</p>
</blockquote>
<blockquote>
<p>实际上，ES 6 中稍微做了调整：<strong>除了字符串，symbol 也能做属性名</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">Symbol</span><span class="p">()</span>
<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这有什么用呢？</p>
<ul>
<li>目前，屁用都没用，很久很久以后可能会有用（方方从没用过）</li>
<li>在学习「迭代」时会用到（但前端不流行迭代，所以根本没机会用）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="增删改查">增删改查</h2>
<blockquote>
<p>「增删改查」对象的属性</p>
</blockquote>
<h3 id="删除属性">删除属性</h3>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete" target="_blank" rel="noopener noreffer">delete 操作符</a>：用于删除对象的某个属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">delete</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">xxx</span>
<span class="k">delete</span> <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;xxx&#39;</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>作用：删除 obj 的 xxx 属性</li>
<li>请区分「属性值为 undefined」和「不含属性名」</li>
</ul>
<h4 id="不含属性名">不含属性名</h4>
<p>直接删除属性名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">}</span>
<span class="k">delete</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">name</span>  <span class="c1">// 或 delete obj[&#39;name&#39;]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// {age: 18}
</span><span class="c1">// console.log(obj.name) // undefined
</span></code></pre></td></tr></table>
</div>
</div><p>判断是否删除成功</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;xxx&#39;</span> <span class="k">in</span> <span class="nx">obj</span> <span class="o">===</span> <span class="kc">false</span>   <span class="c1">// 返回 true 说明该属性名已被删除 
</span><span class="c1"></span><span class="err">（</span><span class="nx">不能省略引号</span><span class="err">）</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="含有属性名但是值为-undefined">含有属性名，但是值为 undefined</h4>
<p>仅删除属性值，保留属性名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;xxx&#39;</span> <span class="k">in</span> <span class="nx">obj</span> <span class="o">&amp;&amp;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">xxx</span> <span class="o">===</span> <span class="kc">undefined</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">}</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="kc">undefined</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// {name: undefined, age: 18}
</span><span class="c1">// console.log(obj.name) // undefined
</span></code></pre></td></tr></table>
</div>
</div><h4 id="注意-objxxx--undefined">注意 obj.xxx === undefined</h4>
<ul>
<li>
<p><code>obj.xxx === undefined</code> 不能断定 &lsquo;xxx&rsquo; 是否为 obj 的属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
<span class="kd">let</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="kc">undefined</span><span class="p">}</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">x</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="c1">// true
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">x</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="c1">// true   所以说 这句话无法判断出 x 到底是不是 obj 的属性
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>用 in 和 hasOwnProperty 可以判断</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
<span class="kd">let</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="kc">undefined</span><span class="p">}</span>
<span class="s1">&#39;x&#39;</span> <span class="k">in</span> <span class="nx">obj</span>   <span class="c1">// false
</span><span class="c1"></span><span class="s1">&#39;x&#39;</span> <span class="k">in</span> <span class="nx">obj2</span>  <span class="c1">// true
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">)</span>    <span class="c1">// false
</span><span class="c1"></span><span class="nx">obj2</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">)</span>   <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="类比">类比</h4>
<ul>
<li>你有没有卫生纸？</li>
<li>A: 没有 // 不含属性名</li>
<li>B: 有，但是没带 // 含有属性名，但是值为 undefined</li>
</ul>
<blockquote>
<h4 id="程序员就是这么严谨">程序员就是这么严谨</h4>
<ul>
<li>「没有」和「undefined」是两个概念</li>
<li>没有就是没有，undefined 就是 undefined</li>
<li>绝不含糊</li>
<li>需要细心，发现细微的区别</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="查看所有属性读属性">查看所有属性（读属性）</h3>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="查看自身所有属性">查看自身所有属性</h4>
<blockquote>
<p>无法打印【共有属性 <code>__proto__</code>】</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>     <span class="c1">// [&#34;name&#34;, &#34;age&#34;]
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>   <span class="c1">// [&#34;sam&#34;, 18] 
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">entries</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// [Array(2), Array(2)]  =&gt; 0:[&#34;name&#34;, &#34;sam&#34;]  1:[&#34;age&#34;, 18]
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="查看自身共有属性">查看自身+共有属性</h4>
<blockquote>
<p>dir 指以目录的形式，可以查看到【共有属性 <code>__proto__</code>】</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>   <span class="c1">// 查看 obj内容 及 共有属性 【推荐】
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span>      
<span class="c1">// 也可以直接打印共有属性（但不推荐此法，因为隐藏属性的命名是不固定的，不同浏览器可能规定不同）
</span></code></pre></td></tr></table>
</div>
</div><p>或者自己依次用 Object.keys 打印出 <code>obj.__proto__</code></p>
<h4 id="判断一个属性是自身的还是共有的">判断一个属性是自身的还是共有的</h4>
<blockquote>
<p>判断一个属性是否是某个对象的属性，可以用 <code>in</code>  ，但是 in 无法区分是自身的还是共有的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s2">&#34;name&#34;</span> <span class="k">in</span> <span class="nx">obj</span>      <span class="c1">// true
</span><span class="c1"></span><span class="s2">&#34;toString&#34;</span> <span class="k">in</span> <span class="nx">obj</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;toString&#39;</span><span class="p">)</span>   <span class="c1">// false
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span>       <span class="c1">// true
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;age&#39;</span><span class="p">)</span>        <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="原型">原型</h3>
<blockquote>
<p>原型，就是隐藏属性 所指向的对象</p>
</blockquote>
<h4 id="每个对象都有原型">每个对象都有原型</h4>
<ul>
<li>原型里存着对象的共有属性</li>
<li>比如 obj 的原型就是一个对象
<ul>
<li><code>obj.__proto__ </code>存着这个原型对象的地址</li>
<li>这个原型对象里有 toString / constructor / valueOf 等属性</li>
</ul>
</li>
</ul>
<h4 id="对象的原型也是对象">对象的原型也是对象</h4>
<blockquote>
<p>既然每个对象都有原型，且原型也是对象，那么可以推出：原型上也有原型</p>
</blockquote>
<ul>
<li>所以对象的原型上也有原型</li>
<li>obj = { } 空对象的原型即为所有对象的原型</li>
<li>这个原型包含所有对象的共有属性，是<strong>对象的根</strong></li>
<li>这个原型也有原型，<strong>是 null</strong>     【/nʌl/】
<ul>
<li>原型为 null 的对象，就是对象的根</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">)</span>  <span class="c1">// 原型对象（根对象）
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">)</span>   <span class="c1">// null  原型上的原型
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="查看属性">查看属性</h3>
<h4 id="两种方法查看属性">两种方法查看属性</h4>
<ul>
<li>
<p>**中括号语法：obj[&lsquo;key&rsquo;] **</p>
</li>
<li>
<p>点语法：obj.key</p>
</li>
<li>
<p>坑新人语法：obj[key]      // 中括号里是变量，【变量 key】 值一般不等于【字符串 &lsquo;key&rsquo;】</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">}</span>
<span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>   <span class="c1">// &#39;sam&#39;
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">name</span>      <span class="c1">// &#39;sam&#39;
</span><span class="c1"></span><span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>     <span class="c1">// undefined
</span><span class="c1"></span>    
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>   <span class="c1">// &#34;&#34;
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;age&#39;</span>
<span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>    <span class="c1">// 18   // 等同于 obj[&#39;age&#39;]
</span></code></pre></td></tr></table>
</div>
</div><p>变态</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;na&#39;</span><span class="o">+</span><span class="s1">&#39;me&#39;</span><span class="p">]</span>   <span class="c1">// &#39;sam&#39;
</span><span class="c1"></span>    
<span class="nx">obj</span><span class="p">[</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)]</span>   
<span class="c1">// name   // 先执行log命令，打印内容
</span><span class="c1">// undefined   // log 函数的返回值为 undefined，相当于执行 obj[undefined] =&gt; undefined
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h4 id="请优先使用中括号语法">请优先使用中括号语法</h4>
<ul>
<li>【点语法】会误导你，让你以为 key 不是字符串</li>
<li>等你确定不会弄混两种语法，再改用点语法</li>
</ul>
<blockquote>
<p>obj.name 等价于 obj[&lsquo;name&rsquo;]
obj.name 不等价于 obj[name]</p>
<p>简单来说，obj.name 这里的 <strong>name 是字符串，而不是变量</strong></p>
</blockquote>
<blockquote>
<p>let name = &lsquo;sam&rsquo;
此时 obj[name] 等价于 obj[&lsquo;sam&rsquo;] ，而不是 obj[&lsquo;name&rsquo;] 和 obj.name</p>
</blockquote>
<p>​</p>
<h4 id="考题">考题</h4>
<blockquote>
<p>区分变量<code> name</code> 和 常量字符串 <code>'name'</code></p>
</blockquote>
<p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">list</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;gender&#39;</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span><span class="mi">18</span><span class="p">,</span> <span class="nx">gender</span><span class="o">:</span><span class="s1">&#39;man&#39;</span><span class="p">}</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="o">???</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 使得 person 的所有属性被打印出来
</span></code></pre></td></tr></table>
</div>
</div><p>选项</p>
<ol>
<li>console.log(person.name)      ✘          // sam sam sam</li>
<li><strong>console.log(person[name])</strong>    ✔     // sam 18 man</li>
</ol>
<blockquote>
<p>区分 name 和 &lsquo;name&rsquo; 为什么这么重要</p>
<ul>
<li>因为如果你现在不搞清楚，那么你在学 Vue 的时候，会更加迷惑</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="修改或增加属性写属性">修改或增加属性（写属性）</h3>
<h4 id="直接赋值">直接赋值</h4>
<blockquote>
<p>直接赋值，name 属性已存在，就相当于修改属性值；name 属性不存在，就会新增这个属性，值为 sam</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">}</span> <span class="c1">// name 是字符串
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span> <span class="c1">// name 是字符串 ✔
</span><span class="c1"></span><span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span>  <span class="c1">// ✔
</span><span class="c1"></span>
<span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span> <span class="c1">// 错，因name为变量，值不一定等于&#39;name&#39;
</span><span class="c1"></span>
<span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;na&#39;</span><span class="o">+</span><span class="s1">&#39;me&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span>  <span class="c1">// ✔
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">key</span> <span class="o">=</span> <span class="s1">&#39;name&#39;</span><span class="p">;</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span>
<span class="kd">let</span> <span class="nx">key</span> <span class="o">=</span> <span class="s1">&#39;name&#39;</span><span class="p">;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">key</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span> <span class="c1">// 错，因为obj.key等价于obj[&#39;key&#39;]，相当于给obj增加了key属性 值为sam
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="批量赋值">批量赋值</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">}</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;123&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span> <span class="nx">gender</span><span class="o">:</span> <span class="s1">&#39;man&#39;</span><span class="p">})</span> 
<span class="c1">// name 属性已存在，就相当于修改属性值；name 属性不存在，就会新增这个属性，值为&#39;123&#39;
</span><span class="c1"></span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// {name:&#39;123&#39;, age: 18, gender: &#39;man&#39;}
</span></code></pre></td></tr></table>
</div>
</div><p>assign ：赋值的意思</p>
<p>Object.assign() ：是 ES6 新出的 API</p>
<p>​</p>
<p>​</p>
<h3 id="修改或增加共有属性">修改或增加共有属性</h3>
<blockquote>
<p>JS 特性：</p>
<ul>
<li>读取时，可以读取到（原型上的）共有属性。</li>
<li>写入时，只写在自己身上，不会影响（原型）共有属性</li>
</ul>
</blockquote>
<h4 id="无法通过自身修改或增加共有属性">无法通过自身修改或增加共有属性</h4>
<blockquote>
<p>原型上的属性，无法通过自身直接修改</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{},</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1">// 共有 toString 方法
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>    <span class="c1">// 只会在改 obj 自身属性，不会覆盖共用的 toString 方法
</span><span class="c1"></span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">toString</span>     <span class="c1">// &#39;xxx&#39;
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>   <span class="c1">// 报错 obj.toString is not a function
</span><span class="c1"></span>
<span class="nx">obj2</span><span class="p">.</span><span class="nx">toString</span>    <span class="c1">// ƒ toString() { [native code] }   还是在原型上的方法
</span><span class="c1"></span><span class="nx">obj2</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>  <span class="c1">// &#34;[object Object]&#34;
</span></code></pre></td></tr></table>
</div>
</div><h4 id="偏要修改或增加原型上的属性">偏要修改或增加原型上的属性</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span> <span class="c1">// 不推荐用 __proto__
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span> 
<span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">toString</span><span class="p">)</span>

<span class="c1">// obj.__proto__ 存的地址，等价于 window.Object.prototype 存的地址
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">window</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>这是 JS 非常危险的特型，一旦修改，会使得原型上的属性非常不可信 —— JS 的脆弱性</li>
<li><strong>一般来说，不要修改原型</strong>，会引起很多问题：代码崩溃/异常…</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="修改隐藏属性">修改隐藏属性</h3>
<h4 id="不推荐使用--__proto__-修改原型">不推荐使用 <code> __proto__</code> 修改原型</h4>
<p>例1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;sam&#39;</span><span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>   <span class="c1">// {name:&#34;sam&#34;, __proto__: Object}
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="kc">null</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>   <span class="c1">// {name:&#34;sam&#34;}    没有proto原型了，变成非常纯净的对象，不能调用任何功能
</span></code></pre></td></tr></table>
</div>
</div><p>例2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;sam&#39;</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">person2</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;jack&#39;</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">common</span> <span class="o">=</span> <span class="p">{</span><span class="nx">kind</span><span class="o">:</span> <span class="s1">&#39;human&#39;</span><span class="p">,</span> <span class="s1">&#39;国籍&#39;</span><span class="o">:</span> <span class="s1">&#39;中国&#39;</span><span class="err">，</span> <span class="nx">hairColor</span><span class="o">:</span> <span class="s1">&#39;black&#39;</span><span class="p">}</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">common</span>
<span class="nx">person2</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">common</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>上述，使用 <code> __proto__</code> 直接修改原型，不推荐，性能非常低</p>
</blockquote>
<p>​</p>
<h4 id="推荐使用-objectcreate-修改对象的原型">推荐使用 Object.create 修改对象的原型</h4>
<blockquote>
<p>规范的修改对象的原型，使用 Object.create  【功能：用于指定原型】</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;sam&#39;</span><span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// { __proto__:{name:&#39;sam&#39;} } 
</span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>用法 ↓</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">common</span> <span class="o">=</span> <span class="p">{</span><span class="nx">kind</span><span class="o">:</span> <span class="s1">&#39;human&#39;</span><span class="p">,</span> <span class="s1">&#39;国籍&#39;</span><span class="o">:</span> <span class="s1">&#39;中国&#39;</span><span class="err">，</span> <span class="nx">hairColor</span><span class="o">:</span> <span class="s1">&#39;black&#39;</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">common</span><span class="p">)</span>  <span class="c1">// 以common为原型对象，创建obj
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span> <span class="c1">// 点方法，挨个添加属性，或 批量修改/添加属性 Object.assign(obj,{ ... })
</span><span class="c1"></span><span class="p">...</span> 
</code></pre></td></tr></table>
</div>
</div><p>Object.create()  第二个参数，写法比较麻烦</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">common</span><span class="p">,</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="p">{</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span> <span class="p">}</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>  <span class="c1">// {name:&#39;sam&#39;, __proto__: Object}  =&gt; 
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>规范的写法：大概是，要改就一开始就改；别后来再改，如<code>person.__proto__ = common</code>  影响性能</p>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="总结">总结</h2>
<h3 id="删">删</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">delete</span> <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
<span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">obj</span> <span class="c1">// false  // in 用于判断某个对象中是否含这个属性，缺点：无法区分是自身的，还是原型上共有的
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span>  <span class="c1">// false  // 只有对象自身含有这个属性，才会返回 true
</span></code></pre></td></tr></table>
</div>
</div><h3 id="查">查</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// 目录形式，详细
</span><span class="c1"></span><span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="c1">// 记住这里的 name 是字符串
</span><span class="c1"></span><span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>  <span class="c1">// 记住这里的 name 是变量
</span></code></pre></td></tr></table>
</div>
</div><h3 id="改">改</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">改自身</span> <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;jack&#39;</span>
<span class="nx">批量改自身</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span><span class="nx">age</span><span class="o">:</span><span class="mi">18</span><span class="p">,</span> <span class="p">...})</span>
                          
<span class="nx">改某个共有属性</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">[</span><span class="s1">&#39;toString&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>  <span class="c1">// 强烈不推荐
</span><span class="c1"></span><span class="nx">改某个共有属性</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="s1">&#39;toString&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>

<span class="nx">换原型</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">common</span>  <span class="c1">// 强烈不推荐
</span><span class="c1"></span><span class="nx">换原型</span> <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">common</span><span class="p">)</span>

<span class="c1">// 注：所有 proto 代码都是强烈不推荐写的。学习时可以用用，但是工作中不要用
</span></code></pre></td></tr></table>
</div>
</div><h3 id="增">增</h3>
<p>基本同上，已有属性则改；没有属性则增。</p>
<blockquote>
<ul>
<li>查：属于读，可以读到原型链</li>
<li>改 和 增：属于写，只能改自身，不能改到原型</li>
</ul>
</blockquote>]]></description>
</item></channel>
</rss>

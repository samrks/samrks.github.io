<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>排序算法 - 标签 - Sam&#39;s Garage</title>
        <link>http://samrks.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
        <description>排序算法 - 标签 - Sam&#39;s Garage</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ryuukousen@gmail.com (Sam)</managingEditor>
            <webMaster>ryuukousen@gmail.com (Sam)</webMaster><lastBuildDate>Fri, 16 Oct 2020 15:18:26 &#43;0800</lastBuildDate><atom:link href="http://samrks.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/" rel="self" type="application/rss+xml" /><item>
    <title>排序算法</title>
    <link>http://samrks.github.io/algorithm-sort/</link>
    <pubDate>Fri, 16 Oct 2020 15:18:26 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/algorithm-sort/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="前言">前言</h2>
<blockquote>
<p>算法中最简单的就是排序算法</p>
</blockquote>
<p>​</p>
<h2 id="复习代码">复习代码</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">sort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">){</span>
    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span>
    <span class="kd">let</span> <span class="nx">min</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span>
    <span class="nx">numbers</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">[</span><span class="nx">min</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">sort</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">)</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="k">return</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">?</span> <span class="nx">numbers</span> <span class="o">:</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">reverse</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>一句话总结：
每次找到最小的数放前面，然后对后面的数做同样的事情</p>
</blockquote>
<p>​</p>
<h2 id="minindex">minIndex</h2>
<blockquote>
<p>用于找出数组中最小数字的下标</p>
</blockquote>
<h3 id="你永远都有两种写法">你永远都有两种写法</h3>
<ul>
<li>「递归」和「循环」</li>
</ul>
<h3 id="目前的-minindex-递归算法">目前的 minIndex （递归算法）</h3>
<blockquote>
<p>通过 min 函数的「递归」算法，来获取到最小值，从而找到下标</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">minIndex</span><span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">min</span><span class="p">(</span><span class="nx">numbers</span><span class="p">))</span> 
<span class="kd">let</span> <span class="nx">min</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">min</span><span class="p">(</span> <span class="p">[</span><span class="nx">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">min</span><span class="p">(</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span> <span class="p">]</span> <span class="p">)</span>    <span class="c1">// 递归
</span><span class="c1"></span>  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="k">return</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">?</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">:</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="缺点">缺点</h4>
<ul>
<li>看着就繁琐（递归中用了很多括号、还引用了额外的帮助函数min ）</li>
<li>重写吧</li>
</ul>
<h3 id="重写-minindex--循环算法">重写 minIndex 🔔 （循环算法）</h3>
<blockquote>
<p>用循环</p>
</blockquote>
<p>思路：【 index 】作为一个标志，始终代表着「数组 numbers」中的「最小值」的【下标】</p>
<ul>
<li>
<p>第一步，假设下标为 0 的元素，是 numbers 中的最小值，也就是 index = 0</p>
</li>
<li>
<p>把下标 1 的元素与下标 0 的元素进行比较，如果下标 1 的元素，比下标 0 的元素还小，也就是下标 1 是最小值。而 index 始终表示最小值的下标，所以 index 需重新赋值为 1</p>
</li>
<li>
<p>👆这种方法叫【贪婪法】：只要判断是比自己小的值，就认为是最小的值
（俗称「渣男法」：只要看到一个女生比现在的女朋友漂亮，就要换女朋友）</p>
</li>
<li>
<p>逐步分析 👇</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">minIndex</span><span class="p">([</span><span class="mi">9</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>
<span class="p">=&gt;</span> <span class="p">(</span><span class="nx">假设9</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="nx">最小</span><span class="p">)</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span>
<span class="p">=&gt;</span> <span class="p">(</span><span class="mi">9</span><span class="nx">遇到6</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>  <span class="o">-</span>  <span class="mi">9</span><span class="o">&gt;</span><span class="mi">6</span><span class="p">)</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">1</span>
<span class="p">=&gt;</span> <span class="p">(</span><span class="mi">6</span><span class="nx">遇到8</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>  <span class="o">-</span>  <span class="mi">8</span><span class="o">&gt;</span><span class="mi">6</span><span class="p">)</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">1</span>
<span class="p">=&gt;</span> <span class="p">(</span><span class="mi">6</span><span class="nx">遇到13</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">-</span> <span class="mi">13</span><span class="o">&gt;</span><span class="mi">6</span><span class="p">)</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">1</span>
<span class="p">=&gt;</span> <span class="p">(</span><span class="mi">6</span><span class="nx">遇到5</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>  <span class="o">-</span>  <span class="mi">5</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">)</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">4</span>
<span class="p">=&gt;</span> <span class="p">(</span><span class="mi">5</span><span class="nx">遇到4</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span>  <span class="o">-</span>  <span class="mi">4</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">)</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">5</span>
<span class="p">=&gt;</span> <span class="nx">index</span> <span class="nx">变化过程</span> <span class="mi">0</span><span class="err">→</span><span class="mi">1</span><span class="err">→</span><span class="mi">4</span><span class="err">→</span><span class="mi">5</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="源代码循环实现minindex-">源代码（循环实现minIndex） 👇</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">1</span><span class="nx">et</span> <span class="nx">minIndex</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span> 
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
    <span class="k">if</span><span class="p">(</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span> <span class="p">){</span>  
      <span class="nx">index</span> <span class="o">=</span> <span class="nx">i</span> 
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">index</span>
<span class="p">}</span>
<span class="nx">minIndex</span><span class="p">([</span><span class="mi">9</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>index 表示当前最小值下标，已经为 0，所以循环体中，应该是从下标为 1 的元素开始，和下标为 0 的元素进行比较大小</li>
<li>全部遍历完，返回最小值下标</li>
</ul>
<p>​</p>
<h4 id="分析">分析</h4>
<ul>
<li>一目了然，一听就会，一写就错</li>
<li>写错，就记得多测试几次</li>
</ul>
<p>​</p>
<h2 id="启发-">启发 💡</h2>
<blockquote>
<p>是不是所有的「递归」都可以写成「循环」 ？？</p>
</blockquote>
<blockquote>
<p>答：是的</p>
</blockquote>
<ul>
<li><strong>所有的递归，都可以改写成循环</strong></li>
<li>这是已经被证明的事情</li>
<li>如果觉得递归不好理解，都可以改写成循环，一般来说循环会更好理解，但循环写起来会更麻烦、代码量更大</li>
</ul>
<h2 id="选择排序-select-sort--">选择排序 select sort  ⭕️</h2>
<blockquote>
<p>选择排序两种思路</p>
<ol>
<li>递归</li>
<li>循环</li>
</ol>
</blockquote>
<blockquote>
<p>改写 sort</p>
</blockquote>
<p></p>
<h3 id="递归写法">递归写法</h3>
<blockquote>
<p>复习一下  |  递归思路：</p>
<ul>
<li>长度大于2，就找最小值放到前面 + 并对后面所有值再次 sort</li>
<li>长度等于2，就直接判断大小 / 交换两个元素位置，然后返回数组（中止条件）</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">minIndex</span><span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">min</span><span class="p">(</span><span class="nx">numbers</span><span class="p">))</span> 
<span class="kd">let</span> <span class="nx">min</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`numbers: </span><span class="si">${</span><span class="nx">numbers</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
  <span class="k">return</span> <span class="nx">min</span><span class="p">(</span> <span class="p">[</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">min</span><span class="p">(</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span> <span class="p">]</span> <span class="p">)</span>   <span class="c1">// 递归
</span><span class="c1"></span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">sort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> 
  <span class="k">if</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">){</span> 
    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> 
    <span class="kd">let</span> <span class="nx">min</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span> 
    <span class="nx">numbers</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> 
    <span class="k">return</span> <span class="p">[</span><span class="nx">min</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">sort</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">)</span>    <span class="c1">// 递归
</span><span class="c1"></span>  <span class="p">}</span><span class="k">else</span><span class="p">{</span> 
    <span class="k">return</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">?</span> <span class="nx">numbers</span> <span class="o">:</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">reverse</span><span class="p">()</span>  
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="循环实现分析">循环实现分析</h3>
<blockquote>
<p>思路不变：</p>
<ul>
<li>每次找到最小的数放前面，<del>然后对后面的数做同样的事情</del></li>
<li>然后 i++</li>
</ul>
</blockquote>
<blockquote>
<p>「循环的每次找到最小的数，放前面 —— 选择排序」这个思路比较容易想到，但是代码写起来却比较困难</p>
</blockquote>
<p>尝试写循环代码 👇</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">1</span><span class="nx">et</span> <span class="nx">minIndex</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span> 
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
    <span class="k">if</span><span class="p">(</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span> <span class="p">){</span>  
      <span class="nx">index</span> <span class="o">=</span> <span class="nx">i</span> 
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">index</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">sort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;???</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  
    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span>
    <span class="c1">// index 是当前最小数的下标，i 表示当前下标
</span><span class="c1"></span>    <span class="c1">// index 对应的数应该放到 i 处（交换 index 和 i 的元素，这就是👇swap需要实现的）
</span><span class="c1"></span>    <span class="nx">swap</span><span class="p">(</span><span class="nx">numbers</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="c1">// swap 还没实现
</span><span class="c1"></span>    
    <span class="c1">// index、i 都是 index 的意思，建议 i 改名
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="分析-1">分析</h4>
<ul>
<li>怎么知道 <code>i &lt; ???</code> 处应该写什么（结束条件是什么）</li>
<li>提前写好 minIndex 能有效简化问题</li>
<li>用 swap 占位能有效简化问题（虽然还不知道swap应该实现的代码，但是先写个占位符，有助于分析思路）</li>
</ul>
<p>​</p>
<h4 id="一实现-swap">一、实现 swap</h4>
<blockquote>
<p>实现交换 index 和 i 的元素</p>
</blockquote>
<p>1、常规方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">swap</span> <span class="o">=</span> <span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
  <span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">array</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
  <span class="nx">array</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">temp</span>
<span class="p">}</span>
<span class="nx">swap</span><span class="p">(</span><span class="nx">numbers</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>2、JS 解构赋值（析构赋值）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">[</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">]</span>
<span class="c1">// a =&gt; 2
</span><span class="c1">// b =&gt; 1
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h5 id="错误的实现-swap">错误的实现 swap</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">swap</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> 
  <span class="kd">let</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">a</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="nx">b</span>
  <span class="nx">b</span> <span class="o">=</span> <span class="nx">temp</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span><span class="mi">200</span><span class="p">,</span><span class="mi">300</span><span class="p">]</span>  <span class="c1">// 能否实现交换元素位置呢 ？？
</span><span class="c1"></span><span class="nx">swap</span><span class="p">(</span><span class="nx">numbers</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="c1">// [100,200,300]  未实现交换位置
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>你会发现，上述 numbers[1] 和 numbers[2] 的值原封不动</p>
</blockquote>
<p>分析：</p>
<ul>
<li>如果 a / b 是简单类型，传参的时候就会<strong>复制值</strong>
<ul>
<li>numbers[1] 传给 a，相当于 a 复制了 200 这个值，a 与 numbers 并没有连带关系。 b 同理</li>
<li>相当于只是把 a(200) 和 b(300) 交换了值，但这一切与 numbers  并没有关系</li>
</ul>
</li>
<li>而前面常规方法中 numbers 是(数组)对象，传参时是<strong>复制地址</strong>
<ul>
<li><code>let swap = (array, i, j) =&gt; {...}</code>  这里的 array 形参是接收一个数组实参，也就是接收一个对象，对象传递时只是复制了地址，所以 array 形参始终代表了传递进来的实参数组 numbers</li>
<li>所以 array[i] 和 array[j] 交换位置，也就等同于控制 numbers 中对应元素交换了位置</li>
</ul>
</li>
</ul>
<ul>
<li>
<p>这就是【传值 V.S. 传址】的区别</p>
<p>内存图相关知识：所有放在 stack 中的都是直接复制值，放在 heap 里面只能复制地址</p>
</li>
</ul>
<p>​</p>
<h4 id="二分析-i---应该写什么">二、分析 i &lt; ??? 应该写什么</h4>
<blockquote>
<p>怎么知道 i &lt; ??? 处应该写什么</p>
</blockquote>
<p>暴力分析（逐步拆解）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">sort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> 
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;???</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> 
    <span class="nx">swap</span><span class="p">(</span><span class="nx">number</span><span class="err">，</span><span class="nx">index</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>假设 numbers 的长度为 n = 4 👇</p>
<p></p>
<ul>
<li>第一次循环 i = 0，当前遍历的元素下标为 0 ，需要进行比较的元素、其下标 index 的取值范围只能是 1\2\3</li>
<li>第二次循环 i = 1，当前遍历的元素下标为 1 ，需要进行比较的元素、其下标 index 的取值范围只能是 2\3</li>
<li>第三次循环 i = 2，当前遍历的元素下标为 2 ，需要进行比较的元素、其下标 index 的取值范围只能是 3</li>
<li>第四次循环 i = 3，当前遍历的元素下标为 3 ，需要进行比较的元素、其下标 index 无法取值，所以 i 不能等于 3，一定要 i = 3 和 一个空数组进行比较也可以，但多此一举</li>
</ul>
<blockquote>
<p>结论：i 的取值为 0\1\2  【 i 能取到的最大值小于 3 ，也就是  i &lt; numbers 的长度减 1 】</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">){...}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h4 id="发现-2-个问题">发现 2 个问题</h4>
<h5 id="1minindex-查找范围有问题">1、minIndex 查找范围有问题</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>这句话有问题，如果上次循环已经找到了第一个最小的数字，那么之后找最小数字的时候，就可以忽略第一个</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">)</span>  <span class="o">+</span> <span class="nx">i</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="分析-2">👆分析</h5>
<blockquote>
<p>下标 i 、下标 index 对应元素的交换经过</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">  <span class="p">[</span><span class="mi">20</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span>
<span class="p">=&gt;</span> <span class="nx">当前i</span><span class="o">=</span><span class="mi">0</span> <span class="p">,</span> <span class="nx">minIndex</span><span class="p">([</span><span class="mi">20</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">10</span><span class="p">])=&gt;</span><span class="nx">最小值下标index</span><span class="o">=</span><span class="mi">3</span> <span class="p">,</span> <span class="mi">0</span><span class="nx">与3交换位置</span><span class="p">=&gt;[</span><span class="mi">10</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">20</span><span class="p">]</span> <span class="p">,</span> <span class="mi">10</span><span class="nx">位置钉住</span>
<span class="p">=&gt;</span> <span class="nx">当前i</span><span class="o">=</span><span class="mi">1</span> <span class="p">,</span> <span class="nx">minIndex</span><span class="p">([</span><span class="nx">xx</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">20</span><span class="p">])=&gt;</span><span class="nx">最小值下标index</span><span class="o">=</span><span class="mi">3</span> <span class="p">,</span> <span class="mi">1</span><span class="nx">与3交换位置</span><span class="p">=&gt;[</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="p">]</span> <span class="p">,</span> <span class="mi">10</span><span class="o">/</span><span class="mi">20</span><span class="nx">位置钉住</span>
<span class="p">=&gt;</span> <span class="nx">当前i</span><span class="o">=</span><span class="mi">2</span> <span class="p">,</span> <span class="nx">minIndex</span><span class="p">([</span><span class="nx">xx</span><span class="p">,</span><span class="nx">xx</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="p">])=&gt;</span><span class="nx">最小值下标index</span><span class="o">=</span><span class="mi">2</span> <span class="nx">就是当前元素</span> <span class="nx">i</span><span class="err">，</span><span class="nx">无需交换位置</span>
<span class="p">=&gt;</span> <span class="err">（</span><span class="nx">结束</span><span class="err">）</span><span class="nx">i不需要再取3</span><span class="err">，</span><span class="nx">因为上一步已经将最后两个元素进行比较</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>所以说，每一轮 minIndex 的元素，都需要忽略前一个元素，也就是👇</p>
</blockquote>
<ul>
<li>
<p>当 i = 0，需要从 [20, 40, 30, 10] 中找出最小值，忽略 0 个 👉 [10, 40, 30, 20]</p>
</li>
<li>
<p>当 i = 1，需要从 [xx, 40, 30, 20] 中找出最小值，忽略 1 个 👉 [10, 20, 30, 40]</p>
</li>
<li>
<p>当 i = 2，需要从 [xx, xx, 30, 40] 中找出最小值，忽略 2 个 👉 [10, 20, 30, 40]</p>
<p></p>
</li>
</ul>
<blockquote>
<p>综上，发现规律：<strong>i 等于 N，就需要忽略前面 N 个元素</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">所以</span> <span class="p">=&gt;</span>  <span class="nx">minIndex</span><span class="p">(</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">)</span> 
</code></pre></td></tr></table>
</div>
</div><h5 id="2为什么要-i">2、为什么要 +i</h5>
<blockquote>
<ul>
<li>
<p>如果不加 i ， 那么 index 的取值计算，每次都是从 0 开始</p>
</li>
<li>
<p>因为每轮都切掉前面一个元素，导致下标数值发生变化</p>
</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">当</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="err">，</span><span class="nx">忽略0个</span><span class="err">，</span><span class="nx">从</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span> <span class="nx">中找出最小值10</span><span class="o">/</span><span class="nx">下标为</span><span class="err">【</span><span class="mi">3</span><span class="err">】，</span><span class="nx">实际在</span><span class="p">[</span><span class="mi">20</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span><span class="nx">对应下标仍为</span><span class="err">【</span><span class="mi">3</span><span class="err">】</span>
<span class="err">👉</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span>

<span class="nx">当</span> <span class="nx">i</span><span class="o">=</span><span class="mi">1</span><span class="err">，</span><span class="nx">忽略1个</span><span class="p">(</span><span class="nx">下标为0的元素</span><span class="p">)</span><span class="err">，</span><span class="nx">从</span><span class="p">[</span><span class="mi">40</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">20</span><span class="p">]</span><span class="nx">中找出最小值20</span><span class="o">/</span><span class="nx">下标为</span><span class="err">【</span><span class="mi">2</span><span class="err">】</span><span class="nx">实际在</span><span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">20</span><span class="p">]</span><span class="nx">对应下标应为</span><span class="err">【</span><span class="mi">3</span><span class="err">】</span>
<span class="err">👉</span><span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">]</span>

<span class="nx">当</span> <span class="nx">i</span><span class="o">=</span><span class="mi">2</span><span class="err">，</span><span class="nx">忽略2个</span><span class="p">(</span><span class="nx">下标为0</span><span class="o">/</span><span class="mi">1</span><span class="nx">的元素</span><span class="p">)</span><span class="err">，</span><span class="nx">从</span><span class="p">[</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="p">]</span><span class="nx">中找出最小值30</span><span class="o">/</span><span class="nx">下标为</span><span class="err">【</span><span class="mi">0</span><span class="err">】</span><span class="nx">实际在</span><span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="p">]</span><span class="nx">对应下标应为</span><span class="err">【</span><span class="mi">2</span><span class="err">】</span>
<span class="err">👉</span><span class="nx">不交换</span>
</code></pre></td></tr></table>
</div>
</div><p>得出规律</p>
<ul>
<li>i=0时，minIndex =&gt; 3，index =&gt; 3  👉 相当于 minIndex(3) + i(0) = index(3)</li>
<li>i=1时，minIndex =&gt; 2，index =&gt; 3  👉 相当于 minIndex(2) + i(1) = index(3)</li>
<li>i=2时，minIndex =&gt; 0，index =&gt; 2  👉 相当于 minIndex(0) + i(2) = index(2)</li>
</ul>
<blockquote>
<p>index = minIndex(…) + i</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 最终得出
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">)</span>  <span class="o">+</span> <span class="nx">i</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="再次分析-i-">再次分析 i&lt; ???</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">sort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> 
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;???</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">)</span>  <span class="o">+</span> <span class="nx">i</span> 
    <span class="nx">swap</span><span class="p">(</span><span class="nx">number</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>假设 numbers 的长度 n = 4</p>
<p></p>
<ul>
<li>i 等于 3 时，在 <code>minIndex(numbers.slice(3))</code>中， numbers 只剩 numbers[3]  也就是 numbers[i] 本身，只剩一个元素，无法再和其他元素进行比较大小了，也就不需要 minIndex 操作了，<strong>所以 i = 3 是无意义的</strong></li>
<li>所以 i 的取值从 0 开始，最大就到 2 为止</li>
<li><strong>结论</strong>：i 的取值范围是 i &lt; 3 ，也就是 i &lt; n-1</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="循环代码注释版">循环代码（注释版）</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">sort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`----`</span><span class="p">)</span> <span class="c1">// 这个log很精髓
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`i: </span><span class="si">${</span><span class="nx">i</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span> <span class="c1">// 打印i，知道这是第几次比较
</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span> <span class="o">+</span> <span class="nx">i</span> <span class="c1">// 找到最小值下标
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`index: </span><span class="si">${</span><span class="nx">index</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`min: </span><span class="si">${</span><span class="nx">numbers</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">!==</span> <span class="nx">i</span><span class="p">){</span>  <span class="c1">// 如果最小值下标index 与 i 不等，就交换二者位置，相等就什么也不做
</span><span class="c1"></span>      <span class="nx">swap</span><span class="p">(</span><span class="nx">numbers</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> 
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`swap </span><span class="si">${</span><span class="nx">index</span><span class="si">}</span><span class="sb">: </span><span class="si">${</span><span class="nx">i</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span> <span class="c1">// 打印出调换的 index 和 i
</span><span class="c1"></span>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`numbers: </span><span class="si">${</span><span class="nx">numbers</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">numbers</span>
<span class="p">}</span>

<span class="c1">// 下面是sort中引用的两个帮助函数： swap / minIndex
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">swap</span> <span class="o">=</span> <span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>   <span class="c1">// 用于交换位置
</span><span class="c1"></span>  <span class="c1">// let temp = array[i]
</span><span class="c1"></span>  <span class="c1">// array[i] = array[j]
</span><span class="c1"></span>  <span class="c1">// array[j] = temp
</span><span class="c1"></span>  <span class="p">[</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">array</span><span class="p">[</span><span class="nx">j</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">array</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span>  <span class="c1">// 也可以用解构赋值法，交换元素位置
</span><span class="c1"></span><span class="p">}</span>

<span class="kd">let</span> <span class="nx">minIndex</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>  <span class="c1">// 用于找出最小值下标
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">index</span><span class="p">]){</span>
      <span class="nx">index</span> <span class="o">=</span> <span class="nx">i</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">index</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="汇总-">汇总 ✅</h3>
<h4 id="循环代码纯净版">循环代码（纯净版）</h4>
<blockquote>
<p>思路：循环的每轮，找到未排序数组中的最小值的下标，用于交换位置，把最小值放到最前面</p>
<ul>
<li>循环的每轮，都假设 i 为当前轮次的最小值下标，并且 i 还可以表示当前未排序数组的第一位元素。</li>
<li>通过 minIndex 找到未排序数组中的最小值下标</li>
<li>如果最小值下标与假设不符，就通过 swap 交换位置</li>
</ul>
</blockquote>
<p>三部分组成：sort（循环排序）、swap（实现交换位置）、minIndex（找最小值下标）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">sort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>   <span class="c1">// 👈 重点理解！！（边界：为什么-1）
</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span> <span class="o">+</span> <span class="nx">i</span>   <span class="c1">// 👈 重点理解！！（最小值下标：为什么+i）
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">!==</span> <span class="nx">i</span><span class="p">){</span> <span class="nx">swap</span><span class="p">(</span><span class="nx">numbers</span><span class="p">,</span><span class="nx">index</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span> <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">numbers</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">swap</span> <span class="o">=</span> <span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">i</span> <span class="p">,</span><span class="nx">j</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="p">[</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">array</span><span class="p">[</span><span class="nx">j</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">array</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">minIndex</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">index</span><span class="p">]){</span>
      <span class="nx">index</span> <span class="o">=</span> <span class="nx">i</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">index</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="补充双层-for-循环写法">补充：双层 for 循环写法</h4>
<blockquote>
<p>特点：代码量少，只需一个函数。但思路、算法过程不易理解</p>
</blockquote>
<blockquote>
<p>思路同上：每轮找未排序数组中的最小值的下标，用于交换位置，把最小值放到最前面</p>
<ul>
<li>外层循环：每轮开局，都假设当前遍历元素 j（同时也是未排序数组的第一个元素）为最小值 minIndex</li>
<li>内层循环：当前未排序数组中的第一个元素 j 和 后面元素依次比较大小，确定当前最小值下标</li>
<li>如果当前最小值下标与假设不符，就交换二者位置</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">selectSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// j表示每轮遍历的元素的下标；i表示下一位元素的下标
</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">minIndex</span> <span class="o">=</span> <span class="nx">j</span>  <span class="c1">// 每轮都假设当前元素是最小值，当前元素下标 j 是最小值下标
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> 
      <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">minIndex</span><span class="p">])</span> <span class="p">{</span> <span class="c1">//  当前元素与下一个元素，进行两两比较，找出最小值下标
</span><span class="c1"></span>        <span class="nx">minIndex</span> <span class="o">=</span> <span class="nx">i</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">minIndex</span> <span class="o">!==</span> <span class="nx">j</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 若最小值不是当前元素 j ，那就把最小元素与当前元素交换位置
</span><span class="c1"></span>      <span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">minIndex</span><span class="p">],</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">minIndex</span><span class="p">]]</span>
    <span class="p">}</span> 
    <span class="c1">// 每一轮都从未排序数组中找出最小值，并放到未排序数组的最前面(第一位)
</span><span class="c1"></span>    <span class="c1">// 注：每一轮遍历的当前元素 j 所在位置，就是当前未排序数组的第一位
</span><span class="c1"></span>  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">arr</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="对比递归写法">对比：递归写法</h4>
<blockquote>
<p>特点：思路更简明、但需要帮助函数   【边界处理 ( 中止条件 ) 是关键！！】</p>
</blockquote>
<blockquote>
<p>递归思路：</p>
<ul>
<li>长度大于2，就找最小值放到前面 + 并对后面所有值再次 sort</li>
<li>长度等于2，就直接判断大小 / 交换两个元素位置，然后返回数组。【👈中止条件（边界处理）】</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">minIndex</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">min</span><span class="p">(</span><span class="nx">arr</span><span class="p">))</span>
<span class="kd">let</span> <span class="nx">min</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">min</span><span class="p">(</span> <span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">min</span><span class="p">(</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span> <span class="p">]</span> <span class="p">)</span>  <span class="c1">// 递归
</span><span class="c1"></span>  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="k">return</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">?</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">:</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>   <span class="c1">// 👈 边界处理很关键！！
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">sort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">){</span>
    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
    <span class="kd">let</span> <span class="nx">minNum</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span>
    <span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">[</span><span class="nx">minNum</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">sort</span><span class="p">(</span><span class="nx">arr</span><span class="p">))</span>   <span class="c1">// 递归
</span><span class="c1"></span>  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="k">return</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">?</span> <span class="nx">arr</span> <span class="o">:</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">reverse</span><span class="p">()</span>   <span class="c1">// 👈 边界处理很关键！！
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="总结">总结</h3>
<blockquote>
<p>选择排序的两种实现方式：递归、循环</p>
</blockquote>
<ul>
<li>思路：每次选择最小 / 大的，放在最前面 / 最后面。选到最后没得选了，就排完了</li>
<li>假设有 10 个元素，就需要选择 8 次、对比 8 次。
<ul>
<li>第 1 个元素不用选，默认第 1 个直接和第 2 个对比</li>
<li>第 10 个也不用选，选第 9 个时，就已经和第 10 个对比了</li>
<li>所以只需要对比 8 次</li>
</ul>
</li>
<li>每次对比，需要进行一次搜索（找到最小值）</li>
<li>所以时间复杂度、大概是「 n 的平方 」</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="总结-">总结 👆</h2>
<h3 id="1-所有递归都能改成循环">1. 所有递归都能改成循环</h3>
<h3 id="2-循环的时候有很多细节">2. 循环的时候有很多细节</h3>
<ul>
<li>循环时特别容易被细节干扰，这些细节很难想清楚</li>
<li>要动手列出表格，找规律</li>
<li>尤其是<strong>边界条件</strong>很难确定</li>
<li>我们没有处理长度为 0 和 1 的数组（if length === 0 | 1 直接 return 即可）</li>
</ul>
<h3 id="3-如果-debug">3. 如果 debug</h3>
<ul>
<li>学会看控制台</li>
<li>学会打 log</li>
<li>打 log 的时候，注意加标记</li>
</ul>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="快速排序-quick-sort-">快速排序 quick sort ⭕️</h2>
<blockquote>
<p>特点就是「快」</p>
</blockquote>
<blockquote>
<p>只讲递归思路，不讲循环思路。通过上面的学习，已经知道递归更简单、循环非常复杂（细节很多）</p>
</blockquote>
<h3 id="递归思路">递归思路</h3>
<blockquote>
<p>以某某为基准</p>
</blockquote>
<ul>
<li>想象你是一个体育委员</li>
<li>你面对的同学为 [12，3，7，21，5，9，4，6]</li>
<li>**「以某某为基准，小的去前面，大的去后面」  **  （不会规定「你」需要站在哪里）</li>
<li>你只需要重复说上面这句话，就能让他们完成排序</li>
<li>神奇不神奇？</li>
<li>用图说明一下</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">12</span><span class="err">，</span><span class="mi">3</span><span class="err">，</span><span class="mi">7</span><span class="err">，</span><span class="mi">21</span><span class="err">，</span><span class="mi">5</span><span class="err">，</span><span class="mi">9</span><span class="err">，</span><span class="mi">4</span><span class="err">，</span><span class="mi">6</span><span class="p">]</span>
			   		 <span class="err">👆</span>
<span class="p">=&gt;</span> <span class="nx">假设站在靠中间的</span> <span class="mi">21</span> <span class="nx">上</span>
<span class="p">=&gt;</span> <span class="nx">喊话</span><span class="err">「</span><span class="nx">以21为基准</span><span class="err">，</span><span class="nx">比21小的</span><span class="err">，</span><span class="nx">站到21前面</span><span class="err">，</span><span class="nx">大的站到后面</span><span class="err">」</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">12</span><span class="err">，</span><span class="mi">3</span><span class="err">，</span><span class="mi">7</span><span class="err">，</span><span class="mi">5</span><span class="err">，</span><span class="mi">9</span><span class="err">，</span><span class="mi">4</span><span class="err">，</span><span class="mi">6</span><span class="err">，</span><span class="mi">21</span><span class="p">]</span>   <span class="nx">经过这一次排序</span><span class="err">，</span><span class="mi">21</span> <span class="nx">的位置就钉住了</span>
						    			 <span class="err">👆</span>
<span class="p">=&gt;</span> <span class="nx">再次随机找一个数</span><span class="err">（</span><span class="nx">从中间找</span><span class="err">），</span><span class="nx">喊话</span><span class="err">「</span><span class="nx">以5为基准</span><span class="err">，</span><span class="nx">比它小的站到前面</span><span class="err">，</span><span class="nx">比它大的站到后面</span><span class="err">」</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">12</span><span class="err">，</span><span class="mi">3</span><span class="err">，</span><span class="mi">7</span><span class="err">，</span><span class="mi">5</span><span class="err">，</span><span class="mi">9</span><span class="err">，</span><span class="mi">4</span><span class="err">，</span><span class="mi">6</span><span class="err">，</span><span class="mi">21</span><span class="p">]</span>
             <span class="err">👆</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="err">，</span><span class="mi">4</span><span class="err">，</span>   <span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="err">，</span><span class="mi">12</span><span class="err">，</span><span class="mi">7</span><span class="err">，</span><span class="mi">9</span><span class="err">，</span><span class="mi">6</span><span class="err">，</span><span class="p">(</span><span class="mi">21</span><span class="p">)]</span>  <span class="c1">// [3,4]是比5小的，[12,7,9,6]是比5大的，5的位置就钉住了
</span><span class="c1"></span>
<span class="p">=&gt;</span> <span class="nx">接下来在</span><span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span><span class="nx">中间任选一个</span><span class="err">（</span><span class="nx">假设选4吧</span><span class="err">），</span><span class="nx">喊话</span><span class="err">「</span><span class="nx">比4大的去前面</span><span class="err">，</span><span class="nx">比4小的去后面</span><span class="err">」</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="err">、</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="err">、</span><span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span><span class="err">、</span><span class="p">(</span><span class="mi">21</span><span class="p">)</span>  <span class="c1">// 此时 4 的位置就钉住了。3固定了吗？不行，每次指向谁，谁才能固定
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="nx">此时指向3</span><span class="err">，</span><span class="nx">发现3就一个元素自身</span><span class="err">，</span><span class="nx">那无需比较</span><span class="err">，</span><span class="mi">3</span><span class="nx">可以固定了</span>
<span class="p">=&gt;</span> <span class="nx">下面跑到右边一组去</span><span class="err">，</span><span class="nx">指向</span> <span class="mi">7</span> <span class="nx">吧</span><span class="err">，</span><span class="nx">喊话</span><span class="err">「</span><span class="nx">比7大的去前面</span><span class="err">，</span><span class="nx">比7小的去后面</span><span class="err">」</span>
<span class="p">=&gt;</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="err">、</span><span class="p">[</span><span class="mi">6</span><span class="p">,(</span><span class="mi">7</span><span class="p">),</span><span class="mi">12</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span><span class="err">、</span><span class="p">(</span><span class="mi">21</span><span class="p">)</span>   <span class="c1">// 假设下面指向6，就一个可以直接固定了
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">6</span><span class="p">),(</span><span class="mi">7</span><span class="p">),[</span><span class="mi">12</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span><span class="err">、</span><span class="p">(</span><span class="mi">21</span><span class="p">)</span>   <span class="c1">// 下面指向 9 吧，所以9就钉住了，喊话「比9大的往后面去...」
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span><span class="err">、</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="err">、</span><span class="p">(</span><span class="mi">21</span><span class="p">)</span>   <span class="c1">// 就剩12一个元素了，此时指向 12，就一个所以直接固定位置
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">21</span><span class="p">)</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">21</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>思路</p>
<ul>
<li>一共 8 个元素，每指向一个元素，就会固定一个元素的位置</li>
<li>所以只需要指 8 次，就完成排序了</li>
<li>【这就是快速排序的思路】</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="快排源码递归">快排源码（递归）</h3>
<blockquote>
<p>下面是在<a href="http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html" target="_blank" rel="noopener noreffer">阮一峰写的版本</a>基础上、加工成 ES6</p>
</blockquote>
<blockquote>
<p>因为使用递归思想，所以必须考虑中止条件、对各种情况进行相应处理</p>
</blockquote>
<p>逐步分析 👇</p>
<ul>
<li>
<p>如果发现数组<strong>只有一个元素</strong>，就无需排序，直接放行（中止条件）</p>
<p>注意：这里条件必须写 <code>arr.length &lt;= 1</code>  ，不能只有<code>arr.lenght === 1</code> 这会导致递归无法结束</p>
</li>
<li>
<p><a href="https://zh.forvo.com/search/pivot/en/" target="_blank" rel="noopener noreffer">pivot</a>  /ˈpɪvət/ —— 基准、中心点、轴</p>
</li>
<li>
<p>取地板（舍去小数部分）：Math.floor(3.5)  →  3</p>
</li>
<li>
<p>pivot ，这里的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener noreffer">splice</a> 用于删除数组中的某个元素，并把它。（splice 会修改原数组）
因为 JS 中 splice 提取后返回的是一个数组，必须通过 [0] 的方式才能拿到数字本身。并赋值给变量 pivot
拿到基准数，并将基准数从 arr 中删除</p>
</li>
<li>
<p>既然已经拿到基准数的下标，为什么不直接通过 <code>let pivot = arr[pivotIndex]</code> 来获取到基准数，而是还要通过 splice 的返回值来获取基准数、这么麻烦的方式？？
因为这里实际上是完成两个操作：第一目的是获取基准数、第二目的是还需要将基准数从 arr 中删除，所以使用 splice 正好可以同时完成这两个操作</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">quickSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">arr</span> <span class="p">}</span>   <span class="c1">// 最基本的情况：发现指向的数组只剩下一个元素
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">pivotIndex</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>  <span class="c1">// 获取基准的索引、找到靠中间的数字（取地板）
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">pivot</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">pivotIndex</span><span class="p">,</span> <span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>  <span class="c1">// 拿到基准数，并将基准数从 arr 中删除
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">left</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="kd">let</span> <span class="nx">right</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>   <span class="c1">// 遍历被删掉基准数后的数组 （执行喊话操作）
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">pivot</span><span class="p">){</span> 
      <span class="nx">left</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>  <span class="c1">// 如果当前遍历元素小于基准数，就放到left数组中
</span><span class="c1"></span>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
      <span class="nx">right</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="c1">// 由此得到了三部分：左边数组、基准数、右边数组
</span><span class="c1"></span>    <span class="p">}</span> 
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">quickSort</span><span class="p">(</span><span class="nx">left</span><span class="p">).</span><span class="nx">concat</span><span class="p">(</span> <span class="p">[</span><span class="nx">pivot</span><span class="p">],</span> <span class="nx">quickSort</span><span class="p">(</span><span class="nx">right</span><span class="p">)</span> <span class="p">)</span>  <span class="c1">// 👈 代码的核心就是这句
</span><span class="c1"></span>  <span class="c1">// 不断对左边数组快排、右边数组快排、连接两边数组和基准数
</span><span class="c1"></span>  <span class="c1">// 停止条件是 数组只剩下一个元素，直接返回数组
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>思路：</p>
<ul>
<li>对数组「找基准数、然后左右分半」 … 不断递归（循环）这个操作</li>
<li>直到数组只剩一个元素，就不再执行直接返回</li>
</ul>
</blockquote>
<blockquote>
<p>所有算法的思路都很简单，难再代码实现</p>
</blockquote>
<h4 id="代码纯净版">代码（纯净版）</h4>
<blockquote>
<p>思路：</p>
<ul>
<li>每次找一个中间基准数。将数组对半，大于基准数，放到左边数组，小于基准数放到右边数组。</li>
<li>然后再次分别对左边/右边数组排序（层层递归、压栈）</li>
<li>中止（边界）条件：数组&lt;=1个元素，就可以直接返回这个具体值（开始弹栈）</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">quickSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">){</span> <span class="k">return</span> <span class="nx">arr</span> <span class="p">}</span>
  <span class="kd">let</span> <span class="nx">pivotIndex</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
  <span class="kd">let</span> <span class="nx">pivot</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">pivotIndex</span><span class="p">,</span><span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
  <span class="kd">let</span> <span class="nx">left</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="kd">let</span> <span class="nx">right</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">pivot</span><span class="p">){</span> <span class="nx">left</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">}</span>
    <span class="k">else</span><span class="p">{</span> <span class="nx">right</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">quickSort</span><span class="p">(</span><span class="nx">left</span><span class="p">).</span><span class="nx">concat</span><span class="p">([</span><span class="nx">pivot</span><span class="p">],</span> <span class="nx">quickSort</span><span class="p">(</span><span class="nx">right</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="补充说明">补充说明</h3>
<blockquote>
<p>例：<code>let pivot = arr.splice(pivotIndex, 1)[0]</code>  因为 splice 的特性，导致必须用 [0] 来拿到基准数本身</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">16</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="mi">45</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="nx">a</span>  <span class="c1">// [32]
</span><span class="c1"></span><span class="o">------------------------------</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">16</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="mi">45</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
<span class="nx">a</span>  <span class="c1">// 32
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>算法如果涉及到某个语言的细节，这是非常不好的。
最好的算法写法是用「伪代码」来写。自己发明语法，就不用纠结 API 的问题了。</p>
</blockquote>
<blockquote>
<p>面试时，可以尝试鸡贼的写法，询问面试官可否使用「伪代码」来写</p>
</blockquote>
<p>​</p>
<h3 id="思路一句话">思路一句话</h3>
<blockquote>
<p>以某个元素为基准，小的往前放，大的往后放</p>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="归并排序-merge-sort-">归并排序 merge sort ⭕️</h2>
<blockquote>
<p>是当前三种排序算法中最难理解的一个</p>
</blockquote>
<h3 id="不以某某为基准">「不」以某某为基准</h3>
<ul>
<li>想象你是一个体育委员</li>
<li>你面对的同学为 [12，3，7，21，5，9，4，6]</li>
<li><strong>左边一半排好序，右边一半排好序</strong></li>
<li>**然后把左右两边合并（merge）起来 **</li>
<li>神奇不神奇？</li>
<li>用图说明一下</li>
</ul>
<p>​</p>
<h3 id="思路分析">思路分析</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">   <span class="p">[</span><span class="mi">12</span><span class="err">，</span><span class="mi">3</span><span class="err">，</span><span class="mi">7</span><span class="err">，</span><span class="mi">21</span><span class="err">，</span><span class="mi">5</span><span class="err">，</span><span class="mi">9</span><span class="err">，</span><span class="mi">4</span><span class="err">，</span><span class="mi">6</span><span class="p">]</span>

<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">21</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>  <span class="c1">// 【每次都把数组看作左边和右边，并让左右边自己排序】
</span><span class="c1"></span>    <span class="err">↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span>        
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">21</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span>  <span class="c1">// 左右排序完成（先忽略排序细节）
</span><span class="c1"></span>
<span class="p">=&gt;</span> <span class="nx">现在只需要把左右两部分</span><span class="err">【</span><span class="nx">结合</span><span class="err">】</span><span class="nx">起来</span><span class="err">，</span><span class="nx">怎么结合</span><span class="err">？</span> <span class="c1">// 【合并】
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>   
	  <span class="err">👆</span>              <span class="err">👆</span>
    <span class="c1">// 左手指向左边第一个，右手指向右边第一个。比较两个值大小，把较小的放到容器中。 ✅✅
</span><span class="c1"></span>    <span class="c1">// 此时左边的 3 更小，所以先把 3 放到下面容器中。然后左手指向下一个元素 7 
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span>                        <span class="p">]</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>    
	     <span class="err">👆</span>           <span class="err">👆</span>
   <span class="c1">// 此时比较 7 和 4。把较小值 右边的 4 放到容器中。右手指向下一元素
</span><span class="c1"></span>   <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span>                      <span class="p">]</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span> 
	     <span class="err">👆</span>              <span class="err">👆</span>
   <span class="c1">// 此时比较 7 和 5。把较小值 右边的 5 放到容器中。右手指向下一元素
</span><span class="c1"></span>   <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span>                   <span class="p">]</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span> 
	     <span class="err">👆</span>                 <span class="err">👆</span>
   <span class="c1">// 此时比较 7 和 6。把较小值 右边的 6 放到容器中。右手指向下一元素
</span><span class="c1"></span>   <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span>                <span class="p">]</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span> 
	     <span class="err">👆</span>                    <span class="err">👆</span>
   <span class="c1">// 此时比较 7 和 9。把较小值 左边的 7 放到容器中。左手指向下一元素
</span><span class="c1"></span>   <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span>             <span class="p">]</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span> 
	        <span class="err">👆</span>                 <span class="err">👆</span>
   <span class="c1">// 此时比较 12 和 9。把较小值 右边的 9 放到容器中。右边元素排完了.
</span><span class="c1"></span>   <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span>           <span class="p">]</span>

<span class="nx">当某一边元素全部排完</span><span class="err">，</span><span class="nx">另一边元素就可以全部照抄了</span> <span class="err">（</span><span class="nx">左边还剩12</span><span class="p">,</span><span class="mi">21</span><span class="nx">直接放进容器中</span><span class="err">）✅✅</span>
<span class="nx">大功告成</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span>

</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>综上可知：<strong>【合并】的算法</strong>其实很简单：左右两边 index 同时遍历，把较小值 push 到容器中</p>
</blockquote>
<blockquote>
<p>问题是：怎么让左右两边自己先完成排序？ （递归思想 👇）</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">数组</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span> <span class="nx">分成左右两边</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">21</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span> <span class="nx">之后</span>
<span class="nx">将左边</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">21</span><span class="p">]</span> <span class="nx">再次划分为两部分</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span><span class="err">、</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span><span class="mi">21</span><span class="p">]</span>
<span class="nx">将左边</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="nx">再次划分为两部分</span> <span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="err">、</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span>  
<span class="nx">当拆分到只有两个元素时</span><span class="err">，</span><span class="nx">就可以直接比较大小排序了</span><span class="err">（</span><span class="nx">如果不会</span><span class="err">，</span><span class="nx">还可以再进行前面的</span><span class="err">【</span><span class="nx">合并</span><span class="err">】</span><span class="nx">操作</span><span class="err">）</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="err">、</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span> 
<span class="p">=&gt;</span>  <span class="err">👆</span>     <span class="err">👆</span>    <span class="c1">// 左手指向左边第一个，右手指向右边第一个。将较小值放到容器中
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span>   <span class="p">]</span>  
   <span class="c1">// 此时右边全部排完。那么左边直接照抄落到容器后面即可
</span><span class="c1"></span>   <span class="c1">// 大功告成
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">12</span><span class="p">]</span><span class="err">，</span><span class="nx">同理得到</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>上面 从 [12]、 [3] 得到 [3, 12]  这一步是最关键的一步。</li>
<li>将数组 [12,3]，[7,21]  拆分为 [12]  [3]，[7] [21] … **「使得所有数组，变成了排好序的数组」**怎么理解这句？
<ul>
<li>被拆分后，数组中只有一个元素，一个元素也就无需排序。</li>
<li>变相的理解成 **「此时所有的数组，都是无需排序的数组（排好序的数组）」 **</li>
</ul>
</li>
</ul>
<blockquote>
<p>归并排序的算法：默认只能，对两个排好序的数组，进行排序</p>
<ul>
<li>这个算法可能乍一看，很不可思议，好像什么都没做，就排好序了。</li>
<li>一定要拆解步骤，才能发现这里面的神奇之处。</li>
</ul>
</blockquote>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 再合并（左手指左一、右手指右一，较小值放到容器中）✅✅
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">12</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span>
    <span class="err">👆</span>       <span class="err">👆</span>
   <span class="c1">// 比较 3 和 7。把较小值 左边的 3 放到容器中。左手指向下一元素 12
</span><span class="c1"></span>   <span class="p">[</span><span class="mi">3</span><span class="p">,</span>        <span class="p">]</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">12</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span>
       <span class="err">👆</span>    <span class="err">👆</span>
   <span class="c1">// 比较 12 和 7。把较小值 右边的 7 放到容器中。右手指向下一元素 21
</span><span class="c1"></span>   <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span>     <span class="p">]</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">12</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span>
       <span class="err">👆</span>       <span class="err">👆</span>
   <span class="c1">// 比较 12 和 21。把较小值 左边的 12 放到容器中。左边全部排完。右边剩下[21]直接落到后面
</span><span class="c1"></span>   <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span>    <span class="p">]</span>

  <span class="c1">// 大功告成
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="源码分析">源码分析</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">mergeSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">arr</span>
  <span class="p">}</span>
  <span class="kd">let</span> <span class="nx">left</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span> 
  <span class="kd">let</span> <span class="nx">right</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span>
  <span class="k">return</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">mergeSort</span><span class="p">(</span><span class="nx">left</span><span class="p">),</span> <span class="nx">mergeSort</span><span class="p">(</span><span class="nx">right</span><span class="p">))</span>  <span class="c1">// 👈关键
</span><span class="c1"></span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">merge</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="c1">// 👈 核心
</span><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">b</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">a</span>
  <span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">?</span> <span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span> <span class="o">:</span> <span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nx">b</span><span class="p">))</span>
  <span class="c1">// 关键 👆
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="详细注释-">详细注释 👇</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">mergeSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 长度为1的数组，无需排序，所以默认它是已经排好序的数组【这点非常关键】
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">arr</span>
  <span class="p">}</span>
  <span class="c1">// arr.slice(begin,end) 截取数组下标从begin到end的部分，返回新数组（包括begin，不包括end）
</span><span class="c1"></span>  <span class="c1">// 原数组 arr 不改变
</span><span class="c1"></span>  <span class="c1">// 省略 end，则 slice 会一直提取到原数组末尾
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">left</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">// left是从下标0截取到一半的位置（不包括end）
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">right</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">// right是从一半的位置，截取到末尾（包括begin）
</span><span class="c1"></span>  <span class="k">return</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">mergeSort</span><span class="p">(</span><span class="nx">left</span><span class="p">),</span> <span class="nx">mergeSort</span><span class="p">(</span><span class="nx">right</span><span class="p">))</span> 
  <span class="c1">// 左右再次进行拆分操作。拆到数组只有1个元素，认为所有数组已经排好序。
</span><span class="c1"></span>  <span class="c1">// 对排好序的数组进行 merge 合并（这才是归并算法的核心👇见下）
</span><span class="c1"></span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">merge</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>  <span class="c1">// 【前提条件：merge 接收的a、b两个数组，必须是已经排好序的两个数组】！！！
</span><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">b</span>  <span class="c1">// 一个空数组a和一个已经排好序的数组b，那就直接返回排好序的数组b
</span><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">a</span>  <span class="c1">// 同理
</span><span class="c1"></span>  <span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">?</span> <span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span> <span class="o">:</span> <span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nx">b</span><span class="p">))</span>
  <span class="c1">// 👆这里就是递归的难理解之处，需要拆解步骤 ⚠️⚠️见下
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="拆解-merge">拆解 merge⚠️⚠️</h4>
<blockquote>
<p>【前提条件：merge 接收的 a、b 两个数组，必须是已经排好序的两个数组】！！！</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">	 <span class="nx">merge</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">])</span>
<span class="p">=&gt;</span> <span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">?</span> <span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span> <span class="o">:</span> <span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nx">b</span><span class="p">))</span>

<span class="o">---------------------------------------------</span><span class="nx">拆解</span> <span class="err">👇</span><span class="o">-----------------------------------------</span>
<span class="c1">// 第一步：指向两个数组的第一位，比较大小
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span>  
    <span class="err">↑</span>         <span class="err">↑</span>       
   <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="nx">否</span><span class="err">，</span><span class="nx">执行</span> <span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">merge</span><span class="p">(</span> <span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nx">b</span> <span class="p">)</span> <span class="p">)</span> <span class="c1">// 相当于把较小值摘出，再次merge剩余部分
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="nx">merge</span><span class="p">(</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span> <span class="p">)]</span>
               <span class="err">↑</span>       <span class="err">↑</span>
   <span class="mi">5</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="nx">是</span><span class="err">，</span><span class="nx">执行</span> <span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">merge</span><span class="p">(</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="c1">// 把较小值摘出，再次merge剩余部分
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">merge</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">])</span> <span class="p">]</span>
                 <span class="err">↑</span>       <span class="err">↑</span>
   <span class="mi">5</span> <span class="o">&gt;</span> <span class="mi">4</span> <span class="nx">是</span><span class="err">，</span><span class="nx">执行</span> <span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">merge</span><span class="p">(</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="c1">// 把较小值摘出，再次merge剩余部分
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">merge</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="mi">9</span><span class="p">])</span> <span class="p">]</span>
	                  <span class="err">↑</span>       <span class="err">↑</span>
   <span class="mi">5</span> <span class="o">&gt;</span> <span class="mi">9</span> <span class="nx">否</span><span class="err">，</span><span class="nx">执行</span> <span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">merge</span><span class="p">(</span> <span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nx">b</span> <span class="p">)</span> <span class="p">)</span> <span class="c1">// 把较小值摘出，再次merge剩余部分
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="nx">merge</span><span class="p">([</span><span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="mi">9</span><span class="p">])</span> <span class="p">]</span>
		                   <span class="err">↑</span>     <span class="err">↑</span>
   <span class="mi">10</span> <span class="o">&gt;</span> <span class="mi">9</span> <span class="nx">是</span><span class="err">，</span><span class="nx">执行</span> <span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">merge</span><span class="p">(</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="c1">// 把较小值摘出，再次merge剩余部分    
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="nx">merge</span><span class="p">([</span><span class="mi">10</span><span class="p">],</span> <span class="p">[])</span> <span class="p">]</span>   
   											 <span class="err">↑</span>    <span class="err">↑</span>
   <span class="c1">// 满足中止条件：一个空数组、一个已经排好序的数组 ，那就直接返回排好序的数组b
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="补充slice-用法httpsdevelopermozillaorgzh-cndocswebjavascriptreferenceglobal_objectsarrayslice">补充：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener noreffer">slice 用法</a></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">begin</span><span class="p">,</span> <span class="nx">end</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><strong>截取数组下标从 begin 到 end 的部分，返回一个新数组（包括begin，不包括end）</strong></p>
</li>
<li>
<p>**原始数组不改变 **</p>
</li>
<li>
<p>begin （可省略）</p>
<p>提取起始处的索引（从 0 开始），从该索引开始提取原数组元素。
如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取，slice(-2) 表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。
**如果省略 begin，则 slice 从索引 0 开始。 **
如果 begin 大于原数组的长度，则会返回空数组。</p>
</li>
<li>
<p>end（可省略）</p>
<p>提取终止处的索引（从 0 开始），在该索引处结束提取原数组元素。slice 会提取原数组中索引从 begin 到 end 的所有元素（包含 begin，但不包含 end）。
slice(1,4) 会提取原数组中从第二个元素开始一直到第四个元素的所有元素 （索引为 1, 2, 3的元素）。
如果该参数为负数， 则它表示在原数组中的倒数第几个元素结束抽取。 slice(-2,-1) 表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。
**如果 end 被省略，则 slice 会一直提取到原数组末尾。 **
如果 end 大于数组的长度，slice 也会一直提取到原数组末尾。</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 省略两个参数，可以实现深拷贝效果 ？！
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`newArr: </span><span class="si">${</span><span class="nx">newArr</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>  <span class="c1">// 6,2,3,4,5
</span><span class="c1"></span><span class="nx">newArr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">6</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`修改后，newArr: </span><span class="si">${</span><span class="nx">newArr</span><span class="si">}</span><span class="sb">，arr: </span><span class="si">${</span><span class="nx">arr</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>  <span class="c1">// 6,2,3,4,5   1,2,3,4,5 原数组不改变
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p></p>
<h3 id="代码纯净版-1">代码（纯净版）</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">mergeSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">arr</span>
  <span class="p">}</span>
  <span class="kd">let</span> <span class="nx">left</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span> 
  <span class="kd">let</span> <span class="nx">right</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span>
  <span class="k">return</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">mergeSort</span><span class="p">(</span><span class="nx">left</span><span class="p">),</span> <span class="nx">mergeSort</span><span class="p">(</span><span class="nx">right</span><span class="p">))</span>  
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">merge</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">b</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">a</span>
  <span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">?</span> <span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span> <span class="o">:</span> <span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nx">b</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="总结-1">总结</h3>
<h4 id="归并排序的思路">归并排序的思路</h4>
<ul>
<li>
<p>mergeSort</p>
<ul>
<li>拿到一个乱序的数组，会把数组分成<strong>左右两部分</strong>。然后对左右两边继续调用 mergeSort 再拆分 …</li>
<li>拆分到所有元素独自成一个数组，达到中止条件。</li>
</ul>
</li>
<li>
<p>merge</p>
<ul>
<li>接收两个数组作为参数（只接收排好序的数组）</li>
<li>**每次都比较两个数组的首项，并提取出较小的值，放在最前面 **
因为两个数组都是顺序排列，所以首项一定代表其所在数组的最小值。
两个最小值对比得出的较小值，一定是所有元素中的最小值，所以摘出放在最前面</li>
<li>对剩余数组，继续重复上一步操作</li>
</ul>
</li>
</ul>
<p>​</p>
<h4 id="代码">代码</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">mergeSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">){</span> 
    <span class="k">return</span> <span class="nx">arr</span>
  <span class="p">}</span>
  <span class="kd">let</span> <span class="nx">left</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
  <span class="kd">let</span> <span class="nx">right</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
  <span class="k">return</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">mergeSort</span><span class="p">(</span><span class="nx">left</span><span class="p">),</span> <span class="nx">mergeSort</span><span class="p">(</span><span class="nx">right</span><span class="p">))</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">merge</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">b</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">a</span>
  <span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">?</span> <span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="nx">b</span><span class="p">))</span> <span class="o">:</span> <span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="图示">图示</h4>
<h5 id="1">1</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">merge</span><span class="p">(</span>     <span class="nx">a</span>    <span class="p">,</span>    <span class="nx">b</span>    <span class="p">)</span>
<span class="nx">merge</span><span class="p">(</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span> <span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span> <span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h5 id="2">2</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">mergeSort</span><span class="p">([</span><span class="mi">12</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">])</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h5 id="3">3</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">mergeSort</span><span class="p">([</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>
<span class="nx">merge</span><span class="p">(</span> <span class="nx">mergeSort</span><span class="p">([</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">]),</span> <span class="nx">mergeSort</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span> <span class="p">)</span>
<span class="nx">merge</span><span class="p">(</span> <span class="nx">merge</span><span class="p">(</span> <span class="nx">mergeSort</span><span class="p">([</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">]),</span> <span class="nx">mS</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">])</span> <span class="p">),</span> <span class="nx">merge</span><span class="p">(</span> <span class="nx">mergeSort</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">]),</span> <span class="nx">mergeSort</span><span class="p">([</span><span class="mi">8</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span> <span class="p">)</span> <span class="p">)</span>
<span class="nx">m</span><span class="p">(</span><span class="nx">m</span><span class="p">(</span><span class="nx">m</span><span class="p">(</span><span class="nx">mS</span><span class="p">([</span><span class="mi">6</span><span class="p">]),</span><span class="nx">mS</span><span class="p">([</span><span class="mi">3</span><span class="p">])),</span> <span class="nx">m</span><span class="p">(</span><span class="nx">mS</span><span class="p">([</span><span class="mi">2</span><span class="p">]),</span><span class="nx">mS</span><span class="p">([</span><span class="mi">7</span><span class="p">]))</span> <span class="p">)</span> <span class="p">,</span> <span class="nx">m</span><span class="p">(</span><span class="nx">m</span><span class="p">(</span><span class="nx">mS</span><span class="p">([</span><span class="mi">1</span><span class="p">]),</span><span class="nx">mS</span><span class="p">([</span><span class="mi">5</span><span class="p">])),</span> <span class="nx">m</span><span class="p">(</span><span class="nx">mS</span><span class="p">([</span><span class="mi">8</span><span class="p">]),</span><span class="nx">mS</span><span class="p">([</span><span class="mi">4</span><span class="p">]))))</span>
<span class="c1">// 达到 mergeSort 中止条件 👆
</span><span class="c1"></span><span class="nx">m</span><span class="p">(</span> <span class="nx">m</span><span class="p">(</span> <span class="nx">m</span><span class="p">([</span><span class="mi">6</span><span class="p">],[</span><span class="mi">3</span><span class="p">]),</span> <span class="nx">m</span><span class="p">([</span><span class="mi">2</span><span class="p">],[</span><span class="mi">7</span><span class="p">])</span> <span class="p">)</span> <span class="p">,</span> <span class="nx">m</span><span class="p">(</span> <span class="nx">m</span><span class="p">([</span><span class="mi">1</span><span class="p">],[</span><span class="mi">5</span><span class="p">]),</span> <span class="nx">m</span><span class="p">([</span><span class="mi">8</span><span class="p">],[</span><span class="mi">4</span><span class="p">])</span> <span class="p">)</span> <span class="p">)</span>
<span class="c1">// 开始 merge 👇
</span><span class="c1"></span><span class="nx">m</span><span class="p">(</span> <span class="nx">m</span><span class="p">(</span> <span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">m</span><span class="p">([</span><span class="mi">6</span><span class="p">],[])</span> <span class="p">)</span> <span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">m</span><span class="p">([</span><span class="mi">7</span><span class="p">],[])</span> <span class="p">)</span> <span class="p">)</span>  <span class="p">...</span>  <span class="p">)</span> <span class="p">)</span> 
<span class="nx">m</span><span class="p">(</span> <span class="nx">m</span><span class="p">(</span> <span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">concat</span><span class="p">([</span><span class="mi">6</span><span class="p">]),</span> <span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">concat</span><span class="p">([</span><span class="mi">7</span><span class="p">])</span> <span class="p">)</span> <span class="p">,</span> <span class="nx">m</span><span class="p">(</span> <span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">concat</span><span class="p">([</span><span class="mi">5</span><span class="p">]),</span> <span class="p">[</span><span class="mi">4</span><span class="p">].</span><span class="nx">concat</span><span class="p">([</span><span class="mi">8</span><span class="p">])</span> <span class="p">)</span> <span class="p">)</span>
<span class="nx">m</span><span class="p">(</span> <span class="nx">m</span><span class="p">(</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span> <span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span> <span class="p">),</span> <span class="nx">m</span><span class="p">(</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">8</span><span class="p">]</span> <span class="p">)</span> <span class="p">)</span>
<span class="nx">m</span><span class="p">(</span> <span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">m</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="p">)</span> <span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">m</span><span class="p">([</span><span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">8</span><span class="p">])</span> <span class="p">)</span> <span class="p">)</span>
<span class="nx">m</span><span class="p">(</span> <span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">m</span><span class="p">([</span><span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">]))</span> <span class="p">)</span> <span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="p">[</span><span class="mi">4</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">m</span><span class="p">([</span><span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">8</span><span class="p">]))</span> <span class="p">)</span> <span class="p">)</span>
<span class="nx">m</span><span class="p">(</span> <span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">concat</span><span class="p">([</span><span class="mi">6</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">m</span><span class="p">([],</span> <span class="p">[</span><span class="mi">7</span><span class="p">])))</span> <span class="p">),[</span><span class="mi">1</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="p">[</span><span class="mi">4</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">m</span><span class="p">([],</span> <span class="p">[</span><span class="mi">8</span><span class="p">]))</span> <span class="p">)</span> <span class="p">)</span> <span class="p">)</span>
  <span class="p">...</span>
  <span class="nx">m</span><span class="p">(</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">]</span> <span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p></p>
<p>​</p>
<h3 id="思路一句话-1">思路一句话</h3>
<blockquote>
<p>每次都分两部分，默认是排好序的，如果没有排好序就先排序。然后对排好序的两个数组，进行合并</p>
</blockquote>
<ul>
<li>
<p>怎么把无序的数组排好序？</p>
<p>很简单，（变相理解）不断拆分数组，直到每个数组中只有一个元素，这样每个数组都是排好序的</p>
</li>
<li>
<p>然后两个一组，开始进行合并</p>
</li>
</ul>
<p>​</p>
<blockquote>
<p>归并的思路确实很抽象，是上述三种算法种最难理解的（很哲学）</p>
<p>如果实在无法理解归并排序，那就学到快速排序就不要再学了</p>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="总结-2">总结</h2>
<h3 id="目前理清了三种排序">目前理清了三种排序</h3>
<ul>
<li>选择排序（递归、循环）
<ul>
<li>每次选择最小的，放在最前面。选到最后没得选了，就排完了</li>
</ul>
</li>
<li>快速排序（递归）
<ul>
<li>以某个元素为基准，小的往前放，大的往后放</li>
</ul>
</li>
<li>归并排序（递归）
<ul>
<li>每次都分两部分，默认是排好序的，如果没有排好序就先排序。然后对排好序的两个数组，进行合并</li>
<li>是上述三种算法种最难理解的（很哲学）</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="接下来">接下来</h3>
<ul>
<li>**计数排序 **（循环）
<ul>
<li>比上面的排序算法都要**快 **</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="计数排序-counting-sort-">计数排序 counting sort ⭕️</h2>
<blockquote>
<p>特性：速度非常快</p>
</blockquote>
<blockquote>
<p>注：本节如果提到哈希，实际说的是哈希表（因为我们并没有接触过哈希函数 … ）</p>
</blockquote>
<h3 id="思路">思路</h3>
<ul>
<li>用一个新的<strong>数据结构</strong> —— <strong>哈希表</strong>，来作记录
<ul>
<li>哈希表：一种 key: value 的形式。</li>
<li>JS 的对象可以算是哈希表的一种形式，但不是纯粹的哈希表。</li>
<li>因为 JS 对象具有隐藏属性、函数，而真正的哈希表里没有隐藏属性，只有数据。
所以 JS 对象不能算是一个完全的哈希表</li>
</ul>
</li>
<li>发现数字 N 就记 N：1，如果再次发现 N 就加 1</li>
<li>最后把哈希表的 key 全部打出来，假设 N：m，那么 N 需要打印 m 次</li>
<li>画图演示</li>
</ul>
<p>​</p>
<h4 id="扑克牌">扑克牌</h4>
<ul>
<li>
<p>「一副扑克牌，（不算大小王）共 52 张，乱序 」</p>
</li>
<li>
<p>怎么对这副扑克牌排序 ，实现 【 AAAA , 2222 , 3333 , 4444 , … , JJJJ , QQQQ , KKKK 】 的排序结果 ？？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">K</span><span class="p">,</span><span class="nx">K</span><span class="p">,</span><span class="nx">J</span><span class="p">,</span><span class="nx">J</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span> <span class="p">......</span> <span class="p">]</span>  <span class="c1">// 52张牌乱序
</span><span class="c1"></span> <span class="c1">// 👇 哈希表：每碰到一个数，就对应位置记上一笔。（类似计数器）
</span><span class="c1"></span> <span class="p">{</span>
     <span class="nx">A</span><span class="err">：</span><span class="mi">0</span>
     <span class="mi">2</span><span class="err">：</span><span class="mi">0</span>
     <span class="mi">3</span><span class="err">：</span><span class="mi">0</span>  
     <span class="nx">J</span><span class="err">：</span><span class="mi">0</span> 
     <span class="nx">Q</span><span class="err">：</span><span class="mi">0</span>	 
     <span class="nx">K</span><span class="err">：</span><span class="mi">0</span>
 <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>人类天生就会排序，只不过可能不会用代码表示出来</p>
</li>
</ul>
<p>​</p>
<h3 id="示例分析">示例分析</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">	 <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
<span class="p">=&gt;</span> <span class="nx">发现数字</span> <span class="nx">N</span> <span class="nx">就记</span> <span class="nx">N</span><span class="err">：</span><span class="mi">1</span><span class="err">，</span><span class="nx">再次发现</span> <span class="nx">N</span> <span class="nx">就加</span> <span class="mi">1</span><span class="err">。</span> 
   <span class="nx">同时记录最大值</span> <span class="nx">max</span><span class="err">：</span><span class="nx">假设第一个元素就是最大值</span><span class="err">，</span><span class="nx">max</span> <span class="o">=</span> <span class="mi">0</span><span class="err">。</span><span class="nx">遇到3</span> <span class="o">&lt;</span><span class="mi">12</span><span class="err">，</span><span class="nx">max不变</span><span class="err">；</span><span class="mi">9</span><span class="o">&lt;</span><span class="mi">12</span><span class="err">，</span><span class="nx">max不变</span> <span class="p">...</span>
	 <span class="nx">后面的数都比</span> <span class="mi">12</span> <span class="nx">小</span><span class="err">，</span><span class="nx">所以</span> <span class="nx">max</span> <span class="nx">就是</span> <span class="mi">12</span>
<span class="p">=&gt;</span> <span class="p">{</span>
     <span class="mi">12</span><span class="o">:</span><span class="mi">1</span>  <span class="p">(</span><span class="nx">max</span><span class="p">)</span>
     <span class="mi">3</span><span class="o">:</span><span class="mi">1</span>
     <span class="mi">9</span><span class="o">:</span><span class="mi">1</span>
     <span class="mi">4</span><span class="o">:</span><span class="mi">1</span>
     <span class="mi">2</span><span class="o">:</span><span class="mi">1</span>
     <span class="mi">8</span><span class="o">:</span><span class="mi">1</span>
     <span class="mi">5</span><span class="o">:</span><span class="mi">1</span>
     <span class="mi">7</span><span class="o">:</span><span class="mi">1</span>
   <span class="p">}</span>
   <span class="nx">现在完成两件事</span><span class="err">：</span>
   <span class="mi">1</span><span class="err">、</span><span class="nx">x最大值为12</span>
   <span class="mi">2</span><span class="err">、</span><span class="nx">所有数据次数记录完毕</span><span class="err">。</span>
   <span class="nx">接下来</span><span class="err">，</span><span class="nx">开始循环</span>
   
<span class="p">=&gt;</span> <span class="nx">设定</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">~</span> <span class="mi">12</span><span class="p">(</span><span class="nx">max</span><span class="p">)</span><span class="err">，</span><span class="nx">如果发现哈希表里存在</span> <span class="nx">i</span> <span class="nx">值</span><span class="err">，</span><span class="nx">就把</span> <span class="nx">i</span> <span class="nx">值打印到一个数组里面</span>
   <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">哈希表中没有</span> <span class="mi">0</span> <span class="p">=&gt;</span> <span class="p">[]</span>
   <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">哈希表中没有</span> <span class="mi">1</span> <span class="p">=&gt;</span> <span class="p">[]</span>
   <span class="nx">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">哈希表中有</span> <span class="mi">2</span>  <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="p">]</span>
   <span class="nx">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">哈希表中有</span> <span class="mi">3</span>  <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span> <span class="p">]</span>
       <span class="mi">4</span>               <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span> <span class="p">]</span>
       <span class="mi">5</span>               <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span> <span class="p">]</span>
       <span class="mi">6</span>               <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span> <span class="p">]</span>
       <span class="mi">7</span>               <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span> <span class="p">]</span>
       <span class="mi">8</span>               <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span> <span class="p">]</span>
       <span class="mi">9</span>               <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span> <span class="p">]</span>
       <span class="mi">10</span>              <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span> <span class="p">]</span>
       <span class="mi">11</span>              <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span> <span class="p">]</span>
       <span class="mi">12</span>              <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">12</span> <span class="p">]</span>   <span class="c1">// 👈 排序完成
</span><span class="c1"></span>
  <span class="c1">// 当 i 从 0 ~ 12 走完，排好序的数组也就得出了
</span><span class="c1"></span>  <span class="c1">// 需要两个条件姐就可以实现排序：哈希表、最大值max
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="初步代码">初步代码</h3>
<blockquote>
<p>补充： <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in" target="_blank" rel="noopener noreffer">in 操作符用法</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">countSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">hashTable</span> <span class="o">=</span> <span class="p">{},</span> <span class="nx">max</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// 遍历数组，得到【哈希表】和【max】
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="k">in</span> <span class="nx">hashTable</span><span class="p">)){</span> <span class="c1">// 发现数字 N 就记 N：1，再次发现 N 就加 1
</span><span class="c1"></span>      <span class="nx">hashTable</span><span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
      <span class="nx">hashTable</span><span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">max</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// max：谁比我大，我就等于谁
</span><span class="c1"></span>      <span class="nx">max</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> 
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;=</span> <span class="nx">max</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// 遍历哈希表
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">j</span> <span class="k">in</span> <span class="nx">hashTable</span><span class="p">){</span>
      <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span>   <span class="c1">// 如果发现这个值在hash表中，就push到数组
</span><span class="c1"></span>    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">result</span>
<span class="p">}</span> 
</code></pre></td></tr></table>
</div>
</div><blockquote>
<h4 id="上述代码有bug">上述代码有bug</h4>
<ul>
<li>遍历哈希表时，没有考虑「一个值在 hash 表中出现多个」的情况</li>
</ul>
</blockquote>
<h4 id="举例验证-bug">举例验证 bug</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
<span class="c1">// 得到 hash表 👇
</span><span class="c1"></span><span class="p">{</span>
  <span class="mi">4</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="mi">2</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
  <span class="mi">5</span><span class="o">:</span> <span class="mi">1</span>  
<span class="p">}</span>
<span class="c1">// 遍历哈希表
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;=</span> <span class="nx">max</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">){</span>  
  <span class="k">if</span><span class="p">(</span><span class="nx">j</span> <span class="k">in</span> <span class="nx">hashTable</span><span class="p">){</span>  <span class="c1">//  如果发现 j 在 hash表 中，就 push 到数组
</span><span class="c1"></span>    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span>   
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// j 取 0~5 （如果发现 j 在hash表中，就把 j 添加到数组）
</span><span class="c1">// j=0  =&gt;  []
</span><span class="c1">// j=1  =&gt;  []
</span><span class="c1">// j=2  =&gt;  [2, ]
</span><span class="c1">// j=3  =&gt;  [2, ]
</span><span class="c1">// j=4  =&gt;  [2,4, ]
</span><span class="c1">// j=5  =&gt;  [2,4,5 ]    遍历完成，结果数组中少了两个元素 2
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="完整代码-">完整代码 ✅</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">countSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">hashTable</span> <span class="o">=</span> <span class="p">{},</span> <span class="nx">max</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="k">in</span> <span class="nx">hashTable</span><span class="p">){</span>
      <span class="nx">hashTable</span><span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span> 
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
      <span class="nx">hashTable</span><span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">max</span><span class="p">){</span> <span class="nx">max</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;=</span> <span class="nx">max</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">j</span> <span class="k">in</span> <span class="nx">hashTable</span><span class="p">){</span>
      <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">hashTable</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  
        <span class="c1">// 假设 j 出现了 3 次，就需循环 3 次(添加 j)的操作。
</span><span class="c1"></span>        <span class="c1">// i 可以取几个值，循环就执行几次，所以 i 应该取 3 个值 （从0开始就取 i = 0，1，2）
</span><span class="c1"></span>        <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span>
      <span class="p">}</span>  
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">result</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="思路总结-">思路总结 ✅</h3>
<ul>
<li>遍历数组，得到一个 hashTable（记录出现过的元素 key，以及出现次数 value）。</li>
<li>同时，在这次遍历数组的过程中，找到数组最大值
（开局假设第一个元素就是最大值max，依次比较，大于 max 的元素，就重新赋值给 max）</li>
<li>此时，已知 hashTable 和 max。</li>
<li>已知最大值 max，所以全部元素的取值都在 0 ~ max 这个范围之间</li>
<li>遍历 0 ~ max 这个范围之间的所有元素，如果与哈希表的 key 一致，就之间把这个元素 push 到数组中
<ul>
<li>如果当前 key(元素) 的 value(出现次数) 不是 1，说明原数组中有 N 个该元素，那就需要把 N 个该元素都在此时 push 到数组中。所以 push 操作需要循环执行 N 次</li>
<li>获取这个 value 次数，作为 for 循环执行次数 i 的依据，来控制 push 的执行轮次</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="计数排序的特点-">计数排序的特点 ✅</h3>
<h4 id="数据结构不同">数据结构不同</h4>
<ul>
<li>
<p>使用了额外的 hashTable （数据结构）</p>
<ul>
<li>计数排序中使用的数据结构升级了</li>
<li>算法也就直接升级了，非常快</li>
</ul>
</li>
<li>
<p>只遍历数组一遍（不过还要遍历一次 hashTable ）</p>
<ul>
<li>之前的排序算法，都会多次遍历数组</li>
<li>选择排序：找第一个最小值，需遍历一遍数组。找第二个最小值，需再把余下元素遍历 …（重复遍历）</li>
</ul>
</li>
<li>
<p>为什么计数排序，可以这么厉害，就遍历一遍数组呢？</p>
<p>答：就是因为有 hashTable，这叫做「用空间换时间」</p>
<ul>
<li>hashTable 就是存储在内存中的一块空间。</li>
<li>用多余的空间就可以节省多余的时间。</li>
<li>通常空间、时间只能二选一：「用空间换时间」或「用时间换空间」
（除非你智商碾压，二者都能实现）</li>
</ul>
</li>
</ul>
<p>​</p>
<h4 id="时间复杂度对比">时间复杂度对比</h4>
<ul>
<li>选择排序 O(n^2）</li>
<li>快速排序 O(n log2n)</li>
<li>归并排序 O(n log2n)</li>
<li>计数排序 O(n + max)
<ul>
<li>时间最少、速度最快，但空间占的多</li>
<li>先遍历一个长度为 n 的数组，再遍历一个长度为 max 的数组</li>
</ul>
</li>
</ul>
<blockquote>
<p>时间复杂度，到底是怎么计算出来的呢？</p>
<ul>
<li>其实有特别简单的方法，几乎不需要太复杂的数学知识  👇 [详见下](# 时间复杂度)</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h3 id="题外话字母出现次数">题外话：字母出现次数</h3>
<p>前面讲过案例「如何统计一段文字中字母出现的次数，并打印结果」
其实就是借鉴了【计数排序】的思维</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">str</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">{}</span>
  <span class="kd">let</span> <span class="nx">newStr</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^a-zA-Z]/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>   <span class="c1">// `HiImSam`
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newStr</span><span class="p">)</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">newStr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">newStr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="k">in</span> <span class="nx">result</span><span class="p">){</span>
      <span class="nx">result</span><span class="p">[</span><span class="nx">newStr</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
      <span class="nx">result</span><span class="p">[</span><span class="nx">newStr</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">result</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="sb">`Hi, I&#39;m Sam`</span>
<span class="kd">let</span> <span class="nx">newStr</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/a-zA-Z/g</span><span class="p">)</span>
<span class="nx">count</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
<span class="o">--------------------------------------------------</span>
<span class="p">{</span>
  <span class="nx">H</span><span class="o">:</span> <span class="mi">1</span>
  <span class="nx">I</span><span class="o">:</span> <span class="mi">1</span>
  <span class="nx">S</span><span class="o">:</span> <span class="mi">1</span>
  <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span>
  <span class="nx">i</span><span class="o">:</span> <span class="mi">1</span>
  <span class="nx">m</span><span class="o">:</span> <span class="mi">2</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="补充正则">补充正则</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">提取数字</span><span class="p">....</span><span class="nx">value</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^\d]/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="nx">提取中文</span><span class="p">....</span><span class="nx">value</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^\u4E00-\u9FA5]/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="nx">提取英文</span><span class="p">....</span><span class="nx">value</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^a-zA-Z]/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="sb">`Hi, I&#39;m Sam`</span>
<span class="kd">let</span> <span class="nx">newStr</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/[a-zA-Z]/g</span><span class="p">)</span>  <span class="c1">//  [&#34;H&#34;, &#34;i&#34;, &#34;I&#34;, &#34;m&#34;, &#34;S&#34;, &#34;a&#34;, &#34;m&#34;]
</span><span class="c1">// match 返回数组
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">newStr</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^a-zA-Z]/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>  <span class="c1">// `HiImSam` （把字符串中所有非字母字符，替换为空）
</span><span class="c1">// replace 返回字符串 （替换思想）
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<p>​</p>
<h2 id="时间复杂度">时间复杂度</h2>
<blockquote>
<p>其实就是举一个比较大的数组，看一下当前算法的规模</p>
</blockquote>
<h3 id="以选择排序为例">以「选择排序」为例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 假设数组长度为 1000 （且处于最坏情况，每次都需要对比，没有任何一次是不需要对比的）
</span><span class="c1"></span><span class="nx">第1次遍历</span><span class="err">，</span><span class="nx">要从</span> <span class="p">[</span><span class="mi">0</span><span class="p">,...,</span><span class="mi">999</span><span class="p">]</span> <span class="nx">找到最小值</span> <span class="nx">min1</span><span class="err">（</span><span class="nx">放到首位</span><span class="err">），</span><span class="nx">需要对比999次</span>
<span class="nx">第2次遍历</span><span class="err">，</span><span class="nx">要从</span> <span class="p">[</span><span class="mi">1</span><span class="p">,...,</span><span class="mi">999</span><span class="p">]</span> <span class="nx">找到最小值</span> <span class="nx">min2</span><span class="err">（</span><span class="nx">放到首位</span><span class="err">），</span><span class="nx">需要对比998次</span>
<span class="nx">第3次遍历</span><span class="err">，</span><span class="nx">要从</span> <span class="p">[</span><span class="mi">2</span><span class="p">,...,</span><span class="mi">999</span><span class="p">]</span> <span class="nx">找到最小值</span> <span class="nx">min3</span><span class="err">（</span><span class="nx">放到首位</span><span class="err">），</span><span class="nx">需要对比997次</span>
<span class="p">...</span>
<span class="nx">第999次遍历</span><span class="err">，</span><span class="nx">要从</span> <span class="p">[</span><span class="mi">998</span><span class="p">,</span><span class="mi">999</span><span class="p">]</span> <span class="nx">找到最小值</span> <span class="nx">min999</span><span class="err">（</span><span class="nx">放到首位</span><span class="err">），</span><span class="nx">需要对比1次</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>长度为 1000 的数组，最坏情况下（每次都需要对比）  1+2+3+4+…+998+999</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">   <span class="p">=&gt;</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">4</span> <span class="o">+</span> <span class="err">…</span> <span class="o">+</span> <span class="mi">998</span> <span class="o">+</span> <span class="mi">999</span>
   <span class="p">=&gt;</span> <span class="mi">1</span><span class="err">≈</span><span class="mi">1000</span> <span class="o">+</span> <span class="mi">2</span><span class="err">≈</span><span class="mi">1000</span> <span class="o">+</span> <span class="mi">3</span><span class="err">≈</span><span class="mi">1000</span> <span class="o">+</span> <span class="mi">4</span><span class="err">≈</span><span class="mi">1000</span> <span class="o">+</span> <span class="p">...</span> <span class="o">+</span> <span class="mi">555</span><span class="err">≈</span><span class="mi">1000</span> <span class="o">+</span> <span class="p">...</span> <span class="o">+</span> <span class="mi">998</span><span class="err">≈</span><span class="mi">1000</span> <span class="o">+</span> <span class="mi">999</span><span class="err">≈</span><span class="mi">1000</span>
   <span class="p">=&gt;</span> <span class="nx">大概1000个1000</span><span class="err">，</span><span class="nx">也就是</span> <span class="mi">1000</span><span class="o">^</span><span class="mi">2</span> 
   <span class="p">=&gt;</span> <span class="nx">n</span><span class="o">^</span><span class="mi">2</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>综上：</p>
<ul>
<li>选择排序：每次找最小的</li>
<li>时间复杂度，是 n 的平方  （这是最坏情况）</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="以快速排序为例">以「快速排序」为例</h3>
<blockquote>
<p>找一个基准数，然后左右分两队</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 假设数组长度为 1000
</span><span class="c1"></span>    <span class="p">[</span><span class="mi">0</span><span class="p">,...,</span><span class="mi">500</span><span class="p">,...,</span><span class="mi">999</span><span class="p">]</span>
            <span class="err">↑</span>
     <span class="err">↙</span>            <span class="err">↘</span>        <span class="c1">// 以500为基准，依次和 500 进行比较
</span><span class="c1"></span><span class="p">[</span><span class="mi">0</span><span class="p">,...,</span><span class="mi">500</span><span class="p">)</span> <span class="p">,</span> <span class="p">[</span><span class="mi">500</span><span class="p">,...,</span><span class="mi">999</span><span class="p">]</span> <span class="c1">// 左边全是比500小的，比较了 500 次。右边全是比500大的，比较了 500 次
</span><span class="c1"></span>
<span class="c1">// 然后 [0,...,500) 中再找一个基准数 250
</span><span class="c1"></span>       <span class="p">[</span><span class="mi">0</span><span class="p">,...,</span><span class="mi">250</span><span class="p">,...,</span><span class="mi">500</span><span class="p">)</span>
               <span class="err">↑</span>
            <span class="err">↙</span>   <span class="err">↘</span>
         <span class="mi">250</span>      <span class="mi">250</span>  <span class="c1">// 左边是比250小的，比较了250次。右边是比250大的，比较了250次，以此类推
</span><span class="c1"></span>
<span class="c1">// 得出图示 👇
</span><span class="c1"></span>       <span class="p">[</span><span class="mi">0</span><span class="p">,...,</span><span class="mi">250</span><span class="p">,...,</span><span class="mi">500</span><span class="p">)</span>      <span class="p">[</span><span class="mi">500</span><span class="p">,...,</span><span class="mi">999</span><span class="p">]</span>       <span class="o">|</span>    <span class="p">=&gt;</span> <span class="mi">500</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">=</span> <span class="mi">1000</span> <span class="nx">次</span>
               <span class="err">↑</span>                      <span class="err">↑</span>             <span class="o">|</span> 
            <span class="err">↙</span>   <span class="err">↘</span>                 <span class="err">↙</span>   <span class="err">↘</span>          <span class="o">|</span> 
         <span class="mi">250</span>      <span class="mi">250</span>            <span class="mi">250</span>     <span class="mi">250</span>        <span class="o">|</span>    <span class="p">=&gt;</span> <span class="mi">250</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">=</span> <span class="mi">1000</span> <span class="nx">次</span>
        <span class="err">↙</span> <span class="err">↘</span>     <span class="err">↙</span> <span class="err">↘</span>          <span class="err">↙</span> <span class="err">↘</span>    <span class="err">↙</span> <span class="err">↘</span>       <span class="o">|</span>
      <span class="mi">125</span>  <span class="mi">125</span>  <span class="mi">125</span>  <span class="mi">125</span>      <span class="mi">125</span>  <span class="mi">125</span>  <span class="mi">125</span>  <span class="mi">125</span>    <span class="o">|</span>    <span class="p">=&gt;</span> <span class="mi">125</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">=</span> <span class="mi">1000</span> <span class="nx">次</span>
             <span class="p">...</span>                      <span class="p">...</span>                        <span class="p">...</span>

<span class="cm">/* 
</span><span class="cm">	虽然每一排比较次数都是 1000 次，但是减少的速度特别快（每次折半） 
</span><span class="cm">	看 1000 能除以多少次 2，就知道这个树形图，能分裂出多少个 1000 次
</span><span class="cm">	1000 ≈ 1024 = 2^10，1000大概是2的10次方，所以最多除以10次。
</span><span class="cm">	如果把树形图比喻成塔，塔最高10层，每层1000次】
</span><span class="cm">*/</span>

	 <span class="nx">复杂度</span><span class="err">：</span>
<span class="p">=&gt;</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">10</span><span class="nx">层</span>   <span class="c1">// log(2)1000 ≈ 10层  (2^10=1024)
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="nx">N</span> <span class="o">*</span> <span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="nx">N</span> 
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>【快速排序】的时间复杂度，是 N * log(2)N</p>
</blockquote>
<p>​</p>
<blockquote>
<p>基本上画出 4 步的图示，就能找到规律，无需花费更多精力来记忆</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="以归并排序为例">以「归并排序」为例</h3>
<blockquote>
<p>思路：每次对半分。对排好序的两个数组，进行合并</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 假设数组长度为 1000
</span><span class="c1"></span>            <span class="p">[</span><span class="mi">0</span><span class="p">,...,</span><span class="mi">999</span><span class="p">]</span>
              <span class="err">↙</span>    <span class="err">↘</span>    <span class="c1">// 拆分成左右两部分，各操作 1 次（共2次）
</span><span class="c1"></span><span class="nx">merge</span><span class="p">([</span><span class="mi">0</span><span class="p">,...,</span><span class="mi">500</span><span class="p">],</span> <span class="p">[</span><span class="mi">500</span><span class="p">,...,</span><span class="mi">999</span><span class="p">])</span>   <span class="c1">// merge合并：分别用左边500个数和右边500个数做对比（共1000次操作）
</span><span class="c1"></span>        <span class="err">↙</span> <span class="err">↘</span>            <span class="err">↙</span> <span class="err">↘</span>  <span class="c1">// 拆分成左右两部分，各操作 1 次（共4次）
</span><span class="c1"></span>      <span class="mi">250</span>    <span class="mi">250</span>      <span class="mi">250</span>    <span class="mi">250</span>   <span class="c1">// merge：拆分成两部分，每部分250个数，逐个对比（共1000次操作） 
</span><span class="c1"></span>     <span class="err">↙↘</span>    <span class="err">↙↘</span>      <span class="err">↙↘</span>    <span class="err">↙↘</span>
   <span class="mi">125</span> <span class="mi">125</span> <span class="mi">125</span> <span class="mi">125</span>  <span class="mi">125</span> <span class="mi">125</span> <span class="mi">125</span> <span class="mi">125</span>  <span class="c1">// merge：拆分，每部分125个数，逐个对比（共1000次操作）
</span><span class="c1"></span>                  <span class="p">...</span>
<span class="c1">// 拆分到，每个数组只有一个元素，就停止：[0]，[1]，[2]...[998]，[999]
</span><span class="c1">// 问题就转换为：1000个数对半拆分，需要多少次就能拆分成1个1个的。 2^10 = 1024
</span><span class="c1">// 所以拆分10次就会停止，得到每个数组只有一个元素
</span><span class="c1">// 所以，需要10次拆分，每次拆分需要执行1000次合并操作
</span><span class="c1"></span>                  
   <span class="nx">复杂度</span><span class="err">：</span>
<span class="p">=&gt;</span> <span class="mi">1000</span><span class="nx">次合并</span> <span class="o">*</span> <span class="mi">10</span><span class="nx">次拆分</span>   <span class="c1">// log(2)1000 ≈ 10次拆分   (2^10=1024)
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="mi">1000</span> <span class="o">*</span> <span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="mi">1000</span>
<span class="p">=&gt;</span> <span class="nx">N</span> <span class="o">*</span> <span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="nx">N</span>                  
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">   <span class="nx">merge</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">])</span> 
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span>  
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span>    <span class="c1">// 6个元素需要对比5次 / 1000个元素需要对比999次
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="nx">四舍五入就是</span> <span class="nx">n</span> <span class="nx">个元素需要对比</span> <span class="nx">n</span> <span class="nx">次</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<blockquote>
<p>「归并排序」的 时间复杂度：与快速排序一致  N * log(2)N</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="以计数排序为例">以「计数排序」为例</h3>
<blockquote>
<p>思路：每次对半分。对排好序的两个数组，进行合并</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 假设数组长度为 1000
</span><span class="c1"></span>   <span class="p">[</span><span class="mi">0</span><span class="p">,...,</span><span class="mi">999</span><span class="p">]</span>
<span class="p">=&gt;</span> <span class="nx">对数组进行一次遍历</span><span class="err">：</span><span class="nx">得出</span> <span class="nx">计数的</span><span class="err">【</span><span class="nx">哈希表</span><span class="err">】</span><span class="nx">hashTable</span> <span class="err">，</span><span class="nx">并找出最大值</span><span class="err">（</span><span class="nx">假设max是100</span><span class="err">）</span>  <span class="err">（</span><span class="mi">1000</span><span class="nx">次操作</span><span class="err">）</span>
<span class="p">=&gt;</span> <span class="nx">hashTable</span> <span class="nx">里就添加了1000个数据</span>
<span class="p">=&gt;</span> <span class="nx">遍历</span> <span class="nx">min</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">~</span> <span class="nx">max</span><span class="err">（</span><span class="mi">100</span><span class="err">），</span><span class="nx">对应哈希表</span><span class="err">，</span><span class="nx">发现相同值</span><span class="err">，</span><span class="nx">就push输出</span> <span class="err">（</span><span class="mi">100</span><span class="nx">次操作</span><span class="err">）</span>  
                  
   <span class="nx">复杂度</span><span class="err">：</span>
<span class="p">=&gt;</span> <span class="mi">1000</span> <span class="o">+</span> <span class="mi">100</span>  <span class="c1">// 元素在0~100之间
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="nx">n</span> <span class="o">+</span> <span class="nx">max</span>   
<span class="c1">// 如果哈希表有最小值、最大值，如元素在50~100之间，则应该再减去min（只需比较 50 次）
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="nx">n</span> <span class="o">+</span> <span class="nx">max</span> <span class="o">-</span> <span class="nx">min</span> <span class="p">(</span><span class="nx">默认min是0</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>「计数排序」的 时间复杂度： n + max - min (默认min是0)</p>
</blockquote>
<p>​</p>
<blockquote>
<p>基本上画出 4 步的图示，就能找到规律，无需花费更多精力来记忆</p>
<p>不需要做特别精细的分析，只需要看衰减的规律即可</p>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="算法学习总结">算法学习总结</h2>
<h3 id="心法">心法</h3>
<ul>
<li>战略上藐视敌人：思想上暗示自己算法是特别简单的东西</li>
<li>战术上重视敌人：在真正写代码时，要非常重视每一个细节  +1  -1    &lt;   &lt;=   … （细节难以确定时，写写画画逐步分析）</li>
</ul>
<h3 id="特点">特点</h3>
<ul>
<li>思路都很简单</li>
<li>细节都很多
<ul>
<li>不需要多强的智力，需要的是耐心、细心</li>
</ul>
</li>
<li>**多画表，多画图，多 log **</li>
<li>如果实在不想陷入 JS 的细节，可以用「伪代码」</li>
</ul>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="还有哪些排序算法-">还有哪些排序算法 ⁉️</h2>
<p>冒泡排序 <a href="https://visualgo.net/zh/sorting">https://visualgo.net/zh/sorting</a>   点击 BUB    （visualgo只提供伪代码思路参考）</p>
<p>插入排序 <a href="https://visualgo.net/zh/sorting">https://visualgo.net/zh/sorting</a> 点击 INS</p>
<p>希尔排序 <a href="http://sorting.at/">http://sorting.at/</a>  自己选择 Shell Sort</p>
<p>基数排序 <a href="https://visualgo.net/zh/sorting">https://visualgo.net/zh/sorting</a>  点击 RAD</p>
<p></p>
<p></p>
<h3 id="冒泡排序-bubble-sort">冒泡排序 bubble sort</h3>
<blockquote>
<p>最 low 的排序。<a href="https://zhuanlan.zhihu.com/p/45501356" target="_blank" rel="noopener noreffer">思路</a></p>
</blockquote>
<blockquote>
<p><a href="https://visualgo.net/zh/sorting">https://visualgo.net/zh/sorting</a>    （查看图示 + 伪代码）</p>
</blockquote>
<p>两两对比，较大的往后接着对比。</p>
<p>每一轮找出一个最大值，冒泡到最后</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">bubbleSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>    <span class="c1">// i 代表轮次（两两比较）
</span><span class="c1"></span>    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">i</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// j 代表当前轮选中元素的下标
</span><span class="c1"></span>      <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]){</span>
        <span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]]</span>  <span class="c1">// 交换元素
</span><span class="c1"></span>      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">arr</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h3 id="插入排序-insertion-sort">插入排序 Insertion Sort</h3>
<blockquote>
<p>参考扑克牌思路，很好理解。  <a href="https://zhuanlan.zhihu.com/p/45638675" target="_blank" rel="noopener noreffer">思路</a></p>
</blockquote>
<blockquote>
<p>扑克牌思路：大部分人抓完牌，手上拿着的牌就已经都是排好序的。</p>
</blockquote>
<blockquote>
<p><a href="https://visualgo.net/zh/sorting">https://visualgo.net/zh/sorting</a> 点击 INS   （查看图示 + 伪代码）</p>
</blockquote>
<p>拿起一张牌，依次和前面的牌对比（所以起始值从下标为 1 的元素开始，才能保证前面有值可对比）</p>
<p>比前面的小，就插入到前面去</p>
<p></p>
<h4 id="思路-1">思路</h4>
<ul>
<li>**从第一个元素开始，该元素可以认为已经被排序 **</li>
<li>取出下一个元素，**在已经排序的元素序列中从后向前扫描 **</li>
<li>把取出的元素放到已排序的元素中间的合适位置</li>
<li>重复步骤2~3</li>
</ul>
<p>就像排队一样，依次每次挑一个同学，把该同学“插入”到已经排好的部分队伍里。</p>
<p>​</p>
<h4 id="代码-1">代码</h4>
<ul>
<li>开局默认第一个元素（前面元素）是已经排好序的。</li>
<li>取出下一个待排序元素，与前面已排好序的元素进行比较</li>
<li>如果后面的元素小于前面已排好序的某个元素，就把后面元素插入到前面已排好序的元素的**相应位置 **</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 插入法JS版
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">insertionSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// 开局默认下标0的元素已排序，所以待排序数组的下标取值从1开始
</span><span class="c1"></span>  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// i 表示当前待排序数组元素的下标
</span><span class="c1"></span>    <span class="c1">// j 表示当前已排序数组元素的下标（默认下标0的元素已排序,所以 j 初始值一定为0）
</span><span class="c1"></span>    <span class="c1">// 已排序元素始终在待排序元素的前面，所以 j 的取值一定小于 i
</span><span class="c1"></span>    <span class="c1">// 综上 j = [0,i)
</span><span class="c1"></span>    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">i</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> 
      <span class="c1">// 当前取出的待排序元素arr[i]，依次和前面已排序元素进行比较
</span><span class="c1"></span>      <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">])</span> <span class="p">{</span>  
        <span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>  <span class="c1">// 在 arr[j] 前面插入 arr[i]，然后把原本的 arr[i] 删除
</span><span class="c1"></span>        <span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">// 因为上一步已经在前面插入一个元素，导致后面元素下标后移一位，原本需要被删除 i 位置上的元素，现在的下标变成了 i+1
</span><span class="c1"></span>        <span class="k">break</span>  <span class="c1">// 跳出内层循环，i++
</span><span class="c1"></span>      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">28</span><span class="p">]</span>
<span class="nx">insertionSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>插入法普通版 for</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">insertionSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">temp</span><span class="p">;</span> <span class="nx">j</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="p">}</span>
    <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">temp</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="o">-----------------------------------------------------</span>
<span class="kd">function</span> <span class="nx">insertionSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">temp</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">arr</span><span class="p">;</span>
<span class="p">}</span>
<span class="o">-------------------------------------------------------</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">28</span><span class="p">]</span>
<span class="nx">insertionSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>插入法普通版 while</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">insertionSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="nx">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">temp</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
      <span class="nx">j</span><span class="o">--</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">arr</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">28</span><span class="p">]</span>
<span class="nx">insertionSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="希尔排序-shell-sort">希尔排序 Shell Sort</h3>
<blockquote>
<p>极其少见</p>
<p>算法应该是比较复杂的，是生想出来的。现实生活中没有可参考的例子、数学中也没有例子</p>
</blockquote>
<blockquote>
<p>1959年，一个叫 Shell 的人发明的</p>
</blockquote>
<p>貌似是间隔着排，先大间隔、然后中间间隔 …  可能会节省一些中间的步骤</p>
<p>​</p>
<h3 id="基数排序-radix-sort">基数排序 Radix Sort</h3>
<blockquote>
<p>特别适合用于**多位数排序 **</p>
<ul>
<li>指未排序数组中的元素，有一位数得、也有两位数、三位数、四位数、五位数的 … （形式多样的数组）</li>
</ul>
</blockquote>
<blockquote>
<p>死记硬背，顺序非常重要，记错了就完了（但是可以理解这个算法的精神 👇 ）</p>
</blockquote>
<p></p>
<ul>
<li>先根据个位数排序，个位是 0 的从下往上叠在一起，个位是 1 的从下往上叠在一起 …
<ul>
<li>然后<strong>按照个位 0-9 堆叠的从下往上的顺序</strong>（这个顺序非常重要）展开所有元素，成一个数组</li>
</ul>
</li>
<li>对这个新数组，根据十位数进行排序，十位数 0-9 从下往上堆叠。
<ul>
<li>然后再按0-9从下往上的顺序展开成数组</li>
</ul>
</li>
<li>…</li>
<li>所有位数都重复上述操作</li>
<li>最后展开的数组，就是排完序的数组</li>
</ul>
<p></p>
<p>​</p>
<p>​</p>
<h3 id="堆排序-heap-sort">堆排序 Heap Sort</h3>
<ul>
<li>堆排序应该是排序的终点了，因为没有比堆排序更复杂的排序了</li>
<li>其他复杂的排序，基本都是在堆排序的基础上进行改进而已</li>
<li>搞定了堆排序，就搞定了**「树」**这个数据结构，就搞定了排序的最难的一部分</li>
</ul>]]></description>
</item></channel>
</rss>

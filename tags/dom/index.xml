<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>DOM - 标签 - Sam&#39;s Garage</title>
        <link>http://samrks.github.io/tags/dom/</link>
        <description>DOM - 标签 - Sam&#39;s Garage</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ryuukousen@gmail.com (Sam)</managingEditor>
            <webMaster>ryuukousen@gmail.com (Sam)</webMaster><lastBuildDate>Tue, 27 Oct 2020 20:33:47 &#43;0800</lastBuildDate><atom:link href="http://samrks.github.io/tags/dom/" rel="self" type="application/rss+xml" /><item>
    <title>DOM 事件机制 &amp; 事件委托</title>
    <link>http://samrks.github.io/dom-event-event-delegation/</link>
    <pubDate>Tue, 27 Oct 2020 20:33:47 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/dom-event-event-delegation/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="dom-事件流">DOM 事件流</h2>
<blockquote>
<p>为什么有「事件流」？</p>
</blockquote>
<p>假如在一个button上注册了一个click事件，又在它的 父元素 div 上注册了一个 click 事件，那么当我们点击 button，是先触发父元素上的事件，还是button上的事件呢，这就需要一种约定去规范事件的执行顺序，就是事件执行的流程。</p>
<p>浏览器在发展的过程中出现了两种不同的规范</p>
<ul>
<li>IE 9（微软） 以下的 IE 浏览器使用的是事件冒泡，先从具体的接收元素，然后逐步向上传播到不具体的元素。</li>
<li>Netscape（网景） 采用的是事件捕获，先由不具体的元素接收事件，最具体的节点最后才接收到事件。</li>
<li>而 W3C（万维网）制定的 Web 标准中，是同时采用了两种方案，事件捕获和事件冒泡都可以。</li>
</ul>
<p>​</p>
<h2 id="事件的传播">事件的传播</h2>
<blockquote>
<p>又称「事件机制」 或 「事件模型」</p>
</blockquote>
<p>一个事件发生后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段。</p>
<blockquote>
<ul>
<li>第一阶段：从window对象传导到目标节点（上层传到底层），称为“捕获阶段”（capture phase）。</li>
<li>第二阶段：在目标节点上触发，称为“目标阶段”（target phase）。</li>
<li>第三阶段：从目标节点传导回window对象（从底层传回上层），称为“冒泡阶段”（bubbling phase）。</li>
</ul>
</blockquote>
<p>这种三阶段的传播模型，使得同一个事件会在多个节点上触发。</p>
<h3 id="1事件捕获">1.事件捕获</h3>
<blockquote>
<p>捕获是<strong>从上到下</strong>。</p>
</blockquote>
<p>事件传播的最上层对象是 window，接着依次是 document，html（document.documentElement）和body（document.body），然后按照普通的 html 结构一层一层往下传，最后到达目标元素。</p>
<p>我们只需要将 addEventListener 的第三个参数改为 true ，就可以实现事件捕获。</p>
<h3 id="2事件冒泡">2.事件冒泡</h3>
<blockquote>
<p>冒泡是<strong>从下到上</strong>。</p>
</blockquote>
<p>所谓事件冒泡就是事件像泡泡一样从最开始生成的地方一层一层往上冒，越来越大。从目标元素开始，一层层往上传，最后经过 body、html 到达 window 结束。</p>
<p>addEventListener 默认就是把事件绑定在冒泡阶段（第三个参数空着或者传 falsy 值 ）。</p>
<p></p>
<h3 id="示例">示例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>点击<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>上面代码中，<code>&lt;div&gt;</code> 节点之中有一个<code>&lt;p&gt;</code>节点。</p>
<p>如果对这两个节点，都设置click事件的监听函数（每个节点的捕获阶段和监听阶段，各设置一个监听函数），共计设置四个监听函数。然后，对<code>&lt;p&gt;</code>点击，click事件会触发四次。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">phases</span> <span class="o">=</span> <span class="p">{</span>
  <span class="mi">1</span><span class="o">:</span> <span class="s1">&#39;capture&#39;</span><span class="p">,</span>
  <span class="mi">2</span><span class="o">:</span> <span class="s1">&#39;target&#39;</span><span class="p">,</span>
  <span class="mi">3</span><span class="o">:</span> <span class="s1">&#39;bubble&#39;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">)</span>

<span class="nx">div</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
<span class="nx">p</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
<span class="nx">div</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
<span class="nx">p</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>

<span class="kd">function</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">tag</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">.</span><span class="nx">tagName</span>
  <span class="kd">var</span> <span class="nx">phase</span> <span class="o">=</span> <span class="nx">phases</span><span class="p">[</span><span class="nx">event</span><span class="p">.</span><span class="nx">eventPhase</span><span class="p">]</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Tag: &#39;&#34;</span> <span class="o">+</span> <span class="nx">tag</span> <span class="o">+</span> <span class="s2">&#34;&#39;. EventPhase: &#39;&#34;</span> <span class="o">+</span> <span class="nx">phase</span> <span class="o">+</span> <span class="s2">&#34;&#39;&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 点击以后的结果
</span><span class="c1">// Tag: &#39;DIV&#39;. EventPhase: &#39;capture&#39;
</span><span class="c1">// Tag: &#39;P&#39;. EventPhase: &#39;target&#39;
</span><span class="c1">// Tag: &#39;P&#39;. EventPhase: &#39;target&#39;
</span><span class="c1">// Tag: &#39;DIV&#39;. EventPhase: &#39;bubble&#39;
</span></code></pre></td></tr></table>
</div>
</div><p>上面代码表示，click事件被触发了四次：<code>&lt;div&gt;</code>节点的捕获阶段和冒泡阶段各1次，<code>&lt;p&gt;</code>节点的目标阶段触发了2次。</p>
<p>捕获阶段：事件从<code>&lt;div&gt;</code>向<code>&lt;p&gt;</code>传播时，触发<code>&lt;div&gt;</code>的click事件；
目标阶段：事件从<code>&lt;div</code>&gt;到达<code>&lt;p&gt;</code>时，触发<code>&lt;p&gt;</code>的click事件；
冒泡阶段：事件从<code>&lt;p&gt;</code>传回<code>&lt;div&gt;</code>时，再次触发<code>&lt;div&gt;</code>的click事件。
其中，<code>&lt;p&gt;</code>节点有两个监听函数（addEventListener方法第三个参数的不同，会导致绑定两个监听函数），因此它们都会因为click事件触发一次。所以，<code>&lt;p&gt;</code>会在target阶段有两次输出。</p>
<p>注意，浏览器总是假定click事件的目标节点，就是点击位置嵌套最深的那个节点（本例是<code>&lt;div&gt;</code>节点里面的<code>&lt;p&gt;</code>节点）。所以，<code>&lt;p&gt;</code>节点的捕获阶段和冒泡阶段，都会显示为target阶段。</p>
<p>事件传播的最上层对象是window，接着依次是document，html（document.documentElement）和body（document.body）。也就是说，上例的事件传播顺序，在捕获阶段依次为window、document、html、body、div、p，在冒泡阶段依次为p、div、body、html、document、window。</p>
<h3 id="一个特例">一个特例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">ele</span><span class="p">&gt;</span>点我<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 👇先监听冒泡阶段的点击事件
</span><span class="c1"></span><span class="nx">ele</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;2&#39;</span><span class="p">)</span>
<span class="p">})</span>
<span class="c1">// 👇再监听捕获阶段的点击事件
</span><span class="c1"></span><span class="nx">ele</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">)</span>
<span class="p">},</span> <span class="kc">true</span><span class="p">)</span>

<span class="c1">// 点击div以后的结果
</span><span class="c1">// 2  （冒泡）
</span><span class="c1">// 1  （捕获）
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 👇先监听捕获阶段的点击事件
</span><span class="c1"></span><span class="nx">ele</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">)</span>
<span class="p">},</span> <span class="kc">true</span><span class="p">)</span>
<span class="c1">// 👇再监听冒泡阶段的点击事件
</span><span class="c1"></span><span class="nx">ele</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;2&#39;</span><span class="p">)</span>
<span class="p">})</span>

<span class="c1">// 点击div以后的结果
</span><span class="c1">// 1   （捕获）
</span><span class="c1">// 2   （冒泡）
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>点击触发后的结果：与点击事件绑定在哪个阶段并无直接关系，而是谁写在前，谁先执行</p>
</blockquote>
<p>当只有一个单一的元素被监听时（不存在父子元素关系），分别在捕获和冒泡两个阶段，监听这个元素的点击事件。这种情况下，点击事件被触发后，则不再遵循「先捕获后冒泡」的机制，而是「谁先监听，谁先执行」</p>
<h2 id="addeventlistener-">addEventListener 👂</h2>
<h3 id="事件绑定-api">事件绑定 API</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">baba</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">(</span><span class="s1">&#39;onclick&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>  <span class="c1">// 微软IE5发明：默认进入冒泡阶段
</span><span class="c1"></span><span class="nx">baba</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>  <span class="c1">// 网景发明：默认进入捕获阶段
</span><span class="c1"></span><span class="nx">baba</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="nx">bool</span><span class="p">)</span><span class="err">·</span><span class="c1">// ❤️W3C标准：加了参数 bool，用于指定让函数运行在哪个阶段
</span></code></pre></td></tr></table>
</div>
</div><h4 id="如果-bool-不传-或为-falsyhttpsdevelopermozillaorgzh-cndocsglossaryfalsy">如果 bool 不传 （或为 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy" target="_blank" rel="noopener noreffer">falsy</a>）</h4>
<ul>
<li>默认情况</li>
<li>就让 fn 走<strong>冒泡</strong>，即当浏览器在冒泡阶段发现 baba 有 fn 监听函数，就会调用 fn，并提供事件信息</li>
<li>大多数人习惯上都不会传这个参数（可见 W3C 可能更倾向于 IE 的方案：默认把 fn 放在冒泡阶段）</li>
</ul>
<h4 id="如果-bool-为-true">如果 bool 为 true</h4>
<ul>
<li>就让 fn 走<strong>捕获</strong>，即当浏览器在捕获阶段发现 baba 有 fn 监听函数，就会调用 fn，并提供事件信息</li>
</ul>
<p>​</p>
<h3 id="补充事件移除">补充：事件移除</h3>
<blockquote>
<p>removeEventListener</p>
</blockquote>
<p>通过 addEventListener() 添加的事件只能用 <strong>removeEventListener()</strong> 来移除</p>
<ul>
<li>移除时，传入的参数与添加事件使用的参数相同</li>
<li>通过 addEventListener() 添加的匿名函数无法删除</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">btn</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;myBtn&#34;</span><span class="p">)</span>
<span class="nx">btn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
<span class="p">},</span> <span class="kc">false</span><span class="p">)</span>
<span class="nx">btn</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="c1">// 匿名函数无法移除
</span><span class="c1"></span>  <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
<span class="p">},</span> <span class="kc">false</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">btn</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;myBtn&#34;</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">handler</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">btn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="nx">handler</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
<span class="nx">btn</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="nx">handler</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>  <span class="c1">// 有效！
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="target--currenttarget">target 🆚 currentTarget</h2>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/currentTarget" target="_blank" rel="noopener noreffer">Event.currentTarget</a> 找到事件<strong>绑定</strong>的元素。</p>
<p>区别与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/target" target="_blank" rel="noopener noreffer">Event.target</a> ，是事件<strong>触发</strong>的元素。</p>
</blockquote>
<h3 id="区别">区别</h3>
<blockquote>
<p>一个是用户点击的（触发事件的元素），一个是开发者监听的（事件绑定的元素）</p>
</blockquote>
<ul>
<li>e.target ：用户操作的元素</li>
<li>e.currentTarget ：程序员监听的元素</li>
<li>this 是 e.currentTarget，非常不推荐在监听代码里使用 this（因为经常会忘记  this 到底指代哪一个）</li>
</ul>
<h3 id="举例">举例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>文字<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>给 div 绑定点击事件，用户点击“文字”</li>
<li>e.target 就是 span</li>
<li>e.currentTarget 就是 div</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="阻止默认事件">阻止默认事件</h2>
<blockquote>
<p>默认事件，又称「默认动作」「默认行为」</p>
<p>例如：表单一点击提交按钮(submit)就会刷新页面、点击a标签默认执行页面跳转或是锚点定位等。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>如果调用这个方法，默认事件行为将不再触发。</p>
<h3 id="使用场景1">使用场景1</h3>
<blockquote>
<p>使用a标签仅仅是想当做一个普通的按钮，点击实现一个功能，不想页面跳转，也不想锚点定位。</p>
</blockquote>
<h4 id="方法一">方法一</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;javascript:;&#34;</span><span class="p">&gt;</span>链接<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="方法二">方法二</h4>
<p>使用 JS 方法来阻止：当我们点击A标签的时候，会先触发click事件，其次才会执行自己的默认行为。所以只需给其 click 事件 return false ，让执行中断</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;test&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;http://www.google.com&#34;</span><span class="p">&gt;</span>链接<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="nx">test</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
    <span class="nx">e</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">event</span>  <span class="c1">// 兼容不同浏览器
</span><span class="c1"></span>    <span class="k">return</span> <span class="kc">false</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="方法三">方法三</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;test&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;http://www.google.com&#34;</span><span class="p">&gt;</span>链接<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="nx">test</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
    <span class="nx">e</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">event</span>
    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用场景2">使用场景2</h3>
<blockquote>
<p>限制输入框最多只能输入六个字符，如何实现？</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#39;tempInp&#39;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="nx">tempInp</span><span class="p">.</span><span class="nx">onkeydown</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ev</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">ev</span> <span class="o">=</span> <span class="nx">ev</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">event</span>
    <span class="kd">let</span> <span class="nx">val</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span> <span class="c1">// trim去除字符串首尾空格（不兼容）
</span><span class="c1"></span>    <span class="c1">// this.value = this.value.replace(/^ +| +$/g,&#39;&#39;) 兼容写法
</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">val</span><span class="p">.</span><span class="nx">length</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">len</span> <span class="o">&gt;=</span> <span class="mi">6</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">val</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
      <span class="c1">// 阻止默认行为去除特殊按键（DELETE\BACK-SPACE\方向键...）
</span><span class="c1"></span>      <span class="kd">let</span> <span class="nx">code</span> <span class="o">=</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">which</span> <span class="o">||</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">keyCode</span>  <span class="c1">// 当前按下的按键的code码
</span><span class="c1"></span>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="sr">/^(46|8|37|38|39|40)$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">code</span><span class="p">))</span> <span class="p">{</span>  <span class="c1">// 如果按下的是特殊按键，则阻止默认事件（按下无效）
</span><span class="c1"></span>        <span class="nx">ev</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="阻止事件传播">阻止事件传播</h2>
<blockquote>
<p>阻止事件进一步的 冒泡 / 捕获</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">e</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">()</span> 
</code></pre></td></tr></table>
</div>
</div><h3 id="示例-1">示例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;level1&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;level2&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;level3&#34;</span><span class="p">&gt;</span>
			点我
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">level1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.level1&#39;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">level2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.level2&#39;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">level3</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.level3&#39;</span><span class="p">)</span>

<span class="nx">level1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
<span class="p">})</span> 
<span class="nx">level2</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;2&#34;</span><span class="p">)</span>
<span class="p">})</span> 
<span class="nx">level3</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
  <span class="nx">e</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">()</span>  <span class="c1">// 阻止冒泡，输出： 3
</span><span class="c1"></span><span class="p">})</span>

<span class="c1">// 不阻止冒泡，点击文字，输出顺序： 3  2  1
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">level1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
<span class="p">},</span> <span class="kc">true</span><span class="p">)</span> 
<span class="nx">level2</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;2&#34;</span><span class="p">)</span>
  <span class="nx">e</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">()</span>  <span class="c1">// 阻止捕获，输出： 1  2
</span><span class="c1"></span><span class="p">},</span> <span class="kc">true</span><span class="p">)</span> 
<span class="nx">level3</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
<span class="p">},</span> <span class="kc">true</span><span class="p">)</span>

<span class="c1">// 不阻止捕获，点击文字，输出顺序： 1  2  3
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="插曲如何阻止滚动-">插曲：如何阻止滚动 🖱️</h2>
<h3 id="scroll-不支持阻止默认事件">scroll 不支持阻止默认事件</h3>
<blockquote>
<p>MDN 搜索 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/scroll_event" target="_blank" rel="noopener noreffer">scroll event</a></p>
<p>滚动事件，不能阻止默认事件。 那怎么让页面无法滚动呢？</p>
</blockquote>
<h3 id="解决办法">解决办法</h3>
<ul>
<li>要阻止滚动，可阻止 wheel（鼠标滚轮） 和 touchstart（移动端触屏） 的默认动作</li>
<li>拖拽滚动条，还能实现滚动，所以还需要隐藏滚动条</li>
</ul>
<h3 id="代码">代码</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">x</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>4<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  ...  
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>100<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  <span class="c">&lt;!-- p标签撑起页面，超出一屏高度，出现滚动条 --&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="c1">// PC 端
</span><span class="c1"></span>  <span class="nx">x</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;wheel&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>  <span class="c1">// 绑定滚轮事件 wheel，触发滚轮事件，就阻止执行
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
  <span class="p">})</span>
  <span class="c1">// 移动端
</span><span class="c1"></span>  <span class="nx">x</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;touchstart&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>  <span class="c1">// 手机端是触屏拖拽滚动，那就阻止touchstart触屏事件
</span><span class="c1"></span>    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
  <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="p">::</span><span class="nd">-webkit-scrollbar</span> <span class="p">{</span> <span class="k">width</span><span class="p">:</span> <span class="mi">0</span> <span class="cp">!important</span> <span class="p">}</span>   <span class="c">/* 隐藏滚动条 */</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>注意：你需要找准滚动条所在的元素（在 document 上）</li>
<li>用 overflow: hidden 也可以直接取消滚动条。但此时 JS 依然可以修改 scrollTop</li>
</ul>
<p>​</p>
<h2 id="浏览器自带事件">浏览器自带事件</h2>
<ul>
<li>一共 100 多种事件，<a href="https://developer.mozilla.org/zh-CN/docs/Web/Events" target="_blank" rel="noopener noreffer">列表</a> 在MDN上</li>
<li>用户打印、写字、全屏、复制粘贴、键盘按键、点击鼠标、拖放事件、媒体事件（比如直播：被播放、关闭、暂停、加速）…</li>
</ul>
<ul>
<li>非常多的事件，都可以被监听。</li>
<li>想一下全部理解，是不可能的。用到再查就可以</li>
</ul>
<table>
<thead>
<tr>
<th>事件名称</th>
<th>应用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>error</td>
<td></td>
</tr>
<tr>
<td>abort</td>
<td>中止事件</td>
</tr>
<tr>
<td>load</td>
<td>加载成功事件</td>
</tr>
<tr>
<td>beforeunload</td>
<td>关闭页面事件</td>
</tr>
<tr>
<td>unload</td>
<td>关闭页面之后的事件</td>
</tr>
<tr>
<td>online</td>
<td>网络连上了，触发 online （从没用过）</td>
</tr>
<tr>
<td>offline</td>
<td>WiFi 网络突然断了，触发 offline（从没用过）</td>
</tr>
<tr>
<td>focus</td>
<td>一个元素获取焦点</td>
</tr>
<tr>
<td>blur</td>
<td>一个元素失去焦点</td>
</tr>
<tr>
<td>pageshow</td>
<td>一个页面显示出来，会触发pageshow （从没用过）</td>
</tr>
<tr>
<td>submit</td>
<td>提交</td>
</tr>
<tr>
<td>beforeprint</td>
<td>用户打印</td>
</tr>
<tr>
<td>afterprint</td>
<td>用户打印</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
<p>​</p>
<h2 id="自定义事件">自定义事件</h2>
<blockquote>
<p>开发者可以在【浏览器自带事件】之外，自定义一个事件</p>
</blockquote>
<p>HTML</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;div1&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">button</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>
	  点击触发sam事件
	<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>JS</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">btn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="c1">// new出自定义事件，new CustomEvent(&#39;事件名&#39;, 事件信息)
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CustomEvent</span><span class="p">(</span><span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="p">{</span> 
    <span class="nx">detail</span><span class="o">:</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span> <span class="p">}</span>
  <span class="p">})</span>
  <span class="c1">// EventTarget.dispatchEvent(event) 触发事件
</span><span class="c1"></span>  <span class="nx">btn</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> 
<span class="p">})</span>
<span class="c1">// 现在效果：点击 btn ，触发 sam 事件
</span><span class="c1"></span>
<span class="c1">// 监听 sam 事件
</span><span class="c1"></span><span class="nx">btn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> 
  <span class="nx">congsole</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;sam事件触发了&#39;</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">detail</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="自定义事件会冒泡吗">自定义事件，会冒泡吗？</h3>
<ul>
<li>测试：只监听 div1 的点击事件。看看点击 btn，会触发到 div1 的点击事件吗？</li>
<li>结果：不行，不冒泡。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 监听 div1 的 sam 事件
</span><span class="c1"></span><span class="nx">div1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> 
  <span class="nx">congsole</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;sam事件触发了&#39;</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">detail</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>如果想实现自定义事件的冒泡，还需额外再给自定义事件 <strong>开启冒泡属性</strong></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">btn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CustomEvent</span><span class="p">(</span><span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="p">{</span> 
    <span class="nx">detail</span><span class="o">:</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span> <span class="p">},</span>
    <span class="nx">bubbles</span><span class="o">:</span> <span class="kc">true</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 开启冒泡，添加这句就可以了
</span><span class="c1"></span>    <span class="c1">// cancelable: false  // 是否可以阻止默认事件
</span><span class="c1"></span>  <span class="p">})</span>
  <span class="nx">btn</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> 
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="事件委托">事件委托</h2>
<blockquote>
<p>又称「事件代理」</p>
</blockquote>
<p>由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件委托（代理）。</p>
<h3 id="使用场景-1">使用场景 1</h3>
<p>假设有一个列表，列表之中有<strong>大量的子项</strong>，我们需要在点击每个子项的时候响应一个事件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;list&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>item 1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>item 2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>item 3<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  ......
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>item n<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">===</span> <span class="s1">&#39;li&#39;</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;li 被点击了&#39;</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;li 内容是：&#39;</span> <span class="o">+</span> <span class="nx">t</span><span class="p">.</span><span class="nx">textContent</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>如果给每个子项都绑定一个函数，那对于内存消耗是非常大的，效率上需要消耗很多性能。</li>
<li>借助事件委托，我们只需要给父容器 ul 绑定方法即可</li>
<li>这样不管点击的是哪一个后代元素，都会根据冒泡传播的传递机制，把容器的 click 行为触发，然后把对应的方法执行，根据事件源，我们可以知道点击的是谁，从而完成不同的事。</li>
</ul>
<h3 id="使用场景-2">使用场景 2</h3>
<ul>
<li>在很多时候，我们需要通过用户操作<strong>动态的新增子项元素</strong>。</li>
<li>在最初并没有新增子项元素时，就无法给还未创建的子项元素绑定事件</li>
<li>这种情况就可以采用事件委托的形式，给父级元素绑定事件，监听到子项的动态变化。</li>
</ul>
<p><a href="http://js.jirengu.com/wuwox/1/edit?html,js,output" target="_blank" rel="noopener noreffer">示例</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">button</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>新增按钮<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;div1&#34;</span><span class="p">&gt;</span>
  
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span>
<span class="nx">btn</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">n</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="kr">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">)</span>
  <span class="nx">button</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="s1">&#39;按钮&#39;</span> <span class="o">+</span> <span class="nx">n</span>
  <span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">button</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">list</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">===</span> <span class="s1">&#39;button&#39;</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;当前点击的是：&#39;</span> <span class="o">+</span> <span class="nx">t</span><span class="p">.</span><span class="nx">innerText</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="优点">优点</h3>
<ul>
<li>减少内存消耗，提高性能  （例1）
<ul>
<li>如果要监听100个按钮，需要100个监听器，就是100倍的内存。如果之间一个祖先 div，就是只需要一个监听器，节约了99个</li>
</ul>
</li>
<li>可以监听动态的元素  （例2）
<ul>
<li>如果当前元素还不存在，肯定没法直接监听到。只能监听祖先</li>
</ul>
</li>
</ul>
<h3 id="封装事件委托">封装事件委托</h3>
<blockquote>
<p>封装，需要考虑更多边界情况</p>
<ul>
<li>
<p>写出这样一个函数 <code>on('click', '#testDiv', 'li', fn)</code></p>
</li>
<li>
<p>当用户点击 <code>#testDiv</code> 里的 <code>li</code> 元素时，调用 <code>fn</code> 函数</p>
</li>
</ul>
</blockquote>
<p><a href="http://js.jirengu.com/kuxeg/3/edit?html,js,output" target="_blank" rel="noopener noreffer">示例</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">button</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>新增按钮<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;div1&#34;</span><span class="p">&gt;</span>

<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span>
<span class="nx">btn</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">n</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="kr">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">)</span>
  <span class="kr">const</span> <span class="nx">span</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;span&#39;</span><span class="p">)</span>
  <span class="nx">span</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="s1">&#39;按钮&#39;</span> <span class="o">+</span> <span class="nx">n</span>
  <span class="nx">button</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">span</span><span class="p">)</span>
  <span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">button</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;#div1&#39;</span><span class="p">,</span> <span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="nx">fm</span><span class="p">)</span>
<span class="kd">function</span> <span class="nx">fm</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">el</span><span class="p">){</span>  
  <span class="c1">// 不能用箭头函数，this 会获取不到 el
</span><span class="c1"></span>  <span class="c1">// 箭头函数中的 this，只能获取到 window
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">innerText</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">on</span><span class="p">(</span><span class="nx">eventType</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">selector</span><span class="p">,</span> <span class="nx">fn</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">element</span> <span class="k">instanceof</span> <span class="nx">Element</span><span class="p">)){</span>
    <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">eventType</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">el</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span>
    <span class="c1">// 只要el不匹配，就不断获取el的父元素来匹配，直到el获取element，说明容器中压根没有匹配的el，结束循环
</span><span class="c1"></span>    <span class="c1">// el 为 null，则不执行 fn
</span><span class="c1"></span>    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="nx">el</span><span class="p">.</span><span class="nx">matches</span><span class="p">(</span><span class="nx">selector</span><span class="p">)){</span> 
      <span class="k">if</span><span class="p">(</span><span class="nx">el</span> <span class="o">===</span> <span class="nx">element</span><span class="p">){</span>  <span class="c1">// 循环结束条件
</span><span class="c1"></span>        <span class="nx">el</span> <span class="o">=</span> <span class="kc">null</span>
        <span class="k">break</span>
      <span class="p">}</span>
      <span class="nx">el</span> <span class="o">=</span> <span class="nx">el</span><span class="p">.</span><span class="nx">parentNode</span>
    <span class="p">}</span>
    <span class="nx">el</span> <span class="o">&amp;&amp;</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">e</span><span class="p">,</span> <span class="nx">el</span><span class="p">)</span>
  <span class="p">})</span>
  <span class="k">return</span> <span class="nx">element</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="答疑">答疑</h2>
<h3 id="js-支持事件吗">JS 支持事件吗</h3>
<h4 id="答">答</h4>
<blockquote>
<p>不支持。因为 JS 本身没有「事件」（只是调用了 DOM 提供的 addEventListener）</p>
</blockquote>
<ul>
<li>本节内容的 DOM 事件，不属于JS 的功能。
<ul>
<li>术语：本节内容是基于浏览器提供的 DOM 的功能</li>
<li>JS 是浏览器的功能之一。DOM 事件也是浏览器的功能之一（<strong>二者是平行的关系，没有从属关系</strong>）</li>
<li>JS 里面没有 DOM 事件， JS 只是调用了 DOM 提供的 addEventListener 而已</li>
</ul>
</li>
</ul>
<blockquote>
<p>因为 DOM 提供了 事件的功能，还提供了一整套完整的事件机制（捕获冒泡、默认动作、event 对象…）</p>
<p>所以 JS 才可以用</p>
</blockquote>
<h4 id="追问">追问</h4>
<blockquote>
<p>由于 JS 不支持事件，面试官可能问你「能不能手写出一个 JS 事件系统」</p>
</blockquote>
<ul>
<li>如何让JS支持事件？请手写一个事件系统。</li>
<li>目前大家的水平还写不出来，可以先思考一段时间。
（可以搜一搜、实际上也不难，用一个「队列」就可以遭到了）</li>
</ul>
<blockquote>
<p>以上。本节就是对 <strong>DOM事件（不是 JS 事件）</strong> 的一个完整了解</p>
</blockquote>
<h2 id="参考">参考</h2>
<p><a href="https://javascript.ruanyifeng.com/dom/event.html#toc10" target="_blank" rel="noopener noreffer">阮一峰：事件模型</a></p>
<p><a href="https://juejin.im/post/6844903781969166349#heading-19" target="_blank" rel="noopener noreffer">深入理解DOM事件机制</a></p>
<p><a href="https://www.jianshu.com/p/e8a6fad0f7bc" target="_blank" rel="noopener noreffer">e = e || window.event</a></p>]]></description>
</item><item>
    <title>手写 DOM 库</title>
    <link>http://samrks.github.io/dom-dom-handwritten/</link>
    <pubDate>Thu, 22 Oct 2020 15:49:13 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/dom-dom-handwritten/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="前言">前言</h2>
<p><a href="https://github.com/samrks/dom-1" target="_blank" rel="noopener noreffer">本节代码地址</a></p>
<p>​</p>
<p>​</p>
<h2 id="什么叫封装">什么叫封装</h2>
<blockquote>
<p>可以理解成「把一些复杂的东西，打包成盒」，通过简单的命令就可使用</p>
</blockquote>
<h3 id="举例">举例</h3>
<ul>
<li>电脑笔记本就是 CPU、内存、硬盘、主板、显卡 的封装</li>
<li>用户只需要接触显示器、键盘、鼠标、触控板等设备</li>
<li>即可操作复杂的计算机</li>
</ul>
<h3 id="接口">接口</h3>
<ul>
<li>
<p>被封装的东西需要暴露一些功能给外部</p>
</li>
<li>
<p>这些功能就是<strong>接口</strong>，如 USB 接口、HDMI 接口</p>
<ul>
<li>接口都是需要有规范的文档来说明的</li>
<li>全世界厂商都可以根据 USB 接口文档，来生产具有 USB 接口的硬件</li>
<li>深圳华强北就是根据各种文档，很快的复制生产出苹果数据线 … （功能差不多、价格更便宜）</li>
<li>这就是接口的好处，只要知道它的功能和实现细节，所有厂商都能做</li>
</ul>
</li>
<li>
<p>设备只要支持这些接口，即可与被封装的东西通讯</p>
<ul>
<li>比如在键盘上打字，计算机就能接收到我们敲了哪个键</li>
</ul>
</li>
<li>
<p>比如键盘、鼠标支持 USB 接口</p>
</li>
<li>
<p>显示器支持 HDMI 接口</p>
<ul>
<li>全世界所有显示器厂商的产品，都可以连接到任何一台电脑，就是因为有<strong>接口的统一标准</strong>存在</li>
<li>旧的有：VGA 接口（体积大、传输慢）</li>
<li>最新的有：雷电接口、HDMI 接口 （都有新的标准）</li>
</ul>
</li>
</ul>
<p>（示意图）</p>
<p></p>
<p></p>
<p>本节的实现的《我的库》里面就封装了 DOM 的各种奇葩操作</p>
<ul>
<li>document.getElementById   单词太长，封装后就叫 get 或者 find</li>
<li>封装成一个 create 就可以实现创建元素，不需要写 document.createElement … 这么复杂的单词</li>
<li>封装出来的  get、find、create  这些函数，就是接口</li>
<li>所有的页面中，都可以调用这些接口</li>
</ul>
<h2 id="术语">术语</h2>
<h3 id="库">库</h3>
<ul>
<li>我们把提供给其他人用的工具代码，叫做「库」
<ul>
<li>就是把一些好用的函数统一放到一个地方，这个地方就是「库」</li>
</ul>
</li>
<li>比如 jQuery、Underscore 它们就是库（提供了很多函数，供用户调用）</li>
</ul>
<h3 id="api">API</h3>
<ul>
<li>「库」暴露出来的函数或属性（功能）叫做 API（应用编程接口）</li>
<li>API： Application Programming Interface</li>
</ul>
<h3 id="框架">框架</h3>
<ul>
<li>当你的库变得很大，并且<strong>需要学习才能看懂</strong></li>
<li>那么这个库就叫「框架」，比如 Vue / React</li>
</ul>
<h3 id="注意">注意</h3>
<ul>
<li>
<p>编程界的术语大部分都很随便，没有固定的解释</p>
<ul>
<li>可能程序员写了套东西，涵盖很多内容，作者本人也搞不清楚应该怎么定性，就随意的称为「库」</li>
<li>如果遇到有人反驳，那就慢慢讨论、定性</li>
</ul>
</li>
<li>
<p>所以意会即可</p>
<ul>
<li>我们就把「小的功能」叫库，「大的功能」叫框架</li>
</ul>
<p>​</p>
</li>
</ul>
<h2 id="封装技术">封装技术</h2>
<blockquote>
<p>下面我们开始学习封装技术</p>
</blockquote>
<blockquote>
<p>会用两种不同的风格，封装 DOM 操作</p>
<ol>
<li>对象风格（命名空间风格）</li>
<li>链式风格（ jQuery 风格）</li>
</ol>
</blockquote>
<p>​</p>
<p>​</p>
<h2 id="dom-库的初始化-">DOM 库的初始化 ⭕️</h2>
<blockquote>
<p>创建 dom-1 项目目录  &gt;  src 目录  &gt;   index.html、main.js、dom.js</p>
</blockquote>
<h3 id="indexhtml">index.html</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
  示例
  <span class="c">&lt;!-- 注意：要先引入 dom.js；
</span><span class="c">       否则 main 中先引用了dom.js的 API 就会报错：dom is not defined --&gt;</span>
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;dom.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;main.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="domjs">dom.js</h3>
<blockquote>
<p>dom 库（对象） 和 封装的函数（create），有两种呈现关系的形式</p>
</blockquote>
<p>1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">dom</span> <span class="o">=</span> <span class="p">{}</span>
<span class="nx">dom</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{}</span>   <span class="c1">// window.dom.create 省略前缀 window
</span></code></pre></td></tr></table>
</div>
</div><p>2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">dom</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">create</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{}</span>
<span class="p">}</span>
<span class="c1">//  👆可进一步简化：省略 function   // ES6
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">dom</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">create</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="举例封装-create-代码">举例：封装 create 代码</h3>
<blockquote>
<p>更多代码，请直接查看<a href="https://github.com/samrks/dom-1" target="_blank" rel="noopener noreffer">地址</a></p>
</blockquote>
<blockquote>
<p>create  创建节点</p>
</blockquote>
<h4 id="写法-1">写法 1</h4>
<ul>
<li>调用时填入要创建的标签名</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">dom</span> <span class="o">=</span> <span class="p">{}</span>
<span class="nx">dom</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">tagName</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">tagName</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="写法-2">写法 2</h4>
<h5 id="初版有-bug">初版有 bug</h5>
<ul>
<li>调用时直接填入标签结构</li>
<li>但填入 td / tr / tbody … 这种表格内的标签，就会返回 undefined。</li>
<li>这些标签不能直接放入 div 中，通常需要外层有 table 标签包裹才行</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">html</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// const container = document.createElement(&#39;div&#39;)  
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;template&#39;</span><span class="p">)</span>
  <span class="c1">// 如果容器是 div ，不能容纳 td ... 等
</span><span class="c1"></span>  <span class="c1">// 使用 &lt;template&gt;&lt;/template&gt; 作为容器，可以容纳任意元素。
</span><span class="c1"></span>  <span class="nx">container</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">html</span>
  <span class="k">return</span> <span class="nx">container</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="正确代码">正确代码</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">html</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;template&#34;</span><span class="p">)</span>
  <span class="nx">container</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">html</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span>
  <span class="c1">// trim 去掉字符串的两端空格
</span><span class="c1"></span>  <span class="c1">// 因为使用firstChild获取元素，如果传入的html前面有空格，就会只获取到空格(文本元素)，而不是标签元素。
</span><span class="c1"></span>  <span class="c1">// 所以必须提前trim()一下
</span><span class="c1"></span>  <span class="k">return</span> <span class="nx">container</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">firstChild</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="mainjs">main.js</h3>
<h4 id="写法-1-的调用">写法 1 的调用</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">dom</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="s2">&#34;div&#34;</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>   <span class="c1">// (标签) &lt;div&gt;&lt;/div&gt;
</span></code></pre></td></tr></table>
</div>
</div><h4 id="写法-2-的调用">写法 2 的调用</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">dom</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="s2">&#34;&lt;div&gt;&lt;span&gt;123&lt;/span&gt;&lt;/div&gt;&#34;</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>   <span class="c1">// (标签) &lt;div&gt;&lt;span&gt;123&lt;/span&gt;&lt;/div&gt;
</span></code></pre></td></tr></table>
</div>
</div><h2 id="对象风格">对象风格</h2>
<h3 id="也叫-命名空间风格">也叫 命名空间风格</h3>
<ul>
<li>window.dom 是我们提供的全局对象</li>
</ul>
<blockquote>
<p>下面从增删改查 4 个方面，来说明 window.dom 是干什么的（代码量很大哦）、</p>
</blockquote>
<blockquote>
<p><a href="https://github.com/samrks/dom-1" target="_blank" rel="noopener noreffer">本节代码地址</a></p>
</blockquote>
<h3 id="增">增</h3>
<blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/after" target="_blank" rel="noopener noreffer">after()</a>：2020刚出的</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/insertBefore" target="_blank" rel="noopener noreffer">insertBefore</a> 语法：<code>父节点.insertBefore(要插入的子节点，插入到哪个子节点的前面)</code></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">create</span><span class="err">（</span><span class="s1">&#39;&lt;div&gt;hi&lt;/div&gt;&#39;</span><span class="p">)</span>   <span class="c1">// 用于创建节点
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">after</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span><span class="nx">node2</span><span class="p">)</span>          <span class="c1">// 用于新增弟弟
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">before</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span><span class="nx">node2</span><span class="p">)</span>         <span class="c1">// 用于新增哥哥
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">parent</span><span class="p">,</span><span class="nx">child</span><span class="p">)</span>       <span class="c1">// 用于新增儿子
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">wrap</span><span class="p">(</span><span class="sb">`&lt;div&gt;&lt;/div&gt;`</span><span class="p">)</span>        <span class="c1">// 用于新增爸爸
</span></code></pre></td></tr></table>
</div>
</div><p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">dom</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="nx">create</span><span class="p">(</span><span class="nx">string</span><span class="p">){</span> <span class="c1">// 创建节点
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;template&#34;</span><span class="p">)</span>
    <span class="nx">container</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">string</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span>
    <span class="k">return</span> <span class="nx">container</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">firstChild</span>
  <span class="p">},</span>
  <span class="nx">after</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">node2</span><span class="p">){</span> <span class="c1">// 新增兄弟节点
</span><span class="c1"></span>    <span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">node2</span><span class="p">,</span> <span class="nx">node</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">)</span>
  <span class="p">},</span> 
  <span class="nx">before</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">node2</span><span class="p">){</span> <span class="c1">// 新增兄弟节点
</span><span class="c1"></span>    <span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">node2</span><span class="p">,</span> <span class="nx">node</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">append</span><span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="nx">node</span><span class="p">){</span> <span class="c1">// 新增子节点
</span><span class="c1"></span>    <span class="nx">parent</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
  <span class="p">},</span> 
  <span class="nx">wrap</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">parent</span><span class="p">){</span> <span class="c1">// 新增父节点
</span><span class="c1"></span>    <span class="nx">dom</span><span class="p">.</span><span class="nx">before</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">parent</span><span class="p">)</span> 
    <span class="nx">dom</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="nx">node</span><span class="p">)</span> 
  <span class="p">}</span> 
<span class="p">}</span><span class="err">；</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="删">删</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span><span class="nx">用于删除节点</span> 
<span class="nx">dom</span><span class="p">.</span><span class="nx">empty</span><span class="p">(</span><span class="nx">parent</span><span class="p">)</span><span class="nx">用于删除后代</span>
</code></pre></td></tr></table>
</div>
</div><p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">dom</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">remove</span><span class="p">(</span><span class="nx">node</span><span class="p">){</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">node</span>
  <span class="p">},</span>
  <span class="nx">empty</span><span class="p">(</span><span class="nx">node</span><span class="p">){</span>
    <span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">firstChild</span>   
    <span class="c1">// 这块是讲数据结构时最常用的思路，类似用循环实现的递归（不停找下一个，直到全删完了）
</span><span class="c1"></span>    <span class="k">while</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">dom</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">x</span><span class="p">))</span>
      <span class="nx">x</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">firstChild</span> 
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">array</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="改">改</h3>
<blockquote>
<p>用到了【重载】和【适配】</p>
<ul>
<li>重载：传不同个数的参数，执行不同的代码</li>
<li>适配：做很多判断（js 数据类型），什么情况下执行这句、什么情况下执行那句</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="o">?</span><span class="p">)</span>        <span class="c1">// 用于读写属性 
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="o">?</span><span class="p">)</span>                 <span class="c1">// 用于读写文本内容 
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="o">?</span><span class="p">)</span>                 <span class="c1">// 用于读写HTML内容 
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="p">{</span><span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span><span class="p">})</span>   <span class="c1">// 用于修改 
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="kr">class</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">)</span>       <span class="c1">// 用于添加 
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="kr">class</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">)</span>    <span class="c1">// 用于删除
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>         <span class="c1">// 用于添加事件监听 
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>        <span class="c1">// 用于删除事件监听
</span></code></pre></td></tr></table>
</div>
</div><p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">attr</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">text</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span> 
  <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span> 
    <span class="k">if</span> <span class="p">(</span><span class="s2">&#34;innerText&#34;</span> <span class="k">in</span> <span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">node</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">string</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">node</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">string</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="s2">&#34;innerText&#34;</span> <span class="k">in</span> <span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">innerText</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">textContent</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">html</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">string</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> 
    <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">innerHTML</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">style</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 3种调用形式
</span><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">name</span> <span class="o">===</span> <span class="s2">&#34;string&#34;</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">name</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">)</span> <span class="p">{</span> 
      <span class="kr">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="nx">name</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">object</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">node</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">object</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="kr">class</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">add</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">remove</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">has</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">on</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">node</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">off</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">node</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="查">查</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;选择器&#39;</span><span class="p">)</span>    <span class="c1">// 用于获取标签或标签们
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">parent</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>     <span class="c1">// 用于获取父元素
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>   <span class="c1">// 用于获取子元素
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">siblings</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>   <span class="c1">// 用于获取兄弟姐妹元素
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>       <span class="c1">// 用于获取弟弟
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">previous</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>   <span class="c1">// 用于获取哥哥
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">nodes</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>  <span class="c1">// 用于遍历所有节点
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">index</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>      <span class="c1">// 用于获取排行老几
</span></code></pre></td></tr></table>
</div>
</div><p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">find</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selector</span><span class="p">,</span> <span class="nx">scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span><span class="nx">scope</span> <span class="o">||</span> <span class="nb">document</span><span class="p">).</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> 
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">parent</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">children</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">children</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">siblings</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">children</span><span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="nx">n</span> <span class="p">=&gt;</span> <span class="nx">n</span> <span class="o">!==</span> <span class="nx">node</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">nextSibling</span>
  <span class="k">while</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&amp;&amp;</span> <span class="nx">x</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span> 
    <span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">nextSibling</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">x</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">previous</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">previousSibling</span>
  <span class="k">while</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&amp;&amp;</span> <span class="nx">x</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">previousSibling</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">x</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">each</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">nodeList</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">nodeList</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">nodeList</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">index</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">children</span>
  <span class="kd">let</span> <span class="nx">i</span>
  <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">break</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">i</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="总结1">总结1</h2>
<ul>
<li>上面代码，除了「创建节点，用了 template」，其他方法基本都是使用 DOM 的原生 API 来实现</li>
<li>不管是多么高深的库，最后都是用 if-else、for循环、while循环 就搞定了
<ul>
<li>不论什么语言，实现逻辑只需要三种表达形式：顺序执行、if/else、循环</li>
</ul>
</li>
</ul>
<p>​</p>
<h2 id="总结2">总结2</h2>
<ul>
<li>最好的学习方法，就是去看作者的思路，照着他的思路实现一下。比如，vue的作者，就把所有思路写在 vue 文档里，就去看文档就好了。</li>
</ul>
<p>​</p>
<blockquote>
<p>这是许多程序员多年摸索出来的经典代码。
你只需要站在巨人的肩膀上，继续向上探索</p>
</blockquote>
<p>​</p>]]></description>
</item><item>
    <title>DOM 编程 </title>
    <link>http://samrks.github.io/dom-dom-manipulate/</link>
    <pubDate>Wed, 21 Oct 2020 00:41:12 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/dom-dom-manipulate/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="前言">前言</h2>
<blockquote>
<p>本节是 DOM 最基础的部分</p>
</blockquote>
<p>​</p>
<h2 id="前置知识">前置知识</h2>
<blockquote>
<p>需要什么知识</p>
</blockquote>
<ul>
<li>理解简单的 JS 语法，如 变量、if else、循环</li>
<li>会背 JS 的七种数据类型（四基两空一对象、bigInt）</li>
<li>会背 JS 的五个 falsy 值 （0，NaN，null，undefined，空字符串）</li>
<li>知道函数是对象，数组也是对象</li>
<li>会用 div 和 span 标签</li>
<li>会简单的 CSS 布局（flex）</li>
</ul>
<p>​</p>
<h2 id="网页其实是一棵树">网页其实是一棵树</h2>
<blockquote>
<p>第一个知识点</p>
</blockquote>
<p></p>
<p>画成「树」</p>
<p></p>
<h3 id="js-如何操作这棵树">JS 如何操作这棵树</h3>
<ul>
<li>JS 只能操作 JS，是操作不了网页的</li>
<li>**浏览器提供了功能，往 window 上添加了一个 document **</li>
<li>只要有 document 这个对象， JS 就可以操作这棵树了</li>
</ul>
<p>示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">用chrome打开任意网站</span>
<span class="nx">在控制台键入</span><span class="err">：</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span>  <span class="nx">得到一个</span> <span class="err">#</span><span class="nb">document</span> 
<span class="nx">鼠标放在</span> <span class="sb">`#document`</span> <span class="nx">上会发现整个网页被选中了</span><span class="err">，</span><span class="nx">说明document包含整个网页</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>通过 window.document 得到网页的根节点</p>
<ul>
<li>根节点下有 head 、 body …</li>
</ul>
</blockquote>
<p></p>
<p>​</p>
<h3 id="js-用-document-操作网页">JS 用 document 操作网页</h3>
<blockquote>
<p>这就是 Document Object Model 文档对象模型</p>
</blockquote>
<ul>
<li>「用一个 document 对象来操作整个网页」这种思想(模型)，全称叫做 「Document Object Model」</li>
<li>简称 DOM</li>
</ul>
<h3 id="dom-很难用">DOM 很难用</h3>
<blockquote>
<p>请记住这个事实</p>
</blockquote>
<ul>
<li>之前讲过「JS 的原创之处并不优秀，优秀之处并非原创」</li>
<li>DOM 可能比 JS 还要难用</li>
<li>难用到「都没人愿意使用 DOM」</li>
</ul>
<blockquote>
<p>下面会想办法，解决这个难题</p>
</blockquote>
<p>​</p>
<h3 id="如果你觉得-dom-很智障">如果你觉得 DOM 很智障</h3>
<blockquote>
<p>不要怀疑自己，你觉得的是对的</p>
</blockquote>
<ul>
<li>DOM 的接口设计的非常反人类</li>
<li>导致前端人员，不得不使用 jQuery 来操作 DOM</li>
<li>后来 jQuery 又被 Vue 代替了，于是大多数人就用 Vue 来操作 DOM</li>
<li>后来又有 React 了，就用 React 来操作 DOM</li>
<li>从来不会用 DOM 自带的功能来操作 DOM，自带的功能实在是非常反人类</li>
</ul>
<p>​</p>
<p> <a href="https://javascript.info/dom-navigation" target="_blank" rel="noopener noreffer">图片来自</a></p>
<p>​</p>
<p>​</p>
<h2 id="获取元素的-api">获取元素的 API</h2>
<blockquote>
<p>获取元素，也叫标签</p>
</blockquote>
<blockquote>
<p>什么是 API —— 没有准确定义，听多了你自然就知道什么是 API 了</p>
</blockquote>
<h3 id="有很多-api">有很多 API</h3>
<h4 id="通过-id">通过 id</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">id名</span>
<span class="nx">id名</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;id名&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>举例 👇</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">input</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;kw&#34;</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">kw</span>                     <span class="c1">// &lt;input id=&#34;kw&#34;&gt;   （直接获取到这个标签）
</span><span class="c1"></span><span class="nx">kw</span>                            <span class="c1">// &lt;input id=&#34;kw&#34;&gt;
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;kw&#39;</span><span class="p">)</span> <span class="c1">// &lt;input id=&#34;kw&#34;&gt;   （已经有上面两个特别简单的写法，谁还用这个）
</span></code></pre></td></tr></table>
</div>
</div><p>特例 👇</p>
<blockquote>
<p>当 id 名为 JS 关键字/属性时，就不能通过前面两个简单的写法来获取到元素</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 如下图所示
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">parent</span>                      <span class="c1">// parent 在这里是【获取 window 的上一层窗口】的意思
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;parent&#39;</span><span class="p">)</span>  <span class="c1">// 此时，只能通过此写法
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>所以，只要 id 不与全局属性冲突，就可以最简单的直接用这个 id
如果不小心冲突了，就只能退而求其次，用这个很长的 API</p>
</blockquote>
<p>​</p>
<h4 id="通过-标签名">通过 标签名</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="cm">/*
</span><span class="cm"> *  找到所有标签名为 div 的元素。
</span><span class="cm"> *  拿到的是一个数组（伪数组）
</span><span class="cm"> *  要获取到具体某一个 div，需要用下标（也可以遍历）
</span><span class="cm">*/</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>   
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="通过-class-获取元素">通过 class 获取元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="cm">/*
</span><span class="cm"> *  找到所有 class 为 red 的元素。
</span><span class="cm"> *  拿到的是一个数组（伪数组）
</span><span class="cm"> *  要获取到具体某一个 red 元素，需要用下标（也可以遍历）
</span><span class="cm">*/</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="最新的-api-query">最新的 API ：query</h4>
<blockquote>
<p>虽然是 query 开头，但并不是 jQuery 提供的 API，而是 JS 原生的
<a href="https://www.imooc.com/article/13027" target="_blank" rel="noopener noreffer">querySelector 和 getElement(s)ByXxx 方法的区别</a></p>
</blockquote>
<blockquote>
<p>querySelector()，接收一个CSS选择符，返回与该模式匹配的第一个元素
querySelectorAll()，用于选择匹配到的所有元素</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#id名&#39;</span><span class="p">)</span>    <span class="c1">// 借用了css语法，css怎么找到这个标签，括号中就怎么写
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;.red&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="用哪一个-">用哪一个 ⭕️</h3>
<ul>
<li>工作中用最新的， querySelector 和 querySelectorAll</li>
<li>做 demo 直接用 idxxx，千万别让人发现</li>
<li>要兼容 IE 的可怜虫才用 getElement(s)ByXxx</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="获取特定元素的-api">获取特定元素的 API</h3>
<h4 id="获取-html-元素">获取 html 元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="获取-head-元素">获取 head 元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">head</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="获取-body-元素">获取 body 元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">body</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="获取窗口窗口不是元素">获取窗口（窗口不是元素）</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="获取所有元素">获取所有元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">all</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>这个 document.all 是个奇葩，第 6 个falsy值</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="获取到的元素是个啥">获取到的元素是个啥</h2>
<blockquote>
<p>显然是一个对象，我们需要搞清它的<strong>原型</strong></p>
</blockquote>
<h3 id="抓一只-div-对象来看看">抓一只 div 对象来看看</h3>
<p>（图示见[下一P](# div 完整原型链)）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-JS" data-lang="JS"><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>   <span class="c1">// www.baidu.com
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>  
<span class="c1">// 用 dir 可以打印出结构。 （ 如下图，会有很多属性，都是构造函数添加的 ）
</span><span class="c1">// 重点关注【原型链】 
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>注意：这里写的 HTMLDivElment 不是真正的原型</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">HTMLDivElment</span>            <span class="c1">// false
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">HTMLDivElment</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// true   
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// JS 经典公式
</span><span class="c1"></span><span class="nx">对象</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">其构造函数</span><span class="p">.</span><span class="nx">prototype</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>console.dir(div)  开始查看原型链</p>
</blockquote>
<ol>
<li>
<p>点开最外层 <code>div#wrapper.wrapper_new</code>，最先看到的是这个 <strong>div 自身的属性</strong></p>
</li>
<li>
<p>第一层原型 <strong>HTMLDivElement</strong>.prototype</p>
<ul>
<li>点开，这里面也是有很多属性，是<strong>所有 div 共有的属性</strong>，不用细看</li>
</ul>
</li>
<li>
<p>第二层原型 <strong>HTMLElement</strong>.prototype</p>
<ul>
<li>这里面是<strong>所有 HTML 标签共有的属性</strong>，不用细看</li>
</ul>
</li>
<li>
<p>第三层原型 <strong>Element</strong>.prototype</p>
<ul>
<li>这里面是<strong>所有 XML、HTML 标签的共有属性</strong>，你不会以为浏览器只能展示 HTML 吧</li>
<li>AJAX 的 X 指的就是 XML。在没有发明 json 之前，全部处理的都是 XML（XML 里也有标签）</li>
<li>具体这里包含 XML、HTML、SVG、… 各种不同标签都共有的属性，所以叫 Element</li>
<li>在 Element 各种元素之上，我们还有👇节点node的属性</li>
</ul>
</li>
<li>
<p>第四层原型 <strong>Node</strong>.prototype</p>
<ul>
<li>这里面是<strong>所有节点共有的属性</strong>，节点包括 XML 标签文本注释、HTML 标签文本注释等等</li>
</ul>
</li>
<li>
<p>第五层原型 <strong>EventTarget</strong>.prototype</p>
<ul>
<li>只有 3 个共有属性：addEventListener、dispatchEvent、removeEventListener</li>
</ul>
<ul>
<li>最重要的函数属性是 <strong>addEventListener</strong></li>
</ul>
</li>
<li>
<p>最后一层原型就是 <strong>Object</strong>.prototype（根对象）了</p>
<ul>
<li>再往上就是 null 了</li>
</ul>
</li>
</ol>
<blockquote>
<p>综上，div 是个非常复杂的对象</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="div-完整原型链">div 完整原型链</h3>
<blockquote>
<p>自身属性和共有属性，<a href="https://i.loli.net/2020/10/21/bwt5rm24PC8IXa6.png" target="_blank" rel="noopener noreffer">点击查看</a></p>
<p><a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c7-JS%e7%bc%96%e7%a8%8b%e6%8e%a5%e5%8f%a3%5c1-DOM%e7%bc%96%e7%a8%8b%5cdiv%e5%ae%8c%e6%95%b4%e5%8e%9f%e5%9e%8b%e9%93%be.png" rel="">本地查看</a></p>
</blockquote>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;.red&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>由于 div 是由 HTMLDivElement 构造的</li>
<li>HTMLDivElement 构造函数往 this 上添加了一些属性 （this 指代 div）</li>
<li>div 也继承了 Element，所以 Element 也往 this 上添加了一些属性</li>
<li>还继承了 node 构造函数，添加了一些属性</li>
<li>综上，每一层构造函数，都会往 div 身上添加了属性</li>
</ul>
<p>​</p>
<blockquote>
<p>例 👇</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">requestFullScreen</span><span class="p">()</span>   <span class="c1">// 请求全屏（是所有Element的共有属性）
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">head</span><span class="p">.</span><span class="nx">requestFullScreen</span><span class="p">()</span> <span class="c1">// head元素全屏显示  // 这个 API 兼容性一般不是很好，通常不会使用
</span><span class="c1">// 每一个元素都可以要求自己跟屏幕一样大
</span><span class="c1">// head 能调用到这个 API , 就是因为顺着【原型链】继承而来
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="总结">总结</h3>
<ul>
<li>这样我们就可以清楚的知道，获取到的 div  是个啥了</li>
<li>就是个对象，且有 6 层原型</li>
</ul>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="节点类型-nodetype">节点类型 nodeType</h2>
<p>节点？元素？傻傻分不清</p>
<blockquote>
<p>一个网页里面，节点包括很多种。最常见的就是元素、也叫标签</p>
</blockquote>
<blockquote>
<p>节点 Node 包括以下几种</p>
</blockquote>
<ul>
<li>1   表示元素 Element，也叫标签 Tag  （最常见）</li>
<li>3   表示文本 Text</li>
<li>8   表示注释 Comment</li>
<li>9   表示文档 Document</li>
<li>11  表示文档片段 DocumentFragment</li>
</ul>
<p>（记住 1 和 3 即可）</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType" target="_blank" rel="noopener noreffer">MDN</a> 有完整描述，通过 **x.nodeType ** 得到一个数字</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 在任何一个元素上通过 .nodeType 就可以获取到这个元素的类型
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">nodeType</span>  <span class="c1">// 1  表示标签
</span></code></pre></td></tr></table>
</div>
</div><p>示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// www.baidu.com
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
<span class="nx">div</span><span class="p">.</span><span class="nx">nodeType</span>  <span class="c1">// 1
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">childNodes</span>  <span class="c1">// 查看div的所有子节点  // 得到 Nodelist(5) 伪数组。 0: text 第一个子节点就是文本
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">firstChild</span>  <span class="c1">// #text  获取到文本节点
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">.</span><span class="nx">textContext</span>  <span class="c1">// 获取文本里面的内容  &#34;  &#34;  是个空格
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">.</span><span class="nx">nodeType</span>  <span class="c1">// 3  获取到div的第一个子节点的节点类型就是 3 文本
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="节点的增删改查">节点的增删改查</h2>
<blockquote>
<p>程序员的宿命就是增删改查</p>
<ul>
<li>后端，对【数据库】进行增删改查</li>
<li>前端，对【页面元素】进行增删改查</li>
</ul>
</blockquote>
<h2 id="增">增</h2>
<h3 id="创建一个标签节点">创建一个标签节点</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  <span class="c1">// “DOM反人类”再次得到验证：创建一个元素居然写这么长的单词
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;style&#39;</span><span class="p">)</span> 
<span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">)</span> 
<span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">)</span>
<span class="c1">// &lt;div&gt;&lt;/div&gt; 、 &lt;style&gt;&lt;/style&gt; 、 &lt;script&gt;&lt;/script&gt; 、 &lt;li&gt;&lt;/li&gt;
</span></code></pre></td></tr></table>
</div>
</div><h3 id="创建一个文本节点">创建一个文本节点</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">text1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="s1">&#39;你好&#39;</span><span class="err">）</span> 
<span class="c1">// 为什么不能直接写成 text1=&#39;你好&#39;
</span><span class="c1">// 因为 &#39;你好&#39; 是一个字符串；而文本节点是一个【对象】（包含很多原型、函数什么的）
</span></code></pre></td></tr></table>
</div>
</div><h3 id="标签里面插入文本">标签里面插入文本</h3>
<blockquote>
<p>两种形式、3 种写法</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">text1</span><span class="p">)</span> 
<span class="nx">div1</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="s1">&#39;你好&#39;</span>   <span class="nx">或者</span>   <span class="nx">div1</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;你好&#39;</span>
<span class="c1">// 但是不能用 div1.appendChild(&#39;你好&#39;）
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/appendChild" target="_blank" rel="noopener noreffer">appendChild</a> 是 Node 构造函数 添加的</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/textContent" target="_blank" rel="noopener noreffer">textContent</a>  也是 Node 构造函数 添加的</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/innerText" target="_blank" rel="noopener noreffer">innerText</a> 是 HTMLElement 构造函数 添加的</li>
</ul>
<blockquote>
<ul>
<li>
<p>喜欢        Node        就用         Node        提供的接口
喜欢 HTMLElement 就用 HTMLElement 提供的接口</p>
</li>
<li>
<p><strong>但是不能混着用</strong>
示例如下图，会报错：appendChild 只能接收一个 node 节点</p>
</li>
</ul>
</blockquote>
<p></p>
<h3 id="综上">综上</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>你好<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 通过 DOM 创建上面这个html标签 👆
</span><span class="c1">// 需要下面 3 行代码，才能实现
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">div1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>
<span class="kd">let</span> <span class="nx">text1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="s1">&#39;你好&#39;</span><span class="err">）</span>
<span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">text1</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>此时的 div1 并不会显示在页面中，只是在 JS 内存中存活
只有插入页面中，这个 div1 才能生效（显示）</p>
</blockquote>
<p>​</p>
<h3 id="插入页面中">插入页面中</h3>
<ul>
<li>创建的标签，默认处于 JS 线程中
<ul>
<li>不会显示在页面中，只是在 JS 内存中存活</li>
</ul>
</li>
<li>你必须把它插到 head 或者 body 里面，它才会生效、显示在页面中
<ul>
<li>创建的是 style 或 link 元素 …  就需要传入到 head 里才能生效</li>
</ul>
</li>
<li>appendChild 会把元素插入到目标容器的<strong>末尾</strong></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span> 
<span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>
<span class="c1">// 或者
</span><span class="c1"></span><span class="nx">已在页面中的元素</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  <span class="c1">// 创建div元素
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">text1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="s1">&#39;你好&#39;</span><span class="err">）</span><span class="c1">// 创建文本节点
</span><span class="c1"></span><span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">text1</span><span class="p">)</span>  <span class="c1">// 通过appendChild把文本节点添加到div元素中。此时div仍在内存中，不在页面显示
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span> <span class="c1">// &lt;body&gt;&lt;div&gt;你好&lt;/div&gt;&lt;/body&gt;  此时 div 显示在页面中
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="appendchild-疑问">appendChild 疑问</h3>
<h4 id="一个元素只能插入一处">一个元素，只能插入一处</h4>
<blockquote>
<p>页面中有 div#test1 和 div#test2</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span> 
<span class="nx">test1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span> 
<span class="nx">test2</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>  
<span class="c1">// 创建一个 div 元素，先后插入到另外两个div中
</span><span class="c1">// 请问新创建的这一个 div 元素，最终会出现在哪里？
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>请问最终 div 出现在哪里？</p>
<ul>
<li>
<p>选项1、test1 里面</p>
</li>
<li>
<p>选项2、test2 里面</p>
</li>
<li>
<p>选项3、test1 里面 和 test2 里面</p>
</li>
</ul>
</li>
<li>
<p>答案：（鼠标选中显示答案）👉 <font color="white">最终 div 出现在 test2 里面</font></p>
<blockquote>
<p>因为<strong>一个元素不能出现在两个地方，除非复制一份</strong></p>
</blockquote>
<p>同理：送子观音，把一个孩子送到第一户人家，又把他送到第二户人家，那最后在哪降生？ 答：第二户人家
因为一个孩子只会有一个亲生家庭</p>
</li>
</ul>
<p>​</p>
<p>示例</p>
<blockquote>
<p>尝试用 appendChild，把创建好的元素，先后添加到两个地方（无法实现一个元素插入多处）</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  
<span class="kd">let</span> <span class="nx">text1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="s1">&#39;你好&#39;</span><span class="p">)</span>
<span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">text1</span><span class="p">)</span>  
<span class="nx">div1</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="s1">&#39;white&#39;</span>
<span class="nx">div1</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">fontSize</span> <span class="o">=</span> <span class="s1">&#39;100px&#39;</span>
<span class="c1">// 此时内存中有一个 &lt;div&gt;你好&lt;/div&gt; 元素。 背景白色，字体100像素
</span><span class="c1">// 把这个 div1 元素，先后插入到 head 和 body 中
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span>  <span class="c1">// 最终div1元素只会出现在body中 
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h4 id="复制元素使插入多处">复制元素，使插入多处</h4>
<blockquote>
<p>用「克隆节点」 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/cloneNode" target="_blank" rel="noopener noreffer">cloneNode MDN</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div2</span> <span class="o">=</span> <span class="nx">div1</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>  
<span class="c1">// true 深拷贝：该节点的所有后代节点也都会被克隆 //  false 浅拷贝：只克隆该节点本身
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="删">删</h2>
<h3 id="两种方法">两种方法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 旧方法 👇
</span><span class="c1"></span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">childNode</span><span class="p">)</span>  <span class="c1">// 必须找到父节点，来删除子节点 （反人类）
</span><span class="c1"></span>
<span class="c1">// 新方法 👇
</span><span class="c1"></span><span class="nx">childNode</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>  <span class="c1">// IE不支持（兼容性有问题）
</span></code></pre></td></tr></table>
</div>
</div><h4 id="临时探讨为什么-ie-总搞独立">临时探讨：为什么 IE 总搞独立？</h4>
<ul>
<li>实际上在最初，IE 确实是最厉害的浏览器。其他各家浏览器公司为了反制 IE 才搞出「标准」</li>
<li>所以不是 IE 搞独立，而是标准出的太晚了</li>
<li>IE 一家独大的时候，标准还没有出台。IE 也不会提前知道标准的内容。
而且标准中某些内容还会故意跟 IE 反着写</li>
<li>比如 IE 发明了 innerText，标准出台表示不用 innerText 而用 textContent（就导致开发者两个写法都要记😭）</li>
<li>所以并不一定是 IE 故意搞独立，会不会是「标准」在故意使坏呢 ?!  （🤔盲生你发现了华点）</li>
</ul>
<p>​</p>
<h4 id="旧方法">旧方法</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 先创建出 div1，再克隆出 div2
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">div1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  
<span class="kd">let</span> <span class="nx">text1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="s1">&#39;你好&#39;</span><span class="p">)</span>
<span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">text1</span><span class="p">)</span>
<span class="kd">let</span> <span class="nx">div2</span> <span class="o">=</span> <span class="nx">div1</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>

<span class="c1">// 把 div1/div2 元素，分别插入到 head/body 中
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div2</span><span class="p">)</span> 

<span class="c1">// 再删除节点
</span><span class="c1"></span><span class="nx">div1</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span>
<span class="nx">div2</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">div2</span><span class="p">)</span>

<span class="c1">// 删除后还能再添加回来吗 ？
</span><span class="c1">// 可以的。因为删除节点后，节点还在内存里面，所以还可以添加回来
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div2</span><span class="p">)</span>  
</code></pre></td></tr></table>
</div>
</div><h4 id="新方法">新方法</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 先创建出 div1，再克隆出 div2
</span><span class="c1">// 把 div1/div2 元素，分别插入到 head/body 中
</span><span class="c1"></span>
<span class="c1">// 再删除节点
</span><span class="c1"></span><span class="nx">div1</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>
<span class="nx">div2</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>

<span class="c1">// 删除后还能再添加回来吗 ？
</span><span class="c1">// 可以的。因为删除节点后，节点还在内存里面，所以还可以添加回来  // 跟旧方法的效果一模一样
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>由于【 <code>ele.remove()</code> 】是后发明的，所以不兼容 IE</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="思考">思考</h3>
<ul>
<li>如果一个 node 被移出页面（DOM 树）</li>
<li>那么它还可以再次回到页面中吗？
<ul>
<li>答案：可以。（示例参考上面）</li>
<li>只是被移出来，并没有被彻底干掉，所以还可以存在在 JS 内存中</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="如何彻底干掉元素">如何彻底干掉元素</h3>
<blockquote>
<p>即元素被删除后，就彻底消失、不存在在内存中、也无法重新添加回页面</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 彻底干掉元素，先把元素移出页面
</span><span class="c1"></span><span class="nx">div1</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>
<span class="nx">div2</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>  
<span class="c1">// 这时 div1/div2 都在内存中
</span><span class="c1"></span><span class="nx">div1</span> <span class="o">=</span> <span class="kc">null</span>
<span class="nx">div2</span> <span class="o">=</span> <span class="kc">null</span>  
<span class="c1">// 等于空，div1/div2 就与内存断开联系了，就会被【垃圾回收】掉
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<p>​</p>
<h2 id="改-">改 💡</h2>
<h3 id="改属性">改属性</h3>
<h4 id="写标准属性">写标准属性</h4>
<h5 id="改-class">改 class</h5>
<blockquote>
<p>科普：早期 JS 对象是不能拥有一个「保留字」作为 key 的</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div1</span><span class="p">.</span><span class="k">if</span>  
<span class="c1">// JS引擎的解析器看到 if 会认为是不是 if 语句，而实际上 if 是 对象 div1 的 一个key
</span><span class="c1">// 这就会导致歧义
</span><span class="c1">// 所以 JS 不接受「保留字(JS关键字...)」作为 key
</span><span class="c1"></span>
<span class="nx">div1</span><span class="p">.</span><span class="kr">class</span> <span class="o">=</span> <span class="s2">&#34;red&#34;</span>  <span class="c1">// 修改失败
</span><span class="c1">// 因为 class 也是JS关键字，所以不能使用
</span><span class="c1">// 于是就起了新的名字，用 className 表示标签の类名 class
</span></code></pre></td></tr></table>
</div>
</div><p>正确写法 👇</p>
<blockquote>
<p>注意：每次用 className 修改类名，都会把之前的类名 直接覆盖掉</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 如果只是想【追加】类名
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s1">&#39;red blue&#39;</span>  <span class="c1">// 用 className 就把所有类名都写上
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">)</span>    <span class="c1">// 或者通过👈方式追加类名
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">classList</span>  <span class="c1">// 可以查看div元素当前已有的class类名组成的数组
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h5 id="改-style">改 style</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">style</span> <span class="o">=</span> <span class="s1">&#39;width:100px;color:blue;&#39;</span>  <span class="c1">// 全覆盖  【不推荐】
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="s1">&#39;200px&#39;</span>              <span class="c1">// 改一部分【推荐】
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="s1">&#39;white&#39;</span>    <span class="c1">// 注意「驼峰命名」的大小写
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>JS 不支持有「中划线 - 」的 key 值</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">background</span><span class="o">-</span><span class="nx">color</span>    <span class="c1">// ❌ 中划线会被理解成：减号
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="s1">&#39;background-color&#39;</span><span class="p">]</span> <span class="c1">// ⭕ 就是某些情况支持 key 包含中划线，也只能用[]中括号的形式
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span>     <span class="c1">// ✅
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h5 id="改-data--属性">改 data-* 属性</h5>
<blockquote>
<p>以前有段时间，需要往元素上添加自定义属性。现在基本没人用了（库开发者可能会用到）</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 添加自定义属性
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;data-x&#39;</span><span class="p">,</span> <span class="s1">&#39;test&#39;</span><span class="p">)</span>  <span class="c1">// &lt;div data-x=&#34;test&#34;&gt;&lt;/div&gt;
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">xx</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span>              <span class="c1">// &lt;div data-xx=&#34;sam&#34;&gt;&lt;/div&gt;
</span><span class="c1"></span>
<span class="c1">// 获取自定义属性的属性值
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;data-x&#39;</span><span class="p">)</span>   <span class="c1">// test  
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">xx</span>               <span class="c1">// sam
</span><span class="c1"></span>
<span class="c1">// 修改自定义属性的值
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">xx</span> <span class="o">=</span> <span class="s1">&#39;jack&#39;</span>      
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h4 id="读标准属性">读标准属性</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">id</span>
<span class="nx">div</span><span class="p">.</span><span class="nx">classList</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">href</span> 
<span class="c1">// 👆 大多是属性都是一一对应，直接读就可以
</span></code></pre></td></tr></table>
</div>
</div><h5 id="获取原本的属性值">获取原本的属性值</h5>
<blockquote>
<p>不想被浏览器加工</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">)</span>
<span class="nx">div</span><span class="p">.</span><span class="nx">classList</span>

<span class="nx">a</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">)</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">href</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>两种方法都可以，但值可能稍微有些不同（大多情况两种方法获取的结果是一样的）</p>
</blockquote>
<ul>
<li>一种是简单的书写方式，「xxx.属性名」，但值可能被加工</li>
<li>一种是较长的书写方式，「xxx.getAttribute(&lsquo;属性名&rsquo;)」，虽然长，但可确保结果更准确，更保险一点</li>
</ul>
<h5 id="举例a-标签的特殊情况httpsjsbincomsuqesaredithtmljsconsole-">举例：a 标签的<a href="https://jsbin.com/suqesar/edit?html,js,console" target="_blank" rel="noopener noreffer">特殊情况</a> 👇</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">id</span><span class="o">=</span><span class="s">test</span> <span class="na">href</span><span class="o">=</span><span class="s">&#39;/xxx&#39;</span><span class="p">&gt;&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test</span><span class="p">.</span><span class="nx">href</span><span class="p">)</span>  <span class="c1">// https://null.jsbin.com/xxx  浏览器把域名给补全了
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>如果直接用 js 的属性，读出值。得出的结果，有可能会被浏览器加工</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="改事件处理函数">改事件处理函数</h3>
<h4 id="divonclick-默认为-null">div.onclick 默认为 null</h4>
<blockquote>
<p><a href="https://jsbin.com/qujosiw/edit?html,js,console,output" target="_blank" rel="noopener noreffer">代码在线编译</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;test&#34;</span><span class="p">&gt;</span>test<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test</span><span class="p">.</span><span class="nx">onclick</span><span class="p">)</span>  <span class="c1">// null 
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">test</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">test</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>  <span class="c1">// this: test
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>     <span class="c1">//    x: event
</span><span class="c1"></span><span class="p">}</span>
<span class="c1">// 调用原理：test.onclick.call(test, event)
</span><span class="c1">// 所以 this 和 event ，实际上是浏览器在用户点击时，用 call 传进来的
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>每一个元素都有 onclick 属性，该属性的默认值为 null</li>
<li>默认点击 div 不会有任何事情发生</li>
<li>但是如果你把 div.onclick 改为一个函数 fn
<ul>
<li>那么点击 div 的时候，浏览器就会调用这个函数</li>
<li>并且是这样调用的 fn.call(div, event)
<ul>
<li>div 会被当做 this   （如果要用到 this 就不能用箭头函数、必须用 function）</li>
<li>event 则包含了点击事件的所有信息，如坐标</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>​</p>
<h4 id="divaddeventlistener">div.addEventListener</h4>
<blockquote>
<p>是 div.onclick 的升级版，之后的课程单独讲 DOM Event</p>
</blockquote>
<ul>
<li>div.onclick 只能写一个函数（点击时，执行的所有操作，都必须写在一个函数中）</li>
<li>div.addEventListener 可以写无数个函数（点击时，执行的所有操作，可以写作不同的函数，对于复杂的操作情况非常友好）</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="改内容">改内容</h3>
<h4 id="改文本内容">改文本内容</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>    <span class="c1">// 早期 IE 发明的
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>  <span class="c1">// 出台「标准」中规定的
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>两者几乎没有区别</li>
<li>现在所有浏览器基本都是同时支持这两种写法的</li>
</ul>
<p>​</p>
<h4 id="改html内容">改HTML内容</h4>
<p><a href="https://jsbin.com/vokuqoj/edit?html,js,output" target="_blank" rel="noopener noreffer">代码在线编译</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;strong&gt;重要内容&lt;/strong&gt;&#39;</span> 
</code></pre></td></tr></table>
</div>
</div><ul>
<li>innerText ：所有内容都会被识别为 文本</li>
<li>innerHTML ： 会解析内容、识别标签…
（内容需要注意长度，超过一定限度，如20000个字符，可能会导致浏览器卡爆）</li>
</ul>
<p>​</p>
<h4 id="改标签">改标签</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>      <span class="c1">// 先清空 
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div2</span><span class="p">)</span>   <span class="c1">// 再加内容
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="改爸爸">改爸爸</h3>
<blockquote>
<p>想要找一个新爸爸</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">newParent</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>  <span class="c1">// 直接把div添加到新的父节点内，以前父节点中的div就自动消失了
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>直接这样就可以了，直接从原来的地方消失</li>
</ul>
<h2 id="查">查</h2>
<h3 id="查爸爸">查爸爸</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span> 
<span class="c1">// 或者 
</span><span class="c1"></span><span class="nx">node</span><span class="p">.</span><span class="nx">parentElement</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="查爷爷">查爷爷</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">parentNode</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="查子代">查子代</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">childNodes</span>  <span class="c1">// 包含文本节点
</span><span class="c1">// 或者 
</span><span class="c1"></span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span>    <span class="c1">// 【优先使用】不包含文本节点
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><a href="https://jsbin.com/miqahoj/edit?html,js,console,output" target="_blank" rel="noopener noreffer">查看在线代码</a></p>
</blockquote>
<h4 id="childnodes">childNodes</h4>
<p>例1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">test</span><span class="p">&gt;</span>
	<span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>   <span class="c1">// 7
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>第 1 个子节点是：回车 + 空格，最终缩成一个**空格 **（最开始讲 html 时就讲过，不论几个回车空格，都会缩成一个空格）</li>
<li>第 2 个子节点是：li</li>
<li>第 3 个子节点是：回车 + 空格，最终缩成一个**空格 **</li>
<li>第 4 个子节点是：li</li>
<li>第 5 个子节点是：回车 + 空格，最终缩成一个**空格 **</li>
<li>第 6 个子节点是：li</li>
<li>第 7 个子节点是：回车 + 空格，最终缩成一个**空格 **</li>
</ul>
<p>例2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">test2</span><span class="p">&gt;&lt;</span><span class="nt">li</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">li</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">li</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test2</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>   <span class="c1">// 3   // 因为没有回车和空格
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="children">children</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">test</span><span class="p">&gt;</span>
	<span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>   <span class="c1">// 3     // 即使有回车空格，子元素也是 3 个
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>所以「查子代」优先使用 children</p>
</blockquote>
<p>​</p>
<h4 id="思考元素节点的变化">思考：元素节点的变化</h4>
<blockquote>
<p>当子代变化时，childNodes 和 children 也会实时变化吗？</p>
</blockquote>
<p><a href="https://jsbin.com/rulicaz/edit?html,js,console,output" target="_blank" rel="noopener noreffer">在线代码：children / childNodes</a></p>
<p>答：如果子元素变化，children / childNodes 的长度**也会变化 **</p>
<p><a href="https://jsbin.com/duqexed/edit?html,js,console,output" target="_blank" rel="noopener noreffer">在线代码：querySelectorAll</a></p>
<p>答：通过 document.querySelectorAll 获取子元素集合。如果子元素变化，集合的长度**不会变化 **
querySelectorAll 不会实时根据元素变化，去改变自己。获取过一次之后，就不再变化</p>
<p>​</p>
<p>​</p>
<h3 id="查兄弟姐妹">查兄弟姐妹</h3>
<blockquote>
<p>没有 API 可以直接获取到「任一元素的兄弟元素」，只能通过「先获取到父元素，再获取父元素的子元素」的方式</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">childNodes</span>   <span class="c1">// parentNode 可以和 parentElement 互换
</span><span class="c1"></span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">children</span>     <span class="c1">// 同上
</span><span class="c1"></span>
<span class="c1">// 发现问题：上面获取到的数组，都包含了自己，而需求是只要兄弟元素，过滤掉自己  // 只能遍历
</span><span class="c1">// children 遍历排除自己
</span><span class="c1">// childNodes 遍历排除自己和所有文本节点（更麻烦）
</span></code></pre></td></tr></table>
</div>
</div><h4 id="例">例</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
<span class="c1">// div2 有多少个兄弟姐妹
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">siblings</span> <span class="o">=</span> <span class="p">[]</span>
<span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">div2</span><span class="p">.</span><span class="nx">parentElement</span><span class="p">.</span><span class="nx">children</span> <span class="c1">// 先获取到父亲的所有子代，再遍历从中排除自己
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!==</span> <span class="nx">div2</span><span class="p">){</span>
    <span class="nx">silblins</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="查看第一个子代">查看第一个子代</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">firstChild</span>    <span class="c1">// node.parentNode.children[0]
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="查看最后一个子代">查看最后一个子代</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">lastChild</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="查看上一个兄弟">查看上一个兄弟</h3>
<p>距离自己最近的上一个兄弟节点（哥哥）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">previousSibling</span>          <span class="c1">// 如果上一个节点是文本节点(空格、回车...)，就会获取到文本节点
</span><span class="c1"></span><span class="nx">node</span><span class="p">.</span><span class="nx">proviousElementSibling</span>   <span class="c1">// 会避开文本节点，只找元素节点
</span></code></pre></td></tr></table>
</div>
</div><p>补充：[节点类型](# 节点类型 nodeType)</p>
<p>​</p>
<h3 id="查看下一个兄弟">查看下一个兄弟</h3>
<p>距离自己最近的下一个兄弟节点（弟弟）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">nextSibling</span>         <span class="c1">// 下一个兄弟节点 （包含文本节点）
</span><span class="c1"></span><span class="nx">node</span><span class="p">.</span><span class="nx">nextElementSibling</span>  <span class="c1">// 下一个元素兄弟节点 （只包含元素节点）
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="遍历一个-div-里面的所有元素">遍历一个 div 里面的所有元素</h3>
<blockquote>
<p>与前面的「数据结构——遍历树」逻辑相同</p>
</blockquote>
<blockquote>
<p>DOM 就是一棵树。数据结构中「树」的所有算法都可以用到 DOM 中</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">travel</span> <span class="o">=</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>   <span class="c1">// 与遍历树节点的代码逻辑一致
</span><span class="c1"></span>  <span class="nx">fn</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">){</span> 
    <span class="k">for</span><span class="p">(</span><span class="mi">1</span><span class="nx">et</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="err">；</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
      <span class="nx">travel</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">fn</span><span class="p">)</span> 
    <span class="p">}</span> 
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">travel</span><span class="p">(</span><span class="nx">div1</span><span class="p">,</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">)</span> 
</code></pre></td></tr></table>
</div>
</div><ul>
<li>看，数据结构多么有用</li>
</ul>
<h2 id="dom-操作是跨线程的详解">DOM 操作是跨线程的（详解）📌</h2>
<blockquote>
<p>面接常问：为什么 DOM 操作比较慢？
因为 DOM 操作和 JS 是两个不同的东西。</p>
</blockquote>
<blockquote>
<p>下面就详细解释：什么叫「DOM 操作是跨线程的」</p>
</blockquote>
<h3 id="浏览器功能划分">浏览器功能划分</h3>
<blockquote>
<p>在《JS世界》那一节里，讲过浏览器功能划分</p>
</blockquote>
<ul>
<li>浏览器有两个重要功能：「渲染引擎」和「JS 引擎」
<ul>
<li>渲染引擎：专门用来渲染 html 和 css</li>
<li>JS 引擎：专门用来执行 JS</li>
</ul>
</li>
<li>这两个引擎在不同的线程中，互不相干</li>
</ul>
<p>​</p>
<h3 id="跨线程操作">跨线程操作</h3>
<h4 id="这两个线程-各司其职">这两个线程-各司其职</h4>
<ul>
<li>
<p>JS 引擎，不能操作页面，只能操作 JS （window对象、object 对象、document对象…之类的）</p>
<ul>
<li>虽然存在 document 对象，但不能通过它操作任何事情，它只能操作document对象本身 —— 只能操作 JS</li>
</ul>
</li>
<li>
<p>渲染引擎，不能操作 JS，只能操作页面</p>
</li>
<li>
<p>这就是【各司其职】</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span>  
<span class="c1">// 但是执行这句JS的调用语句，却使页面发生了改变。这不就违背了【各司其职】的原则 ❓❓
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>既然是各司其职：JS 引擎 只能操作 JS，渲染引擎 只能操作 页面</p>
<ul>
<li>怎么让 div 出现在屏幕中的 ？</li>
<li>理论上，它只能出现在 body 的内存里面</li>
<li>这句 JS 的调用语句到底是如何操作、改变页面的  ❓❓   —— [跨线程通信](# 跨线程通信)</li>
</ul>
</blockquote>
<p>​</p>
<h4 id="跨线程通信">跨线程通信</h4>
<ul>
<li>当浏览器发现 JS 要在 body 里添加一个 div1 对象</li>
<li>浏览器就会通知渲染引擎：
<ul>
<li>在页面里也新增一个 div 元素</li>
<li>新增的 div <strong>元素</strong>的所有属性，都照抄 div1 <strong>对象</strong></li>
</ul>
</li>
</ul>
<blockquote>
<p>所以不是 JS 去渲染、改变了页面，而是浏览器去渲染、改变了页面</p>
</blockquote>
<p>​</p>
<h4 id="图示跨线程操作">图示跨线程操作</h4>
<p></p>
<ul>
<li>
<p>左【JS 执行线程】、中【浏览器】、右【渲染线程】  各自独立的</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  <span class="c1">// 不会影响页面，只改变了JS 执行线程的内存
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;hi&#39;</span>              <span class="c1">// 也不会影响页面（第1次改变文本内容）
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>      
<span class="c1">// 浏览器发现JS往body里添加了div节点，浏览器就通知了渲染引擎【慢】。
</span><span class="c1">// 渲染引擎接到通知，就往body里添加了div元素（div元素的属性照搬div节点的属性）
</span><span class="c1"></span><span class="p">...</span>
<span class="nx">div</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span>   
<span class="c1">// 浏览器发现div节点中的文本内容改变了，于是通知渲染引擎【慢】，照搬操作（第2次改变文本内容）
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>大量的时间花费在【中间过程】，也就是「浏览器通知渲染引擎」的过程中</p>
<ul>
<li>这就使得： div 的操作，会比其他几行单线程操作，都慢很多</li>
<li>「第 2 次改变文本内容」需通知渲染引擎。所以「第 2 次改变文本内容」的操作，肯定比「第 1 次」慢</li>
<li>[思考](# DOM 操作慢？)：执行速度变慢，这是模块化的缺点吗 ？</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="dom-操作慢-">DOM 操作慢 ❓❗️</h3>
<blockquote>
<p>网上都说 DOM 操作慢，实际上只是比 JS 操作慢，DOM 操作比网络请求还是快很多的。
关于这一部分内容，大家可以延伸阅读一些文章：</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000004114594" target="_blank" rel="noopener noreffer">为什么说DOM操作很慢</a></li>
<li><a href="https://stackoverflow.com/questions/6817093/but-whys-the-browser-dom-still-so-slow-after-10-years-of-effort" target="_blank" rel="noopener noreffer">为什么经过10年的努力DOM操作还是这么慢</a></li>
</ul>
<p>注意，网上的文章说的不一定都是对的，作为参考了解一下即可。</p>
</blockquote>
<blockquote>
<p>「跨线程操作，使得执行速度变慢」，这是模块化的缺点吗？  答 👇</p>
</blockquote>
<ul>
<li>
<p>虽然变慢了，但是可以实现各线程内部单独的优化。</p>
</li>
<li>
<p>比如，在渲染引擎中可以单独优化渲染，不需要理会 JS 的各种变量的问题 … 因为根本就看不见它们，所以也就无需考虑</p>
</li>
<li>
<p>总结</p>
<ul>
<li>「模块化」可以让划分的每一块，都比较简单、容易优化、容易代替</li>
<li>虽然损失了时间，但「模块化的优点」却是更显著的</li>
</ul>
</li>
</ul>
<h3 id="插入新标签的完整过程生命周期">插入新标签的完整过程（生命周期）</h3>
<blockquote>
<p>这个 div 经历了 3 个过程（vue 也有生命周期：之前、之时、之后）</p>
</blockquote>
<h4 id="在-div1-放入页面之前">在 div1 放入页面之前</h4>
<ul>
<li>你对 div1 所有的操作都属于 JS 线程内的操作</li>
</ul>
<h4 id="把-div1-放入页面之时">把 div1 放入页面之时</h4>
<ol>
<li>浏览器会发现 JS 的意图</li>
<li>就会通知渲染线程在页面中渲染 div1 对应的元素</li>
</ol>
<h4 id="把-div1-放入页面之后">把 div1 放入页面之后</h4>
<blockquote>
<p>为什么要说「可能会 ~，也可能不会」这种看似无意义的话</p>
<ul>
<li>因为不同的浏览器，有不同的逻辑</li>
<li>以下 4 点均以 Chrome 为例</li>
</ul>
</blockquote>
<ol>
<li>
<p>你对 div1 的操作都<strong>有可能</strong>会触发重新渲染</p>
</li>
<li>
<p><code>div1.id='newId'</code> 可能会重新渲染，也可能不会</p>
<ul>
<li>比如，改的这个 id 有 css 样式，那就会触发重新渲染</li>
</ul>
</li>
<li>
<p><code>div1.title = 'new'</code> ，即使改 title**<a href="https://css-tricks.com/css-content/#article-header-id-4" target="_blank" rel="noopener noreffer">也可能会重新渲染</a>**，也可能不会</p>
<ul>
<li>
<p>貌似看起来改 title 不应该影响页面。实际上 title 有时也会渲染在页面里</p>
</li>
<li>
<p>举例 👇</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">title</span><span class="o">=</span><span class="s">&#39;titleHi&#39;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="nt">div</span><span class="p">::</span><span class="nd">after</span><span class="p">{</span> <span class="k">content</span><span class="p">:</span> <span class="nb">attr</span><span class="p">(</span><span class="n">title</span><span class="p">);</span> <span class="p">}</span>   <span class="c">/* 页面中显示出了 `titleHi` */</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
<span class="c">&lt;!-- 
</span><span class="c">   div 的伪元素内容，就是获取了 div 的 title 属性。
</span><span class="c">   这种情况如果改了 div 的 title，页面一定会重新渲染
</span><span class="c">--&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>如果你连续对 div1 多次操作，浏览器可能会<strong>合并成一次操作</strong>，也可能不会（<strong>之前在动画里提到过</strong>）</p>
<ul>
<li>
<p>需求动画效果：让 test 元素的宽度从 100 px 渐变成 200 px</p>
</li>
<li>
<p><a href="http://js.jirengu.com/yefac/1/edit?html,css,js,output" target="_blank" rel="noopener noreffer">代码见链接</a>。这样写为什么不会发生动画 ？</p>
<ul>
<li>在短时间内，对这个元素的 classList 进行了两次操作（两次添加类名）</li>
<li>JS 认为 执行两次、渲染两次是浪费时间，何不合并、渲染一次，更节约渲染时间</li>
<li>由于合并 ，导致动画效果出不来。</li>
</ul>
</li>
<li>
<p>怎么才能不合并、展示出动效</p>
<ul>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">test</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;start&#39;</span><span class="p">)</span>
<span class="c1">// 中间多执行一步
</span><span class="c1"></span><span class="nx">test</span><span class="p">.</span><span class="nx">clientWidth</span>  
<span class="c1">// 获取test的客户端宽度。看似这句代码人畜无害的，但事实并非如此
</span><span class="c1">// 因为这里要获取宽度，使得上面添加class的操作，必须立即渲染
</span><span class="c1">// 所以就不会合并操作（从而展示出动效）
</span><span class="c1"></span><span class="nx">test</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
<ul>
<li>在中间读取宽度，导致 JS 必须先渲染出 start，然后告诉你宽度，最后渲染 end（强行拆分）</li>
<li>又因为中间存在 css 的过渡效果 transition，所以就会展示动画啦</li>
</ul>
</li>
</ol>
<blockquote>
<p>这其实是非常高深的一点  ，很少有人能这么清晰的分析出原因</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="提问">提问</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  
<span class="nx">div</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;hi&#39;</span>          <span class="c1">// 不触发重新渲染
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>  <span class="c1">// div插入页面之时
</span><span class="c1"></span><span class="p">...</span>
<span class="nx">div</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span>   <span class="c1">// 在div插入页面之后，修改 div 的文本内容，一定会触发重新渲染
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>在 div 插入页面之后</p>
<ul>
<li>修改 div 的文本内容，一定会触发重新渲染</li>
<li><strong>那是否「修改 div 的所有属性，都会触发重新渲染」呢？</strong></li>
</ul>
</blockquote>
<p><a href="http://js.jirengu.com/meviw/2/edit?html,js,output" target="_blank" rel="noopener noreffer">示例代码</a></p>
<ul>
<li>html 中，div 元素有三个不同的属性：<code>id</code>、<code>x</code>、<code>data-x</code>，属性值都是 <code>test</code></li>
<li>JS 中，获取到这个 div 元素为 div1，再分别修改这三个属性的值为 <code>frank</code></li>
<li>那最终页面中的这个 div 元素，是否会三个属性都修改成功了呢 ？
<ul>
<li><code>id</code> 修改成功、<code>x</code> 修改失败、<code>data-x</code> 修改成功</li>
</ul>
</li>
</ul>
<blockquote>
<p>可修改的属性，存在什么规律吗？</p>
</blockquote>
<ul>
<li>如果这个属性是在「标准属性」中、或在「data 属性」中</li>
<li>那么浏览器会自动同步这个修改结果到渲染的页面中</li>
<li>id 属于标准属性、data-x 属于 data 属性，
而 x 属于非标准属性，修改它就不会影响（渲染）到页面</li>
</ul>
<blockquote>
<p>总结「属性同步」的标准，[见下](# 属性同步)</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="属性同步">属性同步</h3>
<h4 id="标准属性">标准属性</h4>
<ul>
<li>对 div1 的标准属性的修改，会被浏览器自动同步到页面中</li>
<li>比如 id、className、title 等（你改了就会直接变）</li>
</ul>
<h4 id="data--属性">data-* 属性</h4>
<ul>
<li>同上</li>
</ul>
<h4 id="非标准属性">非标准属性</h4>
<ul>
<li>对非标准属性的修改，则只会停留在 JS 线程中</li>
<li>不会同步到页面里</li>
<li>比如 x 属性，<a href="http://js.jirengu.com/meviw/2/edit?html,js,output" target="_blank" rel="noopener noreffer">示例代码</a></li>
</ul>
<h4 id="启示">启示</h4>
<ul>
<li>如果你想自定义属性，又想被同步到页面中，请使用 data-  作为前缀（data 属性）</li>
<li>不要使用类似 <code>x</code> 这种属性</li>
</ul>
<h4 id="图示">图示</h4>
<p></p>
<ul>
<li>div 的【标准属性】，自动同步</li>
<li>div 的【data 属性】，自动同步
<ul>
<li>【data 属性】中的【x 属性】，自动同步</li>
</ul>
</li>
<li>div 的 x 属性，什么东西，滚</li>
</ul>
<blockquote>
<p>补充：</p>
<ul>
<li>JS 线程中的属性叫「properties」，渲染线程中的属性叫「attributes」 （[对比](# Property  vs  Attribute)）</li>
<li>所以 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getAttribute" target="_blank" rel="noopener noreffer">Element.getAttribute()</a> 这个 API 获取的是页面中的属性</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="property--vs--attribute">Property  vs  Attribute</h3>
<h4 id="property-属性">property 属性</h4>
<ul>
<li>
<p>JS 线程中 div1 的所有属性，叫做 div1 的 property</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div1</span><span class="p">.</span><span class="nx">style</span>
<span class="nx">div1</span><span class="p">.</span><span class="nx">id</span>
<span class="nx">div1</span><span class="p">.</span><span class="nx">className</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="attribute-也是属性">attribute 也是属性</h4>
<ul>
<li>
<p>渲染引擎中 div1 对应标签的属性，叫做 attribute</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;test&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;test&#34;</span> <span class="na">data-x</span><span class="o">=</span><span class="s">&#34;test&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h4 id="区别">区别</h4>
<ul>
<li>大部分时候，同名的 property 和 attribute ，值相等</li>
<li>但如果<strong>不是标准属性</strong>，那么它俩只会在一开始时相等
<ul>
<li>非标准属性 x，一开始左右相等。后来 JS 线程中修改了 x 的值，但是渲染线程并不知道，导致不等</li>
</ul>
</li>
<li>但注意 <strong>attribute 只支持字符串</strong>
<ul>
<li>页面中的标签属性的值，只能是字符串，<code>&lt;div id=1&gt; &lt;/div&gt;</code> 中的 id=1 也只是省略了引号的字符串 1</li>
</ul>
</li>
<li>而 property 支持字符串、布尔等类型</li>
</ul>]]></description>
</item><item>
    <title>DOM vs jQuery（API篇）</title>
    <link>http://samrks.github.io/dom-dom-vs-jquery/</link>
    <pubDate>Tue, 26 May 2020 09:26:03 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/dom-dom-vs-jquery/</guid>
    <description><![CDATA[<p>对比 DOM 和 jQuery</p>
<p>​</p>
<h2 id="javascript-的组成">JavaScript 的组成</h2>
<ul>
<li>ECMAScript：JavaScript 的语法标准。包括变量、表达式、运算符、函数、if 语句、for 语句等。</li>
<li><strong>DOM</strong>：文档对象模型，操作<strong>网页上的元素</strong>的 API。比如让盒子移动、变色、轮播图等。</li>
<li><strong>BOM</strong>：浏览器对象模型，操作<strong>浏览器部分功能</strong>的 API。比如让浏览器自动滚动。</li>
</ul>
<p>​</p>
<h2 id="事件的三要素">事件的三要素</h2>
<h3 id="事件源事件事件驱动程序">事件源、事件、事件驱动程序</h3>
<p>比如，我用手去按开关，灯亮了。这件事情里，事件源是：开关。事件是：按开关。事件驱动程序是：灯的开和关。</p>
<p>再比如，网页上弹出一个广告，我点击右上角的<code>X</code>，广告就关闭了。这件事情里，事件源是：<code>X</code>。事件是：onclick。事件驱动程序是：广告关闭了。</p>
<p>于是我们可以总结出：谁引发的后续事件，谁就是事件源。</p>
<p>​</p>
<p><strong>总结如下：</strong></p>
<ul>
<li><strong>事件源</strong>：引发后续事件的 html 标签。
<ul>
<li>触发事件的对象</li>
<li>在 js 中就是 dom 对象</li>
<li>在 jQuery 中 是包装过的 dom 对象</li>
</ul>
</li>
<li><strong>事件</strong>：js 已经定义好了（常见事件 见下图）。
<ul>
<li>js 中 指的是 onclick , onmouseenter/onmouseleave , onmouseup/onmousedown，……</li>
<li>jQuery 中 就是 click , mouseenter/mouseleave , mouseup/mousedown，……</li>
</ul>
</li>
<li><strong>事件驱动程序</strong>：对样式和 html 的操作。也就是 DOM。</li>
</ul>
<p>常见的事件如下：</p>
<table>
<thead>
<tr>
<th align="left">JavaScript 事件</th>
<th>jQuery 事件</th>
<th>当一下情况发生时,出现此事件</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">onabort</td>
<td></td>
<td>图像加载被中断</td>
</tr>
<tr>
<td align="left">onblur</td>
<td>blur( )</td>
<td>元素失去焦点</td>
</tr>
<tr>
<td align="left">onchange</td>
<td>change( )</td>
<td>用户改变域的内容</td>
</tr>
<tr>
<td align="left">onclick</td>
<td>click( )</td>
<td>鼠标点击某个对象</td>
</tr>
<tr>
<td align="left">ondblclick</td>
<td>dblclick( )</td>
<td>鼠标双击某个对象</td>
</tr>
<tr>
<td align="left">onerror</td>
<td></td>
<td>当加载文档或图像时发生某个错误</td>
</tr>
<tr>
<td align="left">onfocus</td>
<td>focus( )</td>
<td>元素获得焦点</td>
</tr>
<tr>
<td align="left">onkeydown</td>
<td>keydown( )</td>
<td>某个键盘的键被按下</td>
</tr>
<tr>
<td align="left">onkeypress</td>
<td>keypress( )</td>
<td>某个键盘的键被按下或按住</td>
</tr>
<tr>
<td align="left">onkeyup</td>
<td>keyup( )</td>
<td>某个键盘的键被松开</td>
</tr>
<tr>
<td align="left">onload</td>
<td>load( )</td>
<td>某个页面或图像被完成加载</td>
</tr>
<tr>
<td align="left">onmouseenter</td>
<td>mouseenter( )</td>
<td>鼠标指针进入（穿过）元素</td>
</tr>
<tr>
<td align="left">onmouseleave</td>
<td>mouseleave( )</td>
<td>鼠标指针离开元素</td>
</tr>
<tr>
<td align="left">onmousedown</td>
<td>mousedown( )</td>
<td>某个鼠标按键被按下</td>
</tr>
<tr>
<td align="left">onmousemove</td>
<td>mousemove( )</td>
<td>鼠标被移动</td>
</tr>
<tr>
<td align="left">onmouseout</td>
<td>mouseout( )</td>
<td>鼠标从某元素移开</td>
</tr>
<tr>
<td align="left">onmouseover</td>
<td>mouseover( )</td>
<td>鼠标被移到某元素之上</td>
</tr>
<tr>
<td align="left">onmouseup</td>
<td>mouseup( )</td>
<td>某个鼠标按键被松开</td>
</tr>
<tr>
<td align="left">onreset</td>
<td></td>
<td>重置按钮被点击</td>
</tr>
<tr>
<td align="left">onresize</td>
<td>resize( )</td>
<td>窗口或框架被调整尺寸</td>
</tr>
<tr>
<td align="left">onselect</td>
<td>select( )</td>
<td>文本被选定</td>
</tr>
<tr>
<td align="left">onsubmit</td>
<td>submit( )</td>
<td>提交按钮被点击</td>
</tr>
<tr>
<td align="left">onunload</td>
<td>unload( )</td>
<td>用户退出页面</td>
</tr>
</tbody>
</table>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="什么是-dom">什么是 DOM</h2>
<p>DOM：Document Object Model，文档对象模型。DOM 为文档提供了结构化表示，并定义了如何通过脚本来访问文档结构。目的其实就是为了能让 js 操作 html 元素而制定的一个规范。</p>
<p>DOM 就是由节点组成的。</p>
<p>​</p>
<h3 id="解析过程">解析过程</h3>
<p>HTML 加载完毕，渲染引擎会在内存中把 HTML 文档，生成一个 DOM 树，getElementById 是获取内中 DOM 上的元素节点。然后操作的时候修改的是该元素的<strong>属性</strong>。</p>
<p>​</p>
<h3 id="dom-树一切都是节点">DOM 树（一切都是节点）</h3>
<p>DOM 的数据结构如下：</p>
<p></p>
<p>上图可知，<strong>在 HTML 当中，一切都是节点</strong>：（非常重要）</p>
<ul>
<li><strong>元素节点</strong>：HMTL 标签。</li>
<li><strong>文本节点</strong>：标签中的文字（比如标签之间的空格、换行）</li>
<li><strong>属性节点</strong>：：标签的属性。</li>
</ul>
<p>整个 html 文档就是一个文档节点。所有的节点都是 Object。</p>
<h3 id="dom-可以做什么">DOM 可以做什么</h3>
<ul>
<li>找对象（元素节点）</li>
<li>设置元素的属性值</li>
<li>设置元素的样式</li>
<li>动态创建和删除元素</li>
<li>事件的触发响应：事件源、事件、事件的驱动程序</li>
</ul>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="什么是-jquery">什么是 jQuery</h2>
<h3 id="为什么要学-jquery">为什么要学 jQuery</h3>
<p>究其原因是因为原生 js 在进行 dom 操作时代码量多而且容错性差，不够简练。那么 jQuery 就是为了解决这些问题而出现的。</p>
<h3 id="jquery-是什么">jQuery 是什么</h3>
<ul>
<li>jQuery 是一个快速、简洁的 JavaScript 框架，是继 Prototype 之后又一个优秀的 JavaScript 代码库（或 JavaScript 框架）。</li>
<li>jQuery 设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。</li>
<li>jQuery 的作用：**它封装 JavaScript 常用的功能代码，提供一种简便的 JavaScript 设计模式，优化 HTML 文档操作、事件处理、动画设计和 Ajax 交互。 **</li>
<li>目前这个阶段，主要介绍如何来使用 jQuery 操作 DOM，其实就是学习 jQuery 封装好的那些功能方法，这些方法叫做 API（Application Programming Interface 应用程序编程接口）。</li>
</ul>
<h3 id="对-javascript-进行封装">对 JavaScript 进行封装</h3>
<p><strong>jQuery 对 JavaScript 的哪些方面进行了封装 ？</strong></p>
<p>比如说 ：</p>
<ul>
<li>
<p>获取事件源</p>
</li>
<li>
<p>类名操作</p>
</li>
<li>
<p>样式操作</p>
</li>
<li>
<p>内容操作</p>
</li>
<li>
<p>通过关系查找元素，也进行了封装</p>
</li>
<li>
<p>对 简单的动画 进行封装</p>
</li>
<li>
<p>……</p>
<p>那我们需要学习它的使用方法(语法/规则)</p>
</li>
</ul>
<hr>
<hr>
<h2 id="dom-和-jquery-的基本使用区别">DOM 和 jQuery 的基本使用区别</h2>
<ul>
<li>这里是网上找的一个，别人总结出来的两者区别，可以阅读一下
<ul>
<li><a href="https://blog.csdn.net/u012060033/article/details/90295613" target="_blank" rel="noopener noreffer">jQuery与DOM的区别</a></li>
<li><a href="https://www.cnblogs.com/EmilyGarden/p/8513643.html" target="_blank" rel="noopener noreffer">jQuery对象和DOM对象的区别</a></li>
</ul>
</li>
</ul>
<h3 id="事件处理的区别">事件处理的区别</h3>
<ul>
<li><strong>事件源</strong>
<ol>
<li>触发事件的对象</li>
<li>在 js 中就是 dom 对象</li>
<li>在 jQuery 中 是包装过的 dom 对象</li>
</ol>
</li>
<li><strong>事件</strong>
<ol>
<li>js 中 指的是 onclick , onmouseenter/onmouseleave , onmouseup/onmousedown</li>
<li>jQuery 中 就是 click , mouseenter/mouseleave , mouseup/mousedown</li>
</ol>
</li>
<li>**事件处理程序 ↓↓ **</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 1. js中
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// 事件处理
</span><span class="c1"></span><span class="p">};</span>

<span class="c1">// jQuery中
</span><span class="c1"></span><span class="nx">$</span><span class="p">(</span><span class="nx">obj</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// 事件处理
</span><span class="c1"></span><span class="p">});</span>

<span class="c1">// 区别
</span><span class="c1">// obj.onclick  dom对象调用属性
</span><span class="c1">// obj.click()  jQuery对象调用方法
</span></code></pre></td></tr></table>
</div>
</div><h3 id="完整代码书写步骤">完整代码书写步骤</h3>
<h4 id="dom书写格式">DOM书写格式</h4>
<ul>
<li>（1）获取事件源：document.getElementById(“box”);</li>
<li>（2）绑定事件： 事件源 box.事件 onclick = function(){ 事件驱动程序 };</li>
<li>（3）书写事件驱动程序：关于 DOM 的操作。</li>
</ul>
<p>最简单的代码举例：（点击 box1，然后弹框）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-HTML" data-lang="HTML"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
	<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;box1&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

	<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
		<span class="c1">// 1、获取事件源
</span><span class="c1"></span>		<span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;box1&#34;</span><span class="p">);</span>
		<span class="c1">// 2、绑定事件
</span><span class="c1"></span>		<span class="nx">div</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
			<span class="c1">// 3、书写事件驱动程序
</span><span class="c1"></span>			<span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;我是弹出的内容&#34;</span><span class="p">);</span>
		<span class="p">};</span>
	<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="jquery书写格式">jQuery书写格式</h4>
<ul>
<li>（0）先下载 jQuery 源文件，引入页面 （想使用 jQuery，必须先引入 jQuery 文件代码）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;js/jquery-3.3.1.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="c">&lt;!-- 如果没有引入，浏览器会报错：
</span><span class="c">Uncaught ReferenceError: $ is not defined --&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>（1）获取事件源：$( ' .box ' ) ;</li>
<li>（2）绑定事件： 事件源 box.事件 click ( <em>function</em> ( ) {  事件驱动程序 } ) ;</li>
<li>（3）书写事件驱动程序：关于 jQuery 的操作。</li>
</ul>
<p>最简单的代码举例：（点击 box1，然后弹框）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
	<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;box1&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    
     <span class="c">&lt;!-- 先下载jQuery源文件 --&gt;</span>
     <span class="c">&lt;!-- 引入 --&gt;</span>
     <span class="c">&lt;!-- 同时注意引用顺序，引入之后才能使用，否则会报错 $ is not defined --&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;js/jquery-3.3.1.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>

	<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
		<span class="c1">// 1、获取事件源 2、绑定事件 3、书写事件驱动程序
</span><span class="c1"></span>		<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#box1&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;我是弹出的内容&#34;</span><span class="p">);</span>
		<span class="p">})</span>
	<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="dom对象-和-jquery对象">DOM对象 和 jQuery对象</h3>
<ul>
<li>
<p>DOM对象，即是我们用传统的方法（javascript）获得的对象</p>
</li>
<li>
<p>jQuery对象，即是用 jQuery类库 的选择器获得的对象</p>
<blockquote>
<ul>
<li>jQuery对象就是通过jQuery包装DOM对象后产生的对象，它是jQuery独有的。</li>
<li>如果一个对象是jQuery对象，那么就可以使用jQuery里的方法</li>
</ul>
</blockquote>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="kd">var</span> <span class="nx">domObj</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">);</span> <span class="c1">// domObj 是一个 DOM对象
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">$obj</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#id&#34;</span><span class="p">);</span> <span class="c1">// $obj 是一个 jQuery对象;
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>对于一个dom对象，只需要用$( )把dom对象包装起来，就可以获得一个jquery对象了，方法为$(dom对象)</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    
    <span class="kd">var</span> <span class="nx">cr</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;cr&#34;</span><span class="p">);</span> <span class="c1">//dom对象
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">$cr</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">cr</span><span class="p">);</span> <span class="c1">//转换成jquery对象
</span><span class="c1"></span>
    <span class="c1">//转换后可以任意使用jquery中的方法了.
</span><span class="c1"></span>    <span class="c1">//建议:如果获取的对象是 jquery对象，那么在声明变量时，变量名前面加上$,这样方便容易识别出哪些是jquery对象
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">$variable</span> <span class="o">=</span> <span class="nx">jquery对象</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">variable</span> <span class="o">=</span> <span class="nx">dom对象</span><span class="p">;</span> 
    
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>如何理解这句话 ↓↓ ？</p>
<blockquote>
<p>在 jquery 当中，有两个变量 $ 和 jQuery ，他们是等价的</p>
</blockquote>
<ul>
<li>
<p>jquery获取事件源的方式 $('.box&rsquo;)    等价于  jQuery ('.box&rsquo;)</p>
<ul>
<li>在jq中 用 $( )   ==  jQuery( )  来获取数据源</li>
</ul>
</li>
<li>
<p>dom获取事件源的方式  document.querySelector('.box&rsquo;)</p>
<ul>
<li>在dom中，用 document 来获取事件源</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="kd">var</span> <span class="nx">boxEl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">);</span> <span class="c1">//boxEL =&gt; dom对象
</span><span class="c1"></span>	<span class="kd">var</span> <span class="nx">box</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">);</span> <span class="c1">//box =&gt; jquery对象
</span><span class="c1"></span>    <span class="c1">// box 和 boxEl  并不等价 
</span><span class="c1"></span>    <span class="c1">// 因为 用jquery 获取事件源 拿到的 不是 dom 对象(拿到的是进行了二次封装的dom对象),把它叫做jq对象
</span><span class="c1"></span>    
    <span class="nx">boxEl</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">//并不会打印,不会进行任何操作,因为压根没有click这个方法
</span><span class="c1"></span>        <span class="p">});</span>
        <span class="c1">// boxEl 是原生dom,并没有click 这个方法, jq对象 才有
</span><span class="c1"></span>        <span class="c1">// 所以进行dom操作时,搞清楚 操作的是 原生dom对象 还是 jq对象 
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="入口函数">入口函数</h3>
<h4 id="入口函数的功能">入口函数的功能</h4>
<blockquote>
<p>入口函数的作用是 页面加载完成后，再执行 function（）{ 里面的代码 } ，有了入口函数，就可以实现将 js代码 写在页面基本结构的 标签 之前</p>
<ul>
<li>如果没有入口函数，js 会被浏览器逐行解析，此时书写 js 必须注意存在顺序
<ul>
<li>此时若将 &lt;script&gt; 代码写在最上面，则可能导致浏览器先执行了js的标签操作，却还没解析生成标签，就会报错</li>
</ul>
</li>
</ul>
</blockquote>
<p>jQuery 中的入口函数 可以用来<strong>取代</strong> 原生 JS 中的 入口函数（写法见下）</p>
<h4 id="原生-js-中的入口函数的写法">原生 JS 中的入口函数的写法</h4>
<ul>
<li>
<p>**window.onload = function ( )  { … }  **</p>
</li>
<li>
<p>*onload 事件比较特殊，这里单独讲一下。*<strong>当页面加载（文本和图片）完毕的时候，触发 onload 事件。</strong></p>
</li>
<li>
<p>作用是 页面加载完成后，再执行 function（）{ 里面的代码 } ，有了这个函数，就可以将 js代码 写在页面基本结构的 标签 之前</p>
</li>
</ul>
<h4 id="jquery-中的入口函数的写法">jQuery 中的入口函数的写法</h4>
<ul>
<li><strong>$ ( document ) . ready ( function ( )  { … } ) ;</strong>
<ul>
<li>当文档对象执行完的时候，就执行 function 这个函数</li>
<li>ready 这个事件 就等价于 onload 这个事件</li>
<li>jQuery中的很多功能，实现起来的效果与原生 JS 一样，其实是 jQuery 对原生 JS 进行了封装，换成一种直接调用的方式，使得原生 JS 中原本实现书写 很复杂、麻烦的语句，变得非常简单
<ul>
<li>jQuery 学起来和原生 JS 相比，就是换了一种写法</li>
<li>jQuery 能实现的东西，原生 JS 都能实现</li>
<li>原生 JS 能实现的，jQuery 不一定能实现，因为 jQuery 只是封装了原生 JS 中的常用功能代码，不是全部</li>
</ul>
</li>
</ul>
</li>
<li><strong>jQuery 中的入口函数可以直接简写成  ==&gt;   $ ( function ( ) { … } ) ;   这是一种常见写法</strong>
<ul>
<li><em><strong>推荐</strong></em>  <em>这种形式的写法 ↑↑</em></li>
</ul>
</li>
</ul>
<h4 id="js-和-jquery-入口函数的区别">js 和 jQuery 入口函数的区别</h4>
<ul>
<li>执行时间</li>
</ul>
<p>window.onload 必须等到页面内包括图片的所有元素加载完毕后才能执行。</p>
<p>$(document).ready()是 DOM 结构绘制完毕后就执行，不必等到加载完毕。只加载了 dom 框架，对于大的图片需要时间，这个不等。</p>
<ul>
<li>编写个数</li>
</ul>
<p>window.onload 不能同时编写多个，如果有多个 window.onload 方法，只会执行一个。</p>
<p>$(document).ready()可以同时编写多个，并且都可以得到执行。</p>
<hr>
<hr>
<h2 id="获取事件源">获取事件源</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;p1&#34;</span><span class="p">&gt;</span>下雨了<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span><span class="p">&gt;</span>不凡<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>你好<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="js-获取事件源-dom元素dom对象">JS 获取事件源 (dom元素,dom对象)</h3>
<h4 id="1-通过选择器获取">1. 通过选择器获取</h4>
<p>DOM 节点的获取   有三种方式：</p>
<ul>
<li>方式（1）：通过 id 获取 单个标签：get Element By Id</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">pEl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;p1&#39;</span><span class="p">);</span> <span class="c1">// 拿到的对象pEl是  dom元素，也叫dom对象
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>方式（2）：通过 类名 获得 标签数组，所以有s
<ul>
<li>get Element<strong>s</strong> By Class Name</li>
<li>数组形式(类数组) 具备长度、下标属性，但是不具备数组的方法</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">box</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">&#39;box&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">boxEl</span> <span class="o">=</span> <span class="nx">box</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="c1">// 通过下标 获取到具体的 dom 元素
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">boxL</span><span class="o">=</span> <span class="nx">box</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="c1">// box为数组形式的dom对象，可以通过.length属性，获取box数组长度
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>方式（3）：通过 标签名 获得 标签数组，所以有s
<ul>
<li>get Element<strong>s</strong> By Tag Name</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">];</span> <span class="c1">// 拿到的是 p标签中的第2个&lt;p&gt;你好&lt;/p&gt;
</span></code></pre></td></tr></table>
</div>
</div><p>既然方式（2）、方式（3）获取的是标签数组，那么习惯性是<strong>先遍历之后再使用</strong>。</p>
<p>**特殊情况：数组中的值只有 1 个。**即便如此，这一个值也是包在数组里的。这个值的获取方式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&#34;div1&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span> <span class="c1">//取数组中的第一个元素
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s2">&#34;hehe&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span> <span class="c1">//取数组中的第一个元素
</span></code></pre></td></tr></table>
</div>
</div><h4 id="2-queryselector-获取方式h5新增">2. querySelector 获取方式—H5新增</h4>
<p><strong>html5 新选择器</strong>：参数是 css 选择器参数</p>
<ul>
<li>
<p><code>document.querySelector(&quot;selector&quot;)</code> 选择选中的第一个</p>
</li>
<li>
<p><code>document.querySelectorAll(&quot;selector&quot;)</code> 选择多个，拿的是数组（符合这个选择器的所有元素）</p>
</li>
</ul>
<hr>
<h3 id="jq-获取事件源--jquery对象-">jQ 获取事件源 ( jQuery对象 )</h3>
<h4 id="通过选择器获取">通过选择器获取</h4>
<h5 id="jquery-的基本选择器">jQuery 的基本选择器</h5>
<table>
<thead>
<tr>
<th>符号</th>
<th align="left">说明</th>
<th align="left">用法</th>
</tr>
</thead>
<tbody>
<tr>
<td>$('#demo&rsquo;)</td>
<td align="left">选择 id 为 demo 的元素</td>
<td align="left">$('#demo&rsquo;).css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
</tr>
<tr>
<td>$('.demo&rsquo;)</td>
<td align="left">选择 class 为 demo 的所有元素</td>
<td align="left">$('.demo&rsquo;).css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
</tr>
<tr>
<td>$(&lsquo;div&rsquo;)</td>
<td align="left">选择所有 div 标签元素</td>
<td align="left">$(&lsquo;div&rsquo;).css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
</tr>
<tr>
<td>$('*')</td>
<td align="left">选择所有标签元素</td>
<td align="left">$('*').css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
</tr>
<tr>
<td>$('.arr.arr-left&rsquo;)</td>
<td align="left">选择同时具有 arr 和 arr-left 类名的元素</td>
<td align="left">$('.arr.arr-left&rsquo;).css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
</tr>
</tbody>
</table>
<p>看起来和 css 的选择器没什么两样!</p>
<h5 id="jquery-的其他选择器">jQuery 的其他选择器</h5>
<ul>
<li>
<p>层级选择器</p>
<p><strong>(书写css样式时，同样适用 ↓↓ )</strong></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>符号</th>
<th align="left">说明</th>
<th align="left">用法</th>
</tr>
</thead>
<tbody>
<tr>
<td>空格</td>
<td align="left">后代选择器</td>
<td align="left">$(&lsquo;div span&rsquo;).css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
</tr>
<tr>
<td>&gt;</td>
<td align="left">子代选择器</td>
<td align="left">$(&lsquo;div&gt;span&rsquo;).css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
</tr>
<tr>
<td>+</td>
<td align="left">紧邻选择器：下一个兄弟</td>
<td align="left">$(&lsquo;div+p&rsquo;).css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
</tr>
<tr>
<td>~</td>
<td align="left">兄弟选择器：后边所有兄弟</td>
<td align="left">$(&lsquo;div~p&rsquo;).css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
</tr>
</tbody>
</table>
<ul>
<li>属性选择器</li>
</ul>
<p>​       <strong>(书写css样式时，同样适用 ↓↓ )</strong></p>
<table>
<thead>
<tr>
<th>符号</th>
<th align="left">说明</th>
<th align="left">用法</th>
</tr>
</thead>
<tbody>
<tr>
<td>$(&lsquo;a[href]')</td>
<td align="left">具有 href 属性的 a 标签</td>
<td align="left">$(&lsquo;a[href]').css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
</tr>
<tr>
<td>$(&lsquo;a[href='baidu&rsquo;]')</td>
<td align="left">href 属性为&rsquo;baidu&rsquo;的 a 标签</td>
<td align="left">$(&lsquo;a[href='baidu&rsquo;]').css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
</tr>
<tr>
<td>$(&lsquo;a[href!='baidu&rsquo;]')</td>
<td align="left">href 属性不为&rsquo;baidu&rsquo;的 a 标签,包括不具有 href 属性的 a 标签</td>
<td align="left">$(&lsquo;a[href!='baidu&rsquo;]').css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
</tr>
<tr>
<td>$(&lsquo;a[href^='www&rsquo;]')</td>
<td align="left">href 属性以&rsquo;www&rsquo;开头的 a 标签</td>
<td align="left">$(&lsquo;a[href^='www&rsquo;]').css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
</tr>
<tr>
<td>$(&lsquo;a[href$='cn&rsquo;]')</td>
<td align="left">href 属性以&rsquo;cn&rsquo;结尾的 a 标签</td>
<td align="left">$(&lsquo;a[href$='cn&rsquo;]').css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
</tr>
<tr>
<td>$(&lsquo;a[href*='i&rsquo;]')</td>
<td align="left">href 属性包含&rsquo;i&rsquo;的 a 标签</td>
<td align="left">$(&lsquo;a[href*='i&rsquo;]').css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
</tr>
<tr>
<td>$(&lsquo;a[href][title='内容&rsquo;]')</td>
<td align="left">具有 href 属性且 title 属性为&rsquo;内容&rsquo;的 a 标签</td>
<td align="left">$(&lsquo;a[href][title='内容&rsquo;]').css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
</tr>
</tbody>
</table>
<ul>
<li>基本筛选选择器</li>
</ul>
<table>
<thead>
<tr>
<th>符号</th>
<th align="left">说明(index 从 0 开始)</th>
<th align="left">用法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>:eq(index)</td>
<td align="left">匹配一个给定索引值的元素</td>
<td align="left">$(&lsquo;li:eq(1)').css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
<td>匹配 li 中 <strong>下标为1</strong>的元素</td>
</tr>
<tr>
<td>:gt(index)</td>
<td align="left">匹配所有大于给定索引值的元素</td>
<td align="left">$(&lsquo;li:gt(1)').css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
<td>匹配 li 中 <strong>下标&gt;1</strong>的所有元素</td>
</tr>
<tr>
<td>:lt(index)</td>
<td align="left">匹配所有小于给定索引值的元素</td>
<td align="left">$(&lsquo;li:lt(2)').css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
<td>匹配 li 中 <strong>下标&lt;2</strong>的所有元素</td>
</tr>
<tr>
<td>:odd</td>
<td align="left">匹配所有索引值为奇数的元素</td>
<td align="left">$(&lsquo;li:odd&rsquo;).css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
<td>匹配 li 中 <strong>下标为奇数</strong>的所有元素</td>
</tr>
<tr>
<td>:even</td>
<td align="left">匹配所有索引值为偶数的元素</td>
<td align="left">$(&lsquo;li:odd&rsquo;).css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
<td>匹配 li 中 <strong>下标为偶数</strong>的所有元素</td>
</tr>
<tr>
<td>:first</td>
<td align="left">获取匹配的第一个元素</td>
<td align="left">$(&lsquo;li:first&rsquo;).css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
<td>匹配 li 中 <strong>第一个元素</strong></td>
</tr>
<tr>
<td>:last</td>
<td align="left">获取匹配的最后一个元素</td>
<td align="left">$(&lsquo;li:last&rsquo;).css(&lsquo;color&rsquo;,&lsquo;red&rsquo;)</td>
<td>匹配 li 中 <strong>最后一个元素</strong></td>
</tr>
</tbody>
</table>
<ul>
<li>其他选择器</li>
</ul>
<table>
<thead>
<tr>
<th>符号</th>
<th align="left">说明(index 从 0 开始)</th>
<th align="left">用法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>:empty</td>
<td align="left">匹配所有不包含子元素或者文本的空元素</td>
<td align="left">$(&lsquo;li:empty&rsquo;)</td>
<td>匹配 li 中 <strong>不包含子元素 或 文本</strong> 的所有空元素</td>
</tr>
<tr>
<td>:contains(text)</td>
<td align="left">匹配包含给定文本的元素</td>
<td align="left">$(&lsquo;li:contains(&lsquo;john&rsquo;)')</td>
<td>匹配 li 中 <strong>包含文本john</strong> 的所有元素</td>
</tr>
</tbody>
</table>
<hr>
<hr>
<hr>
<hr>
<h2 id="通过关系获取节点">通过关系获取节点</h2>
<h3 id="dom节点关系获取元素">DOM：节点关系获取元素</h3>
<p>DOM 的节点并不是孤立的，因此可以通过 DOM 节点之间的相对关系对它们进行访问。如下：</p>
<p></p>
<p>节点的访问关系，是以<strong>属性</strong>的方式存在的。</p>
<p>JS 中的<strong>父子兄</strong>访问关系：</p>
<p></p>
<p>这里我们要重点知道<strong>parentNode</strong>和<strong>children</strong>这两个属性的用法。下面分别介绍。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;inner-box&#34;</span><span class="p">&gt;</span>
        内部盒子
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;li-item&#34;</span><span class="p">&gt;</span>li1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;li-item&#34;</span><span class="p">&gt;</span>li2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;li-item&#34;</span><span class="p">&gt;</span>li3<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;li-item&#34;</span><span class="p">&gt;</span>li4<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;li-item li5&#34;</span><span class="p">&gt;</span>li5<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;li-item&#34;</span><span class="p">&gt;</span>li6<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="获取父节点-parentnode">获取父节点 .parentNode</h4>
<p>调用者就是节点。一个节点只有一个父节点，调用方式就是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 节点.parentNode;
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">inner</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">&#39;inner-box&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">wBox</span> <span class="o">=</span> <span class="nx">inner</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">;</span> <span class="c1">// 拿到inner的父节点，赋值给wBox
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">wBox</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="获取兄弟节点">获取兄弟节点</h4>
<h5 id="1下一个节点"><strong>1、下一个节点</strong></h5>
<blockquote>
<p>Sibling 的中文是<strong>兄弟</strong>。</p>
</blockquote>
<p>（1）nextSibling：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">li5</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">&#39;li5&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">next</span> <span class="o">=</span> <span class="nx">li5</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>火狐、谷歌、IE9+版本：都指的是下一个节点（包括标签、空文档和换行节点）。</li>
<li>IE678 版本：指下一个元素节点（标签）。</li>
</ul>
<p>（2）nextElementSibling：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">nextEl</span> <span class="o">=</span> <span class="nx">li5</span><span class="p">.</span><span class="nx">nextElementSibling</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>火狐、谷歌、IE9+版本：都指的是下一个元素节点（标签）。</li>
</ul>
<p><strong>总结</strong>：为了获取下一个<strong>元素节点</strong>，我们可以这样做：在 IE678 中用 nextSibling，在火狐谷歌 IE9+以后用 nextElementSibling，于是，综合这两个属性，兼容写法 ↓↓</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 下一个兄弟节点 = 当前节点.nextElementSibling || 当前节点.nextSibling;
</span></code></pre></td></tr></table>
</div>
</div><h5 id="2前一个节点-">**2、前一个节点 **</h5>
<blockquote>
<p>previous 的中文是：前一个。</p>
</blockquote>
<p>（1）previousSibling：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">next</span> <span class="o">=</span> <span class="nx">li5</span><span class="p">.</span><span class="nx">previousSibling</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>火狐、谷歌、IE9+版本：都指的是前一个节点（包括标签、空文档和换行节点）。</li>
<li>IE678 版本：指前一个元素节点（标签）。</li>
</ul>
<p>（2）previousElementSibling：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">next</span> <span class="o">=</span> <span class="nx">li5</span><span class="p">.</span><span class="nx">previousElementSibling</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>火狐、谷歌、IE9+版本：都指的是前一个元素节点（标签）。</li>
</ul>
<p><strong>总结</strong>：为了获取前一个<strong>元素节点</strong>，我们可以这样做：在 IE678 中用 previousSibling，在火狐谷歌 IE9+以后用 previousElementSibling，于是，综合这两个属性，兼容写法  ↓↓</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 前一个兄弟节点 = 节点.previousElementSibling || 节点.previousSibling;
</span></code></pre></td></tr></table>
</div>
</div><h4 id="获取单个子节点">获取单个子节点</h4>
<h5 id="1第一个子节点-">**1、第一个子节点 **</h5>
<p>（1）firstChild：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">ulEl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">first</span> <span class="o">=</span> <span class="nx">ulEl</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>火狐、谷歌、IE9+版本：都指的是第一个子节点（包括标签、空文档和换行节点）。</li>
<li>IE678 版本：指第一个子元素节点（标签）。</li>
</ul>
<p>（2）firstElementChild：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">first</span> <span class="o">=</span> <span class="nx">ulEl</span><span class="p">.</span><span class="nx">firstElementChild</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>火狐、谷歌、IE9+版本：都指的是第一个子元素节点（标签）。</li>
</ul>
<p><strong>总结</strong>：为了获取第一个<strong>子元素节点</strong>，我们可以这样做：在 IE678 中用 firstChild，在火狐谷歌 IE9+以后用 firstElementChild，于是，综合这两个属性，兼容写法  ↓↓</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 第一个子元素节点 = 节点.firstElementChild || 节点.firstChild;
</span></code></pre></td></tr></table>
</div>
</div><h5 id="2最后一个子节点">2、最后一个子节点</h5>
<p>（1）lastChild：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">last</span> <span class="o">=</span> <span class="nx">ulEl</span><span class="p">.</span><span class="nx">lastChild</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>火狐、谷歌、IE9+版本：都指的是最后一个子节点（包括标签、空文档和换行节点）。</li>
<li>IE678 版本：指最后一个子元素节点（标签）。</li>
</ul>
<p>（2）lastElementChild：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">last</span> <span class="o">=</span> <span class="nx">ulEl</span><span class="p">.</span><span class="nx">lastElementChild</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>火狐、谷歌、IE9+版本：都指的是最后一个子元素节点（标签）。</li>
</ul>
<p><strong>总结</strong>：为了获取最后一个<strong>子元素节点</strong>，我们可以这样做：在 IE678 中用 lastChild，在火狐谷歌 IE9+以后用 lastElementChild，于是，综合这两个属性，兼容写法  ↓↓</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 最后一个子元素节点 = 当前节点.lastElementChild || 当前节点.lastChild;
</span></code></pre></td></tr></table>
</div>
</div><h4 id="获取所有的子节点">获取所有的子节点</h4>
<p>（1）<strong>childNodes</strong>：标准属性。返回的是指定元素的<strong>子节点</strong>的集合（包括元素节点、所有属性、文本节点）。是 W3C 的亲儿子。</p>
<ul>
<li>火狐 谷歌等高版本，会把 换行、空格、…  都看做 是子节点。</li>
</ul>
<p>用法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 子节点数组 = 父节点.childNodes; 
</span><span class="c1">// 获取所有节点。
</span><span class="c1"></span>
<span class="kd">var</span> <span class="nx">childN</span> <span class="o">=</span> <span class="nx">ulEl</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">;</span>  <span class="c1">// 所有子节点,包括换行符
</span></code></pre></td></tr></table>
</div>
</div><p>（2）<strong>children</strong>：非标准属性。返回的是指定元素的<strong>子元素节点</strong>的集合。  ==【重要】==</p>
<ul>
<li>它只返回 HTML 节点，甚至不返回文本节点。</li>
<li>在 IE6/7/8 中包含注释节点（在 IE678 中，注释节点不要写在里面）。</li>
</ul>
<p>用法：（<strong>用的最多</strong>）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 子节点数组 = 父节点.children; 
</span><span class="c1">// 获取所有子节点。用的最多。
</span><span class="c1"></span>
<span class="kd">var</span> <span class="nx">children</span> <span class="o">=</span> <span class="nx">ulEl</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span> <span class="c1">// 所有标签节点 ; 组成伪数组
</span></code></pre></td></tr></table>
</div>
</div><p>兼容问题：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 自己封装方法 实现  获取元素的  素有子元素节点
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">myChildren</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">children</span> <span class="o">=</span> <span class="nx">el</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span>
	<span class="kd">var</span> <span class="nx">myChildrenArr</span> <span class="o">=</span> <span class="p">[];</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">children</span><span class="p">);</span>
	<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="c1">// 如何 判断 他是 注释节点  还是 元素几点
</span><span class="c1"></span>		<span class="c1">// nodeType = 8   注释节点
</span><span class="c1"></span>		<span class="c1">// nodeType = 1   元素节点
</span><span class="c1"></span>		<span class="c1">// nodeType =  3  是文本节点
</span><span class="c1"></span>		<span class="k">if</span> <span class="p">(</span><span class="nx">children</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">myChildrenArr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">children</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">myChildrenArr</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">ulElChildren</span> <span class="o">=</span> <span class="nx">myChildren</span><span class="p">(</span><span class="nx">ulEl</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="nodetype-属性">nodeType 属性</h4>
<p>这里讲一下 nodeType 属性。   ↑↑  案例见上</p>
<ul>
<li><strong>nodeType == 1 表示的是元素节点</strong>（标签） 。记住：元素就是标签。</li>
<li>nodeType == 2 表示是属性节点。</li>
<li>nodeType == 3 是文本节点。</li>
<li>nodeType == 8 注释节点</li>
</ul>
<h4 id="获取除自己以外的所有兄弟节点">获取除自己以外的所有兄弟节点</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">getSiblings</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">siblings</span> <span class="o">=</span> <span class="p">[];</span>
	<span class="kd">var</span> <span class="nx">pNode</span> <span class="o">=</span> <span class="nx">el</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">;</span>
	<span class="kd">var</span> <span class="nx">children</span> <span class="o">=</span> <span class="nx">pNode</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="c1">// 兼容ie8
</span><span class="c1"></span>		<span class="k">if</span> <span class="p">(</span><span class="nx">children</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
			<span class="c1">// 不是el再push
</span><span class="c1"></span>			<span class="k">if</span> <span class="p">(</span><span class="nx">children</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!==</span> <span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">siblings</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">children</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">siblings</span><span class="p">;</span>  <span class="c1">// siblings是一个数组，是由除了el元素以外的所有兄弟元素组成的数组
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>这个函数实现过程，在 jQuery 中被封装成现成的方法
<ul>
<li>在 JQ 中，可以直接调用  . siblings( )  方法 ，实现获取除自己以外的所有兄弟节点</li>
</ul>
</li>
</ul>
<hr>
<hr>
<h3 id="jquery通过关系获取-jq-对象">jQuery：通过关系获取 JQ 对象</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span><span class="p">&gt;</span>li-1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item active&#34;</span><span class="p">&gt;</span>li-2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span><span class="p">&gt;</span>li-3<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span><span class="p">&gt;</span>li-4<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span><span class="p">&gt;</span>li-5<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item li6&#34;</span><span class="p">&gt;</span>li-6<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span><span class="p">&gt;&lt;</span><span class="nt">p</span><span class="p">&gt;</span>li-7<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;js/jquery-3.4.1.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="kd">var</span> <span class="nx">currentLi</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.nav-item.active&#39;</span><span class="p">);</span> <span class="c1">// li-2
</span><span class="c1"></span>    <span class="c1">//...
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="获取父元素">获取父元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">currentLi</span><span class="p">.</span><span class="nx">parent</span><span class="p">();</span> <span class="c1">// 父节点  // [0]ul.nav
</span><span class="c1"></span>
<span class="nx">currentLi</span><span class="p">.</span><span class="nx">parents</span><span class="p">();</span> <span class="c1">// 所有父节点  // [0]: ul.nav  [1]: body   [2]: html
</span><span class="c1"></span>
<span class="nx">currentLi</span><span class="p">.</span><span class="nx">parentsUntil</span><span class="p">(</span><span class="s1">&#39;html&#39;</span><span class="p">)</span> <span class="c1">// &#39;&lt;html&gt;&#39;之前的所有父节点  //  [0]: ul.nav  [1]: body
</span></code></pre></td></tr></table>
</div>
</div><p>注：所有输出结果是 在控制台打印后 才可见   console.log ( ) ;</p>
<h4 id="获取兄弟元素">获取兄弟元素</h4>
<h5 id="1-后边的兄弟">1. 后边的兄弟</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">currentLi</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span> <span class="c1">// 下一个兄弟节点  // li-3  length=1
</span><span class="c1"></span>
<span class="nx">currentLi</span><span class="p">.</span><span class="nx">nextAll</span><span class="p">();</span> <span class="c1">// 后面的所有兄弟节点  // li-3~7  length=5
</span><span class="c1"></span>
<span class="nx">currentLi</span><span class="p">.</span><span class="nx">nextUntil</span><span class="p">(</span><span class="s1">&#39;.li6&#39;</span><span class="p">);</span> <span class="c1">// 后面的兄弟节点,直到(&#39;...&#39;) // li-3~5  length=3
</span></code></pre></td></tr></table>
</div>
</div><h5 id="2-前边的兄弟">2. 前边的兄弟</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">currentLi</span><span class="p">.</span><span class="nx">prev</span><span class="p">();</span> <span class="c1">// 上一个兄弟节点 
</span><span class="c1"></span>
<span class="nx">currentLi</span><span class="p">.</span><span class="nx">prevAll</span><span class="p">();</span> <span class="c1">// 前面的所有兄弟节点  
</span><span class="c1"></span>
<span class="nx">currentLi</span><span class="p">.</span><span class="nx">prevUntil</span><span class="p">(</span><span class="s1">&#39;.li6&#39;</span><span class="p">);</span> <span class="c1">// 前面的兄弟节点,直到(&#39;...&#39;) 
</span></code></pre></td></tr></table>
</div>
</div><h4 id="获取除自己以外的所有兄弟节点-1">获取除自己以外的所有兄弟节点</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">currentLi</span><span class="p">.</span><span class="nx">siblings</span><span class="p">();</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="获取子节点">获取子节点</h4>
<ul>
<li>. children ( )</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.nav&#39;</span><span class="p">).</span><span class="nx">children</span><span class="p">();</span> <span class="c1">// .nav里的所有子节点  // li-1~7
</span><span class="c1"></span>
<span class="kd">var</span> <span class="nx">children</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.nav&#39;</span><span class="p">).</span><span class="nx">children</span><span class="p">();</span>
<span class="nx">children</span><span class="p">.</span><span class="nx">eq</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span> <span class="c1">// 拿到所有子节点中 下标为4 的那个  // li-5
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.item:eq(4)&#39;</span><span class="p">);</span> <span class="c1">// 写在括号里的 :eq(index)  是作为筛选选择器
</span><span class="c1"></span><span class="nx">children</span><span class="p">.</span><span class="nx">eq</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span> <span class="c1">// children调用的 .eq(index)  是方法
</span></code></pre></td></tr></table>
</div>
</div><h4 id="获取符合条件的后代节点">获取符合条件的后代节点</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span><span class="p">&gt;</span>li-1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item active&#34;</span><span class="p">&gt;</span>li-2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span><span class="p">&gt;</span>li-3<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span><span class="p">&gt;</span>li-4<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>li-5<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item li6&#34;</span><span class="p">&gt;</span>li-6<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>li-7<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.nav&#39;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">);</span> <span class="c1">// 获取.nav后代节点中的 所有p标签节点 // [0]:p li-5 , [1]:p li-7
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="总览">==总览==</h3>
<h4 id="jquery-方法"><strong>jQuery 方法</strong></h4>
<table>
<thead>
<tr>
<th align="left">jQuery 方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">$( ) . eq ( index )</td>
<td>拿到对应下标的节点</td>
</tr>
<tr>
<td align="left">$( ) . find ( )</td>
<td>符合条件的后代节点</td>
</tr>
<tr>
<td align="left">$( ) . siblings ( )</td>
<td>除自己外的所有兄弟节点</td>
</tr>
<tr>
<td align="left">$( ) . children ( )</td>
<td>所有孩子节点</td>
</tr>
<tr>
<td align="left">$( ) . next ( )</td>
<td>下一个兄弟节点</td>
</tr>
<tr>
<td align="left">$( ) . nextAll ( )</td>
<td>后面的所有兄弟节点</td>
</tr>
<tr>
<td align="left">$( ) . nextUntil ( )</td>
<td>后面的兄弟节点，直到&hellip;</td>
</tr>
<tr>
<td align="left">$( ) . prev ( )</td>
<td>上一个兄弟节点</td>
</tr>
<tr>
<td align="left">$( ) . prevAll ( )</td>
<td>前面的所有兄弟节点</td>
</tr>
<tr>
<td align="left">$( ) . prevUntil ( )</td>
<td>前面的兄弟节点，直到&hellip;</td>
</tr>
<tr>
<td align="left">$( ) . parent ( )</td>
<td>父节点</td>
</tr>
<tr>
<td align="left">$( ) . parents ( )</td>
<td>所有父节点</td>
</tr>
<tr>
<td align="left">$( ) . parentsUntil ( )</td>
<td>所有父节点，直到&hellip;</td>
</tr>
</tbody>
</table>
<h4 id="dom-属性">DOM 属性</h4>
<table>
<thead>
<tr>
<th>DOM 属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>dom . parentNode</td>
<td>父节点</td>
</tr>
<tr>
<td>dom . nextElementSibling</td>
<td>下一个兄弟节点（IE8以下不兼容）</td>
</tr>
<tr>
<td>dom . nextSibling</td>
<td>下一个兄弟节点（包括标签、空文档和换行节点）</td>
</tr>
<tr>
<td>dom . previousElementSibling</td>
<td>上一个兄弟节点（IE8以下不兼容）</td>
</tr>
<tr>
<td>dom . previousSibling</td>
<td>上一个兄弟节点（包括标签、空文档和换行节点）</td>
</tr>
<tr>
<td>dom . firstElementChild</td>
<td>第一个子节点 （IE8以下不兼容）</td>
</tr>
<tr>
<td>dom . firstChild</td>
<td>第一个子节点（包括元素节点、所有属性、文本节点）</td>
</tr>
<tr>
<td>dom . children</td>
<td>所有子节点</td>
</tr>
<tr>
<td>dom . childNodes</td>
<td>所有子节点（包括元素节点、所有属性、文本节点）</td>
</tr>
<tr>
<td>dom . nodeType == 1/2/3/8</td>
<td>判断节点类型 == 元素节点（ 标签）/ 属性节点 / 文本节点 / 注释节点</td>
</tr>
</tbody>
</table>
<hr>
<hr>
<h2 id="事件绑定方式">事件绑定方式</h2>
<h3 id="js绑定事件的三种方式">js绑定事件的三种方式</h3>
<h4 id="1-行内绑定">1. 行内绑定</h4>
<p>基本语法：</p>
<p>&lt;标签 属性列表 事件=”事件的处理程序” /&gt;</p>
<p>例：&lt;input type='button&rsquo; onclick='display()&rsquo; /&gt;</p>
<p>示例代码：</p>
<p></p>
<p>以上代码就是最典型的行内绑定，虽然可以完成我们需要的功能，但是其把结构+样式+行为都绑定在同一个标签中，不利于后期维护。</p>
<h4 id="2-动态绑定">2. 动态绑定</h4>
<p>基本语法：</p>
<p>dom对象.事件 = 事件的处理程序（通常是一个匿名函数）</p>
<p>通过动态绑定这种思想改进上题，效果如下图所示：</p>
<p></p>
<h4 id="3-事件监听器-addeventlistener">3. 事件监听器 addeventlistener</h4>
<blockquote>
<p>绑定事件的第三种方式，可以更精细的控制事件</p>
<ul>
<li>允许绑定多个</li>
</ul>
</blockquote>
<p><strong>① 采用一般事件获取方式，直接绑定函数时，只能绑定一次</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">box</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">);</span>
<span class="nx">box</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>  <span class="c1">// 不会打印，因为已经被后面的绑定事件操作覆盖
</span><span class="c1"></span><span class="p">}</span>
<span class="c1">// 会覆盖,不能绑定多个
</span><span class="c1"></span><span class="nx">box</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>  <span class="c1">// 打印 2
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p><strong>② 采用一般事件获取方式后</strong>，借助 **“ 事件监听器 ” ** 绑定函数：<strong>可多次绑定</strong></p>
<ul>
<li>**target . addEventListener ( type , listener , useCapture ) ; **
<ul>
<li>target : 给谁绑定</li>
<li>type : 事件类型    不加 on</li>
<li>listener : 要执行的函数 ( 处理程序 )</li>
<li><strong>useCapture</strong> : 使用捕获还是 冒泡  ( true 代表 捕获 ) ( false 代表冒泡 )   不写默认 false</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">box</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// 会打印 1
</span><span class="c1"></span><span class="p">})</span>
<span class="nx">box</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">// 同时也会打印 2
</span><span class="c1"></span><span class="p">})</span>
<span class="c1">// 点击一次 box，会打印两行，分别打印 1 和 2
</span></code></pre></td></tr></table>
</div>
</div><h5 id="触发机制">触发机制</h5>
<ul>
<li>由 useCapture 拓展 “ 触发机制 ”
<ul>
<li>触发机制：先捕获后冒泡</li>
<li>每个事件绑定时，可以指定绑在哪个阶段  (  捕获阶段 和 冒泡阶段  )</li>
<li>捕获：就是 从外往里 触发</li>
<li>冒泡：从里到外 触发</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">d1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;d1);
</span><span class="s1">},true)
</span><span class="s1">
</span><span class="s1">d2.addEventListener(&#39;</span><span class="nx">click</span><span class="s1">&#39;,foo,false)
</span><span class="s1">
</span><span class="s1">function foo(){
</span><span class="s1">    alert(&#39;</span><span class="nx">d2</span><span class="err">&#39;</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>实例 ↓↓</li>
</ul>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//当点击w3时，弹出顺序是 w1 w3 w2
</span><span class="c1"></span>
<span class="nx">w1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>  
    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;w1&#39;</span><span class="p">);</span>
<span class="p">},</span> <span class="kc">true</span><span class="p">)</span><span class="c1">//true,则事件在从外向里的捕获阶段,就会触发
</span><span class="c1"></span>
<span class="nx">w2</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;w2&#39;</span><span class="p">);</span>
<span class="p">},</span> <span class="kc">false</span><span class="p">)</span><span class="c1">//false,则事件在从外向里的捕获阶段,不会触发;捕获阶段走完,开始走冒泡阶段时,才会触发
</span><span class="c1"></span>
<span class="nx">w3</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">foo</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>  <span class="c1">//true,则事件在从外向里的捕获阶段,就会触发
</span><span class="c1"></span>
<span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;w3&#39;</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">//所以当点击了w3时,事件开始从捕获阶段进入,先依次触发了w1,w3,进入冒泡阶段后,触发了w2
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h5 id="removeeventlistener-移除绑定">removeEventListener 移除绑定</h5>
<ul>
<li>如果同一个监听事件分别为“事件捕获”和“事件冒泡”注册了一次，一共两次，这两次事件需要分别移除。两者不会互相干扰。</li>
<li>移除的事件必须为外部事件（外部封装的函数）。</li>
<li>总结来讲，就是移除时，必须和绑定时一一对应。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">d2</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="nx">foo</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
<span class="nx">d2</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="nx">foo</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
<span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;d2&#34;</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="ie8-以下兼容问题">IE8 以下兼容问题</h5>
<ul>
<li>target.attachEvent(type, listener);</li>
<li>target.detachEvent(type,listener);</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="cm">/**
</span><span class="cm"> * 兼容IE8和标准浏览器
</span><span class="cm"> * el 绑定元素
</span><span class="cm"> * type 事件类型,IE8要加on
</span><span class="cm"> * func 执行方法
</span><span class="cm"> **/</span>
<span class="kd">function</span> <span class="nx">myAddEventListener</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">type</span><span class="p">,</span> <span class="nx">func</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// attachEvent 是IE 专有的方法
</span><span class="c1"></span>	<span class="k">if</span> <span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">el</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">(</span><span class="s2">&#34;on&#34;</span> <span class="o">+</span> <span class="nx">type</span><span class="p">,</span> <span class="nx">func</span><span class="p">);</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="nx">el</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">func</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><hr>
<hr>
<h2 id="判断元素节点类型">判断元素节点类型</h2>
<p></p>
<table>
<thead>
<tr>
<th>节点类型</th>
<th>说明</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>元素节点</td>
<td>每一个HTML标签都是一个元素节点，如 <div> 、 <p>、<ul>等</td>
<td>1</td>
</tr>
<tr>
<td>属性节点</td>
<td>元素节点（HTML标签）的属性，如 id 、class 、name 等。</td>
<td>2</td>
</tr>
<tr>
<td>文本节点</td>
<td>元素节点或属性节点中的文本内容。</td>
<td>3</td>
</tr>
<tr>
<td>注释节点</td>
<td>表示文档注释，形式为<!-- comment text -->。</td>
<td>8</td>
</tr>
<tr>
<td>文档节点</td>
<td>表示整个文档（DOM 树的根节点，即 document ）</td>
<td>9</td>
</tr>
</tbody>
</table>
<h3 id="1-targetnodename">1. target.nodeName</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="c">&lt;!--使用javascript判断节点名称--&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;oneDiv&#34;</span><span class="p">&gt;</span>一段文本<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span><span class="c">&lt;!--注释文本--&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
  <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;oneDiv&#34;</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">div</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">);</span> <span class="c1">//输出DIV，元素节点为标签大写
</span><span class="c1"></span>  
  <span class="kd">var</span> <span class="nx">divText</span> <span class="o">=</span> <span class="nx">div</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">divText</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">)</span> <span class="c1">//输出#text，文本节点使用nodeName时永远为#text
</span><span class="c1"></span>  
  <span class="kd">var</span> <span class="nx">divAttr</span> <span class="o">=</span> <span class="nx">div</span><span class="p">.</span><span class="nx">getAttributeNode</span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">divAttr</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">)</span> <span class="c1">//输出id，属性节点为属性名
</span><span class="c1"></span>  
  <span class="kd">var</span> <span class="nx">comment</span> <span class="o">=</span> <span class="nx">div</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">comment</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">)</span> <span class="c1">//输出#comment，注释节点使用nodeName时永远为#comment
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="2-targettagname">2. target.tagName</h3>
<p>要访问元素的标签名，可以使用tagName或nodeName属性；这两个属性返回的值相同</p>
<p>假设HTML如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;a&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>获取标签名：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">ele</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">tagName</span><span class="p">)</span>      <span class="c1">//DIV
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">)</span>     <span class="c1">//DIV
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">nodeName</span> <span class="o">==</span> <span class="nx">a</span><span class="p">.</span><span class="nx">tagName</span><span class="p">)</span>        <span class="c1">//true
</span></code></pre></td></tr></table>
</div>
</div><p><strong>在HTML中，标签名会以全部大写表示;而在XML中（部分XHTML）中，标签名则始终保持与源代码一致。</strong></p>
<p>基于上面的特性，在判断标签名的时候，需要做些兼容处理：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">ele</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">);</span>

<span class="k">if</span><span class="p">(</span> <span class="nx">ele</span><span class="p">.</span><span class="nx">tagName</span><span class="p">.</span><span class="nx">toLocaleLowerCase</span><span class="p">()</span> <span class="o">==</span> <span class="s1">&#39;div&#39;</span> <span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;div success&#39;</span> <span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>有关它们的区别，这位老师总结的很详细，https://blog.csdn.net/borishuai/article/details/571922</p>
<h3 id="3-targetnodetype">3. target.nodeType</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="c">&lt;!--使用javascript判断节点类型--&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;oneDiv&#34;</span><span class="p">&gt;</span>一段文本<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span><span class="c">&lt;!--注释文本--&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
  <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;oneDiv&#34;</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">div</span><span class="p">.</span><span class="nx">nodeType</span><span class="p">);</span> <span class="c1">//输出1，元素节点
</span><span class="c1"></span>  
  <span class="kd">var</span> <span class="nx">divText</span> <span class="o">=</span> <span class="nx">div</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">divText</span><span class="p">.</span><span class="nx">nodeType</span><span class="p">)</span> <span class="c1">//输出3，文本节点
</span><span class="c1"></span>  
  <span class="kd">var</span> <span class="nx">divAttr</span> <span class="o">=</span> <span class="nx">div</span><span class="p">.</span><span class="nx">getAttributeNode</span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">divAttr</span><span class="p">.</span><span class="nx">nodeType</span><span class="p">)</span> <span class="c1">//输出2，属性节点
</span><span class="c1"></span>  
  <span class="kd">var</span> <span class="nx">comment</span> <span class="o">=</span> <span class="nx">div</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">comment</span><span class="p">.</span><span class="nx">nodeType</span><span class="p">)</span> <span class="c1">//输出8，注释节点
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="4-targetnodevalue">4. target.nodeValue</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="c">&lt;!--使用javascript判断节点值--&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;oneDiv&#34;</span><span class="p">&gt;</span>一段文本<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span><span class="c">&lt;!--注释文本--&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
  <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;oneDiv&#34;</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">div</span><span class="p">.</span><span class="nx">nodeValue</span><span class="p">);</span> <span class="c1">//输出null，元素节点对于nodeValue不支持
</span><span class="c1"></span>  
  <span class="kd">var</span> <span class="nx">divText</span> <span class="o">=</span> <span class="nx">div</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">divText</span><span class="p">.</span><span class="nx">nodeValue</span><span class="p">)</span> <span class="c1">//输出一段文本，文本节点输出文本值
</span><span class="c1"></span>  
  <span class="kd">var</span> <span class="nx">divAttr</span> <span class="o">=</span> <span class="nx">div</span><span class="p">.</span><span class="nx">getAttributeNode</span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">divAttr</span><span class="p">.</span><span class="nx">nodeValue</span><span class="p">)</span> <span class="c1">//输出oneDiv，属性节点输出属性值
</span><span class="c1"></span>  
  <span class="kd">var</span> <span class="nx">comment</span> <span class="o">=</span> <span class="nx">div</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">comment</span><span class="p">.</span><span class="nx">nodeValue</span><span class="p">)</span> <span class="c1">//输出注释文本，注释节点输出注释内容
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="理解node类型">理解Node类型</h2>
<blockquote>
<p>理解Node类型——不应被忽视的 nodeType、nodeName、nodeValue</p>
<p><a href="https://blog.csdn.net/zwkkkk1/article/details/80229923" target="_blank" rel="noopener noreffer">原地址</a></p>
</blockquote>
<h3 id="node-类型">Node 类型</h3>
<p>DOM1级定义了 Node 接口，该接口将由 DOM 中的所有节点类型实现。这个 Node 接口在 JavaScript 中是作为 Node 类型实现的；除了 IE 之外，在其他所有浏览器中都可以访问到这个类型。JavaScript 中的所有节点类型都继承自 Node 类型，因此所有节点类型都共享着相同的基本属性和方法。</p>
<p>这篇讲讲 Node 类型常会被忽视的三个属性：nodeType、nodeName、nodeValue。</p>
<h3 id="nodetype-属性-1">nodeType 属性</h3>
<p>每个节点都有一个 nodeType 属性，用于表明节点的类型，节点类型由 Node 类型中定义12个常量表示：</p>
<p></p>
<p><strong>注：红色加粗为常用的节点类型</strong></p>
<p>来看下面这个例子，看如何去 <code>Node</code> 类型节点，以及它 <code>NodeType</code> 属性。</p>
<blockquote>
<p>ps: 可以直接复制出去运行</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;box&#34;</span><span class="p">&gt;</span>hello nodeType~<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
	<span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;box&#34;</span><span class="p">);</span>
	<span class="kd">var</span> <span class="nx">attr</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;box&#34;</span><span class="p">).</span><span class="nx">getAttributeNode</span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">);</span>
	<span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;box&#34;</span><span class="p">).</span><span class="nx">firstChild</span><span class="p">;</span>

	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">nodeType</span><span class="p">);</span>     <span class="c1">//1
</span><span class="c1"></span>	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">attr</span><span class="p">.</span><span class="nx">nodeType</span><span class="p">);</span>        <span class="c1">//2
</span><span class="c1"></span>	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">text</span><span class="p">.</span><span class="nx">nodeType</span><span class="p">);</span>        <span class="c1">//3
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="nodename-属性与-nodevalue-属性">nodeName 属性与 nodeValue 属性</h3>
<p>要了解节点的具体信息，可以使用 nodeName 和 nodeValue 这两个属性。这两个属性的值完全取决于节点的类型。</p>
<p>一般来说：</p>
<ul>
<li>元素节点的 <code>nodeName</code> 是标签名称（大写）</li>
<li>属性节点的 <code>nodeName</code> 是属性名称</li>
<li>文本节点的 <code>nodeName</code> 永远是 <code>#text</code></li>
<li>文档节点的 <code>nodeName</code> 永远是 <code>#document</code></li>
</ul>
<p>这里可以改下上面的例子，打印这样的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">)</span>    <span class="c1">//#document
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">);</span>    <span class="c1">//DIV
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">attr</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">);</span>       <span class="c1">//id
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">text</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">);</span>       <span class="c1">//#text
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>对于文本节点，<code>nodeValue</code> 属性包含文本。</li>
<li>对于属性节点，<code>nodeValue</code> 属性包含属性值。</li>
<li>文档节点和元素节点，<code>nodeValue</code> 属性的值始终为 <code>null</code>。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">nodeValue</span><span class="p">)</span>    <span class="c1">//null
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">nodeValue</span><span class="p">);</span>    <span class="c1">//null
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">attr</span><span class="p">.</span><span class="nx">nodeValue</span><span class="p">);</span>       <span class="c1">//box
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">text</span><span class="p">.</span><span class="nx">nodeValue</span><span class="p">);</span>       <span class="c1">//hello nodeType~
</span></code></pre></td></tr></table>
</div>
</div><hr>
<hr>
<h2 id="节点的增删改查重要">节点的增删改查==（重要）==</h2>
<h3 id="dom-节点的增删改查">DOM 节点的增删改查</h3>
<p>上一段的内容：节点的<strong>访问关系</strong>都是<strong>属性</strong>。</p>
<p>本段的内容：节点的<strong>操作</strong>都是<strong>函数</strong>（方法）。</p>
<h4 id="创建节点">创建节点</h4>
<p>格式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">	<span class="nx">新的标签</span><span class="p">(</span><span class="nx">元素节点</span><span class="p">)</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;标签名&#34;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>比如，如果我们想创建一个 li 标签，或者是创建一个不存在的 adbc 标签，可以这样做：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
	<span class="kd">var</span> <span class="nx">a1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;li&#34;</span><span class="p">);</span> <span class="c1">//创建一个li标签
</span><span class="c1"></span>	<span class="kd">var</span> <span class="nx">a2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;adbc&#34;</span><span class="p">);</span> <span class="c1">//创建一个不存在的标签
</span><span class="c1"></span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a1</span><span class="p">);</span> <span class="c1">// &lt;li&gt;&lt;/li&gt;
</span><span class="c1"></span>	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a2</span><span class="p">);</span> <span class="c1">// &lt;adbc&gt;&lt;/adbc&gt;
</span><span class="c1"></span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a1</span><span class="p">);</span> <span class="c1">// object
</span><span class="c1"></span>	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a2</span><span class="p">);</span> <span class="c1">// object
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="插入节点">插入节点</h4>
<ul>
<li>
<p>往页面中添加节点，依赖于父节点</p>
</li>
<li>
<p>插入节点有<strong>两种方式</strong>，它们的含义是不同的。</p>
</li>
<li>
<p>多次插入同一个节点的时候 ,相当于剪切效果</p>
</li>
<li>
<p>注意：如果是往 body 里插入，直接 <code>var body = document.body  </code> 即可获取到 body 节点，不需要 getElements</p>
</li>
<li>
<p>将同一个元素，前后设置插入到不同的地方，并不会出现在两个地方，而是后次设置对前次设置进行了剪切</p>
</li>
</ul>
<p>举例 ↓↓</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;innerbox&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">p</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;txt&#34;</span><span class="p">&gt;</span>天气很好<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>方式 1：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">父节点</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">新的子节点</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>解释：父节点的最后插入一个新的子节点。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 创建节点
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">);</span>  <span class="c1">// &lt;p&gt;&lt;/p&gt;
</span><span class="c1">// 插入节点
</span><span class="c1">// 将el这个节点 作为innerbox的子节点 插入进去, 从后添加
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">innerbox</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">&#39;innerbox&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
<span class="nx">innerbox</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">el</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;innerbox&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">p</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;txt&#34;</span><span class="p">&gt;</span>天气很好<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>   <span class="c">&lt;!-- 执行结果是: 这里插入了一个p标签 --&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>方式 2：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">父节点</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">新的子节点</span><span class="p">,</span> <span class="nx">作为参考的子节点</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>解释：</p>
<ul>
<li>在参考节点前插入一个新的节点。</li>
<li>如果参考节点为 null，那么他将在父节点里面的最后插入一个子节点。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 创建一个div节点
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">el1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span> <span class="c1">// &lt;div&gt;&lt;/div&gt;
</span><span class="c1">// 获取类名为txt的节点
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">pEl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">&#39;txt&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
<span class="c1">// 插入节点
</span><span class="c1">// box.appendChild(el1);    //方式1: el1作为子节点插入到box内部的最后面
</span><span class="c1"></span><span class="nx">box</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">el1</span><span class="p">,</span> <span class="nx">pEl</span><span class="p">);</span> <span class="c1">//方式2: el1作为子节点插入到box内部的pEl节点之前
</span><span class="c1"></span>

<span class="c1">// 如果参考节点为null，那么他将在节点最后插入一个节点。
</span><span class="c1"></span><span class="nx">box</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">pEl</span><span class="p">,</span> <span class="nx">imgEl</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;innerbox&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>   <span class="c">&lt;!-- 执行结果是: 这里插入了一个div标签 --&gt;</span>
        <span class="p">&lt;</span><span class="nt">p</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;txt&#34;</span><span class="p">&gt;</span>天气很好<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="删除节点">删除节点</h4>
<p>格式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">父节点</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">子节点</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>解释：<strong>用父节点删除子节点</strong>。必须要指定是删除哪个子节点。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">box</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">pEl</span><span class="p">);</span> <span class="c1">// 删除 box节点中 的子节点 pEL
</span><span class="c1"></span>
<span class="c1">//如果想删除自己这个节点：自己(先调用属性获取到父节点)删除自己
</span><span class="c1"></span><span class="nx">pEl</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">pEl</span><span class="p">);</span> <span class="c1">// pEl调用parentNode属性拿到父节点，然后从父节点中删除pEl
</span><span class="c1"></span>
<span class="c1">// 本质上，删除节点操作 仍然是依赖父节点的
</span></code></pre></td></tr></table>
</div>
</div><h4 id="复制节点克隆节点">复制节点（克隆节点）</h4>
<p>格式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">要复制的节点</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">();</span> <span class="c1">// 括号里不带参数和带参数false，效果是一样的：只复制节点本身
</span><span class="c1"></span>
<span class="nx">要复制的节点</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span> <span class="c1">// 括号里带参数true，是深复制：复制节点本身及其所有子节点
</span></code></pre></td></tr></table>
</div>
</div><p>括号里带不带参数，效果是不同的。解释如下：</p>
<ul>
<li><strong>不带参数/带参数 false</strong>：只复制节点本身，不复制子节点。</li>
<li><strong>带参数 true</strong>：既复制节点本身，也复制其所有的子节点。——<strong>深复制</strong></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">box</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">tempF</span> <span class="o">=</span> <span class="nx">box</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">temp</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tempF</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-HTML" data-lang="HTML"><span class="c">&lt;!-- 控制台输出结果 --&gt;</span>

<span class="c">&lt;!-- temp 深复制 --&gt;</span>   
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;innerbox&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">p</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;txt&#34;</span><span class="p">&gt;</span>天气很好<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

<span class="c">&lt;!-- tempF --&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="jquery-节点的增删改查">jQuery 节点的增删改查</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;active&#34;</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>4<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="创建节点-1">创建节点</h4>
<p>格式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">变量名</span> <span class="o">=</span>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;闭合标签&#39;</span><span class="p">);</span>   <span class="c1">// 注意是写在&#39;引号&#39;里面，字符串形式
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>创建过程，会自动把  “ 字符串 ” 里的 标签，包装成一个节点</li>
<li>注意是 “ 字符串 ”，且是一个闭合标签</li>
<li>创建时，除了写标签外，也可以选择书写内容和属性；也可以后面用 attr ( ) 设置属性</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">jqNode1</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;img src=&#34;img/m1.jpg&#34; alt=&#34;&#34;&gt;&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">jqNode2</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;p&gt;不凡&lt;/p&gt;&#39;</span><span class="p">);</span> 
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jqNode1</span><span class="p">);</span> <span class="c1">// 打印出 img标签 的节点
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jqNode2</span><span class="p">);</span> <span class="c1">// 打印出 p标签 的节点
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>如图打印结果，就是将  <code>$('&lt;img src=&quot;img/m1.jpg&quot; alt=&quot;&quot;&gt;');</code>   包装成一个 img 节点（jQuery对象）</p>
<ul>
<li>打印结果为 <code>k.fn.init [ ]</code>  就说明是  jQuery 对象</li>
</ul>
<h4 id="插入节点-1">插入节点</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box1&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box2&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>append()
<ul>
<li>参数 <code>jq对象</code> 或 <code>标签字符串</code> 或 <code>DOM对象</code> ，也就是可以传 jq对象，标签字符串，原生dom</li>
<li>作用：在被选元素内部从前面追加内容或节点。</li>
<li>如果是页面中存在的元素，那么调用 append ( ) 后，会把这个元素放到相应的目标元素里面去；但是，原来的这个元素，就不存在了。<strong>(剪切)</strong> **对一个元素多次进行追加到其他位置的操作，就是剪切 **</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$p</span><span class="p">);</span>  <span class="c1">//参数是jq对象
</span><span class="c1"></span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box1&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;p&gt;不凡&lt;/p&gt;&#39;</span><span class="p">);</span><span class="c1">//参数是标签字符串
</span><span class="c1"></span>
<span class="kd">var</span> <span class="nx">pEl</span> <span class="o">=</span> <span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">);</span><span class="c1">//原生js方法，创建了一个p标签 =&gt; pEl是一个dom对象
</span><span class="c1"></span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box2&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">pEl</span><span class="p">);</span><span class="c1">// 参数是原生dom
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果是给多个目标追加元素，那么方法的内部会复制多份这个元素，然后追加到多个目标里面去。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">pEl</span><span class="p">);</span>  <span class="c1">// $(&#39;li&#39;)对象，代表了多个元素，此时会往每个li里都插入pEl，
</span><span class="c1"></span>    <span class="c1">//而pEl原来的位置是被创建插入到.box2中，经过此次append后，.box2中已经没有pEl了，但每个li中都会有pEl
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>appendTo ( )</li>
</ul>
<p>作用：把<code>$(selector)</code>追加到<code>node</code>中去</p>
<ul>
<li>append ( ) 作用是：在被选元素内部，从前面追加内容或节点。</li>
<li>二者是，把字句 和 被字句 的关系</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span>

<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box2&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">pEl</span><span class="p">);</span> <span class="c1">// 在box2里追加 pel  
</span><span class="c1"></span><span class="nx">$</span><span class="p">(</span><span class="nx">pEl</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box2&#39;</span><span class="p">));</span> <span class="c1">// 把pel追加到box2里
</span><span class="c1">//这两句代码是等价的
</span><span class="c1">//通常使用 append（）即可
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>prepend()</p>
<ul>
<li>
<p>参数 <code>jq对象</code> 或 <code>标签字符串</code> 或 <code>DOM对象</code></p>
</li>
<li>
<p>作用：在被选元素内部从前面追加内容或节点。</p>
</li>
<li>
<p>注意问题与 append ( ) 基本一致</p>
</li>
</ul>
</li>
<li>
<p>after()</p>
</li>
</ul>
<p>作用：在被选元素之后，作为兄弟元素插入内容或节点</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-text" data-lang="text">$(selector).after(node);
</code></pre></td></tr></table>
</div>
</div><ul>
<li>before()</li>
</ul>
<p>作用：在被选元素之前，作为兄弟元素插入内容或节点</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-text" data-lang="text">$(selector).before(node);
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>对于这些添加方法，node 可以是<code>jq对象</code> 或 <code>标签字符串</code> 或 <code>DOM对象</code>。</p>
</blockquote>
<h4 id="清空元素">清空元素</h4>
<p>共有3个方式：</p>
<ul>
<li>不需要再借助父节点</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">empty</span><span class="p">();</span> <span class="c1">// 清空selector里面的内容，selector依然存在
</span><span class="c1"></span><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span> <span class="c1">// 清空selector里面的内容，但是会把“引号”里的内容追加进去
</span><span class="c1"></span><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>  <span class="c1">//清空selector里面的内容，同时会把selector自己也删除
</span></code></pre></td></tr></table>
</div>
</div><p>. html（ &quot;   &quot; ）：这个原本是做内容操作，用来追加内容，</p>
<ul>
<li>但是它本身机制，是讲被选元素里的内容，全部替换为 引号里的，如果引号不填内容，实际上就是变相的实现了 清空元素的作用；
<ul>
<li>引号里填了内容，就是实现完全替换的作用</li>
</ul>
</li>
<li>.text（）：同理，也可以用来清空元素； 区别是text()不能识别标签，如果有替换元素，则仅以文本形式存在</li>
</ul>
<h4 id="复制元素">复制元素</h4>
<p>格式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">clone</span><span class="p">();</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>参数，与dom相同：要复制的节点 . cloneNode ( )</li>
<li><strong>不带参数/带参数 false</strong>：只复制节点本身，不复制子节点。</li>
<li><strong>带参数 true</strong>：既复制节点本身，也复制其所有的子节点。——<strong>深复制</strong></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">clone</span><span class="p">();</span>

<span class="kd">var</span> <span class="nx">clone</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">clone</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">clone</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><hr>
<hr>
<h2 id="样式操作">样式操作</h2>
<h3 id="dom-的样式修改">DOM 的样式修改</h3>
<h4 id="dom对象--style--属性名-----属性值-">dom对象 . style . 属性名 =  '  属性值 '</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;color:orange;&#34;</span><span class="p">&gt;</span>不凡<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="kd">var</span> <span class="nx">box</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">&#39;box&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
    <span class="nx">box</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">box</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s1">&#39;blue&#39;</span><span class="p">;</span>
        <span class="nx">box</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="s1">&#39;300px&#39;</span><span class="p">;</span>
        <span class="c1">// font-size  写成 fontSize  (‘-’拼接字符命名的属性名 改为 驼峰命名)
</span><span class="c1"></span>        <span class="nx">box</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">fontSize</span> <span class="o">=</span> <span class="s1">&#39;24px&#39;</span><span class="p">;</span>
        <span class="c1">// 这些属性，修改的都是 标签的行内样式
</span><span class="c1"></span>    <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="date---h5新增">date-* — H5新增</h4>
<ul>
<li>*<em>自定义属性 data-</em> **
<ul>
<li>功能强大：可以修改样式，但这只是data-*的基础操作，有待深挖研究</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item active&#34;</span> <span class="na">data-color</span><span class="o">=</span><span class="s">&#34;red&#34;</span> <span class="na">data-info</span><span class="o">=</span><span class="s">&#34;你好&#34;</span><span class="p">&gt;</span>li1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span> <span class="na">data-color</span><span class="o">=</span><span class="s">&#34;blue&#34;</span><span class="p">&gt;</span>li2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span> <span class="na">data-color</span><span class="o">=</span><span class="s">&#34;orange&#34;</span><span class="p">&gt;</span>li3<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span> <span class="na">data-color</span><span class="o">=</span><span class="s">&#34;pink&#34;</span><span class="p">&gt;</span>li4<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span> <span class="na">data-color</span><span class="o">=</span><span class="s">&#34;green&#34;</span><span class="p">&gt;</span>li5<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span> <span class="na">data-color</span><span class="o">=</span><span class="s">&#34;gray&#34;</span><span class="p">&gt;</span>li6<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="c1">// 自定义属性 data-* 
</span><span class="c1"></span>    <span class="c1">// 如何获取自定义属性值  Node.dataset[&#39;color&#39;] 我们便可以获取到自定义的属性值。
</span><span class="c1"></span>    
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">liArr</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">dataset</span><span class="p">);</span>  <span class="c1">//  {color: &#34;red&#34;, info: &#34;你好&#34;}
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">liArr</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">dataset</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">]);</span> <span class="c1">//  red
</span><span class="c1"></span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">liArr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">liArr</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">dataset</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">];</span> <span class="c1">//获取每一个li的data-color值，存在temp里
</span><span class="c1"></span>        <span class="nx">liArr</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">;</span> <span class="c1">// 然后赋给 每个li的背景颜色样式中
</span><span class="c1"></span>    <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<hr>
<h3 id="jquery-的样式修改--css-">jQuery 的样式修改 . css( )</h3>
<ul>
<li>$ ( ' 选择器 ' ) . css ( ' 属性名 ' ,   ' 属性值 ' )</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;color:orange;&#34;</span><span class="p">&gt;</span>不凡<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">// $(&#39;.box&#39;).style.color = &#39;red&#39;; 错误
</span><span class="c1"></span>        <span class="c1">// 获取样式
</span><span class="c1"></span>        <span class="kd">var</span> <span class="nx">tempColor</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;color&#39;</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tempColor</span><span class="p">);</span> <span class="c1">// 没有设置字体颜色时,默认是rgb(0, 0, 0) 黑色
</span><span class="c1"></span>
        <span class="c1">// 修改样式
</span><span class="c1"></span>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;color&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">);</span>

        <span class="c1">// 设置多个样式: css里写一个对象,对象中写入,多个样式信息
</span><span class="c1"></span>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">({</span>
            <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span>
            <span class="nx">width</span><span class="o">:</span> <span class="s1">&#39;200px&#39;</span><span class="p">,</span>
            <span class="nx">height</span><span class="o">:</span> <span class="s1">&#39;200px&#39;</span><span class="p">,</span>
            <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span>
        <span class="p">})</span>
    <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>. css ( ) 写法 和 . attr ( ) 写法一致，书写方式一致：都可以设置修改 单个 或 多个</p>
</blockquote>
<hr>
<hr>
<h2 id="属性操作">属性操作</h2>
<h3 id="dom-的属性操作">DOM 的属性操作</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span> <span class="na">title</span><span class="o">=</span><span class="s">&#34;你好&#34;</span><span class="p">&gt;</span>不凡<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;&#34;</span> <span class="na">alt</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="kd">var</span> <span class="nx">img</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;img&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">box</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">&#39;box&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
    <span class="c1">//...
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="设置节点属性">设置节点属性</h4>
<ul>
<li>方式（1）：dom对象 . 属性名 = &quot; 属性值 &quot;</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">img</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;img/m1.jpg&#39;</span><span class="p">;</span>
<span class="nx">box</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="s1">&#39;天气&#39;</span><span class="p">;</span>
<span class="nx">box</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s1">&#39;d1&#39;</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>方式（2）： setAttribute ( 属性名 , 属性值 )</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">box</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">,</span> <span class="s1">&#39;box1&#39;</span><span class="p">);</span>  <span class="c1">// 类名修改为box1
</span><span class="c1"></span><span class="nx">box</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;你好吧&#39;</span><span class="p">);</span>  <span class="c1">// 设置title为“你好吧”
</span><span class="c1"></span><span class="nx">img</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">,</span> <span class="s1">&#39;img/m2.jpg&#39;</span><span class="p">);</span> <span class="c1">// 设置&lt;img&gt;的图片路径
</span></code></pre></td></tr></table>
</div>
</div><h4 id="获取节点属性">获取节点属性</h4>
<ul>
<li>
<p>方式（1）：dom对象 . 属性名</p>
</li>
<li>
<p>方式（2）：getAttribute( 属性名 )</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">box</span><span class="p">.</span><span class="nx">title</span><span class="p">);</span> <span class="c1">// 你好吧
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">box</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">));</span>  <span class="c1">// 你好吧 
</span></code></pre></td></tr></table>
</div>
</div><h4 id="删除属性">删除属性</h4>
<ul>
<li>removeAttribute ( &quot; 属性名 &quot; )</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">box</span><span class="p">.</span><span class="nx">removeAttribute</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="jquery-的属性操作---attr--">jQuery 的属性操作  . attr ( )</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;images/05.jpg&#34;</span> <span class="na">alt</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;js/jquery-3.4.1.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="c1">//...
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="设置节点属性-1">设置节点属性</h4>
<ul>
<li>方式（1）：$ ( ' 选择器 ' ) . attr ( ' 属性名 ' , ' 属性值 ' )  设置修改单个属性</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;img&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">,</span> <span class="s1">&#39;images/06.jpg&#39;</span><span class="p">);</span> <span class="c1">// 设置图片路径
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>$ ( ' 选择器 ' ) . prop ( ) ：常用来 设置 修改 属性值为（ true / false ）的属性                                                     <a href="https://blog.csdn.net/WuLex/article/details/85130327" target="_blank" rel="noopener noreffer">浅谈 jQuery 中 prop( ) 和 attr( )</a></p>
</blockquote>
<ul>
<li>方式（2）：$ ( ' 选择器 ' ) . attr ( {  属性名  :  ' 属性值 ' ，属性名  :  ' 属性值 ' } )   设置修改多个属性 ( 对象 )</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;img&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">({</span>
    <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;images/02.jpg&#39;</span><span class="p">,</span>    <span class="c1">//注意：对象形式中，每个属性间隔用“,”逗号
</span><span class="c1"></span>    <span class="nx">alt</span><span class="o">:</span> <span class="s1">&#39;sorry&#39;</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>. attr ( ) 写法和 . css ( ) 写法一致：都可以设置修改 单个 或 多个</p>
</blockquote>
<h4 id="获取节点属性-1">获取节点属性</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">src</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;img&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">src</span><span class="p">);</span>  <span class="c1">// images/05.jpg
</span></code></pre></td></tr></table>
</div>
</div><h4 id="删除属性-1">删除属性</h4>
<ul>
<li>$ ( ' 选择器 ' ) . removeAttr ( &quot; 属性名 &quot; )</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;img&#39;</span><span class="p">).</span><span class="nx">removeAttr</span><span class="p">(</span><span class="s1">&#39;alt&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><hr>
<hr>
<h2 id="类名操作">类名操作</h2>
<h3 id="dom-的类名操作__h5新增">DOM 的类名操作_—_H5新增</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;li-item&#34;</span><span class="p">&gt;</span>li1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;li-item&#34;</span><span class="p">&gt;</span>li2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="kd">var</span> <span class="nx">lis</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">&#39;li-item&#39;</span><span class="p">);</span>
    <span class="c1">//...
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>**追加类名：dom. classList . add ( ' 类名 ' )  **</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">lis</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;danger&#39;</span><span class="p">);</span>  <span class="c1">// &lt;li class=&#34;li-item danger&#34;&gt;li1&lt;/li&gt;
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>**删除类名：dom. classList . remove ( ' 类名 ' )  **</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">lis</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="s1">&#39;danger&#39;</span><span class="p">);</span>  <span class="c1">// &lt;li class=&#34;li-item&#34;&gt;li1&lt;/li&gt;
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>**有则删除，无则添加：dom. classList . toggle ( ' 类名 ' )  **</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">lis</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">toggle</span><span class="p">(</span><span class="s1">&#39;strong&#39;</span><span class="p">);</span> <span class="c1">// 切换类名 &lt;li class=&#34;li-item danger&#34;&gt;li1&lt;/li&gt;
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>**判断是否有该类名：dom. classList . contains ( ' 类名 ' )  **</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">lis</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="s1">&#39;danger&#39;</span><span class="p">));</span><span class="c1">// 返回 true/false
</span><span class="c1"></span>												 <span class="c1">// false
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>. contains 检测是否存在 class 非常好用，但是出现的太晚了 。。。T o T</p>
</blockquote>
<hr>
<h3 id="jquery-的类名操作">jQuery 的类名操作</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">p</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;txt&#34;</span><span class="p">&gt;</span>不凡<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;js/jquery-3.4.1.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="c1">//...
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>追加类名</strong>：$ ( ' 选择器 ' ) . addClass ( ' 类名 ' )</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;danger&#39;</span><span class="p">);</span>  <span class="c1">// 向被选元素添加一个或多个类  
</span><span class="c1"></span>                            <span class="c1">// &lt;p class=&#34;txt danger&#34;&gt;不凡&lt;/p&gt;
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>删除类名</strong>：$ ( ' 选择器 ' ) . removeClass ( ' 类名 ' )</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;danger&#39;</span><span class="p">);</span> <span class="c1">// 从被选元素删除一个或多个类
</span><span class="c1"></span>							   <span class="c1">// &lt;p&gt;不凡&lt;/p&gt;
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>有则删除，无则添加</strong>：$ ( ' 选择器 ' ) . toggleClass ( ' 类名 ' )</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s1">&#39;danger&#39;</span><span class="p">);</span>  <span class="c1">// 对被选元素进行添加/删除类的切换操作
</span><span class="c1"></span>                               <span class="c1">// &lt;p class=&#34;danger&#34;&gt;不凡&lt;/p&gt;
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>判断是否有该类名</strong>：$ ( ' 选择器 ' ) . hasClass ( ' 类名 ' )</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">hasClass</span><span class="p">(</span><span class="s1">&#39;danger&#39;</span><span class="p">));</span>  <span class="c1">// 判断被选元素是否存在类，返回值true/false
</span><span class="c1"></span>										 <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><hr>
<hr>
<h2 id="内容操作">内容操作</h2>
<h3 id="dom-的内容操作调用--属性">DOM 的内容操作：调用 . 属性</h3>
<blockquote>
<p>调用属性，直接等号赋值 （  dom . 属性名 = ’   ‘  ）</p>
</blockquote>
<blockquote>
<p>DOM 对象的属性和 HTML 的标签属性几乎是一致的。例如：src、title、className、href 等。</p>
</blockquote>
<h4 id="innerhtml-和-innertext">innerHTML 和 innerText</h4>
<ul>
<li>
<p>↑↑  这俩属性实现的是 对元素内部的内容的完全替换</p>
<ul>
<li>
<p>即会先删除元素内部的所有内容，再将 等号= 后的值添加到元素中</p>
<ul>
<li>
<p>也就是说如果等号=后为空，则实现了清空元素内部所有内容的效果</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">  <span class="nx">box</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span> <span class="c1">// 将box元素里的内容替换为‘’,即清空box元素里的内容
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>**dom对象 . innerHTML  =  &quot;  ….  &quot;  ;    **</p>
<ul>
<li>双闭合标签里面的内容（识别标签）。<strong>可以用来动态的生成页面</strong></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span><span class="p">&gt;</span>不凡<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">ul</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="kd">var</span> <span class="nx">box</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">&#39;box&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">box1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">&#39;box&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">];</span>
    <span class="c1">//...
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">box</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;h1&gt;今天天气很好&lt;/h1&gt;&#39;</span><span class="p">;</span>  <span class="c1">// 识别标签
</span><span class="c1"></span>									<span class="c1">// &lt;div class=&#34;box&#34;&gt;&lt;h1&gt;今天天气很好&lt;/h1&gt;&lt;/div&gt;
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// **动态生成**的标准写法：采用for循环&gt;累加的思想
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">str</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;li&#39;</span> <span class="o">+</span> <span class="nx">i</span> <span class="o">+</span> <span class="s1">&#39;&lt;/li&gt;&#39;</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">box1</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">str</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>**dom对象 . innerText  =  &quot;  ….  &quot;  ;  **</p>
<ul>
<li>双闭合标签里面的内容（不识别标签）。 ( 老版本火狐用 textContent )</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">box</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="s1">&#39;&lt;h1&gt;今天天气很好&lt;/h1&gt;&#39;</span><span class="p">;</span> <span class="c1">//（不识别标签）
</span><span class="c1"></span>									   <span class="c1">// &lt;div class=&#34;box&#34;&gt;今天天气很好&lt;/div&gt;
</span></code></pre></td></tr></table>
</div>
</div><h4 id="表单的内容操作">表单的内容操作</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="c">&lt;!-- 输入框 --&gt;</span>
<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;请输入内容&#34;</span><span class="p">&gt;</span>

<span class="c">&lt;!-- 单选框 --&gt;</span>
男:<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;radio&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;sex&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;sex&#34;</span><span class="p">&gt;</span>
女:<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;radio&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;sex&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;sex&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>选择男生<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>

<span class="c">&lt;!-- 复选框 --&gt;</span>
篮球：<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;cb&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;like&#34;</span><span class="p">&gt;</span>
足球：<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;cb&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;like&#34;</span><span class="p">&gt;</span>

<span class="c">&lt;!-- 下拉框 --&gt;</span>
<span class="p">&lt;</span><span class="nt">select</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;1&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;s1&#34;</span> <span class="p">&gt;</span>选项内容1<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;2&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;s2&#34;</span> <span class="p">&gt;</span>选项内容2<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">select</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="c1">//...  ↓↓
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>**dom对象 . value = &quot; … &quot;   **      直接调用 输入框 的 value 属性    .value = ’  ‘</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
<span class="nx">input</span><span class="p">.</span><span class="nx">onfocus</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>  <span class="c1">// .onfocus ：获得焦点
</span><span class="c1"></span>    <span class="nx">input</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>  <span class="c1">// 输入框value值，设为空
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>**dom对象 . checked = &quot; true / false &quot;  **       单选框 和 复选框 的 checked 属性。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">btn</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">men</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">&#39;sex&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">cb1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">&#39;like&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
<span class="nx">btn</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="c1">//点击 按钮
</span><span class="c1"></span>    <span class="nx">men</span><span class="p">.</span><span class="nx">checked</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>		<span class="c1">//men的input的checked属性，设为true，即-被选中
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">cb1</span><span class="p">.</span><span class="nx">checked</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">// 复选框 默认选中 篮球
</span></code></pre></td></tr></table>
</div>
</div><p>**dom对象 . selected = &quot; true / false &quot; **        下拉菜单 的 selected 属性。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">select2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;s2&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
<span class="nx">select2</span><span class="p">.</span><span class="nx">selected</span> <span class="o">=</span> <span class="s1">&#39;true&#39;</span><span class="p">;</span>  <span class="c1">// 下拉菜单 默认显示 .s2 的选项内容
</span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="jquery-的内容操作调用方法--">jQuery 的内容操作：调用方法 ( )</h3>
<h4 id="htmltextvalueprop">html()、text()、value()、prop()</h4>
<ul>
<li><strong>可以取值、设值</strong></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
<th></th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>html ( )</td>
<td>$ ( ' p ' ) . html ( )</td>
<td></td>
<td>$ ( &quot; p &quot; ) . html ( ' html 代码 ' )</td>
</tr>
<tr>
<td>text ( )</td>
<td>$ ( ' p ' ) . text ( )</td>
<td></td>
<td>$ ( ' p ' ) . text ( ' 内容 ' )</td>
</tr>
<tr>
<td>value ( )</td>
<td>$ ( ' input ' ) . value ( )</td>
<td></td>
<td>$ ( ' input ' ) . value ( ' 姓名 ' )</td>
</tr>
<tr>
<td>prop ( )</td>
<td>$ ( ' input ' ) . prop ( ' checked ' )</td>
<td></td>
<td>$ ( ' input ' ) . prop ( ' checked ' , false )</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>html()、text() 同时也具有清空的功能</p>
<ul>
<li>
<p>因为它俩实现效果是：将调用元素内部的所有子元素都替换为html方法的（）中的内容，也就是说，如果（）里没有内容，则实现的是清空的功能</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span>  <span class="c1">// 将div内的所有子元素替换为()中的内容，也就是替换为空，即清空div子元素
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span>  <span class="c1">// 将div内的所有子元素替换为()中的内容，也就是替换为空，即清空div子元素
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
<p>​</p>
<h4 id="延伸prop-和-attr-的区别">延伸：prop() 和 attr() 的区别</h4>
<p>prop ( ) ：常用来设置、修改属性值为 true / false 的属性： checked属性、selected属性   ……</p>
<p>attr ( ) ：可以用来设置修改所有属性的值</p>
<blockquote>
<p>两者都可以修改属性，那有什么区别 ？？   <a href="https://blog.csdn.net/WuLex/article/details/85130327" target="_blank" rel="noopener noreffer">浅谈 jQuery 中  prop ( )  和  attr ( ) </a></p>
</blockquote>
<hr>
<hr>
<h1 id="dom-补充">DOM 补充</h1>
<h2 id="arguments-对象">arguments 对象</h2>
<ul>
<li>arguments 对象：函数的实参对象，只能在函数内部使用</li>
<li>console.log(arguments)   =&gt;   输出 类数组：保存了传进来的 实参信息（如图 ↓ ）</li>
</ul>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="c1">// arguments 对象 :  函数的实参对象,只能在函数内部使用
</span><span class="c1"></span>    <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// console.log(arguments) =&gt; 输出形式：类数组,保存了传进来的 实参信息
</span><span class="c1"></span>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span> <span class="c1">//[1, 3, 5, callee: ƒ, Symbol(Symbol.iterator): ƒ]
</span><span class="c1"></span>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span> <span class="c1">//3
</span><span class="c1"></span>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">);</span> <span class="c1">// 打印出了 这个函数本身 //多数情况下没什么用,but递归
</span><span class="c1"></span>        <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">+</span> <span class="nx">z</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>

    <span class="c1">// 既然 arguments.callee 是函数本身，符合递归思想：可以实现自己调用自己
</span><span class="c1"></span>    <span class="c1">// 可以用来写递归函数 ↓↓
</span><span class="c1"></span>    <span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="mi">1</span>
        <span class="p">}</span>
        <span class="c1">// return foo(n - 1) * n;
</span><span class="c1"></span>        <span class="k">return</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">(</span><span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nx">n</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="定时器">定时器</h2>
<h3 id="延迟定时器-settimeout--">延迟定时器 setTimeout ( )</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;你好&#39;</span><span class="p">);},</span> <span class="mi">1000</span><span class="p">)</span> <span class="c1">// 触发后 延迟1秒，函数开始执行，执行1次
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>作用：可以让写在其内部的 function 函数，延迟执行</p>
<ul>
<li>函数作为参数，称为回调函数</li>
</ul>
</li>
<li>
<p>第一个参数：要执行的函数（时间到了就执行 ）</p>
</li>
<li>
<p>第二个参数：设置参数延迟时间（ 以毫秒为单位 ）</p>
</li>
<li>
<p>执行次数：只会执行一次</p>
</li>
</ul>
<h3 id="循环定时器-setinterval--">循环定时器 setInterval ( )</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;不凡&#39;</span><span class="p">)},</span> <span class="mi">1000</span><span class="p">)</span> <span class="c1">// function 每隔1秒，执行1次
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>作用：可以让写在其内部的 function 函数，每隔一段时间，就执行一次</p>
<ul>
<li>函数作为参数，称为回调函数</li>
</ul>
</li>
<li>
<p>第一个参数：要执行的函数（时间到了就执行 ）</p>
</li>
<li>
<p>第二个参数：设置参数延迟时间（ 以毫秒为单位 ）</p>
</li>
<li>
<p>执行次数：循环执行</p>
</li>
</ul>
<h3 id="清除定时器-cleartimeout--">清除定时器 clearTimeout ( )</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">timer1</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;你好&#39;</span><span class="p">);}</span> <span class="p">,</span><span class="mi">1000</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">timer2</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;不凡&#39;</span><span class="p">);}</span> <span class="p">,</span><span class="mi">1000</span><span class="p">);</span>

<span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timer1</span><span class="p">);</span>
<span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timer2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>作用：顾名思义，可以用于清除以上两种定时器</li>
<li>需要给要清除的定时器起名字，才能使用</li>
</ul>
<h2 id="立即执行函数">立即执行函数</h2>
<p>现有匿名函数如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;a = &#34;</span> <span class="o">+</span> <span class="nx">a</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;b = &#34;</span> <span class="o">+</span> <span class="nx">b</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>立即执行函数如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;a = &#34;</span> <span class="o">+</span> <span class="nx">a</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;b = &#34;</span> <span class="o">+</span> <span class="nx">b</span><span class="p">);</span>
<span class="p">})(</span><span class="mi">123</span><span class="p">,</span> <span class="mi">456</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>立即执行函数：函数定义完，立即被调用，这种函数叫做立即执行函数。</p>
<p>立即执行函数往往只会执行一次。为什么呢？因为没有变量保存它，执行完了之后，就找不到它了。</p>
<ul>
<li>立即执行函数的应用
<ul>
<li><strong>循环绑定事件时，解决如何获取当前点击元素的下标。</strong></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">lis</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">lis</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
		<span class="p">};</span>
	<span class="p">})(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><hr>
<hr>
<h1 id="jquery-补充">jQuery 补充</h1>
<h2 id="mouseover-和-mouseout-区别">mouseover 和 mouseout 区别</h2>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="c">&lt;!-- 红盒子 --&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span><span class="p">&gt;</span> 
    <span class="c">&lt;!-- 绿盒子 --&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;inner-box&#34;</span><span class="p">&gt;</span>

    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;js/jquery-3.4.1.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">mouseenter</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;mouseenter&#39;</span><span class="p">)</span>
    <span class="p">})</span>

    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">mouseover</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;mouseover&#39;</span><span class="p">)</span>
    <span class="p">})</span>

    <span class="c1">// 两者 都是 鼠标进入 
</span><span class="c1"></span>    <span class="c1">// mouseover 会触发多次, 进入子类元素时，会再次触发，从子类元素回到父类时，又会触发；来回在子类和父类间移动，就会来回触发，不停在控制台打印
</span><span class="c1"></span>    <span class="c1">// mouseenter 进入父类盒子触发打印，顺势进入子类盒子，不会打印；也就是将整个父类盒子的范围作为主体，绑定的事件与子类无关
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="jquery-动画">jQuery 动画</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>显示<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>隐藏<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>slideDown滑入<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>slideUp滑出<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>fadeIn淡入<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>fadeOut淡出<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>fadeTo<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;js/jquery-3.4.1.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="c1">//...
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="隐藏hide显示动画show">隐藏(hide)/显示动画(show)</h3>
<ul>
<li>$ ( selector ) . show  ( speed , callback ) ;
<ul>
<li>speed：显示动画的时长（毫秒单位）
<ul>
<li>参数1 也可以填关键字 slow ( 600 )  /  normal ( 400 )  /  fast ( 200 )</li>
</ul>
</li>
<li>callback：回调函数：显示动画结束后，执行的函数 function ( ) { … } ;</li>
</ul>
</li>
<li>​	隐藏动画 hide ( ) ， 同 show ( )</li>
</ul>
<blockquote>
<ul>
<li>$ ( selector ) . show ( 2000 ) ;</li>
<li>$ ( selector ) . show ( slow ) ;     slow ( 600 )  /  normal ( 400 )  /  fast ( 200 )</li>
<li>$ ( selector ) . show ( 2000 , function ( ) { … } ) ;</li>
<li>$ ( selector ) . show ( ) ;</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.btn&#39;</span><span class="p">).</span><span class="nx">eq</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">(</span><span class="mi">2000</span><span class="p">)</span> <span class="c1">//用2秒时间来完成隐藏动作
</span><span class="c1"></span><span class="p">});</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.btn&#39;</span><span class="p">).</span><span class="nx">eq</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="c1">//2秒显示出来后，瞬间修改css样式宽变为100，颜色绿
</span><span class="c1"></span>        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">css</span><span class="p">({</span>
            <span class="nx">width</span><span class="o">:</span> <span class="s1">&#39;100px&#39;</span><span class="p">,</span>
            <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;green&#39;</span>
        <span class="p">})</span>
    <span class="p">})</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="滑入滑出动画">滑入滑出动画</h3>
<ul>
<li>修改的是 . box 的 height 值</li>
<li>$ ( selector ) . slideDown/Up/Toggle ( speed , callback ) ;
<ul>
<li>speed：显示动画的时长（毫秒单位）
<ul>
<li>参数1 也可以填关键字 slow ( 600 )  /  normal ( 400 )  /  fast ( 200 )</li>
</ul>
</li>
<li>callback：回调函数：显示动画结束后，执行的函数 function ( ) { … } ;</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>$ ( selector ) . slideDown ( speed , callback ) ;</li>
<li>$ ( selector ) . slideUp ( speed , callback ) ;</li>
<li>$ ( selector ) . slideToggle ( speed , callback ) ;</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.btn&#39;</span><span class="p">).</span><span class="nx">eq</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">slideDown</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
<span class="p">});</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.btn&#39;</span><span class="p">).</span><span class="nx">eq</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">slideUp</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="淡入淡出动画">淡入淡出动画</h3>
<p>$ ( selector ) . slideDown/Up/Toggle ( speed , callback ) ;</p>
<ul>
<li>speed：显示动画的时长（毫秒单位）
<ul>
<li>参数1 也可以填关键字 slow ( 600 )  /  normal ( 400 )  /  fast ( 200 )</li>
</ul>
</li>
<li>callback：回调函数：显示动画结束后，执行的函数 function ( ) { … } ;</li>
</ul>
<blockquote>
<ul>
<li>$ ( selector ) . fadeIn ( speed , callback ) ;</li>
<li>$ ( selector ) . fadeOut ( speed , callback ) ;</li>
<li>$ ( selector ) . fadeToggle ( speed , callback ) ;</li>
<li>$ ( selector ) . fadeTo ( speed , opacity ) ;   调节透明度</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.btn&#39;</span><span class="p">).</span><span class="nx">eq</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">fadeIn</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>  <span class="c1">// 淡入
</span><span class="c1"></span><span class="p">});</span>

<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.btn&#39;</span><span class="p">).</span><span class="nx">eq</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">fadeOut</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>  <span class="c1">// 淡出 
</span><span class="c1"></span><span class="p">});</span>

<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.btn&#39;</span><span class="p">).</span><span class="nx">eq</span><span class="p">(</span><span class="mi">6</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">fadeTo</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">);</span>  <span class="c1">// 将被选元素.box的不透明度逐渐地改变为指定的值0.3
</span><span class="c1"></span><span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注意：省略参数或者传入不合法的字符串，那么则使用默认值：400 毫秒</p>
</blockquote>
<h2 id="自定义动画--和-停止动画">自定义动画  和 停止动画</h2>
<h3 id="自定义动画">自定义动画</h3>
<p>$ ( selector ) . animate ( styles , speed , ease , callback )</p>
<ul>
<li>第一个参数表示：要执行动画的 CSS 属性（必选）</li>
<li>第二个参数表示：执行动画时长（可选）</li>
<li>第三个参数表示: 运动函数 ' swing ' 和 ' linear '</li>
<li>第四个参数表示：动画执行完后立即执行的回调函数（可选）</li>
</ul>
<p>​                                       ↓↓↓↓</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;start&#34;</span><span class="p">&gt;</span>开始<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;stop&#34;</span><span class="p">&gt;</span>停止<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;js/jquery-3.4.1.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="c1">// animate()
</span><span class="c1"></span>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.start&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span>
            <span class="nx">width</span><span class="o">:</span> <span class="s1">&#39;400px&#39;</span><span class="p">,</span>
            <span class="nx">left</span><span class="o">:</span> <span class="s1">&#39;600px&#39;</span><span class="p">,</span>
            <span class="nx">top</span><span class="o">:</span> <span class="s1">&#39;100px&#39;</span>
            <span class="c1">// 颜色不能参与动画,但是可以借助一些 插件 实现
</span><span class="c1"></span>            <span class="c1">// backgroundColor: &#39;green&#39;
</span><span class="c1"></span>            <span class="c1">// marginLeft: &#39;600px&#39;
</span><span class="c1"></span>        <span class="p">},</span> <span class="mi">1000</span><span class="p">,</span> <span class="s1">&#39;linear&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span>
                <span class="nx">left</span><span class="o">:</span> <span class="mi">200</span>
            <span class="p">},</span> <span class="mi">1000</span><span class="p">,</span> <span class="s1">&#39;linear&#39;</span><span class="p">)</span>
        <span class="p">})</span>

        <span class="c1">// 可以为他指定多个动画,但是动画会进入排队状态,上一个执行完,下一个才能开始
</span><span class="c1"></span>        <span class="c1">// 回调函数异步 ,必须等同步执行完,他才能执行
</span><span class="c1"></span>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span>
            <span class="nx">left</span><span class="o">:</span> <span class="s1">&#39;1000px&#39;</span>
        <span class="p">},</span> <span class="mi">1000</span><span class="p">,</span> <span class="s1">&#39;linear&#39;</span><span class="p">)</span>
    <span class="p">})</span>


    <span class="c1">// 如何停止动画 
</span><span class="c1"></span>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.stop&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">// stop(stopAll,goToEnd)
</span><span class="c1"></span>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">stop</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
    <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="停止动画--------">停止动画        ↑↑↑↑</h3>
<ul>
<li>stop ( ) ;  停止当前动画</li>
</ul>
<p>为什么要停止动画？如果多个动画同时作用于一个单位上面，那么多个动画会进入排队。后一个动画的执行必须等前面的执行完毕。</p>
<ul>
<li>stop ( stopAll , goToEnd )</li>
</ul>
<p>stopAll：是否全部停止动画（停止队列中所有动画），默认 false goToEnd： 是否将停止的动画,停在当前动画的最后一个状态</p>
<h2 id="bom-相关">BOM 相关</h2>
<h3 id="宽高设置">宽高设置</h3>
<p>（ 这两个方法( ) 并<strong>不常用</strong>，更多是通过css样式来设置或修改宽高）</p>
<ul>
<li>height ( )</li>
<li>height ( 200 )</li>
<li>width ( )</li>
<li>width ( 100 )       取值类型为 <code>num</code> 可以直接参与运算</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// width() / height() 
</span><span class="c1"></span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">width</span><span class="p">())</span> <span class="c1">// 获取元素 宽和高  num 数值 可以参与运算
</span><span class="c1"></span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">width</span><span class="p">(</span><span class="mi">300</span><span class="p">);</span>  <span class="c1">// 也可以用来设置宽高
</span></code></pre></td></tr></table>
</div>
</div><h3 id="坐标值操作获取元素位置">坐标值操作：获取元素位置</h3>
<ul>
<li>offset()
<ul>
<li>作用：获取或设置元素相对于文档的位置</li>
<li>$(selector).offset();</li>
<li>$(selector).offset({left:100, top: 150});</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">offset</span><span class="p">());</span> <span class="c1">// 用于获取  {top: 100, left: 100}
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">offset</span><span class="p">().</span><span class="nx">left</span><span class="p">);</span> <span class="c1">// 用于获取  100
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">offset</span><span class="p">({</span>   <span class="c1">// 用于设置
</span><span class="c1"></span>    <span class="nx">top</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>   
    <span class="nx">left</span><span class="o">:</span> <span class="mi">150</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>position()
<ul>
<li>作用：获取相对于其最近的具有定位的父元素的位置。</li>
<li>$(selector).position();</li>
<li>注意：只能获取，不能设置。</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.inner&#39;</span><span class="p">).</span><span class="nx">position</span><span class="p">());</span> <span class="c1">// {top: 0, left: 80}
</span></code></pre></td></tr></table>
</div>
</div><h4 id="回到顶部">回到顶部</h4>
<ul>
<li>scrollTop()
<ul>
<li>作用：获取或者设置元素垂直方向滚动的位置</li>
<li>$(selector).scrollTop();</li>
<li>$(selector).scrollTop(100);</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 原生 js 获取 scrollTop 
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">scrollTop</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">scrollTop</span> <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">scrollTop</span><span class="p">)</span>

<span class="c1">// jQuery 获取 scrollTop 
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">).</span><span class="nx">scrollTop</span><span class="p">());</span>

<span class="c1">// 实例应用：回到顶部
</span><span class="c1"></span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.top&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// $(document.documentElement).scrollTop(0);  回到顶部效果
</span><span class="c1"></span>    
    <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span>  
        <span class="c1">//回到顶部效果，上面和这个的最终呈现一样，但是animate实现了动画过渡，不会特别生硬
</span><span class="c1"></span>        <span class="nx">scrollTop</span><span class="o">:</span> <span class="mi">0</span>
    <span class="p">},</span> <span class="mi">2000</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="on方式绑定事件">on方式绑定事件</h2>
<ul>
<li>html</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;box&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>不凡<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;javascript:;&#34;</span><span class="p">&gt;</span>nihao<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="jquery-正常绑定事件的方式">jQuery 正常绑定事件的方式</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>  <span class="c1">// 这里是 jq 正常绑定事件的方式
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="on---方法-绑定事件的方式">on ( ) 方法 绑定事件的方式</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;mouseenter&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> 
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;你好&#39;</span><span class="p">)</span> <span class="c1">//鼠标移入 &lt;p&gt;不凡&lt;/p&gt; 和 &lt;a&gt;nihao&lt;/a&gt; 都会在控制台打印&#39;你好&#39;
</span><span class="c1"></span><span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>on ( ) 方法：一共有三个参数
<ul>
<li>第1个参数：是要绑定的事件名</li>
<li><strong>第2个参数：用来过滤后代元素（!）</strong></li>
<li>第3个参数：是执行程序</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;p&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> 
    <span class="c1">// (第2个参数写了p,就只绑定p标签,点击a标签不再触发box 的点击事件)
</span><span class="c1"></span>    <span class="c1">// 其实就相当于，获取了.box的jq对象，对其内部的p标签，进行绑定点击事件 和 执行程序
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;点击&#39;</span><span class="p">)</span>    <span class="c1">// 点击.box里的p标签才会打印;点击a标签不再触发
</span><span class="c1"></span><span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="如何解绑事件off--">如何解绑事件：off ( )</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">off</span><span class="p">(</span> <span class="p">);</span> <span class="c1">// 不写参数: 全部解绑
</span><span class="c1"></span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;mouseenter&#39;</span><span class="p">);</span> <span class="c1">// 解绑括号里的&#39;鼠标进入mouseenter&#39;事件
</span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="事件委托">事件委托</h2>
<ul>
<li>使用 on 方式，将事件委托给父级元素代理。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>li0<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>li1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>li2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>新增<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>想要实现：动态生成多个 li ，并给 li 绑定事件和程序</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="c1">// 每次点击按钮，都生成一个 &lt;li&gt; li? &lt;/li&gt;
</span><span class="c1"></span>        <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;li&#39;</span> <span class="o">+</span> <span class="nx">count</span> <span class="o">+</span> <span class="s1">&#39;&lt;/li&gt;&#39;</span><span class="p">)</span>
    <span class="p">})</span>


    <span class="c1">// 给每个 li 绑定单机事件：打印 this.li 里的文本内容
</span><span class="c1"></span>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span>  <span class="c1">// 仅能打印出 li0 li1 li2 
</span><span class="c1"></span>    <span class="p">})</span>
    <span class="c1">// 因为对于动态生成的元素，会出现无法绑定事件的情况
</span><span class="c1"></span>
    
    <span class="c1">// 解决办法：
</span><span class="c1"></span>    <span class="c1">// 利用on()方法绑定，可以解决这个问题
</span><span class="c1"></span>    <span class="c1">// 给父级盒子绑定on(&#39;click&#39;)，筛选出里面的li标签，添加处理程序function，此时的this就可以获取到当前点击的li身上，这种方法就叫——事件委托
</span><span class="c1"></span>    
    <span class="c1">// 事件委托
</span><span class="c1"></span>    <span class="c1">// 把li的点击事件 委托给了 ul
</span><span class="c1"></span>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;li&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">// 不加过滤元素(&#39;li&#39;), this 指向 ul
</span><span class="c1"></span>        <span class="c1">// 加上&#39;li&#39; ,之后 this  指向 点击的 那个 li
</span><span class="c1"></span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// 此时点击哪个li就打印&lt;li&gt;li?&lt;/li&gt; 出整个li内容
</span><span class="c1"></span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span> <span class="c1">//此时点击哪个li就打印哪个li里的文本内容 =&gt; li? 
</span><span class="c1"></span>    <span class="p">})</span>


<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<hr>
<p>​</p>
<h2 id="事件对象-event">事件对象 event</h2>
<h3 id="打印-事件对象event-">**打印 事件对象event **</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.box&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">event</span><span class="p">);</span> <span class="c1">// 打印结果（见下图：信息非常之多）
</span><span class="c1"></span>    <span class="c1">// console.log(&#39;你好&#39;);
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;current====&gt;&#39;</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;target===&gt;&#39;</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;this====&gt;&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="常用事件属性方法">常用事件属性、方法</h3>
<ul>
<li>event.data     传递给事件处理程序的额外数据</li>
<li>event.currentTarget     事件绑定的对象(事件源),和 this 相同</li>
<li>event.pageX     鼠标相对于文档左部边缘的位置</li>
<li>event.target     实际触发事件的对象，不一定===this</li>
<li>event.stopPropagation()；   阻止事件冒泡</li>
<li>event.preventDefault();     阻止默认行为</li>
<li>event.type     事件类型：click，mouseover…</li>
<li>event.which     鼠标的按键类型：左 1 中 2 右 3</li>
<li>event.keyCode     键盘按键代码</li>
</ul>
<ul>
<li>……</li>
</ul>
<p><strong>举例演示：↓↓</strong></p>
<h3 id="阻止事件冒泡阻止默认事件">阻止事件冒泡、阻止默认事件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="p">)</span>
<span class="p">})</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">e</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span> <span class="c1">// 阻止冒泡  //调用event方法,书写形式
</span><span class="c1"></span>  <span class="c1">//如果不写 ↑↑ 这个方法 , 当我点击li时,同时触发ul的事件  // 会先弹出li,再弹出ul的弹窗
</span><span class="c1"></span>  <span class="c1">//写了上面这个方法,就会阻止事件冒泡;  点击li,不再触发父级事件ul
</span><span class="c1"></span>  <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">)</span>
<span class="p">})</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">abc</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">abc</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span> <span class="c1">// 阻止冒泡    // 调用event方法,书写形式
</span><span class="c1"></span>  <span class="nx">abc</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span> <span class="c1">// 阻止 a标签 默认的跳转行为  // 调用event方法,书写形式
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">);</span>
<span class="p">})</span>
<span class="c1">// 很多情况下,我们想要实现阻止事件往外冒泡,只触发自己的；就可以调用事件对象里的stopPropagation()
</span></code></pre></td></tr></table>
</div>
</div><p>-</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="nt">div</span> <span class="p">{</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">200</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">height</span><span class="p">:</span> <span class="mi">200</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">background-color</span><span class="p">:</span> <span class="kc">brown</span><span class="p">;</span>
    <span class="k">overflow</span><span class="p">:</span> <span class="kc">hidden</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nt">ul</span> <span class="p">{</span>
    <span class="k">margin</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span> <span class="kc">auto</span><span class="p">;</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">height</span><span class="p">:</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">background-color</span><span class="p">:</span> <span class="kc">pink</span><span class="p">;</span>
    <span class="k">list-style</span><span class="p">:</span> <span class="kc">none</span><span class="p">;</span>
    <span class="k">overflow</span><span class="p">:</span> <span class="kc">hidden</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nt">li</span> <span class="p">{</span>
    <span class="k">margin</span><span class="p">:</span> <span class="mi">25</span><span class="kt">px</span> <span class="kc">auto</span><span class="p">;</span>
    <span class="k">width</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">height</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
    <span class="k">background-color</span><span class="p">:</span> <span class="kc">orange</span><span class="p">;</span>
    <span class="k">text-align</span><span class="p">:</span> <span class="kc">center</span><span class="p">;</span>
    <span class="k">line-height</span><span class="p">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>

<span class="c">&lt;!-- 阻止事件冒泡 --&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;div&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;ul&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;li&#34;</span><span class="p">&gt;</span>
      test
    <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>


<span class="c">&lt;!-- 阻止默认事件 --&gt;</span>
<span class="p">&lt;</span><span class="nt">form</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;/account/login&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;login-form&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>账号: <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;username&#34;</span> <span class="na">required</span> <span class="p">/&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>密码: <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;pwd&#34;</span> <span class="na">required</span> <span class="p">/&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;&lt;</span><span class="nt">input</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;submit&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;登录&#34;</span> <span class="p">/&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">a</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;a&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://www.baidu.com&#34;</span><span class="p">&gt;</span>跳转百度<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>


<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="c1">//阻止事件冒泡
</span><span class="c1"></span>  <span class="nx">li</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nx">ul</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="p">);</span>
    <span class="nx">event</span><span class="p">.</span><span class="nx">stopPropagation</span> <span class="o">?</span> <span class="nx">event</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">()</span> <span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">cancelBubble</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">div</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
  <span class="p">}</span>


  <span class="c1">//阻止默认事件
</span><span class="c1"></span>  <span class="nx">submit</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span> <span class="o">?</span> <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span> <span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">returnValue</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">a</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span> <span class="o">?</span> <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span> <span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">returnValue</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="键盘按键代码--keycode-----">**键盘按键代码 . keyCode     **</h3>
<ul>
<li>补充 keyup ( ) 方法：效果是 监听到每次键盘按键升起时，就执行该方法下的函数操作</li>
<li>本例想要实现的效果是： 按下enter键(13)的时，将当前input输入框里输入的内容，在p标签里显示</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">).</span><span class="nx">keyup</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> 
    <span class="kd">var</span> <span class="nx">txt</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span> <span class="c1">// 先设置，将当前input输入框内的内容，赋值给变量txt
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">)</span> <span class="c1">//调用keyCode 可实现打印键盘按下的按键的数字代码，测出enter是13
</span><span class="c1"></span>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">txt</span><span class="p">);</span> <span class="c1">// 监听到每次键盘按键升起时,直接将输入框的text内容,添加到p标签里显示
</span><span class="c1"></span>    <span class="c1">//完成
</span><span class="c1"></span>
	<span class="c1">// 也可以用if语句判断 当前按下的按键的keycode是否是13，是则将txt内容添加到p标签中
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">===</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span> 
        <span class="c1">//当按下回车时(回车键代码为13),将输入框的txt内容,添加到p标签里显示
</span><span class="c1"></span>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">txt</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<hr>
<p>​</p>
<h2 id="jquery-链式编程">jQuery 链式编程</h2>
<ul>
<li>链式编程原理：return this；调用“任何”一个方法都是返回了对象本身</li>
<li>通常情况下，只有设置操作才能把链式编程延续下去。因为获取操作的时候，会返回获取到的相应的值，无法返回 this。</li>
<li>end ( ) ：结束当前 this 并回到匹配元素之前的状态，让this重新指向了 最初的调用者</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;.inner-box&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> 
        <span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s2">&#34;width&#34;</span><span class="p">,</span> <span class="s2">&#34;80px&#34;</span><span class="p">)</span>  <span class="c1">// 设置当前点击的innerbox的宽为80，return $(&#34;.inner-box&#34;)
</span><span class="c1"></span>        <span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s2">&#34;font-size&#34;</span><span class="p">,</span> <span class="s2">&#34;40px&#34;</span><span class="p">)</span><span class="c1">// 因为返回的是对象本身，所以这里就相当于对象本身在调用css()
</span><span class="c1"></span>        <span class="p">.</span><span class="nx">parent</span><span class="p">()</span>               <span class="c1">// 这里相当于$(this).parent()，拿到this的父级对象
</span><span class="c1"></span>        <span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s2">&#34;width&#34;</span><span class="p">,</span> <span class="s2">&#34;200px&#34;</span><span class="p">)</span>  <span class="c1">// this的父级对象调用css()，修改其宽度
</span><span class="c1"></span>        <span class="p">.</span><span class="nx">end</span><span class="p">()</span>          <span class="c1">// 结束了this指向父级的操作,让this重新指向了$(.inner-box).$(this)
</span><span class="c1"></span>        <span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s2">&#34;background-color&#34;</span><span class="p">,</span> <span class="s2">&#34;black&#34;</span><span class="p">);</span>     <span class="c1">// $(.inner-box).$(this) 调用css()方法
</span><span class="c1"></span>
    <span class="c1">// 结束当前链最近的一次过滤操作，并且返回匹配元素之前的状态。
</span><span class="c1"></span><span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="隐式迭代">隐式迭代</h2>
<ul>
<li>隐式迭代的意思是：在方法的内部会为匹配到的所有元素进行循环遍历，执行相应的方法；而不用我们再进行循环，简化我们的操作，方便我们调用。</li>
<li><strong>如果获取的是多元素的值，大部分情况下返回的是第一个元素的值</strong>。
<ul>
<li>文本比较特殊，如果要返回元素的文本内容，则会将全部元素的文本内容都返回，不会只返回第一个元素的文本内容</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;.btn&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;.box&#34;</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>实例 ↓↓</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>li-1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>li-2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>li-3<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>点击<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;js/jquery-3.4.1.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span>
  <span class="p">})</span>

  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.btn&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span> <span class="c1">// li-1 li-2 li-3
</span><span class="c1"></span>    <span class="c1">//文本比较特殊, 点击btn后【会返回所有的li里的文本内容】, 不会只返回第一个li的文本内容
</span><span class="c1"></span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;color&#39;</span><span class="p">));</span> <span class="c1">// green
</span><span class="c1"></span>    <span class="c1">// 但是,如果要打印文本以外的值，例如color值,此时只会返回 第一个li的颜色 绿色【不会返回所有li的color值】
</span><span class="c1"></span>  <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="each-循环">each 循环</h2>
<ul>
<li>
<p>大部分情况下是不需要使用 each 方法的，因为 jQuery 的隐式迭代特性 ↑↑ ：会为自动为匹配到的所有元素进行循环遍历</p>
</li>
<li>
<p>each  类似于 数组的 forEach 方法</p>
<ul>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript">  <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;小明&#39;</span><span class="p">,</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span> <span class="s1">&#39;李四&#39;</span><span class="p">];</span>
  <span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;item====&gt; &#39;</span><span class="p">,</span> <span class="nx">item</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;index====&gt;&#39;</span><span class="p">,</span> <span class="nx">index</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="c1">// 打印结果如下：
</span><span class="c1"></span>  <span class="c1">//          item====&gt;  小明
</span><span class="c1"></span>  <span class="c1">//          index====&gt; 0
</span><span class="c1"></span>  <span class="c1">//          item====&gt;  张三
</span><span class="c1"></span>  <span class="c1">//          index====&gt; 1
</span><span class="c1"></span>  <span class="c1">//          item====&gt;  李四
</span><span class="c1"></span>  <span class="c1">//          index====&gt; 2
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>如果要对每个元素做不同的处理，这时候就用到了 each 方法</p>
</li>
<li>
<p>作用：遍历 jQuery 对象集合，为每个匹配的元素执行一个函数</p>
</li>
<li>
<p>$(selector).each(function(index,element){});</p>
</li>
<li>
<p>Element 是一个 js 对象，需要转换成 jquery 对象</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">lis</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">);</span>
<span class="nx">lis</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//index - 选择器的 下标 位置
</span><span class="c1"></span>    <span class="c1">// item  正在遍历的  dom元素
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">item</span><span class="p">);</span> <span class="c1">//  0  &lt;li&gt;li-1&lt;/li&gt;
</span><span class="c1"></span>    						  <span class="c1">//  1  &lt;li&gt;li-2&lt;/li&gt;
</span><span class="c1"></span>    						  <span class="c1">//  2  &lt;li&gt;li-3&lt;/li&gt;
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">index</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 意为 下标为偶数
</span><span class="c1"></span>        <span class="nx">$</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;color&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">);</span> <span class="c1">//点击 下标为偶数的li,就会让当前li变成 红色
</span><span class="c1"></span>        <span class="p">})</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="c1">//反之,也就是下标为奇数的,执行下面的函数
</span><span class="c1"></span>        <span class="nx">$</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;color&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">);</span> <span class="c1">//点击 下标为奇数的li,就会让当前li变成 绿色
</span><span class="c1"></span>        <span class="p">})</span>
    <span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>在 **“ 01-DOM操作 ” **中 有一个案例：**for循环 实现 “ 隔行变色 ↓↓ ” **，那在 **jQuery **中就可以使用 **each ( ) 方法 ↑↑ **来实现</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="c1">// 实现 奇数行 显示red ; 偶数行 显示green 
</span><span class="c1"></span>  <span class="c1">// 鼠标移入 this行 显示orange
</span><span class="c1"></span>
  <span class="kd">var</span> <span class="nx">liArr</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">liArr</span><span class="p">);</span>

  <span class="kd">var</span> <span class="nx">colorBefore</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">liArr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>   <span class="c1">// for循环遍历li
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 奇数行 红色
</span><span class="c1"></span>      <span class="nx">liArr</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="s1">&#39;red&#39;</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 偶数行 绿色
</span><span class="c1"></span>      <span class="nx">liArr</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="s1">&#39;green&#39;</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 鼠标移入：变橙色，
</span><span class="c1"></span>    <span class="c1">// 鼠标离开：变回原来颜色
</span><span class="c1"></span>    <span class="nx">liArr</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">onmouseenter</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="nx">colorBefore</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="s1">&#39;orange&#39;</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">liArr</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">onmouseleave</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="nx">colorBefore</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="多库共存">多库共存</h2>
<ul>
<li>此处多库共存指的是：jQuery 占用了$ 和 jQuery 这两个变量。当在同一个页面中引用了 jQuery 这个 js 库，并且引用的其他库（或者其他版本的 jQuery 库）中也用到了$或者 jQuery 这两个变量，那么，要保证每个库都能正常使用，这时候就有了多库共存的问题。</li>
<li>$.noConflict();  让 jQuery 释放对$的控制权，让其他库能够使用$符号，达到多库共存的目的。此后，只能使用 jQuery 来调用 jQuery 提供的方法</li>
</ul>
<h2 id="插件机制">插件机制</h2>
<ul>
<li>jQuery 这个 js 库，虽然功能强大，但也不是面面俱到包含所有的功能。</li>
<li>jQuery 是通过插件的方式，来扩展它的功能：</li>
<li>当你需要某个插件的时候，你可以“安装”到 jQuery 上面，然后，使用。</li>
<li>当你不再需要这个插件，那你就可以从 jQuery 上“卸载”它。</li>
</ul>]]></description>
</item></channel>
</rss>

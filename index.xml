<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Sam&#39;s Garage</title>
        <link>https://liubingxuan.xyz/</link>
        <description>‪Stay Young. Stay Naive. Stay Curious.</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ryuukousen@gmail.com (Sam)</managingEditor>
            <webMaster>ryuukousen@gmail.com (Sam)</webMaster><lastBuildDate>Wed, 06 Jan 2021 00:28:18 &#43;0800</lastBuildDate>
            <atom:link href="https://liubingxuan.xyz/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>【置顶】开博纪念🥰</title>
    <link>https://liubingxuan.xyz/celebration/</link>
    <pubDate>Fri, 06 Mar 2020 20:10:04 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://liubingxuan.xyz/celebration/</guid>
    <description><![CDATA[<h2 id="g-">G！🎉🎉 💪</h2>
<blockquote>
<p>‪Stay young. Stay naive. Stay curious. “Grown ups” don’t change the world. They conform to it.</p>
</blockquote>
<blockquote>
<p>Life is simply about getting hit over and over :)</p>
</blockquote>
<blockquote>
<p>Never put off till tomorrow what you can do today :)</p>
</blockquote>
<blockquote>
<p>make IT :)</p>
</blockquote>]]></description>
</item><item>
    <title>Vue 中的 .sync 修饰符有什么用</title>
    <link>https://liubingxuan.xyz/vue-props-sync/</link>
    <pubDate>Wed, 06 Jan 2021 00:28:18 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://liubingxuan.xyz/vue-props-sync/</guid>
    <description><![CDATA[<h2 id="vue-中的-sync-修饰符有什么用">Vue 中的 .sync 修饰符有什么用</h2>
<blockquote>
<p><a href="https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6" target="_blank" rel="noopener noreffer">官方文档</a></p>
</blockquote>
<ul>
<li>.sync 是「实现 Vue 组件间传值」的一个语法糖</li>
</ul>
<p>​</p>
<h3 id="组件间传值的实现">组件间传值的实现</h3>
<blockquote>
<p>props 传值遵循<a href="https://cn.vuejs.org/v2/guide/components-props.html#%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81" target="_blank" rel="noopener noreffer">单向数据流</a>原则：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样可以防止子组件意外变更父组件的数据，从而导致你的应用的数据流向难以理解。</p>
</blockquote>
<h4 id="思路">思路</h4>
<ul>
<li>数据从父组件传入子组件，我们无法在子组件中直接修改 props 传入的外部数据，只能在父组件中进行修改，而更新后的数据会自动流向子组件</li>
<li><a href="https://cn.vuejs.org/v2/guide/components-props.html#ad" target="_blank" rel="noopener noreffer">props</a> 加 <a href="https://cn.vuejs.org/v2/api/#vm-emit" target="_blank" rel="noopener noreffer">vm.$emit</a> 实现组件传值
<ul>
<li>props 用于接收父组件的数据</li>
<li>vm.$emit（自定义事件）用于触发父组件事件，并传参</li>
</ul>
</li>
</ul>
<h4 id="具体实现">具体实现</h4>
<blockquote>
<p>事件的发布、订阅</p>
</blockquote>
<p><a href="https://codesandbox.io/s/objective-cloud-qnzvy?file=/src/Parent.vue" target="_blank" rel="noopener noreffer">在线演示</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vue" data-lang="vue"><span class="c">&lt;!--</span> <span class="nx">Parent</span><span class="p">.</span><span class="nx">vue</span> <span class="o">--&gt;</span>
<span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
    <span class="nx">Parent</span><span class="p">.</span><span class="nx">vue</span> <span class="nx">现在有</span> <span class="p">{{</span> <span class="nx">total</span> <span class="p">}}</span>
    <span class="p">&lt;</span><span class="nt">hr</span> <span class="p">/&gt;</span>
    <span class="c">&lt;!--</span> <span class="nx">向</span> <span class="nx">Child</span> <span class="nx">组件传递</span> <span class="nx">money</span> <span class="nx">属性</span> <span class="o">--&gt;</span>
    <span class="p">&lt;</span><span class="nt">Child</span> <span class="nt">:money</span><span class="s">=&#34;total&#34;</span> <span class="err">@</span><span class="na">update</span><span class="o">:</span><span class="na">money</span><span class="o">=</span><span class="s">&#34;total = $event&#34;</span> <span class="p">/&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="kr">import</span> <span class="nx">Child</span> <span class="nx">from</span> <span class="s2">&#34;./Child.vue&#34;</span>
<span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="nx">total</span><span class="o">:</span> <span class="mi">10000</span><span class="p">,</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="nx">components</span><span class="o">:</span> <span class="p">{</span> <span class="nx">Child</span> <span class="p">},</span> 
<span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vue" data-lang="vue"><span class="c">&lt;!--</span> <span class="nx">Child</span><span class="p">.</span><span class="nx">vue</span> <span class="o">--&gt;</span>
<span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;child&#34;</span><span class="p">&gt;</span>
    <span class="nx">Child</span><span class="p">.</span><span class="nx">vue</span> <span class="nx">现在有</span> <span class="p">{{</span> <span class="nx">money</span> <span class="p">}}</span>
    <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;$emit(&#39;update:money&#39;, money-100)&#34;</span><span class="p">&gt;</span><span class="nx">花钱</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="nx">props</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;money&#34;</span><span class="p">],</span> <span class="c1">// 接收到 money 属性
</span><span class="c1"></span><span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<h3 id="sync-的使用">.sync 的使用</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vue" data-lang="vue"><span class="c">&lt;!--</span> <span class="nx">Parent</span><span class="p">.</span><span class="nx">vue</span> <span class="o">--&gt;</span>
<span class="p">&lt;</span><span class="nt">Child</span> <span class="nt">:属性名.sync</span><span class="s">=&#34;数据&#34;</span> <span class="p">/&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="示例">示例</h4>
<blockquote>
<p><a href="https://codesandbox.io/s/sweet-pine-pij57?file=/src/Parent.vue" target="_blank" rel="noopener noreffer">在线演示</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vue" data-lang="vue"><span class="c">&lt;!--</span> <span class="nx">Parent</span><span class="p">.</span><span class="nx">vue</span> <span class="o">--&gt;</span>
<span class="p">&lt;</span><span class="nt">Child</span> <span class="nt">:money.sync</span><span class="s">=&#34;total&#34;</span> <span class="p">/&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>👆 会扩展出一个完整的事件绑定 👇</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vue" data-lang="vue"><span class="c">&lt;!--</span> <span class="nx">Parent</span><span class="p">.</span><span class="nx">vue</span> <span class="o">--&gt;</span>
<span class="p">&lt;</span><span class="nt">Child</span> <span class="nt">:money</span><span class="s">=&#34;total&#34;</span>  <span class="err">@</span><span class="na">update</span><span class="o">:</span><span class="na">money</span><span class="o">=</span><span class="s">&#34;total = $event&#34;</span> <span class="p">/&gt;</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>当子组件需要更新「数据 total 」时，它需要显式的触发一个更新事件「<code>update:属性名</code>」</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">// Child.vue
this.$emit(&#39;update:属性名&#39;, 更新数据)
👇
&lt;button @click=&#34;$emit(&#39;update:money&#39;, money-100)&#34;&gt;花钱&lt;/button&gt;
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="参考">参考</h2>
<p><a href="https://www.jianshu.com/p/6b062af8cf01">https://www.jianshu.com/p/6b062af8cf01</a></p>
<p><a href="https://segmentfault.com/a/1190000010700521">https://segmentfault.com/a/1190000010700521</a></p>]]></description>
</item><item>
    <title>深入理解 Vue 数据响应式</title>
    <link>https://liubingxuan.xyz/vue-reactivity/</link>
    <pubDate>Thu, 31 Dec 2020 23:45:19 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://liubingxuan.xyz/vue-reactivity/</guid>
    <description><![CDATA[<h2 id="相关文章参考">相关文章（参考）</h2>
<p><a href="https://g.yuque.com/weixiaozhudelaocaipi/yy8wge/vn5cw7" target="_blank" rel="noopener noreffer">Vue响应式原理-理解Observer、Dep、Watcher</a></p>
<p><a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%8F%98%E5%8C%96" target="_blank" rel="noopener noreffer">深入响应式原理—— Vue 官方文档</a></p>
<p><a href="https://www.codenong.com/j5e5e70f751882548ff3/" target="_blank" rel="noopener noreffer">Vue3将要使用Proxy作为数据驱动，不想进来看看吗？</a></p>
<p><a href="https://g.yuque.com/weixiaozhudelaocaipi/yy8wge/pi0dhp?language=en-us" target="_blank" rel="noopener noreffer">vue3.0尝鲜 &ndash; 摒弃Object.defineProperty，基于 Proxy 的观察者机制探索</a></p>
<p><a href="https://segmentfault.com/a/1190000016028331" target="_blank" rel="noopener noreffer">利用Proxy自动添加响应式属性</a></p>
<p><a href="https://blog.fundebug.com/2019/07/10/responsive-vue/" target="_blank" rel="noopener noreffer">详解Vue响应式原理</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/143933911" target="_blank" rel="noopener noreffer">你真的理解Vue的数据响应式吗</a></p>
<p>​</p>
<h2 id="什么是数据响应式">什么是数据响应式</h2>
<h3 id="响应">响应</h3>
<p>“响应”，中文的意思也就是“回应”。比如，别人叫你一声或者给你发消息，你回复了他，这个过程就叫响应。</p>
<h3 id="数据响应式">数据响应式</h3>
<p><a href="https://link.zhihu.com/?target=https%3A//cn.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="noopener noreffer">Vue 的官方文档</a>已经很明确的告诉我们：</p>
<ul>
<li>只要修改数据 data（<code>render(data)</code> 做出响应）就会重新渲染视图（不需要开发者再去操作 DOM）</li>
<li>这个联动的过程，就是 vue 的数据响应式</li>
<li>这也是 Vue 最独特的特性之一 —— <strong>非侵入性的响应式系统</strong>。</li>
</ul>
<h4 id="怎么理解非侵入性">怎么理解“非侵入性”</h4>
<p>我觉得，可以理解为“不可篡改的”：</p>
<ul>
<li>即用户无法绕过 Vue 的监听，去篡改内部数据</li>
<li>Vue 做到了「无论用户以任何方式修改 data 中的内部数据，都会被当前 Vue 组件监听到，并通知对应的 watcher，从而重新渲染与数据关联的组件」</li>
<li>拓展：该特性依靠「代理 proxy」实现</li>
</ul>
<p>​</p>
<h2 id="浅析vue-响应式原理">浅析「Vue 响应式原理」</h2>
<blockquote>
<p>Vue 是通过 Object.defineProperty 来实现数据响应式</p>
</blockquote>
<p>当我们把一个对象作为 data 选项传入 Vue 实例，Vue 会遍历 data 中的所有属性，并用 Object.defineProperty 对这些属性进行改造，<strong>用 getter / setter 监控每个属性的读写</strong>。</p>
<p>每个组件实例都对应一个 watcher 实例，它会根据 getter 的触发来记录渲染视图用到的数据依赖项。<strong>当这些数据的 setter 触发（数据被修改）时</strong>，会通知 watcher，从而<strong>使数据关联的组件重新渲染</strong>。</p>
<p></p>
<blockquote>
<p><a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%8F%98%E5%8C%96" target="_blank" rel="noopener noreffer">如何追踪变化</a></p>
<ul>
<li>当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的 property，并使用 Object.defineProperty 把这些 property 全部转为 getter/setter。</li>
<li>这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在 property 被访问和修改时通知变更。</li>
<li>每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把“接触”过的数据 property 记录为依赖。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。</li>
</ul>
</blockquote>
<h2 id="深入响应式原理">深入响应式原理</h2>
<h3 id="普通对象--传入-vue-的普通对象">普通对象 🆚 传入 Vue 的普通对象</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">myData</span> <span class="o">=</span> <span class="p">{</span> <span class="c1">// myData 是一个普通对象
</span><span class="c1"></span>  <span class="nx">n</span><span class="o">:</span> <span class="mi">0</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myData</span><span class="p">)</span>  <span class="c1">// （输出如下图）
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">myData</span> <span class="o">=</span> <span class="p">{</span> <span class="c1">// myData 是一个普通对象
</span><span class="c1"></span>  <span class="nx">n</span><span class="o">:</span> <span class="mi">0</span>
<span class="p">}</span>
<span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
  <span class="nx">data</span><span class="o">:</span> <span class="nx">myData</span>  <span class="c1">// 把 myData 作为 data 选项，传入 Vue 实例
</span><span class="c1"></span><span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myData</span><span class="p">)</span> <span class="c1">// 看看现在的 myData 是什么样子（输出如下图）
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="vue-对-data-做了什么">Vue 对 data 做了什么</h3>
<blockquote>
<p>Vue 最独特的特性之一，是其非侵入性的响应式系统。数据模型仅仅是普通的 JavaScript 对象。而当你修改它们时，视图会进行更新。</p>
</blockquote>
<p>当我们把 data 选项传入 Vue 实例，Vue 会遍历 data 中的所有属性（property），进行「监听和代理」</p>
<ul>
<li><strong>监听：数据响应式的底层细节</strong></li>
<li>代理：不暴露任何接口，防止用户篡改数据</li>
</ul>
<p>从而将这些数据改造成非侵入性的响应式数据</p>
<p>​</p>
<h3 id="前置知识">前置知识</h3>
<h4 id="objectdefineproperty">Object.defineProperty</h4>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener noreffer">MDN</a>：<code>Object.defineProperty()</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p>
</blockquote>
<p><strong>使用方式</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">prop</span><span class="p">,</span> <span class="nx">descriptor</span><span class="p">)</span>
<span class="c1">// obj 代表定义属性的对象；prop 代表定义的属性名称；descriptor 代表定义的内容。
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>需求 ⭕️ 用 Object.defineProperty 添加属性 n，值为 0</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">data1</span> <span class="o">=</span> <span class="p">{}</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">data1</span><span class="p">,</span> <span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="p">{</span>  <span class="c1">// 表示向 对象data1 中添加属性 &#34;n&#34;，值为 0
</span><span class="c1"></span>  <span class="nx">value</span><span class="o">:</span> <span class="mi">0</span>
<span class="p">})</span> 
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data1</span><span class="p">)</span>    <span class="c1">// { n: 0 }
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data1</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span>  <span class="c1">// 0
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="getter--setter">getter / setter</h4>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#%E6%8F%8F%E8%BF%B0" target="_blank" rel="noopener noreffer">MDN：getter/setter 描述 </a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#%E8%87%AA%E5%AE%9A%E4%B9%89_Setters_%E5%92%8C_Getters" target="_blank" rel="noopener noreffer">示例</a></p>
<ul>
<li>get：属性的 getter 函数。当访问该属性时，会调用此函数。不传入任何参数</li>
<li>set：属性的 setter 函数。当属性值被修改时，会调用此函数。接受一个参数（也就是被赋予的新值）</li>
</ul>
</blockquote>
<blockquote>
<p>需求 ⭕️ 用 Object.defineProperty 添加属性 n，并监听 n 的读取。</p>
<ul>
<li>使用 Object.defineProperty 把这些 property 全部转为 getter/setter。</li>
<li>设置 getter / setter，当我们读取 n 时会自动执行 getter，修改 n 时会自动执行 setter</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">data2</span> <span class="o">=</span> <span class="p">{}</span>
<span class="nx">data2</span><span class="p">.</span><span class="nx">_n</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1">// 添加一个媒介属性 _n 用于存储 n 的原值 0
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">data2</span><span class="p">,</span> <span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="p">{</span>
  <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// return this.n 为什么 getter 不直接返回 this.n，而需要额外声明一个属性 _n，这不多此一举吗 ？
</span><span class="c1"></span>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_n</span>
  <span class="p">},</span>
  <span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_n</span> <span class="o">=</span> <span class="nx">value</span>
  <span class="p">}</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data2</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// 0
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>疑问：为什么 getter 不直接返回 this.n，而需要额外声明  _n 来存储下 n 值，并用 _n 作为中转呢 ？</p>
</blockquote>
<p>原因：</p>
<ul>
<li>所有读取 n 的操作（data2.n、this.n），都会自动调取 getter 方法的返回值，作为 n 值</li>
<li>如果读取 n 时，getter 返回 this.n，this.n 仍是读取 n 值的操作，会接着自动获取 getter 返回值，于是这就成了一个「死循环」，不停的读取 n，始终拿不到终值</li>
<li>所以声明一个媒介属性 _n 来存储 n 值。当读取 n 时，getter 返回 _n 值，写入 n 时 setter 修改 _n 值</li>
</ul>
<p>​</p>
<blockquote>
<p>疑惑：为什么不直接在声明对象时就定义属性 <code>n : 0</code> ，用 Object.defineProperty 不是把过程复杂化了吗 ？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">data1</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">n</span><span class="o">:</span> <span class="mi">0</span> <span class="p">}</span> 
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data1</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span>  <span class="c1">// 0
</span><span class="c1"></span><span class="nx">data1</span><span class="p">.</span><span class="nx">n</span> <span class="o">=</span> <span class="mi">100</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data1</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span>  <span class="c1">// 100
</span></code></pre></td></tr></table>
</div>
</div><p>字面量形式创建对象，易读易写，难道不香 ？ 答：不香（往下看原因）</p>
</blockquote>
<p>​</p>
<h4 id="为什么使用这个-api-作用">为什么使用这个 API （作用）</h4>
<blockquote>
<p>当需求变复杂 ↓</p>
<ul>
<li>需求 ⭕️ 添加属性 n，默认值 0 。同时，限制 n 的赋值永远不能小于 0</li>
<li>比如：赋值 <code>data2.n = -1</code> 是无效的，赋值 <code>data2.n = 1</code> 有效</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">data2</span> <span class="o">=</span> <span class="p">{}</span>
<span class="nx">data2</span><span class="p">.</span><span class="nx">_n</span> <span class="o">=</span> <span class="mi">0</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">data2</span><span class="p">,</span> <span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="p">{</span>
  <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// others ...
</span><span class="c1"></span>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_n</span> 
  <span class="p">},</span>
  <span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span>  <span class="c1">// 👈 如果 value 小于 0，就直接返回，不执行赋值操作
</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">_n</span> <span class="o">=</span> <span class="nx">value</span>
    <span class="c1">// others ...
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>所以，使用 Object.defineProperty 把对象的属性全部转为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#%E8%87%AA%E5%AE%9A%E4%B9%89_Setters_%E5%92%8C_Getters" target="_blank" rel="noopener noreffer">getter/setter</a></p>
<ul>
<li><strong>这样可以实现在读写触发的同时，添加其他操作。</strong></li>
<li>Vue 就是利用 Object.defineProperty 的这一特性，实现数据监听的效果</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="监听的逻辑-">监听的逻辑 📌</h3>
<blockquote>
<p>Vue 的响应式原理，通过 Object.defineProperty 实现</p>
</blockquote>
<h4 id="示例">示例</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// demo.vue 组件
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">myData</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;jack&#39;</span><span class="p">,</span>
  <span class="nx">sex</span><span class="o">:</span> <span class="s1">&#39;male&#39;</span><span class="p">,</span>
  <span class="nx">age</span><span class="o">:</span> <span class="mi">20</span>
<span class="p">}</span>
<span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
  <span class="nx">data</span><span class="o">:</span> <span class="nx">myData</span><span class="p">,</span>  <span class="c1">// 当我们把 myData 作为 data 选项传入 Vue 实例，Vue 会 ... 🔗
</span><span class="c1"></span>  <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span><span class="sb">		&lt;div&gt;
</span><span class="sb">			姓名：{{ name }}
</span><span class="sb">			年龄：{{ age }}
</span><span class="sb">		&lt;/div&gt;
</span><span class="sb">	`</span>
<span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s2">&#34;#app&#34;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="模拟-vue-内部操作">模拟 Vue 内部操作</h4>
<blockquote>
<p>🔗 Vue 会遍历 data，并通过 Object.defineproperty 将 data 中的每一项数据改造成 getter/setter</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 当 Vue 接收到 myData，会遍历对象、使用 Object.defineProperty 进行改造
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">myData</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">val</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="c1">// val 存储当前遍历属性的原值
</span><span class="c1"></span>  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// others... 通知 watcher 添加依赖项 📌
</span><span class="c1"></span>      <span class="k">return</span> <span class="nx">val</span> <span class="c1">// 触发 get 函数，返回属性的值
</span><span class="c1"></span>    <span class="p">},</span>
    <span class="nx">set</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">val</span> <span class="o">=</span> <span class="nx">newVal</span> <span class="c1">// 触发 set 函数，修改属性的值
</span><span class="c1"></span>      <span class="c1">// others... 通知 watcher 渲染关联组件 📌
</span><span class="c1"></span>    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>每个组件实例都对应一个 watcher 实例</p>
<ul>
<li>在组件<strong>渲染</strong>的过程中，getter 被触发的数据，会被 watcher 记录为「渲染视图的<strong>依赖项</strong>」</li>
</ul>
<ul>
<li>当<strong>依赖项</strong>的 setter 触发时（说明数据被修改），会通知 watcher，从而使它<strong>关联的组件重新渲染</strong></li>
</ul>
</blockquote>
<h4 id="示例分析">示例分析</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// demo.vue 组件
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">myData</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;jack&#39;</span><span class="p">,</span>
  <span class="nx">sex</span><span class="o">:</span> <span class="s1">&#39;male&#39;</span><span class="p">,</span>
  <span class="nx">age</span><span class="o">:</span> <span class="mi">20</span>
<span class="p">}</span>
<span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
  <span class="nx">data</span><span class="o">:</span> <span class="nx">myData</span><span class="p">,</span>
  <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span><span class="sb">		&lt;div&gt;
</span><span class="sb">			姓名：{{ name }}  
</span><span class="sb">			年龄：{{ age }}
</span><span class="sb">		&lt;/div&gt;
</span><span class="sb">	`</span> <span class="c1">// 👆 视图渲染，触发了 name 和 age 的 getter，通知 watcher 记录属性为依赖项
</span><span class="c1"></span><span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s2">&#34;#app&#34;</span><span class="p">)</span>

<span class="nx">myData</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;rose&#39;</span> 
<span class="c1">// 👆 触发 name 的 setter，依赖项的 setter 被触发，通知 watcher 重新渲染相关组件
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>以上</p>
<p>一个简单的数据响应式，就是这样实现的</p>
</blockquote>
<h3 id="拓展代理的逻辑">拓展：代理的逻辑</h3>
<blockquote>
<p>需求 ⭕️ 向对象中存储一个属性 n，条件是 n 的赋值永远不能小于0</p>
<ul>
<li>请问，我们怎样保证「不管用户怎么修改 n 的值，都可以满足上述要求」</li>
</ul>
</blockquote>
<h4 id="实验一">实验一</h4>
<p>（<a href="https://jsbin.com/voxomus/5/edit?html,js,console" target="_blank" rel="noopener noreffer">在线示例</a>）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">myData</span> <span class="o">=</span> <span class="p">{}</span>
<span class="nx">myData</span><span class="p">.</span><span class="nx">_n</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">// 始终用 _n 存储 n 值（ _n 相当于一个中转属性）
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">myData</span><span class="p">,</span> <span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="p">{</span>
  <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_n</span> <span class="c1">// 必须中转，如果直接返回 this.n 会陷入死循环
</span><span class="c1"></span>  <span class="p">},</span>
  <span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_n</span> <span class="o">=</span> <span class="nx">value</span>
  <span class="p">}</span>
<span class="p">})</span>
<span class="nx">myData</span><span class="p">.</span><span class="nx">n</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myData</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// 0 修改无效
</span><span class="c1"></span><span class="nx">myData</span><span class="p">.</span><span class="nx">n</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myData</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// 1 修改成功
</span></code></pre></td></tr></table>
</div>
</div><h5 id="钻空子">钻空子</h5>
<p><a href="https://jsbin.com/voxomus/edit?html,js,console" target="_blank" rel="noopener noreffer">在线示例</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 看似需求已经实现，但如果对方直接修改 myData._n，那么上述 set 就无法限制了 ！
</span><span class="c1">// 虽然 n 不能设置为小于0的值，但 _n 可以，它只是myData上的一个普通的属性，没有set监听，可以任意赋值
</span><span class="c1"></span>
<span class="nx">myData</span><span class="p">.</span><span class="nx">_n</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myData</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// -1  篡改成功
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>结论：实验一可以通过修改中转属性，绕过监听，轻易篡改数据 n</p>
</blockquote>
<h4 id="实验二">实验二</h4>
<blockquote>
<p>根据实验一的“钻空子”，提出解决思路：</p>
<ul>
<li>不在 myData 对象上暴露出任何不被监听的属性接口（最好就不要起对象名了）</li>
<li>换句话说，需求 ⭕️ 要让任何访问、任何接口，都必须能被监听到</li>
<li>如果数据本身，就是一个函数的返回值，那么每次调用数据都会执行这个函数，我们只需在函数内部在实现对数据的监听，这样就可以防止用户偷跑、篡改数据</li>
<li>具体实现参照「代理」的思想</li>
</ul>
</blockquote>
<p>写一个 proxy 函数，参数接收一个匿名对象，<strong>在匿名对象中存放真实数据</strong>，在 proxy 函数中实现对数据的代理监听</p>
<ul>
<li>使用匿名对象，因为没有提前声明对象名的对象，就自然无法被外界访问</li>
<li>每次调用 myData 上的数据，都会执行 proxy 方法，把真实数据转移到 obj 进行监听，再返回 obj，保证调用myData 的属性时，一定调用的是 obj 上被监听了的属性</li>
<li>可保证 myData 上一定没有暴露任何未被监听的属性（_n），所有属性都经过 proxy 被监听处理了</li>
</ul>
<p><a href="https://jsbin.com/voxomus/15/edit?html,js,console" target="_blank" rel="noopener noreffer">在线示例</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">myData</span> <span class="o">=</span> <span class="nx">proxy</span><span class="p">({</span> <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="nx">n</span><span class="o">:</span> <span class="mi">0</span> <span class="p">}</span> <span class="p">})</span>

<span class="kd">function</span> <span class="nx">proxy</span><span class="p">({</span> <span class="nx">data</span> <span class="p">})</span> <span class="p">{</span>  <span class="c1">// 解构赋值，参数 data 就是 { n: 0 }，存储了真实数据
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span> 
  <span class="c1">// 把 data 上的所有数据转移到 obj 上进行监听，然后返回 obj，这样 保证 obj 上的所有数据都是被监听到的 
</span><span class="c1"></span>  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="p">{</span> 
    <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">n</span>
    <span class="p">},</span>
    <span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
      <span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">=</span> <span class="nx">value</span>
    <span class="p">}</span>
  <span class="p">})</span>
  <span class="k">return</span> <span class="nx">obj</span> <span class="c1">// obj 就是 data 的代理对象
</span><span class="c1"></span><span class="p">}</span>

<span class="nx">myData</span><span class="p">.</span><span class="nx">n</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myData</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// 0  修改无效
</span><span class="c1"></span><span class="nx">myData</span><span class="p">.</span><span class="nx">n</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myData</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// 1  修改成功
</span></code></pre></td></tr></table>
</div>
</div><h5 id="钻空子-1">钻空子</h5>
<blockquote>
<p>如果用户自己写一个数据对象 hackData</p>
<p>再把 hackData 放到代理中，然后修改这个 hackData，就可以实现篡改数据的目的</p>
</blockquote>
<p><a href="https://jsbin.com/voxomus/21/edit?html,js,console" target="_blank" rel="noopener noreffer">在线示例</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">myData</span> <span class="o">=</span> <span class="nx">proxy</span><span class="p">({</span> <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="nx">n</span><span class="o">:</span> <span class="mi">0</span> <span class="p">}</span> <span class="p">})</span> <span class="c1">// 原始数据
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">hackData</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">n</span><span class="o">:</span> <span class="mi">0</span> <span class="p">}</span> <span class="c1">// 声明新的数据，用于篡改原始数据
</span><span class="c1"></span><span class="nx">myData</span> <span class="o">=</span> <span class="nx">proxy</span><span class="p">({</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">hackData</span> <span class="p">})</span>

<span class="kd">function</span> <span class="nx">proxy</span><span class="p">({</span> <span class="nx">data</span> <span class="p">})</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span> 
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="p">{</span> 
    <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">n</span>
    <span class="p">},</span>
    <span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
      <span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">=</span> <span class="nx">value</span>
    <span class="p">}</span>
  <span class="p">})</span>
  <span class="k">return</span> <span class="nx">obj</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myData</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// 0
</span><span class="c1"></span><span class="nx">hackData</span><span class="p">.</span><span class="nx">n</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myData</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// -1 篡改成功
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>结论：用户可以强行往 proxy 中塞一个 hackData，这样只要 hackData 就可以篡改原始数据 n</p>
</blockquote>
<h4 id="实验三">实验三</h4>
<blockquote>
<p>根据实验二的 “钻空子”</p>
<ul>
<li>用户强行往 proxy 中塞了一个 hackData，想通过 hackData 篡改我方原始数据 n</li>
<li>需求 ⭕️ 如果用户擅自篡改数据（传入自己写的数据），就要拦截这种行为（升级 proxy 2.0 ）</li>
</ul>
</blockquote>
<p><a href="https://jsbin.com/soranoq/5/edit?html,js,console" target="_blank" rel="noopener noreffer">在线示例</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">myData</span> <span class="o">=</span> <span class="nx">proxy2</span><span class="p">({</span> <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="nx">n</span><span class="o">:</span> <span class="mi">0</span> <span class="p">}</span> <span class="p">})</span> <span class="c1">// 原始数据
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">hackData</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">n</span><span class="o">:</span> <span class="o">-</span><span class="mi">1</span> <span class="p">}</span>  <span class="c1">// 声明新的数据，用于篡改原始数据
</span><span class="c1"></span><span class="nx">myData</span> <span class="o">=</span> <span class="nx">proxy2</span><span class="p">({</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">hackData</span> <span class="p">})</span>

<span class="kd">function</span> <span class="nx">proxy2</span><span class="p">({</span> <span class="nx">data</span> <span class="p">})</span> <span class="p">{</span>  <span class="c1">// data 接收 hackData：{ n: 0 }
</span><span class="c1"></span>  <span class="c1">// 原本应该遍历 data 上的所有 key，这里做了简化，假设 data 上只有一个数据 n
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">n</span>  <span class="c1">// 声明变量来存储原始的n值（这里存储n，目的是后面把n删掉）
</span><span class="c1"></span>  
  <span class="c1">// delete data.n  
</span><span class="c1"></span>  <span class="c1">// 可以省略删除操作，因为下面添加虚拟属性n时与data中原本的属性重名，会自动覆盖（删除）原本的属性
</span><span class="c1"></span>  
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="c1">// 这样就完全监控了 n
</span><span class="c1"></span>    <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">value</span>
    <span class="p">},</span>
    <span class="nx">set</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">newValue</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span>
      <span class="nx">value</span> <span class="o">=</span> <span class="nx">newValue</span>
    <span class="p">}</span>
  <span class="p">})</span>
  <span class="c1">// 上面就是新添加的代码，用于完全监听 n【监听的逻辑】
</span><span class="c1"></span>  <span class="c1">// 相当于安装监听器，如果用户想绕过监听，就立马知道并拦截你
</span><span class="c1"></span>
  <span class="c1">// 下面仍是【实验二中的代理逻辑】
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">n</span>
    <span class="p">},</span>
    <span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> 
      <span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">=</span> <span class="nx">value</span>
    <span class="p">}</span>
  <span class="p">})</span>
  <span class="k">return</span> <span class="nx">obj</span> <span class="c1">// obj 就是代理
</span><span class="c1"></span><span class="p">}</span>

<span class="c1">// 用户如果直接修改 myData 的数据，走正常的代理逻辑。
</span><span class="c1">// 用户如果想绕过代理，篡改原始数据，会走监听逻辑
</span><span class="c1">// 只要经过 proxy2 就一定会处于监听之下，因为会删掉原本的数据 n
</span><span class="c1"></span>
<span class="c1">// 篡改原始数据（会创建虚拟属性来替代原本属性，通过对虚拟属性的监听实现数据监听）
</span><span class="c1"></span><span class="nx">hackData</span><span class="p">.</span><span class="nx">n</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>  
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myData</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// 0 修改无效
</span><span class="c1"></span><span class="nx">hackData</span><span class="p">.</span><span class="nx">n</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myData</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// 1 修改成功
</span><span class="c1"></span>
<span class="c1">// 直接修改（通过代理实现数据监听）
</span><span class="c1"></span><span class="nx">myData</span><span class="p">.</span><span class="nx">n</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myData</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// 1 修改无效
</span><span class="c1"></span><span class="nx">myData</span><span class="p">.</span><span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myData</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// 0 修改成功
</span></code></pre></td></tr></table>
</div>
</div><h4 id="总结">总结</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 下面这句代码看着眼熟吗 ?
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">myData</span> <span class="o">=</span> <span class="nx">proxy2</span><span class="p">({</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">hackData</span> <span class="p">})</span>
<span class="kd">let</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">hackData</span> <span class="p">})</span>

<span class="c1">// myData 就相当于 vm
</span><span class="c1">// proxy2 就相当于 new Vue，只不过没加 new 而已
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>前面实验推出的 proxy 代码，<strong>就是 Vue 内部的源代码</strong></p>
</blockquote>
<h5 id="一定要注意-">一定要注意 💡</h5>
<ul>
<li>前面实验的<strong>研究方法</strong>比知识本身更重要</li>
<li>这些方法能让你<strong>不读源码</strong>，也能了解真相（底层原理）</li>
</ul>
<h5 id="new-vue-对-data-做了什么">new Vue 对 data 做了什么</h5>
<blockquote>
<p>理清了代理的逻辑，现在我们可以说说 new Vue 到底对 data 做了什么</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s2">&#34;vue/dist/vue.js&#34;</span>

<span class="kr">const</span> <span class="nx">hackData</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">n</span><span class="o">:</span> <span class="mi">0</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hackData</span><span class="p">)</span> <span class="c1">// 精髓 👈👈👈 通过log发现不同之处，从而进行推理验证
</span><span class="c1"></span>
<span class="kr">const</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
  <span class="nx">data</span><span class="o">:</span> <span class="nx">hackData</span><span class="p">,</span>
  <span class="nx">template</span><span class="o">:</span> <span class="sb">`&lt;div&gt;{{n}}&lt;/div&gt;`</span><span class="p">,</span>
<span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s2">&#34;#app&#34;</span><span class="p">)</span>

<span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">hackData</span><span class="p">.</span><span class="nx">n</span> <span class="o">+=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hackData</span><span class="p">)</span> <span class="c1">// 精髓 👈👈👈
</span><span class="c1"></span><span class="p">},</span> <span class="mi">0</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>只要把 hackData 传给 new Vue 就会马上对 hackData 进行篡改</p>
<ul>
<li>hackData上原本的数据 n 会消失，取而代之的是 get n、set n（虚拟数据）</li>
<li>关键点就在两个 log 上发现蛛丝马迹（这种研究方法很重要）</li>
</ul>
</blockquote>
<h2 id="监听存在的问题vue-的-bug">监听存在的问题（Vue 的 bug）📌</h2>
<blockquote>
<p>（面试可能会问哦）</p>
<p>我们已知：数据应提前在 data 中定义好才能使用。如果在 data 外动态的添加新的数据，或引用没有定义在 data 的数据，会怎样呢 ？</p>
</blockquote>
<h3 id="情景一引用未定义的数据会怎样">情景一：引用未定义的数据会怎样</h3>
<blockquote>
<p>Vue 实例的 data 中没有定义 n ，但又在视图中使用 n，会怎么样</p>
</blockquote>
<p><a href="https://codesandbox.io/s/empty-field-ofmwn" target="_blank" rel="noopener noreffer">代码示例</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
  <span class="nx">data</span><span class="o">:</span> <span class="p">{},</span>
  <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span><span class="sb">    &lt;div&gt;{{n}}&lt;/div&gt;
</span><span class="sb">  `</span>
<span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s2">&#34;#app&#34;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>在视图中使用未在 data 中定义的数据，Vue 会给出一个警告报错 <code>[Vue warn]</code></p>
</blockquote>
<ul>
<li>
<p>数据没有传入实例的 data 中，就无法实现监听数据变化，不监听就不能实现刷新视图，违背数据响应式原则</p>
<p></p>
</li>
</ul>
<h4 id="解决办法">解决办法</h4>
<blockquote>
<p>必须在 data 中把 n 提前声明好</p>
</blockquote>
<blockquote>
<p>由于 Vue <strong>不允许动态添加根级响应式 property</strong>，所以你必须在初始化实例前声明所有根级响应式 property，哪怕只是一个空值（<a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E5%A3%B0%E6%98%8E%E5%93%8D%E5%BA%94%E5%BC%8F-property" target="_blank" rel="noopener noreffer">文档</a>）</p>
</blockquote>
<p><a href="https://codesandbox.io/s/serverless-fast-hl420?file=/src/main.js" target="_blank" rel="noopener noreffer">在线代码</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">n</span><span class="o">:</span> <span class="mi">1</span> <span class="c1">// 👈👈👈 null、undefined..都不会报错
</span><span class="c1"></span>  <span class="p">},</span>
  <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span><span class="sb">		&lt;div&gt;{{n}}&lt;/div&gt;
</span><span class="sb">	`</span><span class="p">,</span>
<span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s2">&#34;#app&#34;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="情景二-动态添加对象属性在-data-外新增-key">情景二 ：动态添加对象属性（在 data 外新增 key）</h3>
<blockquote>
<p>需求：点击按钮，视图中显示 1</p>
</blockquote>
<p><a href="https://codesandbox.io/s/tender-leaf-8ogdx?file=/src/main.js" target="_blank" rel="noopener noreffer">代码示例</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">obj</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">a</span><span class="o">:</span> <span class="mi">0</span> <span class="c1">// obj.a 会被 Vue 监听、代理
</span><span class="c1"></span>    <span class="p">}</span>
  <span class="p">},</span>
  <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span><span class="sb">    &lt;div&gt;
</span><span class="sb">      obj.b：{{obj.b}}             
</span><span class="sb">      &lt;button @click=&#34;set&#34;&gt;赋值&lt;/button&gt;
</span><span class="sb">    &lt;/div&gt;
</span><span class="sb">  `</span><span class="p">,</span>
  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">set</span><span class="p">()</span> <span class="p">{</span>             
      <span class="k">this</span><span class="p">.</span><span class="nx">obj</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1">// 请问，页面中会显示 1 吗？
</span><span class="c1"></span>    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s2">&#34;#app&#34;</span><span class="p">)</span> 
</code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>请问，点击“赋值”按钮，视图中会显示 1 吗 ？</p>
</blockquote>
<ul>
<li>答案：不会显示 1。</li>
<li>因为 Vue 不能监听到未在 data 中定义的数据 <code>obj.b</code></li>
<li>但为什么引用未定义的 obj.b 没有警告报错呢 ？</li>
</ul>
<blockquote>
<p>情景一视图引用 data 中未定义的 n 会报错，那为什么情景二中引用未提前定义的 obj.b 却不会报错 ？</p>
</blockquote>
<ul>
<li>因为 Vue 的数据响应式是数据的<strong>根级响应</strong>。Vue 只会检查第一层属性，检查不到第一层属性内部定义的属性</li>
<li>也就是说，对于 <code>this.obj.b</code>，Vue 只会检查 data 中是否有定义 <code>this.obj</code>，如果没有定义 obj 就会警告报错，但 Vue 不会再深层检验 obj 的内部属性</li>
<li><strong>情景二视图中虽然引用了未提前声明的 <code>obj.b</code>，但 Vue 会检查到 <code>obj </code>已经在 data 中提前声明了，所以此处的引用不会报错，但也不会生效，因为 <code>b</code> 确实没有在 data 中声明。</strong></li>
<li>综上，情景二的这种用法，仅是不报错而已，但也并不会渲染出视图</li>
</ul>
<h4 id="解决办法-1">解决办法</h4>
<blockquote>
<p>使用 Vue.set 或者 this.$set，为已有对象添加新的属性（<a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E5%AF%B9%E4%BA%8E%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreffer">文档</a>）</p>
</blockquote>
<p><a href="https://codesandbox.io/s/rough-darkness-wh3mw?file=/src/main.js" target="_blank" rel="noopener noreffer">在线代码</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">obj</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">a</span><span class="o">:</span> <span class="mi">0</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span><span class="sb">    &lt;div&gt;
</span><span class="sb">      obj.b：{{obj.b}}
</span><span class="sb">      &lt;button @click=&#34;set&#34;&gt;赋值&lt;/button&gt;
</span><span class="sb">    &lt;/div&gt;
</span><span class="sb">  `</span><span class="p">,</span>
  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">set</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">Vue</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">obj</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>       <span class="c1">// 👈👈👈 
</span><span class="c1"></span>      <span class="c1">// this.$set(this.obj, &#39;b&#39;, 1)  // 👈👈👈
</span><span class="c1"></span>      <span class="c1">// 两种写法没有区别（是同一个函数）
</span><span class="c1"></span>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Vue</span><span class="p">.</span><span class="nx">set</span> <span class="o">===</span> <span class="k">this</span><span class="p">.</span><span class="nx">$set</span><span class="p">)</span> <span class="c1">// true (加$是为防止data中有同名属性set)
</span><span class="c1"></span>    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s2">&#34;#app&#34;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="vueset-和-thisset-执行了哪些操作">Vue.set 和 this.$set 执行了哪些操作</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">Vue</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>  <span class="c1">// 往obj中新增一个key属性
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>新增 key</li>
<li>对 key 自动创建代理和监听（如果没有创建过）</li>
<li>触发 UI 更新（但并不会立刻更新 —— 异步更新，这块内容值得单独写一篇博客了）
<ul>
<li>执行 UI 更新是 Vue 做的，set 只会触发 Vue 来执行更新</li>
</ul>
</li>
</ul>
<p><a href="https://codesandbox.io/s/youthful-swanson-yz7pm?file=/src/main.js" target="_blank" rel="noopener noreffer">示例演示</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">obj</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">a</span><span class="o">:</span> <span class="mi">0</span>  <span class="c1">// 👈
</span><span class="c1"></span>    <span class="p">}</span>
  <span class="p">},</span>
  <span class="nx">template</span><span class="o">:</span> <span class="sb">` 
</span><span class="sb">    &lt;div&gt;
</span><span class="sb">      {{obj.b}} 👈
</span><span class="sb">      &lt;button @click=&#34;setB&#34;&gt;set b&lt;/button&gt; 👈
</span><span class="sb">      &lt;button @click=&#34;addB&#34;&gt;add b&lt;/button&gt; 👈
</span><span class="sb">    &lt;/div&gt;
</span><span class="sb">  `</span><span class="p">,</span>
  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">setB</span><span class="p">()</span> <span class="p">{</span>
       <span class="nx">Vue</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">obj</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">// 👈👈   // 或 this.$set(this.obj, &#39;b&#39;, 1)
</span><span class="c1"></span>    <span class="p">},</span>
    <span class="nx">addB</span><span class="p">(){</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">obj</span><span class="p">.</span><span class="nx">b</span> <span class="o">+=</span> <span class="mi">1</span>  <span class="c1">// 👈👈
</span><span class="c1"></span>    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s2">&#34;#app&#34;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="情景三data-中的数组如何处理">情景三：data 中的数组如何处理？</h3>
<blockquote>
<p>有没有某种情况是「没办法把 key 提前在 data 中声明好」的</p>
<ul>
<li>有，如果数据是一个数组类型，就无法提前把所有元素声明好</li>
<li>Vue 中的数组，可以理解成对象的形式（具体见下）</li>
</ul>
</blockquote>
<h4 id="尝试动态添加数组元素">尝试：动态添加数组元素</h4>
<blockquote>
<p><a href="https://codesandbox.io/s/proud-worker-xwyoo" target="_blank" rel="noopener noreffer">示例</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">array</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">,</span> <span class="s2">&#34;c&#34;</span><span class="p">]</span>
  <span class="p">},</span>
  <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span><span class="sb">    &lt;div&gt;
</span><span class="sb">      {{array}}
</span><span class="sb">      &lt;button @click=&#34;setD&#34;&gt;set d&lt;/button&gt;
</span><span class="sb">    &lt;/div&gt;
</span><span class="sb">  `</span><span class="p">,</span>
  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">setD</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;d&#34;</span>  <span class="c1">// 请问，页面中会显示 &#39;d&#39; 吗 ？ 答：不会
</span><span class="c1"></span>    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s2">&#34;#app&#34;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>如上代码，点击 button 按钮，往数组中添加一个元素，毫无反应，为什么会这样呢 ？</p>
<ul>
<li>分析：数组 <code>array: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code> 理解成对象的形式 👇</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="mi">0</span><span class="o">:</span> <span class="s2">&#34;a&#34;</span><span class="p">,</span>
  <span class="mi">1</span><span class="o">:</span> <span class="s2">&#34;b&#34;</span><span class="p">,</span>
  <span class="mi">2</span><span class="o">:</span> <span class="s2">&#34;c&#34;</span><span class="p">,</span>
  <span class="nx">length</span><span class="o">:</span> <span class="mi">3</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>data 中的数据 array，相当于在 data 中声明了 0、1、2 三个属性</p>
<ul>
<li>往数组（对象）中新增元素，相当于[情景二](# 情景二 ：动态添加对象属性（在 data 外新增 key）)「在 data 外新增 key，动态添加对象属性，Vue 无法监听到该属性」</li>
<li>所以 <code>this.array[3] = &quot;d&quot;</code> 是无效的</li>
</ul>
</blockquote>
<p>综合「情景一、情景二」，对于「引用未声明的数据」或「动态添加对象属性」给出解决办法：</p>
<ul>
<li>方案一：视图中直接引用的根级属性，必须在 data 中提前声明</li>
<li>方案二：动态添加对象属性，需用 set 方法</li>
</ul>
<blockquote>
<p>如果采用方案一：提前在数组中定义数据</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">data</span><span class="o">:</span><span class="p">{</span>
  <span class="nx">array</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="p">...]</span> 
<span class="p">},</span>
<span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
  <span class="nx">setD</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;d&#34;</span>  
    <span class="c1">// 虽然可行，但无法预知有多少个 key、需要对应多少个 undefined
</span><span class="c1"></span>    <span class="c1">// 所以这种「提前把 key 都写到 array 」的方案不可取
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>数组的长度可以一直增加（下标就是 key），不可能提前预知有多少个 key（如果这个数组是所有用户的列表），我们不可能提前把数组的 key 都声明出来</li>
</ul>
<blockquote>
<p>如果采用方案二：不能提前声明，那就使用 Vue.set 或者 this.$set</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">this</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">)</span>
<span class="c1">// set(Array, Index, value)
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>通过 set 新增数组 key，这是可行的方案。但每次添加新元素都要执行 set，比较繁琐</li>
</ul>
<ul>
<li>有更简单的办法吗 ？</li>
</ul>
<h4 id="尤雨溪的做法">尤雨溪的做法</h4>
<blockquote>
<p>测试：既然是数组，可以用数组方法 push 添加元素吗？</p>
<p>结果：可以，push 生效</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">this</span><span class="p">.</span><span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">array</span><span class="p">)</span> <span class="c1">// 看看 vue 里的 push 
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>疑惑：为什么直接添加元素会失败，但 push 添加元素却成功呢 ？</p>
<p>原因：Vue 里的 push 方法，已经不是数组原型上的 push 方法了（如下图 ）</p>
</blockquote>
<p></p>
<blockquote>
<p>如图，array 看起来是普通数组，但当我们把 array 传给 Vue 之后，Vue 会篡改这个数组，往中间插入一层原型，原型上有 7 个方法。此 7 法与数组原型上的方法<strong>同名</strong>（代码被修改），调用时就会覆盖原型方法</p>
</blockquote>
<p>7 个新的 api 会执行两个操作</p>
<ul>
<li>
<p>首先，新 api 会调用「旧 api」方法</p>
</li>
<li>
<p>然后，往数组上添加「监听&amp;代理」</p>
</li>
</ul>
<blockquote>
<p>总结</p>
<ul>
<li><strong>尤雨溪（Vue）篡改了数组的 API</strong> （Vue 文档中「<a href="https://cn.vuejs.org/v2/guide/list.html#%E5%8F%98%E5%BC%82%E6%96%B9%E6%B3%95-mutation-method" target="_blank" rel="noopener noreffer">变异方法</a>」章节有解释）</li>
<li>这 7 个 API 都会被 Vue 篡改，调用后会更新 UI</li>
</ul>
</blockquote>
<p>​</p>
<h4 id="具体是怎么篡改的呢-">具体是怎么篡改的呢 ？📌</h4>
<blockquote>
<p>尤雨溪的思路：就是插入一层原型，原型上有 7 个方法</p>
<ul>
<li>下面就是「模拟」篡改代码（怎么插入一层原型）</li>
</ul>
</blockquote>
<h5 id="es6-写法">ES6 写法</h5>
<h6 id="demo-测试">demo 测试</h6>
<blockquote>
<p>通过继承的思路，实现添加一层原型</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">VueArray</span> <span class="kr">extends</span> <span class="nb">Array</span> <span class="p">{</span> 
  <span class="c1">// 当前 VueArray 继承于 Array ，意思就是 VueArray 在 Array原型 的前面
</span><span class="c1"></span>  <span class="nx">push</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 表示在 VueArray 上声明一个 push 作为共有属性，会放在 VueArray 的 _proto_ 上
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;args&#34;</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;arguments&#34;</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;...args&#34;</span><span class="p">,</span> <span class="p">...</span><span class="nx">args</span><span class="p">)</span>
    
    <span class="kr">super</span><span class="p">.</span><span class="nx">push</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span>  <span class="c1">// 表示执行 VueArray 的 push 时，会先调用 Array 上的原生 push 方法
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;你 push 了&#39;</span><span class="p">)</span> 
  <span class="p">}</span>
<span class="p">}</span>
<span class="kr">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VueArray</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mf">2.3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="c1">// 往数组添加元素5，同时执行log
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>这样写的作用是</p>
<ul>
<li><strong>当我们执行 VueArray 的 push 方法时，效果与原生的 push 一样，但还会多执行一个 console.log</strong></li>
<li>第一层原型上只有一个 push 方法，第二层原型才是 Array 的原型</li>
</ul>
</blockquote>
<h6 id="模拟完整逻辑-">模拟完整逻辑 📌</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">VueArray</span> <span class="kr">extends</span> <span class="nb">Array</span><span class="p">{</span> 
  <span class="nx">push</span><span class="p">(...</span><span class="nx">args</span><span class="p">){</span>
    <span class="kr">const</span> <span class="nx">oldLength</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span>  <span class="c1">// this 就是当前数组（指代new出来的数组实例）记录下旧数组的长度
</span><span class="c1"></span>    <span class="kr">super</span><span class="p">.</span><span class="nx">push</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="c1">// push之后，this.length 已经更新
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;你 push 了&#39;</span><span class="p">)</span> 
    
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">oldLength</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
      <span class="nx">Vue</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="k">this</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>  
      <span class="c1">// 将每个新增的 key 都告诉 Vue ，Vue 得知数据变化、需要添加代理&amp;监听、更新视图啦 
</span><span class="c1"></span>    <span class="p">}</span> 
  <span class="p">}</span>
<span class="p">}</span>
<span class="kr">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VueArray</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注：此代码仅用于逻辑理解。实际上这种实现方式是比较低效的、不代表 Vue 的真实实现。</p>
<p>实际上 frank 没看过相关源代码（但尤雨溪的大概思路就是这样的）</p>
</blockquote>
<h5 id="es5-写法---原型">ES5 写法 - 原型</h5>
<blockquote>
<p>ES5 代码，会比 ES6 更难理解（ES6 相当于给前端降低了门槛）</p>
<ul>
<li>实现：新插入一层原型，<strong>新原型的上层是实例、下层是数组的原型</strong></li>
<li>新原型上有 push 方法：执行一些开发者篡改的操作，然后再调用数组原型的 push 实现添加元素</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">vueArrayPrototype</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="nx">push</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span> 
    <span class="nx">console</span><span class="mf">.1</span><span class="nx">og</span><span class="p">(</span><span class="s1">&#39;你 push 了&#39;</span><span class="p">)</span> <span class="c1">// 这里添加的其他代码，都属于对 push 的篡改
</span><span class="c1"></span>    <span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">)</span> <span class="c1">// 透传
</span><span class="c1"></span>    <span class="c1">// 👆 用户给我传了什么，我把所有东西透透的传给「数组原型上的的push方法」
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">vueArrayPrototype</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// 把我的原型指向数组的原型，形成原型链
</span><span class="c1">// 上面这句话用的不是标准属性，仅学习使用 
</span><span class="c1"></span>
<span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">vueArrayPrototype</span><span class="p">)</span> <span class="c1">// 使用我写的新原型，创建出一个数组
</span><span class="c1"></span><span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> 
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>  <span class="c1">// 可以看到三层原型链效果：一层是对象本身、二层是新原型、三层是数组原型
</span><span class="c1"></span>
<span class="c1">// 如果看不懂就算了，反正面试官也看不懂
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h2 id="总结-1">总结</h2>
<h3 id="对象中新增的-key">对象中新增的 key</h3>
<ul>
<li>Vue 没有办法事先监听和代理（导致 key 的变化完全不会影响 UI）</li>
<li>要<strong>使用 set</strong> 来新增 key，创建监听和代理，更新 UI</li>
<li>最好提前把属性都写出来，不要新增 key</li>
<li>注意：数组做不到「提前把 key 属性写好」</li>
</ul>
<h3 id="数组中新增的-key">数组中新增的 key</h3>
<ul>
<li>数组可用 set 来新增 key，更新 UI
<ul>
<li>this.$set 作用于数组时，并不会自动添加监听和代理，原因未知（只能问尤雨溪了）
<ul>
<li>可以测试看看，set 了之后再用 <code>this.array[n] += 1</code> 是否会触发 UI 更新（答案是不会）</li>
</ul>
</li>
<li>使用 Vue 提供的数组变异 API 时，会自动添加监听和代理</li>
</ul>
</li>
<li>不过尤雨溪篡改了 7 个 API 方便开发者对数组进行<strong>增删</strong>
<ul>
<li>增，因为 Vue 无法监听到，所以需要修改代码，使 Vue 可以监听到</li>
<li>删，虽然 Vue 已监听到了，但原生 API 直接删除，Vue 是不知道的，就会有多余的监听器，浪费内存，所以删除的 API 也修改一下，实现同时把监听器删除</li>
<li>改、查：这两个操作肯定发生在 Vue 监听的环境中，不需要再帮 Vue 搞额外的处理，直接用原生 API 即可</li>
</ul>
</li>
<li>这 7 个 API 会自动处理监听和代理，并（异步的）更新 UI
<ul>
<li>push、pop、shift、unshift、splice、sort、reverse</li>
<li>前 5 个是必要的，后 2 个可能是为了方便才提供的，用处不算大，当然如果有需求还是使用 Vue 提供的 API，效率更高一些</li>
</ul>
</li>
</ul>]]></description>
</item><item>
    <title>深入理解 Vue 完整版与非完整版</title>
    <link>https://liubingxuan.xyz/vue-compiler-included-vs-runtime-only/</link>
    <pubDate>Wed, 23 Dec 2020 23:32:52 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://liubingxuan.xyz/vue-compiler-included-vs-runtime-only/</guid>
    <description><![CDATA[<h2 id="深入理解两种区别">深入理解两种区别</h2>
<blockquote>
<p>Vue 完整版</p>
<p>Vue 非完整版（运行版）</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th>Vue 完整版</th>
<th>Vue 非完整版（运行版）</th>
<th>评价（区别）</th>
</tr>
</thead>
<tbody>
<tr>
<td>特点</td>
<td>有 compiler</td>
<td>没有 compiler</td>
<td>compiler 占 40% 体积</td>
</tr>
<tr>
<td>视图</td>
<td>写在 HTML 里<br />或者写在 template 选项</td>
<td>写在 render 函数里<br />用 h 来创建标签</td>
<td>h 是尤雨溪写好传给 render 的</td>
</tr>
<tr>
<td>CDN 引入</td>
<td>vue.js</td>
<td>vue.runtime.js</td>
<td>文件名不同，生产环境后缀为 .min.js</td>
</tr>
<tr>
<td>webpack 引入</td>
<td>需要配置 alias</td>
<td>默认使用此版</td>
<td>尤雨溪配置的</td>
</tr>
<tr>
<td>@vue/cli 引入</td>
<td>需要额外配置</td>
<td>默认使用此版</td>
<td>尤雨溪、蒋豪群配置的</td>
</tr>
</tbody>
</table>
<h3 id="特点">特点</h3>
<blockquote>
<p>「完整版」有 compiler，「非完整版」没有 compiler</p>
</blockquote>
<ul>
<li>compiler 编译器，有编译 HTML 的功能，这个功能很复杂、占空间</li>
<li>导致「完整版」比「非完整版」大 40% 的体积</li>
</ul>
<h3 id="视图">视图</h3>
<blockquote>
<p>比如要写一个 button</p>
</blockquote>
<ul>
<li>
<p>使用「完整版」，button 可以写在 HTML 里或者写在 template 选项里</p>
</li>
<li>
<p>使用「非完整版」，只能写在 render 函数里。用 render 函数的参数 h 函数来创建标签</p>
</li>
<li>
<p>h 是尤雨溪写好并传给 render 的，所以开发者可以获取到这个 h 函数。</p>
<ul>
<li>注意：因为 h 函数是作为 render 函数的参数传递进来的，所以参数名 h 可以任意修改，但 vue 文档里用的是 h，所以推荐不要修改，仍使用 h 作为函数名</li>
</ul>
</li>
</ul>
<h3 id="引入">引入</h3>
<h4 id="通过-cdn-引入">通过 CDN 引入</h4>
<blockquote>
<p>在 index.html，通过 script 标签引入</p>
<p><a href="https://cn.vuejs.org/v2/guide/installation.html#%E7%9B%B4%E6%8E%A5%E7%94%A8-lt-script-gt-%E5%BC%95%E5%85%A5" target="_blank" rel="noopener noreffer">官方文档</a>：用 <code>&lt;script&gt;</code> 标签引入，Vue 会被注册为一个全局变量</p>
</blockquote>
<ul>
<li>文件名为  vue.js，表示「完整版」</li>
<li>文件名为  vue.runtime.js，表示「非完整版」</li>
<li>如果要上线部署（生产环境），需要使用后缀为 .min.js 的文件
<ul>
<li>.min.js 是去掉注释、代码压缩之后的版本，体积更小</li>
<li>vue.min.js 和 vue.runtime.min.js</li>
</ul>
</li>
</ul>
<p>​</p>
<h4 id="通过-webpack-引入">通过 webpack 引入</h4>
<blockquote>
<p>用 webpack 引入 vue 的配置，比较麻烦</p>
</blockquote>
<blockquote>
<p>通过 webpack 引入，默认使用「非完整版」（这是尤雨溪配置的）</p>
</blockquote>
<p>如果想通过 webpack 引入「完整版」，可以参考</p>
<ul>
<li>⚠️ <a href="https://cn.vuejs.org/v2/guide/installation.html?#%E8%BF%90%E8%A1%8C%E6%97%B6-%E7%BC%96%E8%AF%91%E5%99%A8-vs-%E5%8F%AA%E5%8C%85%E5%90%AB%E8%BF%90%E8%A1%8C%E6%97%B6" target="_blank" rel="noopener noreffer">Vue 安装文档</a> 、<a href="https://webpack.js.org/configuration/resolve/#resolvealias" target="_blank" rel="noopener noreffer">webpack 文档</a></li>
<li>⭕️ <a href="https://www.jianshu.com/p/fb265cdb920b" target="_blank" rel="noopener noreffer">webpack 引入 Vue 的两种方式</a></li>
</ul>
<p>​</p>
<h4 id="通过-vuecli-引入">通过 @vue/cli 引入</h4>
<blockquote>
<p>通过 @vue/cli 创建的项目，默认使用「非完整版」（这是尤雨溪、蒋豪群配置的）</p>
</blockquote>
<p>如果想引入「完整版」，可以参考</p>
<ul>
<li>⚠️<a href="https://cli.vuejs.org/zh/guide/webpack.html#%E7%AE%80%E5%8D%95%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F" target="_blank" rel="noopener noreffer">Vue Cli webpack 文档</a></li>
<li>⭕️ <a href="https://github.com/vuejs/vue-cli/issues/2398" target="_blank" rel="noopener noreffer">Issues：how to set alias</a>、<a href="https://github.com/Yatoo2018/webpack-chain/tree/zh-cmn-Hans#%E9%85%8D%E7%BD%AE-resolve-%E5%88%AB%E5%90%8D" target="_blank" rel="noopener noreffer">chainWebpack 文档</a>、<a href="https://www.jianshu.com/p/0c4260120c2b" target="_blank" rel="noopener noreffer">Vue脚手架中配置别名📌</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// vue.config.js
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;path&#34;</span><span class="p">)</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="c1">// 方法一
</span><span class="c1"></span>  <span class="nx">chainWebpack</span><span class="o">:</span> <span class="nx">config</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">resolve</span><span class="p">.</span><span class="nx">alias</span>
      <span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&#34;vuehaha&#34;</span><span class="p">,</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="s2">&#34;./node_modules/vue/dist/vue.esm.js&#34;</span><span class="p">))</span> 
    	<span class="c1">// 给「vue完整版」取个别名，&#34;vuehaha&#34;（慎用符号）
</span><span class="c1"></span>  <span class="p">}</span>
  <span class="c1">// 方法二
</span><span class="c1"></span>  <span class="c1">// configureWebpack: {
</span><span class="c1"></span>  <span class="c1">//   resolve: {
</span><span class="c1"></span>  <span class="c1">//     alias: {
</span><span class="c1"></span>  <span class="c1">//       &#34;vuehaha&#34;: path.resolve(&#34;./node_modules/vue/dist/vue.esm.js&#34;)
</span><span class="c1"></span>  <span class="c1">//     }
</span><span class="c1"></span>  <span class="c1">//   }
</span><span class="c1"></span>  <span class="c1">// }
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// main.js 入口文件
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s2">&#34;vuehaha&#34;</span>  <span class="c1">// 👈👈👈
</span><span class="c1"></span><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
  <span class="nx">el</span><span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
  <span class="c1">// 👇 完整版，可以「从index.html中」or「从template选项中」直接获取视图
</span><span class="c1"></span>  <span class="nx">template</span><span class="o">:</span><span class="sb">`
</span><span class="sb">	&lt;div&gt;
</span><span class="sb">      {{n}}
</span><span class="sb">      &lt;button @click=&#34;add&#34;&gt;+1&lt;/button&gt;
</span><span class="sb">  	&lt;/div&gt;
</span><span class="sb">	`</span><span class="p">,</span>
  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="nx">n</span><span class="o">:</span> <span class="mi">0</span> <span class="p">},</span>
  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">add</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">n</span> <span class="o">+=</span> <span class="mi">1</span> <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="template-和-render">template 和 render</h3>
<blockquote>
<p>template 和 render 总是二选一使用。如果二者同时使用，必然有一个会失效</p>
</blockquote>
<ul>
<li>template 是给「Vue 完整版」使用的
<ul>
<li>完整版必须要写 html 字符串，可以写到 template 选项里，也可以写到 HTML 文件里</li>
</ul>
</li>
<li>render 是给「Vue 非完整版」使用的
<ul>
<li>非完整版必须要写 render 函数</li>
</ul>
</li>
</ul>
<p>​</p>
<h2 id="vue-实例的使用">Vue 实例的使用</h2>
<blockquote>
<p>需求：实现点击按钮加一。实现四种方案下的 Demo</p>
</blockquote>
<h3 id="方案一">方案一</h3>
<blockquote>
<p>CDN 引入 Vue 完整版（vue.js 或 vue.min.js）</p>
<ul>
<li>包含编译器 compiler，视图可以直接从 HTML 里 或者 template 选项里获取</li>
<li><a href="https://cn.vuejs.org/v2/guide/installation.html#%E6%9C%AF%E8%AF%AD" target="_blank" rel="noopener noreffer">官方文档</a> —— 编译器：用来将模板字符串编译成为 JavaScript 渲染函数的代码</li>
</ul>
</blockquote>
<blockquote>
<p><strong><a href="https://codesandbox.io/s/beautiful-nobel-hdhj4?file=/src/main.js" target="_blank" rel="noopener noreffer">在线示例</a>：HTML</strong></p>
<p><strong><a href="https://codesandbox.io/s/youthful-night-h7jiq?file=/src/main.js" target="_blank" rel="noopener noreffer">在线示例</a>：template</strong></p>
</blockquote>
<h3 id="方案二">方案二</h3>
<blockquote>
<p>CDN 引入 Vue 非完整版（vue.runtime.js 或 vue.runtime.min.js）</p>
<ul>
<li>没有编译器，无法编译 HTML，只能从 JS 构建视图</li>
<li>开发者需书写 render 函数（ h 构建方法 ）<a href="https://cn.vuejs.org/v2/guide/installation.html#%E8%BF%90%E8%A1%8C%E6%97%B6-%E7%BC%96%E8%AF%91%E5%99%A8-vs-%E5%8F%AA%E5%8C%85%E5%90%AB%E8%BF%90%E8%A1%8C%E6%97%B6" target="_blank" rel="noopener noreffer">官方文档</a></li>
<li>h 构建方法的代码非常复杂，所以不建议使用这种方案</li>
</ul>
</blockquote>
<blockquote>
<p><strong><a href="https://codesandbox.io/s/quizzical-swirles-vn4w1?file=/src/main.js" target="_blank" rel="noopener noreffer">在线示例</a></strong></p>
</blockquote>
<h3 id="方案三">方案三</h3>
<blockquote>
<p>CDN 引入 Vue 非完整版，配合 Vue Loader（<a href="https://vue-loader.vuejs.org/zh/#vue-loader-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F" target="_blank" rel="noopener noreffer">官方文档</a>）和 .vue 文件</p>
<ul>
<li>Vue Loader 可以把一个<strong>单独的 .vue 文件</strong>翻译成一个对象，对象包含 render 函数（h 构建方法）</li>
<li>开发者可以在不写 h 函数的基础上，得到 h 函数</li>
</ul>
</blockquote>
<blockquote>
<p>Vue Loader 是 webpack 的 loader，它允许你以一种名为<strong>单文件组件 (SFCs)</strong> 的格式撰写 Vue 组件</p>
<ul>
<li>这就是 webpack 为前端带来的可能。允许以任意形式（如 .vue 文件）组织一个对象，只要最后能通过一个 loader 把它还原成这个对象即可</li>
</ul>
</blockquote>
<blockquote>
<p><strong><a href="https://codesandbox.io/s/relaxed-tdd-bjums?file=/src/Demo.vue" target="_blank" rel="noopener noreffer">在线示例</a></strong></p>
</blockquote>
<p>​</p>
<h3 id="最优方案--方案三">最优方案 — 方案三</h3>
<blockquote>
<p>最佳实践：<strong>总是使用非完整版，然后配合 vue-loader 和 .vue 文件</strong></p>
<ul>
<li>vue-loader 用于加载/翻译 .vue 文件</li>
</ul>
</blockquote>
<p>具体思路（为什么说这个是最优方案）</p>
<ol>
<li>
<p>保证用户体验，用户下载的 JS 文件体积更小，但<strong>只支持 h 函数</strong></p>
</li>
<li>
<p>保证开发体验，开发者可直接在 vue 文件里写 HTML 标签，而<strong>不写 h 函数</strong></p>
</li>
<li>
<p>脏活让 loader 做，vue-loader 会把 .vue 文件里开发者写的 HTML <strong>转为 h 函数</strong></p>
<ul>
<li>开发者可以在不写 h 函数的基础上 ,（通过 vue-loader）得到 h 函数</li>
<li>既保证了开发体验，又保证了用户体验</li>
<li>ps：把所有细节<strong>封装</strong>到一个（类、函数、插件…）里，这就是工程师要做的</li>
</ul>
</li>
</ol>
<p>​</p>
<h2 id="在线搭建-vue-项目">在线搭建 Vue 项目</h2>
<p>通常，我们会使用 @vue/cli 创建 vue 项目（sh ：vue create xxx-demo）</p>
<p>但还有另一种更方便的方式 —— <a href="https://codesandbox.io/" target="_blank" rel="noopener noreffer">codesandbox.io</a></p>
<blockquote>
<p>CodeSandbox 是一个在线的代码编辑器，主要聚焦于创建 Web 应用项目。可以把它看作是一个浏览器端的沙盒运行环境，支持多种流行的构建模板，例如 create-react-app、 vue-cli、parcel 等等。 可以用于快速原型开发、DEMO 展示、Bug 还原等等。</p>
</blockquote>
<ul>
<li>打开网址，点击 create sandbox，选择 vue 图标，即可在线创建出一个 vue 项目（如下图）</li>
<li>在线项目支持下载 ZIP ，解压即用（不过通常都是测试 demo 也无需下载）</li>
</ul>
<p></p>
<blockquote>
<p><strong>提示</strong></p>
<p><a href="https://codesandbox.io/" target="_blank" rel="noopener noreffer">codesandbox.io</a> 登录后只能创建 50 个项目</p>
<p>但不登录可以创建无限个（注意清理 cookie），所以不要登录（Do Not Sign In）😉</p>
</blockquote>]]></description>
</item><item>
    <title>浅析 MVC</title>
    <link>https://liubingxuan.xyz/mvc-what-is-mvc/</link>
    <pubDate>Sat, 12 Dec 2020 21:03:26 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://liubingxuan.xyz/mvc-what-is-mvc/</guid>
    <description><![CDATA[<h2 id="mvc-是啥">MVC 是啥</h2>
<blockquote>
<p>MVC 是一种非常出名的架构模式（设计模式）。</p>
<p>如何设计一个程序的结构，这是一门专门的学问，叫做架构模式（architectural pattern），属于编程的方法论。</p>
</blockquote>
<p>MVC，将代码分为三个模块，写成三个对象</p>
<ul>
<li>M - Model（数据模型）负责操作所有数据</li>
<li>V - View（视图）负责所有 UI 界面</li>
<li>C - Controller（控制器）负责其他</li>
</ul>
<p>MVC 没有严格的定义，每个程序员对 MVC 的理解都可能存在分歧，唯一统一的就是对 M / V / C 三个单词的认知</p>
<blockquote>
<p>使用 MVC 模式的目的，简单来说就是希望 <strong>通过将代码分离以提高代码的灵活性和复用性</strong>。</p>
</blockquote>
<h3 id="mvc-伪代码">MVC 伪代码</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 数据层，关于数据的操作放在这里
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">m</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="c1">// 数据初始化
</span><span class="c1"></span>    <span class="nx">n</span><span class="o">:</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">100</span><span class="p">)</span>  
  <span class="p">},</span>
  <span class="nx">update</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/*更新数据*/</span> <span class="p">},</span>
  <span class="k">delete</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/*删除数据*/</span> <span class="p">},</span>
  <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/*获得数据*/</span> <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 视图层，关于视图的操作放在这里
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">v</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;挂载点（容器）&#39;</span><span class="p">,</span>
  <span class="nx">html</span><span class="o">:</span> <span class="s1">&#39;需要插入元素内的HTML内容&#39;</span><span class="p">,</span>
  <span class="nx">render</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span> <span class="cm">/*（获取数据）渲染html视图*/</span> <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 控制层，关于事件监听的放到这里
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="c1">// 找到重要的元素绑定事件
</span><span class="c1"></span>  <span class="c1">// 如果触发事件调用更改数据方法及渲染方法
</span><span class="c1"></span>  <span class="nx">a</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;找到a&#39;</span><span class="p">),</span>
  <span class="nx">b</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;找到b&#39;</span><span class="p">),</span>
  <span class="nx">c</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;找到c&#39;</span><span class="p">),</span>
  <span class="nx">bindEvents</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>   <span class="c1">// bindEvents 在 render 时执行
</span><span class="c1"></span>    <span class="nx">a</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
      <span class="c1">// 调用数据层方法更改数据
</span><span class="c1"></span>      <span class="c1">// 调用视图层方法渲染页面
</span><span class="c1"></span>    <span class="p">})</span>
    <span class="nx">b</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span><span class="cm">/**/</span><span class="p">})</span>
    <span class="nx">b</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span><span class="cm">/**/</span><span class="p">})</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="为什么用-mvc">为什么用 MVC</h3>
<blockquote>
<p>对于「惯用简单、朴素的思想（监听事件、改变DOM元素）来写代码」的人来说，可能认为「改用 MVC 的方式去实现某个功能」会更复杂、麻烦</p>
</blockquote>
<ul>
<li>虽然朴素的代码逻辑没有什么问题，但如果代码量增大，功能相似的代码可能出现大量重复，后期维护会非常麻烦，而且还存在变量污染的可能。这样的代码复用性很低。</li>
<li>套用 MVC 架构的过程虽然麻烦、需要很多调试，但是后期维护成本低。每一部分代码都以一个对象（模块）的方式储存在一个独立的空间，负责某一项功能，我们更容易找到对应代码，并且在其内部修改不会对外部的代码造成很大影响</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 找到重要的元素
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">$button1</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#add1&#34;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">$button2</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#minus1&#34;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">$button3</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#mul2&#34;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">$button4</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#divide2&#34;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">$number</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#number&#34;</span><span class="p">)</span>
<span class="c1">// 获得数据
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">)</span>
<span class="nx">$number</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">n</span> <span class="o">||</span> <span class="mi">100</span><span class="p">)</span>

<span class="c1">// 监听事件，改变数据
</span><span class="c1"></span><span class="nx">$button1</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>  <span class="c1">// 加1
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">$number</span><span class="p">.</span><span class="nx">text</span><span class="p">())</span>
  <span class="nx">n</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
  <span class="nx">$number</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
<span class="p">})</span>
<span class="nx">$button2</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>  <span class="c1">// 减1
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">$number</span><span class="p">.</span><span class="nx">text</span><span class="p">())</span>
  <span class="nx">n</span> <span class="o">-=</span> <span class="mi">1</span>
  <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
  <span class="nx">$number</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
<span class="p">})</span>
<span class="nx">$button3</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>  <span class="c1">// 乘2
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">$number</span><span class="p">.</span><span class="nx">text</span><span class="p">())</span>
  <span class="nx">n</span> <span class="o">*=</span> <span class="mi">2</span>
  <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
  <span class="nx">$number</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
<span class="p">})</span>
<span class="nx">$button4</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>  <span class="c1">// 除2
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">$number</span><span class="p">.</span><span class="nx">text</span><span class="p">())</span>
  <span class="nx">n</span> <span class="o">/=</span> <span class="mi">2</span>
  <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
  <span class="nx">$number</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="模块化">模块化</h2>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noopener noreffer">MDN：模块</a></p>
</blockquote>
<p>在项目中实现「模块化」，通俗来讲，就是创建多个 js 文件，把相关功能的代码聚集到同一个 js 文件中，这样就实现了模块化。</p>
<p>随着应用的功能不断增加，业务逻辑越来越复杂，代码也会变得更加复杂。如果仍将所有功能代码放在一个 js 文件中，不同功能的代码散乱一团难以查找辨别，可能起变量名都会变得非常费劲，最终导致代码的可读性、复用性极差，后期难以维护。</p>
<p>所以，为了保证「代码能有清晰的结构」、「方便查找某个功能对应的代码区」，我们依据功能不同，将代码拆分成不同的模块（文件），使各个模块之间实现「解耦」。</p>
<ul>
<li>解耦：每个模块的代码都独立存在，不需要依赖其他模块。（甚至一个模块用 Vue、一个用 React、一个用 jQuery 都没问题。只不过体积会大一点）</li>
<li>就像我们玩的积木一样，各个积木可以组合在一起形成一个形状，又可以拆分，又可以替换，因为各个积木块都是独立的，只要他们之间的接口（形状）匹配，就可以灵活地组合在一起，解耦就是为了逐渐达到这种理想的状态。</li>
</ul>
<p align="center"></p>
<p>划分模块的一个准则是「高内聚、低耦合」</p>
<ul>
<li>高内聚，是指一个软件模块是由相关性很强的代码组成，只负责一项任务，也就是常说的单一责任原则。</li>
<li>低耦合，是指模块之间的联系越少越好，接口越简单越好，实现低耦合，细线通信。</li>
<li>如果各个模块之间接口很复杂，说明功能划分有不合理之处、模块之间的耦合太高，同时也说明单个模块的内聚不高。</li>
</ul>
<p>​</p>
<h2 id="eventbus">EventBus</h2>
<h3 id="通信">通信</h3>
<blockquote>
<p>上面我们说了模块化，既然我们把每个功能都分成不同的模块（文件），那么问题来了 —— 如果文件 C 中检查到用户的操作，需要通知文件 M 修改数据，M 修改了数据需要通知文件 V 进行页面渲染怎么办？</p>
</blockquote>
<p>「eventBus」用于实现各个模块之间的通信</p>
<ul>
<li>eventBus 也是一种设计模式或者框架，主要用于组件/对象间通信的优化简化。</li>
<li>eventBus 包含很多方法，on 方法可以监听事件，trigger 方法可以触发事件，off 方法可以卸载监听</li>
<li>不管是 jQuery 还是 Vue 中都有类似于 eventBus 的存在，只不过叫法不一样，不过它们的功能是相似的，都是负责组件（模块）间的通信。</li>
</ul>
<blockquote>
<p>下面演示用 jQuery 生成的 eventBus</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 伪代码
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">$</span> <span class="nx">from</span> <span class="s1">&#39;jquery&#39;</span>
<span class="kr">const</span> <span class="nx">eventbus</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">)</span> <span class="c1">// 返回一个包含eventbus的所有方法的对象
</span><span class="c1"></span>
<span class="kr">const</span> <span class="nx">model</span> <span class="o">=</span> <span class="p">{</span> <span class="c1">// 数据层
</span><span class="c1"></span>  <span class="nx">data</span><span class="o">:</span><span class="p">{</span><span class="s1">&#39;数据&#39;</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span>
  <span class="nx">update</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span><span class="nx">data</span><span class="p">)</span> <span class="c1">// 更新数据
</span><span class="c1"></span>    <span class="nx">eventbus</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;更新数据&#39;</span><span class="p">)</span> <span class="c1">// 触发事件 
</span><span class="c1"></span>  <span class="p">}</span>

<span class="p">}</span>
<span class="kr">const</span> <span class="nx">view</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;挂载点&#39;</span><span class="p">,</span>
  <span class="nx">html</span><span class="o">:</span> <span class="s1">&#39;&lt;div&gt;{{内容}}&lt;/div&gt;&#39;</span><span class="p">,</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">container</span><span class="p">){</span>
    <span class="nx">view</span><span class="p">.</span><span class="nx">el</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">container</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">render</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
    <span class="nx">$</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">html</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;{{n}}&#39;</span><span class="p">,</span> <span class="nx">n</span><span class="p">)).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">el</span><span class="p">)</span> <span class="c1">// 更换新的(数据)内容，渲染进页面
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
<span class="kr">const</span> <span class="nx">control</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">container</span><span class="p">){</span>
    <span class="nx">view</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="nx">container</span><span class="p">)</span>  <span class="c1">// 拿到挂载点（元素容器）
</span><span class="c1"></span>    <span class="nx">view</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// 初始化页面
</span><span class="c1"></span>    <span class="nx">autoBindEvents</span><span class="p">()</span>
    <span class="nx">eventbus</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;更新数据&#39;</span><span class="p">,()</span> <span class="p">=&gt;</span> <span class="p">{</span> 
      <span class="c1">// 监听数据层的 eventbus.trigger
</span><span class="c1"></span>      <span class="c1">// 如果有被触发，说明数据有更新，从而进行渲染
</span><span class="c1"></span>      <span class="nx">view</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span>
    <span class="p">})</span>
  <span class="p">},</span>
  <span class="nx">add</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// 改变数据
</span><span class="c1"></span>    <span class="nx">m</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span><span class="nx">n</span><span class="o">:</span> <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">})</span>
  <span class="p">},</span>
  <span class="nx">minus</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// 改变数据
</span><span class="c1"></span>    <span class="nx">m</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span><span class="nx">n</span><span class="o">:</span> <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">})</span>
  <span class="p">},</span>
  <span class="nx">autoBindEvents</span><span class="p">()</span> <span class="p">{</span>  <span class="c1">// 监听改变数据的按钮
</span><span class="c1"></span>    <span class="nx">view</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;app1&#39;</span><span class="p">,</span> <span class="s1">&#39;add&#39;</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="eventbus-类">EventBus 类</h3>
<blockquote>
<p>当需求更复杂的时候（多个应用功能都须用到 eventBus），我们将 eventBus 单独写成一个类 EventBus.js</p>
<p>让生成的实例对象继承 EventBus，这样每个实例都拥有了可以触发和监听的功能，相当灵活</p>
</blockquote>
<blockquote>
<p>遵循「事不过三」原则</p>
<ul>
<li>同样的代码写三遍，就应该抽成一个函数</li>
<li>同样的属性写三遍，就应该做成【<strong>共用属性（原型或类）</strong>】</li>
<li>同样的原型写三遍，就应该用继承</li>
</ul>
<p>代价：有的时候会造成继承层级太深，无法一下看懂代码。可以通过写文档、画类图解决</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// EventBus.js
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">$</span> <span class="nx">from</span> <span class="s2">&#34;jquery&#34;</span>

<span class="kr">class</span> <span class="nx">EventBus</span> <span class="p">{</span>
  <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_eventBus</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="nx">on</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_eventBus</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="nx">trigger</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_eventBus</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="nx">off</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_eventBus</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">EventBus</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// app.js
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">EventBus</span> <span class="nx">from</span> <span class="s2">&#34;./base/EventBus.js&#34;</span>
<span class="kr">const</span> <span class="nx">e</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventBus</span><span class="p">()</span>
<span class="nx">e</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">)</span>          <span class="c1">// 触发 xxx 事件
</span><span class="c1"></span><span class="nx">e</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{...})</span>  <span class="c1">// 监听 xxx 事件，执行函数
</span><span class="c1"></span><span class="nx">e</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">)</span>              <span class="c1">// 删除 xxx 事件
</span></code></pre></td></tr></table>
</div>
</div><h4 id="类的继承">类的继承</h4>
<blockquote>
<p>遵循「事不过三」原则</p>
<ul>
<li>同样的代码写三遍，就应该抽成一个函数</li>
<li>同样的属性写三遍，就应该做成共用属性（原型或类）</li>
<li>同样的原型写三遍，就应该用【<strong>继承</strong>】</li>
</ul>
<p>代价：有的时候会造成继承层级太深，无法一下看懂代码。可以通过写文档、画类图解决</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// Model.js
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">EventBus</span> <span class="nx">from</span> <span class="s2">&#34;./EventBus&#34;</span>
<span class="kr">class</span> <span class="nx">Model</span> <span class="kr">extends</span> <span class="nx">EventBus</span> <span class="p">{</span>  <span class="c1">// extends 👈👈👈👈👈
</span><span class="c1"></span>  <span class="p">...</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// app.js
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">Model</span> <span class="nx">from</span> <span class="s2">&#34;./base/Model.js&#34;</span>
<span class="kr">const</span> <span class="nx">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Model</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">trigger</span><span class="p">)</span>
<span class="p">...</span>
</code></pre></td></tr></table>
</div>
</div><p align="center"></p>
<h3 id="vue-中的-eventbus">Vue 中的 EventBus</h3>
<blockquote>
<p>Vue 有没有继承 EventBus  ？ 答：有</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 验证
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">v</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
  <span class="p">...</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
<span class="c1">// 第一层是 Vue 赋予的属性
</span><span class="c1">// 第二层里有 $on（事件监听）、$emit（事件触发trigger） 、$off（取消监听）、$once ... 
</span><span class="c1">// 用 $ 开头，都是 Vue 内置的方法
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>由上可知， Vue 也可以做 eventBus</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// const eventBus = $(window)
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">eventBus</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">()</span>  
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">eventBus</span><span class="p">.</span><span class="nx">$on</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">eventBus</span><span class="p">.</span><span class="nx">$emit</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">eventBus</span><span class="p">.</span><span class="nx">$off</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p align="center"></p>
<p>​</p>
<h2 id="view--renderdata">view = render(data)</h2>
<blockquote>
<p>这个思维，引导了 React 的诞生</p>
</blockquote>
<ul>
<li>比起操作 DOM 对象，直接 render 更简单</li>
<li>只要改变 data，就可以得到对应的 view</li>
</ul>
<h3 id="代价">代价</h3>
<blockquote>
<p>render 粗扩的渲染肯定比 DOM 操作<strong>浪费性能</strong></p>
</blockquote>
<ul>
<li>
<p>例：用户切换到 tab 1，<strong>DOM 操作</strong>直接找到选中的 tab，添加 class 激活即可。</p>
<p>但 <strong>render 思维</strong>是在数据修改后，将当前元素容器全部移除，再依据新的数据重新渲染元素，肯定比之前更费性能</p>
</li>
<li>
<p>当然，render 的代价可以通过「虚拟 DOM」来弥补，让 render 只更新该更新的地方</p>
<ul>
<li>「虚拟 DOM」render 时，会对比第一次和第二次的区别，只有发生变化的地方才会重新 render</li>
</ul>
</li>
</ul>
<h3 id="图示-">图示 ⭕️</h3>
<blockquote>
<p>对比 DOM 操作和 render 思维</p>
<ul>
<li>黑字思路：数据从右边流向左边，最后再渲染回右边</li>
<li>绿字思路：数据永远保持在左边，最后被渲染到右边  ✔️✔️✔️
<ul>
<li>数据的流向更稳定</li>
</ul>
</li>
</ul>
</blockquote>
<p align="center"></p>
<h3 id="例">例</h3>
<h4 id="初步代码-">初步代码 💩</h4>
<blockquote>
<p>操作 DOM</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">container</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="nx">container</span><span class="p">)</span>
    <span class="nx">c</span><span class="p">.</span><span class="nx">bindEvents</span><span class="p">()</span> 
  <span class="p">},</span>
  <span class="nx">bindEvents</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="s2">&#34;#add1&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">()</span>
    <span class="p">})</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="s2">&#34;#minus1&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">-=</span> <span class="mi">1</span>
      <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">()</span>
    <span class="p">})</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="s2">&#34;#mul2&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">*=</span> <span class="mi">2</span>
      <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">()</span>
    <span class="p">})</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="s2">&#34;#divide2&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">/=</span> <span class="mi">2</span>
      <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">()</span>
    <span class="p">})</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kr">export</span> <span class="k">default</span> <span class="nx">c</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// main.js
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">x</span> <span class="nx">from</span> <span class="s2">&#34;./app1.js&#34;</span>   <span class="c1">// x 就是 c 的地址
</span><span class="c1"></span><span class="nx">x</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="s2">&#34;#app1&#34;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="c">&lt;!-- index.html --&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;page&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">section</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app1&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">section</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;main.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="转换">转换</h4>
<blockquote>
<p>改写为 「 view = render(data) 思维」</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">container</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="nx">container</span><span class="p">)</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// view = render(data) 第一次渲染
</span><span class="c1"></span>    <span class="nx">c</span><span class="p">.</span><span class="nx">autoBindEvents</span><span class="p">()</span>
  <span class="p">},</span>
  <span class="c1">// ... ,
</span><span class="c1"></span>  <span class="c1">// ... ,
</span><span class="c1"></span>  <span class="nx">bindEvents</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 事件委托
</span><span class="c1"></span>    <span class="nx">v</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="s2">&#34;#add1&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// view = render(data)
</span><span class="c1"></span>    <span class="p">})</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="s2">&#34;#minus1&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">-=</span> <span class="mi">1</span>
      <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// view = render(data)
</span><span class="c1"></span>    <span class="p">})</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="s2">&#34;#mul2&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">*=</span> <span class="mi">2</span>
      <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// view = render(data)
</span><span class="c1"></span>    <span class="p">})</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="s2">&#34;#divide2&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">/=</span> <span class="mi">2</span>
      <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// view = render(data)
</span><span class="c1"></span>    <span class="p">})</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="表驱动编程">表驱动编程</h2>
<p>表驱动编程（Table-Driven Methods）是一种编程模式。</p>
<p>适用场景：<strong>消除代码中频繁的 if else 或 switch case 的逻辑结构代码</strong>，使代码更加简化</p>
<ul>
<li>事实上，任何信息都可以通过表来挑选。在简单情况下用逻辑语句是更简单的，但是一旦判断条件增多，那可能要写大量重复的判断语句，这时候我们通过<strong>遍历</strong>表来实现条件判断，将事半功倍。</li>
</ul>
<h3 id="例1">例1</h3>
<blockquote>
<p>需求：写一个函数，传入年月，返回对应天数</p>
<ul>
<li><a href="https://blog.csdn.net/xuehyunyu/article/details/73556048/" target="_blank" rel="noopener noreffer">闰年</a>满足：（四年一润 且 百年不润） 或 （四百年再润）</li>
</ul>
</blockquote>
<p>常规写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">getDay</span><span class="p">(</span><span class="nx">year</span><span class="p">,</span> <span class="nx">month</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">isLeapYear</span> <span class="o">=</span> <span class="nx">year</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">year</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">!==</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">year</span> <span class="o">%</span> <span class="mi">400</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">month</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">28</span> <span class="o">+</span> <span class="nx">isLeapYear</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">month</span><span class="o">===</span><span class="mi">1</span><span class="o">||</span><span class="nx">month</span><span class="o">===</span><span class="mi">3</span><span class="o">||</span><span class="nx">month</span><span class="o">===</span><span class="mi">5</span><span class="o">||</span><span class="nx">month</span><span class="o">===</span><span class="mi">7</span><span class="o">||</span><span class="nx">month</span><span class="o">===</span><span class="mi">8</span><span class="o">||</span><span class="nx">month</span><span class="o">===</span><span class="mi">10</span><span class="o">||</span><span class="nx">month</span><span class="o">===</span><span class="mi">12</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">31</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">month</span> <span class="o">===</span> <span class="mi">4</span> <span class="o">||</span> <span class="nx">month</span> <span class="o">===</span> <span class="mi">6</span> <span class="o">||</span> <span class="nx">month</span> <span class="o">===</span> <span class="mi">9</span> <span class="o">||</span> <span class="nx">month</span> <span class="o">===</span> <span class="mi">11</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">30</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getDay</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>  <span class="c1">// 31
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getDay</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>   <span class="c1">// 29
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getDay</span><span class="p">(</span><span class="mi">2019</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>   <span class="c1">// 28
</span></code></pre></td></tr></table>
</div>
</div><p>表驱动写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">monthDays</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">[</span><span class="mi">31</span><span class="p">,</span><span class="mi">28</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">31</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">31</span><span class="p">,</span><span class="mi">29</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">31</span><span class="p">]</span>
<span class="p">]</span>
<span class="kd">function</span> <span class="nx">getDay</span><span class="p">(</span><span class="nx">year</span><span class="p">,</span> <span class="nx">month</span><span class="p">){</span>
  <span class="kd">let</span> <span class="nx">isLeapYear</span> <span class="o">=</span> <span class="nx">year</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">year</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">!==</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">year</span> <span class="o">%</span> <span class="mi">400</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span>
  <span class="k">return</span> <span class="nx">monthDays</span><span class="p">[</span><span class="nx">isLeapYear</span><span class="p">][</span><span class="nx">month</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getDay</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span> <span class="c1">// 31
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getDay</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>  <span class="c1">// 29
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getDay</span><span class="p">(</span><span class="mi">2019</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>  <span class="c1">// 28
</span></code></pre></td></tr></table>
</div>
</div><h3 id="例2">例2</h3>
<blockquote>
<p>监听元素绑定事件</p>
</blockquote>
<p>常规写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">add1</span><span class="p">(){</span> <span class="p">...</span> <span class="p">}</span>
<span class="nx">min1</span><span class="p">(){</span> <span class="p">...</span> <span class="p">}</span>
<span class="nx">mul2</span><span class="p">(){</span> <span class="p">...</span> <span class="p">}</span>
<span class="nx">div2</span><span class="p">(){</span> <span class="p">...</span> <span class="p">}</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#add1&#39;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">add1</span><span class="p">)</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#min1&#39;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">min1</span><span class="p">)</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#mul2&#39;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">mul2</span><span class="p">)</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#div2&#39;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">div2</span><span class="p">)</span>
<span class="nb">document</span><span class="p">........</span>
</code></pre></td></tr></table>
</div>
</div><p>表驱动写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">controller</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">add1</span><span class="p">(){</span>  <span class="p">},</span>
  <span class="nx">min1</span><span class="p">(){</span>  <span class="p">},</span>
  <span class="nx">mul2</span><span class="p">(){</span>  <span class="p">},</span>
  <span class="nx">div2</span><span class="p">(){</span>  <span class="p">},</span>
  <span class="nx">events</span><span class="o">:</span> <span class="p">{</span> <span class="c1">// 表驱动编程（对象）
</span><span class="c1"></span>    <span class="s2">&#34;click #add1&#34;</span><span class="o">:</span> <span class="s2">&#34;add1&#34;</span><span class="p">,</span> <span class="c1">// key 的前半为要监听的事件，后半为监听的元素，value 为要执行的方法
</span><span class="c1"></span>    <span class="s2">&#34;click #min1&#34;</span><span class="o">:</span> <span class="s2">&#34;min1&#34;</span><span class="p">,</span>
    <span class="s2">&#34;click #mul2&#34;</span><span class="o">:</span> <span class="s2">&#34;mul2&#34;</span><span class="p">,</span>
    <span class="s2">&#34;click #div2&#34;</span><span class="o">:</span> <span class="s2">&#34;div2&#34;</span>
  <span class="p">},</span>
  <span class="nx">autoBindEvents</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">events</span><span class="p">){</span> <span class="c1">// 遍历对象获得对应的 key 去做赋值操作
</span><span class="c1"></span>      <span class="kr">const</span> <span class="nx">handler</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">events</span><span class="p">[</span><span class="nx">key</span><span class="p">]]</span>
      <span class="kr">const</span> <span class="p">[</span><span class="nx">event</span><span class="p">,</span> <span class="nx">selector</span><span class="p">]</span> <span class="o">=</span> <span class="nx">key</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">)</span>  <span class="c1">// [&#34;click&#34;, &#34;#min1&#34;]
</span><span class="c1"></span>      <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;容器&#34;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">selector</span><span class="p">,</span> <span class="nx">handler</span><span class="p">)</span> <span class="c1">// 将提取出来的值去监听事件
</span><span class="c1"></span>    <span class="p">})</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>「常规写法」的代码虽然更简单直白，但代码过于重复。随着数据规模的增大，如果监听事件有10个100个，那么这种写法的代码量也在加剧</p>
<p>「表驱动编程」让代码具有一个<strong>稳定的复杂度</strong>，不论数据规模多大，都能保持简单。</p>
<ul>
<li>拒绝重复，保持<strong>稳定的简单</strong>，这才是程序员所追求的</li>
</ul>
</blockquote>
<p>​</p>
<h2 id="参考文章">参考文章</h2>
<p><a href="https://efe.baidu.com/blog/mvc-deformation/" target="_blank" rel="noopener noreffer">前端MVC变形记</a>：https://www.techug.com/post/mvc-deformation.html</p>
<p><a href="https://juejin.cn/post/6844904030825611278#heading-3" target="_blank" rel="noopener noreffer">MVC浅析</a></p>]]></description>
</item><item>
    <title>DOM 事件机制 &amp; 事件委托</title>
    <link>https://liubingxuan.xyz/dom-event-event-delegation/</link>
    <pubDate>Tue, 27 Oct 2020 20:33:47 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://liubingxuan.xyz/dom-event-event-delegation/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="dom-事件流">DOM 事件流</h2>
<blockquote>
<p>为什么有「事件流」？</p>
</blockquote>
<p>假如在一个button上注册了一个click事件，又在它的 父元素 div 上注册了一个 click 事件，那么当我们点击 button，是先触发父元素上的事件，还是button上的事件呢，这就需要一种约定去规范事件的执行顺序，就是事件执行的流程。</p>
<p>浏览器在发展的过程中出现了两种不同的规范</p>
<ul>
<li>IE 9（微软） 以下的 IE 浏览器使用的是事件冒泡，先从具体的接收元素，然后逐步向上传播到不具体的元素。</li>
<li>Netscape（网景） 采用的是事件捕获，先由不具体的元素接收事件，最具体的节点最后才接收到事件。</li>
<li>而 W3C（万维网）制定的 Web 标准中，是同时采用了两种方案，事件捕获和事件冒泡都可以。</li>
</ul>
<p>​</p>
<h2 id="事件的传播">事件的传播</h2>
<blockquote>
<p>又称「事件机制」 或 「事件模型」</p>
</blockquote>
<p>一个事件发生后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段。</p>
<blockquote>
<ul>
<li>第一阶段：从window对象传导到目标节点（上层传到底层），称为“捕获阶段”（capture phase）。</li>
<li>第二阶段：在目标节点上触发，称为“目标阶段”（target phase）。</li>
<li>第三阶段：从目标节点传导回window对象（从底层传回上层），称为“冒泡阶段”（bubbling phase）。</li>
</ul>
</blockquote>
<p>这种三阶段的传播模型，使得同一个事件会在多个节点上触发。</p>
<h3 id="1事件捕获">1.事件捕获</h3>
<blockquote>
<p>捕获是<strong>从上到下</strong>。</p>
</blockquote>
<p>事件传播的最上层对象是 window，接着依次是 document，html（document.documentElement）和body（document.body），然后按照普通的 html 结构一层一层往下传，最后到达目标元素。</p>
<p>我们只需要将 addEventListener 的第三个参数改为 true ，就可以实现事件捕获。</p>
<h3 id="2事件冒泡">2.事件冒泡</h3>
<blockquote>
<p>冒泡是<strong>从下到上</strong>。</p>
</blockquote>
<p>所谓事件冒泡就是事件像泡泡一样从最开始生成的地方一层一层往上冒，越来越大。从目标元素开始，一层层往上传，最后经过 body、html 到达 window 结束。</p>
<p>addEventListener 默认就是把事件绑定在冒泡阶段（第三个参数空着或者传 falsy 值 ）。</p>
<p></p>
<h3 id="示例">示例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>点击<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>上面代码中，<code>&lt;div&gt;</code> 节点之中有一个<code>&lt;p&gt;</code>节点。</p>
<p>如果对这两个节点，都设置click事件的监听函数（每个节点的捕获阶段和监听阶段，各设置一个监听函数），共计设置四个监听函数。然后，对<code>&lt;p&gt;</code>点击，click事件会触发四次。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">phases</span> <span class="o">=</span> <span class="p">{</span>
  <span class="mi">1</span><span class="o">:</span> <span class="s1">&#39;capture&#39;</span><span class="p">,</span>
  <span class="mi">2</span><span class="o">:</span> <span class="s1">&#39;target&#39;</span><span class="p">,</span>
  <span class="mi">3</span><span class="o">:</span> <span class="s1">&#39;bubble&#39;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">)</span>

<span class="nx">div</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
<span class="nx">p</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
<span class="nx">div</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
<span class="nx">p</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>

<span class="kd">function</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">tag</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">.</span><span class="nx">tagName</span>
  <span class="kd">var</span> <span class="nx">phase</span> <span class="o">=</span> <span class="nx">phases</span><span class="p">[</span><span class="nx">event</span><span class="p">.</span><span class="nx">eventPhase</span><span class="p">]</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Tag: &#39;&#34;</span> <span class="o">+</span> <span class="nx">tag</span> <span class="o">+</span> <span class="s2">&#34;&#39;. EventPhase: &#39;&#34;</span> <span class="o">+</span> <span class="nx">phase</span> <span class="o">+</span> <span class="s2">&#34;&#39;&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 点击以后的结果
</span><span class="c1">// Tag: &#39;DIV&#39;. EventPhase: &#39;capture&#39;
</span><span class="c1">// Tag: &#39;P&#39;. EventPhase: &#39;target&#39;
</span><span class="c1">// Tag: &#39;P&#39;. EventPhase: &#39;target&#39;
</span><span class="c1">// Tag: &#39;DIV&#39;. EventPhase: &#39;bubble&#39;
</span></code></pre></td></tr></table>
</div>
</div><p>上面代码表示，click事件被触发了四次：<code>&lt;div&gt;</code>节点的捕获阶段和冒泡阶段各1次，<code>&lt;p&gt;</code>节点的目标阶段触发了2次。</p>
<p>捕获阶段：事件从<code>&lt;div&gt;</code>向<code>&lt;p&gt;</code>传播时，触发<code>&lt;div&gt;</code>的click事件；
目标阶段：事件从<code>&lt;div</code>&gt;到达<code>&lt;p&gt;</code>时，触发<code>&lt;p&gt;</code>的click事件；
冒泡阶段：事件从<code>&lt;p&gt;</code>传回<code>&lt;div&gt;</code>时，再次触发<code>&lt;div&gt;</code>的click事件。
其中，<code>&lt;p&gt;</code>节点有两个监听函数（addEventListener方法第三个参数的不同，会导致绑定两个监听函数），因此它们都会因为click事件触发一次。所以，<code>&lt;p&gt;</code>会在target阶段有两次输出。</p>
<p>注意，浏览器总是假定click事件的目标节点，就是点击位置嵌套最深的那个节点（本例是<code>&lt;div&gt;</code>节点里面的<code>&lt;p&gt;</code>节点）。所以，<code>&lt;p&gt;</code>节点的捕获阶段和冒泡阶段，都会显示为target阶段。</p>
<p>事件传播的最上层对象是window，接着依次是document，html（document.documentElement）和body（document.body）。也就是说，上例的事件传播顺序，在捕获阶段依次为window、document、html、body、div、p，在冒泡阶段依次为p、div、body、html、document、window。</p>
<h3 id="一个特例">一个特例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">ele</span><span class="p">&gt;</span>点我<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 👇先监听冒泡阶段的点击事件
</span><span class="c1"></span><span class="nx">ele</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;2&#39;</span><span class="p">)</span>
<span class="p">})</span>
<span class="c1">// 👇再监听捕获阶段的点击事件
</span><span class="c1"></span><span class="nx">ele</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">)</span>
<span class="p">},</span> <span class="kc">true</span><span class="p">)</span>

<span class="c1">// 点击div以后的结果
</span><span class="c1">// 2  （冒泡）
</span><span class="c1">// 1  （捕获）
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 👇先监听捕获阶段的点击事件
</span><span class="c1"></span><span class="nx">ele</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">)</span>
<span class="p">},</span> <span class="kc">true</span><span class="p">)</span>
<span class="c1">// 👇再监听冒泡阶段的点击事件
</span><span class="c1"></span><span class="nx">ele</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;2&#39;</span><span class="p">)</span>
<span class="p">})</span>

<span class="c1">// 点击div以后的结果
</span><span class="c1">// 1   （捕获）
</span><span class="c1">// 2   （冒泡）
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>点击触发后的结果：与点击事件绑定在哪个阶段并无直接关系，而是谁写在前，谁先执行</p>
</blockquote>
<p>当只有一个单一的元素被监听时（不存在父子元素关系），分别在捕获和冒泡两个阶段，监听这个元素的点击事件。这种情况下，点击事件被触发后，则不再遵循「先捕获后冒泡」的机制，而是「谁先监听，谁先执行」</p>
<h2 id="addeventlistener-">addEventListener 👂</h2>
<h3 id="事件绑定-api">事件绑定 API</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">baba</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">(</span><span class="s1">&#39;onclick&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>  <span class="c1">// 微软IE5发明：默认进入冒泡阶段
</span><span class="c1"></span><span class="nx">baba</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>  <span class="c1">// 网景发明：默认进入捕获阶段
</span><span class="c1"></span><span class="nx">baba</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="nx">bool</span><span class="p">)</span><span class="err">·</span><span class="c1">// ❤️W3C标准：加了参数 bool，用于指定让函数运行在哪个阶段
</span></code></pre></td></tr></table>
</div>
</div><h4 id="如果-bool-不传-或为-falsyhttpsdevelopermozillaorgzh-cndocsglossaryfalsy">如果 bool 不传 （或为 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy" target="_blank" rel="noopener noreffer">falsy</a>）</h4>
<ul>
<li>默认情况</li>
<li>就让 fn 走<strong>冒泡</strong>，即当浏览器在冒泡阶段发现 baba 有 fn 监听函数，就会调用 fn，并提供事件信息</li>
<li>大多数人习惯上都不会传这个参数（可见 W3C 可能更倾向于 IE 的方案：默认把 fn 放在冒泡阶段）</li>
</ul>
<h4 id="如果-bool-为-true">如果 bool 为 true</h4>
<ul>
<li>就让 fn 走<strong>捕获</strong>，即当浏览器在捕获阶段发现 baba 有 fn 监听函数，就会调用 fn，并提供事件信息</li>
</ul>
<p>​</p>
<h3 id="补充事件移除">补充：事件移除</h3>
<blockquote>
<p>removeEventListener</p>
</blockquote>
<p>通过 addEventListener() 添加的事件只能用 <strong>removeEventListener()</strong> 来移除</p>
<ul>
<li>移除时，传入的参数与添加事件使用的参数相同</li>
<li>通过 addEventListener() 添加的匿名函数无法删除</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">btn</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;myBtn&#34;</span><span class="p">)</span>
<span class="nx">btn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
<span class="p">},</span> <span class="kc">false</span><span class="p">)</span>
<span class="nx">btn</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="c1">// 匿名函数无法移除
</span><span class="c1"></span>  <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
<span class="p">},</span> <span class="kc">false</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">btn</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;myBtn&#34;</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">handler</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">btn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="nx">handler</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
<span class="nx">btn</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="nx">handler</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>  <span class="c1">// 有效！
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="target--currenttarget">target 🆚 currentTarget</h2>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/currentTarget" target="_blank" rel="noopener noreffer">Event.currentTarget</a> 找到事件<strong>绑定</strong>的元素。</p>
<p>区别与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/target" target="_blank" rel="noopener noreffer">Event.target</a> ，是事件<strong>触发</strong>的元素。</p>
</blockquote>
<h3 id="区别">区别</h3>
<blockquote>
<p>一个是用户点击的（触发事件的元素），一个是开发者监听的（事件绑定的元素）</p>
</blockquote>
<ul>
<li>e.target ：用户操作的元素</li>
<li>e.currentTarget ：程序员监听的元素</li>
<li>this 是 e.currentTarget，非常不推荐在监听代码里使用 this（因为经常会忘记  this 到底指代哪一个）</li>
</ul>
<h3 id="举例">举例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>文字<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>给 div 绑定点击事件，用户点击“文字”</li>
<li>e.target 就是 span</li>
<li>e.currentTarget 就是 div</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="阻止默认事件">阻止默认事件</h2>
<blockquote>
<p>默认事件，又称「默认动作」「默认行为」</p>
<p>例如：表单一点击提交按钮(submit)就会刷新页面、点击a标签默认执行页面跳转或是锚点定位等。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>如果调用这个方法，默认事件行为将不再触发。</p>
<h3 id="使用场景1">使用场景1</h3>
<blockquote>
<p>使用a标签仅仅是想当做一个普通的按钮，点击实现一个功能，不想页面跳转，也不想锚点定位。</p>
</blockquote>
<h4 id="方法一">方法一</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;javascript:;&#34;</span><span class="p">&gt;</span>链接<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="方法二">方法二</h4>
<p>使用 JS 方法来阻止：当我们点击A标签的时候，会先触发click事件，其次才会执行自己的默认行为。所以只需给其 click 事件 return false ，让执行中断</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;test&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;http://www.google.com&#34;</span><span class="p">&gt;</span>链接<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="nx">test</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
    <span class="nx">e</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">event</span>  <span class="c1">// 兼容不同浏览器
</span><span class="c1"></span>    <span class="k">return</span> <span class="kc">false</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="方法三">方法三</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;test&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;http://www.google.com&#34;</span><span class="p">&gt;</span>链接<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="nx">test</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
    <span class="nx">e</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">event</span>
    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用场景2">使用场景2</h3>
<blockquote>
<p>限制输入框最多只能输入六个字符，如何实现？</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#39;tempInp&#39;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="nx">tempInp</span><span class="p">.</span><span class="nx">onkeydown</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ev</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">ev</span> <span class="o">=</span> <span class="nx">ev</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">event</span>
    <span class="kd">let</span> <span class="nx">val</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span> <span class="c1">// trim去除字符串首尾空格（不兼容）
</span><span class="c1"></span>    <span class="c1">// this.value = this.value.replace(/^ +| +$/g,&#39;&#39;) 兼容写法
</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">val</span><span class="p">.</span><span class="nx">length</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">len</span> <span class="o">&gt;=</span> <span class="mi">6</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">val</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
      <span class="c1">// 阻止默认行为去除特殊按键（DELETE\BACK-SPACE\方向键...）
</span><span class="c1"></span>      <span class="kd">let</span> <span class="nx">code</span> <span class="o">=</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">which</span> <span class="o">||</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">keyCode</span>  <span class="c1">// 当前按下的按键的code码
</span><span class="c1"></span>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="sr">/^(46|8|37|38|39|40)$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">code</span><span class="p">))</span> <span class="p">{</span>  <span class="c1">// 如果按下的是特殊按键，则阻止默认事件（按下无效）
</span><span class="c1"></span>        <span class="nx">ev</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="阻止事件传播">阻止事件传播</h2>
<blockquote>
<p>阻止事件进一步的 冒泡 / 捕获</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">e</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">()</span> 
</code></pre></td></tr></table>
</div>
</div><h3 id="示例-1">示例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;level1&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;level2&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;level3&#34;</span><span class="p">&gt;</span>
			点我
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">level1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.level1&#39;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">level2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.level2&#39;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">level3</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.level3&#39;</span><span class="p">)</span>

<span class="nx">level1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
<span class="p">})</span> 
<span class="nx">level2</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;2&#34;</span><span class="p">)</span>
<span class="p">})</span> 
<span class="nx">level3</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
  <span class="nx">e</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">()</span>  <span class="c1">// 阻止冒泡，输出： 3
</span><span class="c1"></span><span class="p">})</span>

<span class="c1">// 不阻止冒泡，点击文字，输出顺序： 3  2  1
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">level1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
<span class="p">},</span> <span class="kc">true</span><span class="p">)</span> 
<span class="nx">level2</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;2&#34;</span><span class="p">)</span>
  <span class="nx">e</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">()</span>  <span class="c1">// 阻止捕获，输出： 1  2
</span><span class="c1"></span><span class="p">},</span> <span class="kc">true</span><span class="p">)</span> 
<span class="nx">level3</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
<span class="p">},</span> <span class="kc">true</span><span class="p">)</span>

<span class="c1">// 不阻止捕获，点击文字，输出顺序： 1  2  3
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="插曲如何阻止滚动-">插曲：如何阻止滚动 🖱️</h2>
<h3 id="scroll-不支持阻止默认事件">scroll 不支持阻止默认事件</h3>
<blockquote>
<p>MDN 搜索 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/scroll_event" target="_blank" rel="noopener noreffer">scroll event</a></p>
<p>滚动事件，不能阻止默认事件。 那怎么让页面无法滚动呢？</p>
</blockquote>
<h3 id="解决办法">解决办法</h3>
<ul>
<li>要阻止滚动，可阻止 wheel（鼠标滚轮） 和 touchstart（移动端触屏） 的默认动作</li>
<li>拖拽滚动条，还能实现滚动，所以还需要隐藏滚动条</li>
</ul>
<h3 id="代码">代码</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">x</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>4<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  ...  
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>100<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  <span class="c">&lt;!-- p标签撑起页面，超出一屏高度，出现滚动条 --&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="c1">// PC 端
</span><span class="c1"></span>  <span class="nx">x</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;wheel&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>  <span class="c1">// 绑定滚轮事件 wheel，触发滚轮事件，就阻止执行
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
  <span class="p">})</span>
  <span class="c1">// 移动端
</span><span class="c1"></span>  <span class="nx">x</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;touchstart&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>  <span class="c1">// 手机端是触屏拖拽滚动，那就阻止touchstart触屏事件
</span><span class="c1"></span>    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
  <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="p">::</span><span class="nd">-webkit-scrollbar</span> <span class="p">{</span> <span class="k">width</span><span class="p">:</span> <span class="mi">0</span> <span class="cp">!important</span> <span class="p">}</span>   <span class="c">/* 隐藏滚动条 */</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>注意：你需要找准滚动条所在的元素（在 document 上）</li>
<li>用 overflow: hidden 也可以直接取消滚动条。但此时 JS 依然可以修改 scrollTop</li>
</ul>
<p>​</p>
<h2 id="浏览器自带事件">浏览器自带事件</h2>
<ul>
<li>一共 100 多种事件，<a href="https://developer.mozilla.org/zh-CN/docs/Web/Events" target="_blank" rel="noopener noreffer">列表</a> 在MDN上</li>
<li>用户打印、写字、全屏、复制粘贴、键盘按键、点击鼠标、拖放事件、媒体事件（比如直播：被播放、关闭、暂停、加速）…</li>
</ul>
<ul>
<li>非常多的事件，都可以被监听。</li>
<li>想一下全部理解，是不可能的。用到再查就可以</li>
</ul>
<table>
<thead>
<tr>
<th>事件名称</th>
<th>应用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>error</td>
<td></td>
</tr>
<tr>
<td>abort</td>
<td>中止事件</td>
</tr>
<tr>
<td>load</td>
<td>加载成功事件</td>
</tr>
<tr>
<td>beforeunload</td>
<td>关闭页面事件</td>
</tr>
<tr>
<td>unload</td>
<td>关闭页面之后的事件</td>
</tr>
<tr>
<td>online</td>
<td>网络连上了，触发 online （从没用过）</td>
</tr>
<tr>
<td>offline</td>
<td>WiFi 网络突然断了，触发 offline（从没用过）</td>
</tr>
<tr>
<td>focus</td>
<td>一个元素获取焦点</td>
</tr>
<tr>
<td>blur</td>
<td>一个元素失去焦点</td>
</tr>
<tr>
<td>pageshow</td>
<td>一个页面显示出来，会触发pageshow （从没用过）</td>
</tr>
<tr>
<td>submit</td>
<td>提交</td>
</tr>
<tr>
<td>beforeprint</td>
<td>用户打印</td>
</tr>
<tr>
<td>afterprint</td>
<td>用户打印</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
<p>​</p>
<h2 id="自定义事件">自定义事件</h2>
<blockquote>
<p>开发者可以在【浏览器自带事件】之外，自定义一个事件</p>
</blockquote>
<p>HTML</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;div1&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">button</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>
	  点击触发sam事件
	<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>JS</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">btn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="c1">// new出自定义事件，new CustomEvent(&#39;事件名&#39;, 事件信息)
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CustomEvent</span><span class="p">(</span><span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="p">{</span> 
    <span class="nx">detail</span><span class="o">:</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span> <span class="p">}</span>
  <span class="p">})</span>
  <span class="c1">// EventTarget.dispatchEvent(event) 触发事件
</span><span class="c1"></span>  <span class="nx">btn</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> 
<span class="p">})</span>
<span class="c1">// 现在效果：点击 btn ，触发 sam 事件
</span><span class="c1"></span>
<span class="c1">// 监听 sam 事件
</span><span class="c1"></span><span class="nx">btn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> 
  <span class="nx">congsole</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;sam事件触发了&#39;</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">detail</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="自定义事件会冒泡吗">自定义事件，会冒泡吗？</h3>
<ul>
<li>测试：只监听 div1 的点击事件。看看点击 btn，会触发到 div1 的点击事件吗？</li>
<li>结果：不行，不冒泡。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 监听 div1 的 sam 事件
</span><span class="c1"></span><span class="nx">div1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> 
  <span class="nx">congsole</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;sam事件触发了&#39;</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">detail</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>如果想实现自定义事件的冒泡，还需额外再给自定义事件 <strong>开启冒泡属性</strong></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">btn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CustomEvent</span><span class="p">(</span><span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="p">{</span> 
    <span class="nx">detail</span><span class="o">:</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span> <span class="p">},</span>
    <span class="nx">bubbles</span><span class="o">:</span> <span class="kc">true</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 开启冒泡，添加这句就可以了
</span><span class="c1"></span>    <span class="c1">// cancelable: false  // 是否可以阻止默认事件
</span><span class="c1"></span>  <span class="p">})</span>
  <span class="nx">btn</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> 
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="事件委托">事件委托</h2>
<blockquote>
<p>又称「事件代理」</p>
</blockquote>
<p>由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件委托（代理）。</p>
<h3 id="使用场景-1">使用场景 1</h3>
<p>假设有一个列表，列表之中有<strong>大量的子项</strong>，我们需要在点击每个子项的时候响应一个事件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;list&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>item 1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>item 2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>item 3<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  ......
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>item n<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">===</span> <span class="s1">&#39;li&#39;</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;li 被点击了&#39;</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;li 内容是：&#39;</span> <span class="o">+</span> <span class="nx">t</span><span class="p">.</span><span class="nx">textContent</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>如果给每个子项都绑定一个函数，那对于内存消耗是非常大的，效率上需要消耗很多性能。</li>
<li>借助事件委托，我们只需要给父容器 ul 绑定方法即可</li>
<li>这样不管点击的是哪一个后代元素，都会根据冒泡传播的传递机制，把容器的 click 行为触发，然后把对应的方法执行，根据事件源，我们可以知道点击的是谁，从而完成不同的事。</li>
</ul>
<h3 id="使用场景-2">使用场景 2</h3>
<ul>
<li>在很多时候，我们需要通过用户操作<strong>动态的新增子项元素</strong>。</li>
<li>在最初并没有新增子项元素时，就无法给还未创建的子项元素绑定事件</li>
<li>这种情况就可以采用事件委托的形式，给父级元素绑定事件，监听到子项的动态变化。</li>
</ul>
<p><a href="http://js.jirengu.com/wuwox/1/edit?html,js,output" target="_blank" rel="noopener noreffer">示例</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">button</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>新增按钮<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;div1&#34;</span><span class="p">&gt;</span>
  
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span>
<span class="nx">btn</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">n</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="kr">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">)</span>
  <span class="nx">button</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="s1">&#39;按钮&#39;</span> <span class="o">+</span> <span class="nx">n</span>
  <span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">button</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">list</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">===</span> <span class="s1">&#39;button&#39;</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;当前点击的是：&#39;</span> <span class="o">+</span> <span class="nx">t</span><span class="p">.</span><span class="nx">innerText</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="优点">优点</h3>
<ul>
<li>减少内存消耗，提高性能  （例1）
<ul>
<li>如果要监听100个按钮，需要100个监听器，就是100倍的内存。如果之间一个祖先 div，就是只需要一个监听器，节约了99个</li>
</ul>
</li>
<li>可以监听动态的元素  （例2）
<ul>
<li>如果当前元素还不存在，肯定没法直接监听到。只能监听祖先</li>
</ul>
</li>
</ul>
<h3 id="封装事件委托">封装事件委托</h3>
<blockquote>
<p>封装，需要考虑更多边界情况</p>
<ul>
<li>
<p>写出这样一个函数 <code>on('click', '#testDiv', 'li', fn)</code></p>
</li>
<li>
<p>当用户点击 <code>#testDiv</code> 里的 <code>li</code> 元素时，调用 <code>fn</code> 函数</p>
</li>
</ul>
</blockquote>
<p><a href="http://js.jirengu.com/kuxeg/3/edit?html,js,output" target="_blank" rel="noopener noreffer">示例</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">button</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>新增按钮<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;div1&#34;</span><span class="p">&gt;</span>

<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span>
<span class="nx">btn</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">n</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="kr">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">)</span>
  <span class="kr">const</span> <span class="nx">span</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;span&#39;</span><span class="p">)</span>
  <span class="nx">span</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="s1">&#39;按钮&#39;</span> <span class="o">+</span> <span class="nx">n</span>
  <span class="nx">button</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">span</span><span class="p">)</span>
  <span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">button</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;#div1&#39;</span><span class="p">,</span> <span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="nx">fm</span><span class="p">)</span>
<span class="kd">function</span> <span class="nx">fm</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">el</span><span class="p">){</span>  
  <span class="c1">// 不能用箭头函数，this 会获取不到 el
</span><span class="c1"></span>  <span class="c1">// 箭头函数中的 this，只能获取到 window
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">innerText</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">on</span><span class="p">(</span><span class="nx">eventType</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">selector</span><span class="p">,</span> <span class="nx">fn</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">element</span> <span class="k">instanceof</span> <span class="nx">Element</span><span class="p">)){</span>
    <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">eventType</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">el</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span>
    <span class="c1">// 只要el不匹配，就不断获取el的父元素来匹配，直到el获取element，说明容器中压根没有匹配的el，结束循环
</span><span class="c1"></span>    <span class="c1">// el 为 null，则不执行 fn
</span><span class="c1"></span>    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="nx">el</span><span class="p">.</span><span class="nx">matches</span><span class="p">(</span><span class="nx">selector</span><span class="p">)){</span> 
      <span class="k">if</span><span class="p">(</span><span class="nx">el</span> <span class="o">===</span> <span class="nx">element</span><span class="p">){</span>  <span class="c1">// 循环结束条件
</span><span class="c1"></span>        <span class="nx">el</span> <span class="o">=</span> <span class="kc">null</span>
        <span class="k">break</span>
      <span class="p">}</span>
      <span class="nx">el</span> <span class="o">=</span> <span class="nx">el</span><span class="p">.</span><span class="nx">parentNode</span>
    <span class="p">}</span>
    <span class="nx">el</span> <span class="o">&amp;&amp;</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">e</span><span class="p">,</span> <span class="nx">el</span><span class="p">)</span>
  <span class="p">})</span>
  <span class="k">return</span> <span class="nx">element</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="答疑">答疑</h2>
<h3 id="js-支持事件吗">JS 支持事件吗</h3>
<h4 id="答">答</h4>
<blockquote>
<p>不支持。因为 JS 本身没有「事件」（只是调用了 DOM 提供的 addEventListener）</p>
</blockquote>
<ul>
<li>本节内容的 DOM 事件，不属于JS 的功能。
<ul>
<li>术语：本节内容是基于浏览器提供的 DOM 的功能</li>
<li>JS 是浏览器的功能之一。DOM 事件也是浏览器的功能之一（<strong>二者是平行的关系，没有从属关系</strong>）</li>
<li>JS 里面没有 DOM 事件， JS 只是调用了 DOM 提供的 addEventListener 而已</li>
</ul>
</li>
</ul>
<blockquote>
<p>因为 DOM 提供了 事件的功能，还提供了一整套完整的事件机制（捕获冒泡、默认动作、event 对象…）</p>
<p>所以 JS 才可以用</p>
</blockquote>
<h4 id="追问">追问</h4>
<blockquote>
<p>由于 JS 不支持事件，面试官可能问你「能不能手写出一个 JS 事件系统」</p>
</blockquote>
<ul>
<li>如何让JS支持事件？请手写一个事件系统。</li>
<li>目前大家的水平还写不出来，可以先思考一段时间。
（可以搜一搜、实际上也不难，用一个「队列」就可以遭到了）</li>
</ul>
<blockquote>
<p>以上。本节就是对 <strong>DOM事件（不是 JS 事件）</strong> 的一个完整了解</p>
</blockquote>
<h2 id="参考">参考</h2>
<p><a href="https://javascript.ruanyifeng.com/dom/event.html#toc10" target="_blank" rel="noopener noreffer">阮一峰：事件模型</a></p>
<p><a href="https://juejin.im/post/6844903781969166349#heading-19" target="_blank" rel="noopener noreffer">深入理解DOM事件机制</a></p>
<p><a href="https://www.jianshu.com/p/e8a6fad0f7bc" target="_blank" rel="noopener noreffer">e = e || window.event</a></p>]]></description>
</item><item>
    <title>Typora 如何上传图片？（最新超详细图解）</title>
    <link>https://liubingxuan.xyz/tools-upload-images-in-typora-new/</link>
    <pubDate>Tue, 27 Oct 2020 19:40:05 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://liubingxuan.xyz/tools-upload-images-in-typora-new/</guid>
    <description><![CDATA[<p>📢 采用阿里云 OSS，更稳定、上传加载速度更快</p>
<p>​</p>
<h2 id="1-安装-picgo-core">1. 安装 PicGo-Core</h2>
<p>因为 Typora 已经原生支持 PicGo-Core，所以只需要在软件内下载一下就可以了（PS: 下面这张图就是用的自动上传，很方便）</p>
<p></p>
<h2 id="2-开通阿里云-oss">2. 开通阿里云 OSS</h2>
<blockquote>
<p>打开<a href="https://www.aliyun.com/" target="_blank" rel="noopener noreffer">阿里云</a>官网，进入控制台，打开最左侧菜单，找到「对象存储 OSS」</p>
</blockquote>
<p></p>
<p>（第一次进入都会提示需要开通 👇）</p>
<p></p>
<p>（立即开通）</p>
<p></p>
<blockquote>
<p>进入控制台，创建 Bucket</p>
</blockquote>
<p></p>
<blockquote>
<p>起个名字，配置基本采用默认，可参考下图</p>
</blockquote>
<p></p>
<p></p>
<blockquote>
<p>创建完就是👇这样事儿的，然后进入「资源包管理——购买资源包」，准备掏银子</p>
</blockquote>
<p></p>
<blockquote>
<p>一般买个最便宜的配置就行</p>
</blockquote>
<p></p>
<blockquote>
<p>购买完成，我们去找到自己的 AccessKey，后面配置会用到</p>
</blockquote>
<p></p>
<p></p>
<p></p>
<blockquote>
<p>这里的 AccessKey ID 和 AccessKey Secret 可以保存一下（总之不要关闭）</p>
<p>然后，打开 OSS 控制台，就可以对照控制台信息，配置 Typora 啦</p>
</blockquote>
<p></p>
<h2 id="3-配置-picgo-core">3. 配置 PicGo-Core</h2>
<blockquote>
<p>点击红框 1 ——【打开配置文件】</p>
</blockquote>
<p></p>
<blockquote>
<p>代码按照下面的格式无脑全选替换就行</p>
<ul>
<li>我们都可以在前面的打开的页面上查看到（oss 控制台中，我应该都用红框标注了）</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;picBed&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;uploader&#34;</span><span class="p">:</span> <span class="s2">&#34;aliyun&#34;</span><span class="p">,</span>
    <span class="nt">&#34;aliyun&#34;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&#34;accessKeyId&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
      <span class="nt">&#34;accessKeySecret&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
      <span class="nt">&#34;bucket&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>      <span class="err">//</span> <span class="err">存储空间名</span>
      <span class="nt">&#34;area&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>        <span class="err">//</span> <span class="err">存储区域代号</span>
      <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="s2">&#34;img/&#34;</span><span class="p">,</span>    <span class="err">//</span> <span class="err">自定义存储路径</span>
      <span class="nt">&#34;customUrl&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>   <span class="err">//</span> <span class="err">自定义域名，注意要加</span> <span class="err">http://</span> <span class="err">或者</span> <span class="err">https://</span>
      <span class="nt">&#34;options&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span>      <span class="err">//</span> <span class="err">针对图片的一些后缀处理参数</span> <span class="err">PicGo</span> <span class="mf">2.2</span><span class="err">.</span><span class="mi">0</span><span class="err">+</span> <span class="err">PicGo-Core</span> <span class="mf">1.4</span><span class="err">.</span><span class="mi">0</span><span class="err">+</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="nt">&#34;picgoPlugins&#34;</span><span class="p">:</span> <span class="p">{}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>下面是我的配置</p>
<p></p>
<blockquote>
<p>写完配置，保存关闭，来验证一下</p>
<ul>
<li>点击 Typora 配置图中标出的红框 2 —— 【验证图片上传选项】</li>
</ul>
</blockquote>
<p></p>
<p>​</p>
<h2 id="4-体验效果">4. 体验效果</h2>
<blockquote>
<p>保存配置之后，我们直接在 Typora 内粘贴一张图片，就会自动提示上传中</p>
<p>或者在已有的本地图片上面按右键，也可以看到【上传图片】的按钮，整个操作非常便捷。</p>
</blockquote>
<p>复制图片，粘贴到 Typora，效果如下</p>
<p>![typora upload pic](<a href="https://imgsubmit.oss-cn-beijing.aliyuncs.com/img/typora">https://imgsubmit.oss-cn-beijing.aliyuncs.com/img/typora</a> upload pic.gif)</p>]]></description>
</item><item>
    <title> jQuery 快速上手</title>
    <link>https://liubingxuan.xyz/dom-jquery-api/</link>
    <pubDate>Sun, 25 Oct 2020 14:20:02 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://liubingxuan.xyz/dom-jquery-api/</guid>
    <description><![CDATA[<h2 id="参考">参考</h2>
<ul>
<li>
<p>《<a href="http://www.ruanyifeng.com/blog/2011/07/jquery_fundamentals.html" target="_blank" rel="noopener noreffer">阮一峰：jQuery设计思想</a>》</p>
</li>
<li>
<p>《 <a href="https://www.jquery123.com/" target="_blank" rel="noopener noreffer">jQuery 中文文档</a>》</p>
</li>
</ul>
<p>​</p>
<h2 id="如何获取和使用--jquery">如何获取和使用  jQuery</h2>
<ul>
<li>jQuery 的官方网址是：http://jQuery.com/，从这里可以获取  jQuery  的最新版本。
<ul>
<li>jQuery中文文档：https://www.bootcdn.cn/jquery/</li>
</ul>
</li>
<li>使用的话，就是导入这份 js 文件。</li>
<li>导入方式是在页面，通过<code>&lt;script&gt;</code>标签导入</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;jQuery.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>导入之后，就可以使用  jQuery  的语法了。</p>
<p>​</p>
<h2 id="jquery--版本">jQuery  版本</h2>
<p>1.x：兼容IE678,使用最为广泛的，官方只做BUG维护，功能不再新增。因此一般项目来说，使用1.x版本就可以了，最终版本：1.12.4 (2016年5月20日)</p>
<p>2.x：不兼容IE678，很少有人使用，官方只做BUG维护，功能不再新增。如果不考虑兼容低版本的浏览器可以使用2.x，最终版本：2.2.4 (2016年5月20日)</p>
<p>3.x：不兼容IE678，只支持最新的浏览器。需要注意的是很多老的 jQuery 插件不支持3.x版。目前该版本是官方主要更新维护的版本。</p>
<blockquote>
<p>维护IE678是一件让人头疼的事情，一般我们都会额外加载一个CSS和JS单独处理。值得庆幸的是使用这些浏览器的人也逐步减少，PC端用户已经逐步被移动端用户所取代，如果没有特殊要求的话，一般都会选择放弃对678的支持。</p>
</blockquote>
<p>​</p>
<h2 id="jquery-对象">jQuery 对象</h2>
<ul>
<li>jQuery 对象就是通过 jQuery 包装DOM对象后产生的对象。</li>
<li>jQuery 对象是  jQuery 独有的。</li>
<li>如果一个对象是  jQuery 对象，那么它就可以使用  jQuery 里的方法：例如 <code>$('#i1').html()</code>  。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#i1&#34;</span><span class="p">).</span><span class="nx">html</span><span class="p">()</span>  <span class="c1">// 意思是: 获取id值为 i1 的元素的 html 代码。其中 html() 是  jQuery  里的方法。 
</span><span class="c1">// 相当于： 
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;i1&#34;</span><span class="p">).</span><span class="nx">innerHTML</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>虽然  jQuery 对象是包装 DOM 对象后产生的，但是  jQuery 对象无法使用 DOM 对象的任何方法，同理 DOM对象也没不能使用  jQuery 里的方法。</li>
</ul>
<blockquote>
<p>一个约定，我们在声明一个 jQuery 对象变量的时候在变量名前面加上$：</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">$variable</span> <span class="o">=</span>  <span class="nx">jQuery</span> <span class="nx">对像</span>
<span class="kd">let</span> <span class="nx">variable</span> <span class="o">=</span> <span class="nx">DOM对象</span>
<span class="nx">$variable</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  <span class="c1">//  jQuery 对象转成DOM对象
</span></code></pre></td></tr></table>
</div>
</div><p>拿上面那个例子举例， jQuery 对象和 DOM 对象的使用：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#i1&#34;</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span>       <span class="c1">//  jQuery 对象可以使用 jQuery 的方法
</span><span class="c1"></span><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#i1&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">innerHTML</span>  <span class="c1">// DOM对象使用DOM的方法
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="一选择网页元素">一、选择网页元素</h2>
<blockquote>
<p>jQuery 的基本设计思想和主要用法，就是&quot;选择某个网页元素，然后对其进行某种操作&rdquo;。这是它区别于其他Javascript库的根本特点。</p>
</blockquote>
<blockquote>
<p>使用 jQuery 的第一步，往往就是将一个选择表达式，放进构造函数 jQuery ()（简写为$），然后得到被选中的元素。</p>
</blockquote>
<p>选择表达式可以是CSS选择器：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">)</span> <span class="c1">//选择整个文档对象
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#myId&#39;</span><span class="p">)</span> <span class="c1">//选择ID为myId的网页元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div.myClass&#39;</span><span class="p">)</span> <span class="c1">// 选择class为myClass的div元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[name=first]&#39;</span><span class="p">)</span> <span class="c1">// 选择name属性等于first的input元素
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>也可以是 jQuery 特有的表达式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a:first&#39;</span><span class="p">)</span> <span class="c1">//选择网页中第一个a元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;tr:odd&#39;</span><span class="p">)</span> <span class="c1">//选择表格的奇数行
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#myForm :input&#39;</span><span class="p">)</span> <span class="c1">// 选择表单中的input元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div:visible&#39;</span><span class="p">)</span> <span class="c1">//选择可见的div元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div:gt(2)&#39;</span><span class="p">)</span> <span class="c1">// 选择所有的div元素，除了前三个
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div:animated&#39;</span><span class="p">)</span> <span class="c1">// 选择当前处于动画状态的div元素
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="二改变结果集">二、改变结果集</h2>
<p>jQuery 设计思想之二，就是提供各种强大的过滤器，对结果集进行筛选，缩小选择结果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">has</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">);</span> <span class="c1">// 选择包含p元素的div元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">not</span><span class="p">(</span><span class="s1">&#39;.myClass&#39;</span><span class="p">);</span> <span class="c1">//选择class不等于myClass的div元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;.myClass&#39;</span><span class="p">);</span> <span class="c1">//选择class等于myClass的div元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">first</span><span class="p">();</span> <span class="c1">//选择第1个div元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">eq</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> <span class="c1">//选择第6个div元素
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>有时候，我们需要从结果集出发，移动到附近的相关元素， jQuery 也提供了在DOM树上的移动方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">next</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">);</span> <span class="c1">//选择div元素后面的第一个p元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">parent</span><span class="p">();</span> <span class="c1">//选择div元素的父元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">closest</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">);</span> <span class="c1">//选择离div最近的那个form父元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">children</span><span class="p">();</span> <span class="c1">//选择div的所有子元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">siblings</span><span class="p">();</span> <span class="c1">//选择div的同级元素
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="三链式操作">三、链式操作</h2>
<p>jQuery 设计思想之三，就是最终选中网页元素以后，可以对它进行一系列操作，并且所有操作可以连接在一起，以链条的形式写出来，比如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;h3&#39;</span><span class="p">).</span><span class="nx">eq</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>分解开来，就是下面这样：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span> <span class="c1">//找到div元素
</span><span class="c1"></span>
  <span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;h3&#39;</span><span class="p">)</span> <span class="c1">//选择其中的h3元素
</span><span class="c1"></span>
  <span class="p">.</span><span class="nx">eq</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">//选择第3个h3元素
</span><span class="c1"></span>
  <span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">);</span> <span class="c1">//将它的内容改为Hello
</span></code></pre></td></tr></table>
</div>
</div><p>这是 jQuery 最令人称道、最方便的特点。它的原理在于每一步的 jQuery 操作，返回的都是一个 jQuery 对象，所以不同操作可以连在一起。</p>
<p>jQuery 还提供了.end()方法，使得结果集可以后退一步：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>

  <span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;h3&#39;</span><span class="p">)</span>

  <span class="p">.</span><span class="nx">eq</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

  <span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">)</span>

  <span class="p">.</span><span class="nx">end</span><span class="p">()</span> <span class="c1">//退回到选中所有的h3元素的那一步
</span><span class="c1"></span>
  <span class="p">.</span><span class="nx">eq</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">//选中第一个h3元素
</span><span class="c1"></span>
  <span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;World&#39;</span><span class="p">);</span> <span class="c1">//将它的内容改为World
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="四元素的操作取值和赋值">四、元素的操作：取值和赋值</h2>
<blockquote>
<p>操作网页元素，最常见的需求是取得它们的值，或者对它们进行赋值。</p>
</blockquote>
<blockquote>
<p>jQuery 设计思想之四，就是使用同一个函数，来完成取值（getter）和赋值（setter），即&quot;取值器&quot;与&quot;赋值器&quot;合一。到底是取值还是赋值，由函数的参数决定。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span> <span class="c1">//html()没有参数，表示取出h1的值
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">);</span> <span class="c1">//html()有参数Hello，表示对h1进行赋值
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>常见的取值和赋值函数如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">.</span><span class="nx">html</span><span class="p">()</span> <span class="c1">// 取出或设置html内容
</span><span class="c1"></span>
<span class="p">.</span><span class="nx">text</span><span class="p">()</span> <span class="c1">// 取出或设置text内容
</span><span class="c1"></span>
<span class="p">.</span><span class="nx">attr</span><span class="p">()</span> <span class="c1">// 取出或设置某个属性的值
</span><span class="c1"></span>
<span class="p">.</span><span class="nx">width</span><span class="p">()</span> <span class="c1">// 取出或设置某个元素的宽度
</span><span class="c1"></span>
<span class="p">.</span><span class="nx">height</span><span class="p">()</span> <span class="c1">// 取出或设置某个元素的高度
</span><span class="c1"></span>
<span class="p">.</span><span class="nx">val</span><span class="p">()</span> <span class="c1">// 取出某个表单元素的值
</span></code></pre></td></tr></table>
</div>
</div><p>需要注意的是，如果结果集包含多个元素，那么赋值的时候，将对其中所有的元素赋值；取值的时候，则是只取出第一个元素的值（.text()例外，它取出所有元素的text内容）。</p>
<p>​</p>
<h2 id="五元素的操作移动">五、元素的操作：移动</h2>
<blockquote>
<p>jQuery 设计思想之五，就是提供两组方法，来操作元素在网页中的位置移动。一组方法是直接移动该元素，另一组方法是移动其他元素，使得目标元素达到我们想要的位置。</p>
<p>假定我们选中了一个div元素，需要把它移动到p元素后面。</p>
</blockquote>
<p>第一种方法是使用 .insertAfter()，把div元素移动p元素后面：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">insertAfter</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">));</span>
</code></pre></td></tr></table>
</div>
</div><p>第二种方法是使用.after()，把p元素加到div元素前面：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">after</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">));</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>表面上看，这两种方法的效果是一样的，唯一的不同似乎只是操作视角的不同。但是实际上，它们有一个重大差别，那就是返回的元素不一样。第一种方法返回div元素，第二种方法返回p元素。你可以根据需要，选择到底使用哪一种方法。</p>
<p>使用这种模式的操作方法，一共有四对：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">.</span><span class="nx">insertAfter</span><span class="p">()</span>  <span class="nx">和</span> <span class="p">.</span><span class="nx">after</span><span class="p">()</span>   <span class="err">：</span><span class="nx">在现存元素的外部</span><span class="err">，</span><span class="nx">从后面插入元素</span>

<span class="p">.</span><span class="nx">insertBefore</span><span class="p">()</span> <span class="nx">和</span> <span class="p">.</span><span class="nx">before</span><span class="p">()</span>  <span class="err">：</span><span class="nx">在现存元素的外部</span><span class="err">，</span><span class="nx">从前面插入元素</span>

<span class="p">.</span><span class="nx">appendTo</span><span class="p">()</span>     <span class="nx">和</span> <span class="p">.</span><span class="nx">append</span><span class="p">()</span>  <span class="err">：</span><span class="nx">在现存元素的内部</span><span class="err">，</span><span class="nx">从后面插入元素</span>

<span class="p">.</span><span class="nx">prependTo</span><span class="p">()</span>    <span class="nx">和</span> <span class="p">.</span><span class="nx">prepend</span><span class="p">()</span> <span class="err">：</span><span class="nx">在现存元素的内部</span><span class="err">，</span><span class="nx">从前面插入元素</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="六元素的操作复制删除和创建">六、元素的操作：复制、删除和创建</h2>
<p>除了元素的位置移动之外， jQuery 还提供其他几种操作元素的重要方法。</p>
<p>复制元素使用 .clone()。</p>
<p>删除元素使用.remove()和.detach()。两者的区别在于，前者不保留被删除元素的事件，后者保留，有利于重新插入文档时使用。</p>
<p>清空元素内容（但是不删除该元素）使用.empty()。</p>
<p>创建新元素的方法非常简单，只要把新元素直接传入 jQuery 的构造函数就行了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;p&gt;Hello&lt;/p&gt;&#39;</span><span class="p">);</span>

<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;li class=&#34;new&#34;&gt;new list item&lt;/li&gt;&#39;</span><span class="p">);</span>

<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;list item&lt;/li&gt;&#39;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="汇总">汇总</h2>
<h3 id="jquery--选择器-">jQuery  选择器 ———</h3>
<blockquote>
<p>选择器通过标签名、属性名或内容对DOM元素进行快速、准确的定位。根据所获取页面中元素的不同，可以将选择器分为：基本选择器、层次选择器、过滤选择器和表单选择器。</p>
</blockquote>
<h3 id="1基本选择器">1、基本选择器</h3>
<blockquote>
<p>使用最频繁的选择器，包括元素 ID、Class 名、元素名等。</p>
</blockquote>
<p>id选择器：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#element-id&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>class选择器：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.class-name&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>元素选择器：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element-name&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="2层次选择器">2、层次选择器</h3>
<blockquote>
<p>通过DOM元素间的层次关系获取元素，主要层次关系包括后代、父子、相邻、兄弟关系等。</p>
</blockquote>
<p>根据祖先元素匹配所有后代元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ancestor descendant&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>根据父元素匹配所有的子元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;parent &gt; child&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>匹配所有紧接在prev元素后的相邻元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;prev + next&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>匹配prev元素之后的所有兄弟元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;prev ~ siblings&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="3过滤选择器">3、过滤选择器</h3>
<blockquote>
<p>过滤选择器根据某类过滤规则进行元素的匹配，以:开头。过滤选择器又分为：简单过滤选择器、内容过滤选择器、可见性过滤选择器、属性过滤选择器、子元素过滤选择器和表单对象属性过滤选择器。</p>
</blockquote>
<h4 id="31-简单过滤选择器">3.1 简单过滤选择器</h4>
<p>获取页面第一个和最后一个X元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:first&#39;</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:last&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有索引值为偶数和奇数的元素，索引值从0开始：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:even&#39;</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:odd&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取等于、大于和小于索引值的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:eq(index)&#39;</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:gt(index)&#39;</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:lt(index)&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取除给定的选择器外的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:not(selector)&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="32-内容过滤选择器">3.2 内容过滤选择器</h4>
<p>获取包含给定文本的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:contains(text)&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有不包含子元素或者文本的空元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:empty&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取含有选择器所匹配的元素的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:has(selector)&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取含有子元素或文本的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:parent&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="33-可见性过滤选择器">3.3 可见性过滤选择器</h4>
<p>获取所有不可见的元素，或者type为hidden的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:hidden&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有可见的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:visible&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="34-属性过滤选择器">3.4 属性过滤选择器</h4>
<p>获取包含给定属性的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element[attribute]&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取属性是给定值的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element[attribute=value]&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取属性不是给定值的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element[attribute!=value]&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取属性是以给定值开始的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element[attribute^=value]&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取属性是以给定值结束的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element[attribute$=value]&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取属性是包含给定值的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element[attribute*=value]&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="35-子元素过滤选择器">3.5 子元素过滤选择器</h4>
<p>获取父元素下的第一个、最后一个、唯一一个子元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;parent:first-child&#39;</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;parent:last-child&#39;</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;parent:only-child&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取父元素下的特定位置的元素，索引值从1开始：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;parent:nth-child(eq|even|odd|index)&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="36-表单对象属性过滤选择器">3.6 表单对象属性过滤选择器</h4>
<p>获取表单中所有属性为可用的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:enabled&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取表单中所有属性为不可用的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:disabled&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取表单中所有被选中的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:checked&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取表单中所有被选中option的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:selected&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="4表单选择器">4、表单选择器</h3>
<blockquote>
<p>通过它可以在页面中快速定位某表单对象。</p>
</blockquote>
<p>获取所有input、textarea、select等input元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:input&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有单行文本框：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:text&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有密码框：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:password&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有单项按钮：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:radio&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有复选框：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:checkbox&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有提交按钮：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:submit&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有图像域：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:image&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有重置按钮：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:reset&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有按钮：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:button&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有文件域：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:file&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="dom-操作-">DOM 操作 ———</h3>
<blockquote>
<p>在与页面中的元素进行交互式的操作中，主要包括对元素属性、内容、值、CSS等的操作。同时，还有对页面节点的操作，包括节点元素的创建、插入、复制、替换、删除等操作。</p>
</blockquote>
<h3 id="1元素属性操作">1、元素属性操作</h3>
<p>在  jQuery  中，可以对元素属性进行获取、设置、删除等操作。</p>
<p>获取指定属性名的元素属性：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>设置元素属性值，key为属性名称，value为属性值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>设置多个属性值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">attr</span><span class="p">({</span><span class="nx">keyN</span><span class="o">:</span><span class="nx">valueN</span><span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>删除指定属性名的元素属性：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">removeAttr</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="2元素内容操作">2、元素内容操作</h3>
<blockquote>
<p>在 jQuery 中，可以获取和设置元素的HTML或文本内容。</p>
</blockquote>
<p>获取元素的HTML/文本内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">html</span><span class="p">()</span>
<span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">text</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>设置元素的HTML/文本内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>两者的区别是，html() 方法仅支持 HTML 类型的文档，不支持 XML。而 text() 方法不仅支持 HTML 类型，也支持 XML 类型。</p>
</blockquote>
<p>​</p>
<h3 id="3元素值操作">3、元素值操作</h3>
<blockquote>
<p>在 jQuery 中，可以获取和设置元素的值。</p>
</blockquote>
<p>获取元素的值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>设置元素的值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Tips：通过 val().join(&rdquo;,&quot;) 获取 select 标签中的多个选项值。</p>
</blockquote>
<p>​</p>
<h3 id="4元素样式操作">4、元素样式操作</h3>
<blockquote>
<p>在 jQuery 中，可以直接设置样式、增加CSS类别、类别切换、删除类别等操作。</p>
</blockquote>
<p>为指定name的样式设置值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>为元素增加样式类：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="kr">class</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>切换不同的样式类：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="kr">class</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>删除元素的样式类：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="kr">class</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="5创建节点元素">5、创建节点元素</h3>
<blockquote>
<p>如果要在页面中添加某个元素，需要先通过构造函数创建节点元素：</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">html</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="6插入节点元素">6、插入节点元素</h3>
<blockquote>
<p>按照插入元素的位置区分，可以分为内部和外部两种插入方法。</p>
</blockquote>
<h4 id="61-内部插入节点">6.1 内部插入节点</h4>
<p>向所选择的元素内部追加/前置内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">prepend</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>向所选择的元素内部追加/前置function方法所返回的内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="kd">function</span><span class="p">())</span>
<span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">prepend</span><span class="p">(</span><span class="kd">function</span><span class="p">())</span>
</code></pre></td></tr></table>
</div>
</div><p>把所选择的元素追加/前置到另一个指定的元素集合中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">prependTo</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="62-外部插入节点">6.2 外部插入节点</h4>
<p>向所选择的元素外部追加/前置内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">after</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">before</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>向所选择的元素外部追加/前置function方法所返回的内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">after</span><span class="p">(</span><span class="kd">function</span><span class="p">())</span>
<span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">before</span><span class="p">(</span><span class="kd">function</span><span class="p">())</span>
</code></pre></td></tr></table>
</div>
</div><p>把所选择的元素追加/前置到另一个指定的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">insertAfter</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="7复制节点元素">7、复制节点元素</h3>
<blockquote>
<p>将某个元素节点复制到另一个节点之后。</p>
</blockquote>
<p>复制匹配的DOM元素并且选中复制成功的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">clone</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>在复制时将该元素的所有行为也进行复制：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">clone</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="8替换节点元素">8、替换节点元素</h3>
<p>将所有选择的元素替换成指定的HTML或DOM元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">replaceWith</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>将所有选择的元素替换成指定selector的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">replaceAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>一旦完成替换，被替换元素中的全部事件将会消失。</p>
<p>​</p>
<h3 id="9删除节点元素">9、删除节点元素</h3>
<p>删除指定的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">remove</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>删除指定的元素，但保留被移除元素的事件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">detach</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>清空所选择的页面元素的内容，但不移除该元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">empty</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="10通用操作">10、通用操作</h3>
<blockquote>
<p>这类操作不需要选择元素就可以直接使用。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span>           <span class="c1">// 去除字符串两端的空格。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">()</span>           <span class="c1">// 遍历一个数组或对象。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">inArray</span><span class="p">()</span>        <span class="c1">// 返回一个值在数组中的索引位置。如果该值不在数组中，则返回-1。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">grep</span><span class="p">()</span>           <span class="c1">// 返回数组中符合某种标准的元素。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">()</span>         <span class="c1">// 将多个对象，合并到第一个对象。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">makeArray</span><span class="p">()</span>      <span class="c1">// 将对象转化为数组。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">type</span><span class="p">()</span>           <span class="c1">// 判断对象的类别（函数对象、日期对象、数组对象、正则对象等等）。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">isArray</span><span class="p">()</span>        <span class="c1">// 判断某个参数是否为数组。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">isEmptyObject</span><span class="p">()</span>  <span class="c1">// 判断某个对象是否为空（不含有任何属性）。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">()</span>     <span class="c1">// 判断某个参数是否为函数。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">isPlainObject</span><span class="p">()</span>  <span class="c1">// 判断某个参数是否为用&#34;{}&#34;或&#34;new Object&#34;建立的对象。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">support</span><span class="p">()</span>        <span class="c1">// 判断浏览器是否支持某个特性。
</span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>jQuery 的设计思想（下）</title>
    <link>https://liubingxuan.xyz/dom-jquery-prototype/</link>
    <pubDate>Sun, 25 Oct 2020 14:20:02 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://liubingxuan.xyz/dom-jquery-prototype/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="命名风格">命名风格</h2>
<blockquote>
<p>命名风格：我们在写代码时都会有一些风格，这些风格可能是业界共识、也可能是自己的小技巧</p>
<ul>
<li>下面介绍一个命名风格（以前可能是业界共识，但现在已经不太常用了，因为 jQuery 很少人用了）</li>
</ul>
</blockquote>
<h3 id="下面的代码令人误解">下面的代码令人误解</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">div1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.test&#39;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">div2</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.test&#39;</span><span class="p">)</span>
<span class="c1">// div2 到底是 DOM 对象，还是 jQuery 对象? 
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>「DOM 对象」只能使用 DOM API，如 querySelector、appendChild …</li>
<li>「jQuery 对象」只能使用 jQuery 的 API，如 find、 addClass …</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div#test&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>我们会误以为 div 是一个 DOM</li>
<li>实际上 div 是 jQuery 构造的 api 对象</li>
<li>怎么避免这种误解呢？</li>
</ul>
<h3 id="改成这样">改成这样</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">elDiv1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.test&#39;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">$div2</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.test&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<ul>
<li>
<p>声明变量用来表示 DOM 对象，可以变量名可以前置： el  （可选）</p>
</li>
<li>
<p>声明变量用来表示 jQuery 产生的 api 对象，变量名前 + $</p>
</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">$div</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div#test&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>$div.appendChild 不存在，因为它不是 DOM 对象</li>
<li>$div.find 存在，因为它是 jQuery 对象</li>
</ul>
<blockquote>
<p>代码中，所有 $ 开头的变量，都是 jQuery 对象</p>
<ul>
<li>这是约定，除非特殊说明</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="jquery-代码">jQuery 代码</h2>
<blockquote>
<p>当前已经实现的代码</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/*
</span><span class="cm">  * elements 表示通过选择器找到的目标元素组成的伪数组
</span><span class="cm">  * */</span>
  <span class="kd">let</span> <span class="nx">elements</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">selectorOrArray</span> <span class="o">===</span> <span class="s2">&#34;string&#34;</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 重载
</span><span class="c1"></span>    <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">selectorOrArray</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">elements</span> <span class="o">=</span> <span class="nx">selectorOrArray</span>
  <span class="p">}</span>
  <span class="c1">// ↓ api 可以操作 elements（this 就是 jQuery 返回的 api）
</span><span class="c1"></span>  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="k">this</span>
    <span class="p">},</span>
    <span class="nx">find</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`elements`</span><span class="p">,</span> <span class="nx">elements</span><span class="p">)</span>
      <span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">array</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)))</span>
      <span class="p">}</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`array`</span><span class="p">,</span> <span class="nx">array</span><span class="p">)</span>
      <span class="nx">array</span><span class="p">.</span><span class="nx">oldApi</span> <span class="o">=</span> <span class="k">this</span>
      <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="nx">oldApi</span><span class="o">:</span> <span class="nx">selectorOrArray</span><span class="p">.</span><span class="nx">oldApi</span><span class="p">,</span>  <span class="c1">// 在 find 中，通过 array 保存下来的旧的 api
</span><span class="c1"></span>    <span class="nx">end</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">oldApi</span>
    <span class="p">},</span>
    <span class="nx">each</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">elements</span><span class="p">)</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="k">this</span> <span class="c1">// this 就是 api !!!
</span><span class="c1"></span>    <span class="p">},</span>
    <span class="nx">print</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">elements</span><span class="p">)</span>
      <span class="k">return</span> <span class="k">this</span>
    <span class="p">},</span>
    <span class="nx">parent</span><span class="p">()</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="c1">// 遍历父元素 ↓
</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">node</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 去重
</span><span class="c1"></span>          <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span>
        <span class="p">}</span>
      <span class="p">})</span>
      <span class="nx">array</span><span class="p">.</span><span class="nx">oldApi</span> <span class="o">=</span> <span class="k">this</span>
      <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="nx">children</span><span class="p">()</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">node</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(...</span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span>
        <span class="p">}</span>
      <span class="p">})</span>
      <span class="nx">array</span><span class="p">.</span><span class="nx">oldApi</span> <span class="o">=</span> <span class="k">this</span>
      <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="cm">/******************************************/</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="调用">调用</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">api1</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.red&#39;</span><span class="p">)</span>  <span class="c1">// api1 用来操作 red 元素
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">api2</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.blue&#39;</span><span class="p">)</span>  <span class="c1">// api2 用来操作 blue 元素
</span><span class="c1"></span><span class="cm">/*
</span><span class="cm">* 由上，可以发现 api1 和 api2 重复了 （?!! 什么意思）
</span><span class="cm">* */</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="发现问题--api1-和-api2-重复了">发现问题 🎃 api1 和 api2 重复了</h2>
<h3 id="分析-">分析 🎃</h3>
<blockquote>
<p>api1 和 api2 重复了 （?!! 什么意思）</p>
</blockquote>
<p></p>
<ul>
<li>api1 对应一块内存 #101
<ul>
<li>在 #101 中，有 find （#201）、each（#209）</li>
<li>内存 #201 对应一个find函数、内存 #209 对应一个each函数</li>
</ul>
</li>
<li>api2 对应内存 #409
<ul>
<li>在 #409 中，有 find （#509）、each（#519）</li>
<li>内存 #509 对应一个find函数、内存 #519 对应一个each函数</li>
</ul>
</li>
<li>可以比较清楚的发现：
<ul>
<li>两个 find 、两个 each 实际上应该是同一个函数的实现</li>
<li>但 jQuery 每创建一个 api ，这些函数也都被再次创建了一遍</li>
<li>201和509（209和519）是完全一样的两块内存</li>
</ul>
</li>
<li>这就是前面提到的「 api1 和 api2 重复了」</li>
</ul>
<h3 id="解决方法-">解决方法 🎃</h3>
<ul>
<li>
<p>find 和 each 应该作为「共用属性」</p>
</li>
<li>
<p>那为什么不把共用的属性写到一个对象上去呢？</p>
<ul>
<li>用一个 __proto__ 属性保存下共有属性的地址，即可</li>
<li>把这个包含共有属性的对象，放到 jQuery 上，让 jQuery.prototype 等于这个对象</li>
</ul>
<p></p>
</li>
</ul>
<h4 id="套用原型公式">套用原型公式</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">对象</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">其构造函数</span><span class="p">.</span><span class="nx">prototype</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">api1</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.red&#39;</span><span class="p">)</span>
<span class="nx">api1</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span>   <span class="c1">// 原型公式
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">api2</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.blue&#39;</span><span class="p">)</span>
<span class="nx">api2</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="使用原型-改造-jquery-">使用原型 改造 jQuery ⭕️</h2>
<h3 id="第一版-jquery-代码">第一版 jQuery 代码</h3>
<blockquote>
<p>先看看之前的版本</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">elements</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">selectorOrArray</span> <span class="o">===</span> <span class="s2">&#34;string&#34;</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 重载
</span><span class="c1"></span>    <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">selectorOrArray</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">elements</span> <span class="o">=</span> <span class="nx">selectorOrArray</span>
  <span class="p">}</span>
  <span class="c1">// ↓ api 可以操作 elements（this 就是 jQuery 返回的 api）
</span><span class="c1"></span>  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">jquery</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nx">oldApi</span><span class="o">:</span> <span class="nx">selectorOrArray</span><span class="p">.</span><span class="nx">oldApi</span><span class="p">,</span>  <span class="c1">// 通过 array 保存下上一次的api
</span><span class="c1"></span>    <span class="c1">// 下面是各种功能函数
</span><span class="c1"></span>    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{...},</span>
    <span class="nx">find</span><span class="p">()</span> <span class="p">{...},</span>
    <span class="nx">each</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{...},</span>
    <span class="nx">appendTo</span><span class="p">()</span> <span class="p">{...},</span>
    <span class="p">...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用原型进行改造-">使用原型进行改造 ⭕️</h3>
<h4 id="-共有属性函数转移到原型上">① 共有属性（函数）转移到原型上</h4>
<blockquote>
<p>把所有共有属性，都移到 jQuery 的原型 prototype 上</p>
<p>别忘了 constructor</p>
</blockquote>
<ul>
<li>这里是直接给 jQuery.prototype 赋新值，这样写很方便，但是会导致原本原型上的 <a href="" rel="">constructor</a> 被覆盖丢失，所以要手动加回去 <a href="" rel="">constructor</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">constructor</span><span class="o">:</span> <span class="nx">jQuery</span><span class="p">,</span>
  <span class="nx">jquery</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="c1">// 下面是各种功能函数
</span><span class="c1"></span>  <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{...},</span>
  <span class="nx">find</span><span class="p">()</span> <span class="p">{...},</span>
  <span class="nx">each</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{...},</span>
  <span class="nx">appendTo</span><span class="p">()</span> <span class="p">{...},</span>
  <span class="p">...</span>
<span class="p">}</span>
  
</code></pre></td></tr></table>
</div>
</div><h4 id="-把-prototype-赋予-jquery-创建的对象">② 把 prototype 赋予 jQuery 创建的对象</h4>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener noreffer">Object.create()</a> ：创建对象，并给对象指定原型 __proto__</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">elements</span>
  <span class="c1">// ...
</span><span class="c1"></span>  
  <span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>  <span class="c1">// 创建 api对象，并指定其原型是 jQuery.prototype
</span><span class="c1"></span>  <span class="c1">// 相当于 const api = {__proto__: jQuery.prototype}
</span><span class="c1"></span>  <span class="p">...</span>
  
  <span class="k">return</span> <span class="nx">api</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="-往-api-上添加-elements-oldapi">③ 往 api 上添加 elements 、oldApi</h4>
<blockquote>
<p>问题分析：</p>
<p>当我们把所有功能函数都从 api（独立函数） 上拿走，放到原型（独立对象）上之后
原型上的函数就获取不到 jQuery 里的 elements ，elements 仅作用在在 window.jQuery 函数中</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">p1</span><span class="p">){</span> 
  <span class="kd">let</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">p1</span><span class="p">)</span>
  <span class="k">return</span> <span class="nx">api</span>
<span class="p">};</span>
<span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="nx">get</span><span class="p">(</span><span class="nx">index</span><span class="p">){</span> <span class="k">return</span> <span class="nx">elements</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span> <span class="p">},</span>    <span class="c1">// 这里的elements获取不到上面的 elements
</span><span class="c1"></span>  <span class="nx">end</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">oldApi</span><span class="p">},</span>
  <span class="nx">find</span><span class="p">(){</span> <span class="p">},</span> 
  <span class="c1">// ...
</span><span class="c1"></span><span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>那 find、get … 怎么操作 elements 呢？</p>
<ul>
<li>
<p>每生成新的 elements，都会创建、返回新的 api（api 的原型上就是这些功能函数）</p>
</li>
<li>
<p><strong>需要找到它们之间的联系</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.test&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">)</span>  
<span class="c1">// addClass 函数中的 this 指向函数调用者 $(&#39;.test&#39;)
</span><span class="c1">// 而 $(&#39;.test&#39;) === api ，所以函数中的 this 指向的就是 api
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>所以要想在函数内部，获取到 elements，可以把 elements 放到 api 上</p>
</li>
</ul>
</li>
<li>
<p>那就在 api 上添加一个属性 elements，用来保存  jQuery 创建的 elements</p>
</li>
<li>
<p>在原型里的函数中，通过 <a href="" rel="">this.elements</a>，就可以访问到这个【目标元素的数组】，加以操作</p>
</li>
</ul>
<blockquote>
<p>综上：</p>
<ul>
<li>在原型里的函数，要获取到 jQuery 里的变量。必须通过桥梁【 api 、this 】
<ul>
<li><strong>桥梁：只要 api 上有 jQuery 里的变量，函数就能通过 this 关键字获取到这个变量</strong></li>
</ul>
</li>
</ul>
</blockquote>
<p>注：oldApi 代码如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">end</span><span class="p">(){</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">oldApi</span>  
  <span class="c1">// end 原本就是要操作【调用者api】中的 oldApi
</span><span class="c1"></span>  <span class="c1">// 所以 this(api) 上必须有 oldApi，end才能操作到，所以同样也需要往 api 上添加 oldApi
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p><a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c7-JS%e7%bc%96%e7%a8%8b%e6%8e%a5%e5%8f%a3%5c4-jQuery%e4%b8%ad%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%9e%8b%ef%bc%88%e4%b8%8b%ef%bc%89%5cdom-2-github-prototype%5csrc" rel="">完整代码</a></p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener noreffer">Object.assign</a>：把后面对象的属性，复制到前面的对象上（注意是浅复制，JS 本身没有深复制）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">elements</span>
  <span class="c1">// ...  elements = document.querySelectorAll(selectorOrArray)
</span><span class="c1"></span> 
  <span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span>
  <span class="c1">// 把所需变量放到 api 上（两种方式）
</span><span class="c1"></span>  <span class="c1">// （方式一 👇）
</span><span class="c1"></span>  <span class="c1">// api.elements = elements 
</span><span class="c1"></span>  <span class="c1">// api.oldApi = selectorOrArray.oldApi // 等同于 ↓
</span><span class="c1"></span>  <span class="c1">// （方式二 👇）
</span><span class="c1"></span>  <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">api</span><span class="p">,</span> <span class="p">{</span>  <span class="c1">// Object.assign（两个参数）把后面对象的属性，复制到前面的对象上
</span><span class="c1"></span>    <span class="nx">elements</span><span class="o">:</span> <span class="nx">elements</span><span class="p">,</span>
    <span class="nx">oldApi</span><span class="o">:</span> <span class="nx">selectorOrArray</span><span class="p">.</span><span class="nx">oldApi</span>
  <span class="p">})</span>
  
  <span class="k">return</span> <span class="nx">api</span>
<span class="p">}</span>

<span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 函数在这里
</span><span class="c1"></span>  <span class="nx">constructor</span><span class="o">:</span> <span class="nx">jQuery</span><span class="p">,</span>
  <span class="nx">jquery</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>

  <span class="c1">// 所有对 elements 的调用，都改成 this.elements
</span><span class="c1"></span>  <span class="nx">get</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span>
  <span class="p">},</span>
  <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">element</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
      <span class="nx">element</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="k">this</span>
  <span class="p">},</span>
  <span class="nx">end</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">oldApi</span> <span class="c1">// this 就是新 api
</span><span class="c1"></span>  <span class="p">}</span>
  <span class="nx">find</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">elements2</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">))</span>
      <span class="nx">array</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">elements2</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">array</span><span class="p">.</span><span class="nx">oldApi</span> <span class="o">=</span> <span class="k">this</span> <span class="c1">// find 返回值会覆盖原本的 api，所以提取保存下旧的 api（this）
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">each</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{...},</span>
  <span class="nx">appendTo</span><span class="p">()</span> <span class="p">{...},</span>
  <span class="p">...</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c7-JS%e7%bc%96%e7%a8%8b%e6%8e%a5%e5%8f%a3%5c4-jQuery%e4%b8%ad%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%9e%8b%ef%bc%88%e4%b8%8b%ef%bc%89%5cdom-2-github-prototype%5csrc" rel="">完整代码</a></li>
</ul>
<h3 id="补充-jqueryfn">补充： jQuery.fn</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{...}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>在 jQuery 的源码中，你会发现还多赋值了一个 jQuery.fn （如上）。用 fn 来表示 prototype 原型
<ul>
<li>可能是嫌弃 prototype 这个单词太长了，所以想用 fn 来表示</li>
<li>也可能是想兼容一些不太理解 prototype 的开发者，所以干脆换一个更短的单词 fn</li>
<li>总之，就是 jQuery 的源码中，对 jQuery 的 prototype 原型取了一个别名叫： fn</li>
</ul>
</li>
</ul>
<h3 id="总结">总结</h3>
<blockquote>
<p>$  指代 jQuery</p>
</blockquote>
<ul>
<li>
<p>把共用属性（函数）全都放到  $.prototype</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">.</span><span class="nx">fn</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// 名字太长不爽，再起个别名 fn
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>然后让 api.__proto__ 指向 $.fn （也就是让 api.__proto__ 指向了 $.prototype）</p>
</li>
</ul>
<h3 id="完整代码">完整代码</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">elements</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">selectorOrArrayOrTemplate</span> <span class="o">===</span> <span class="s2">&#34;string&#34;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s2">&#34;&lt;&#34;</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 创建 div
</span><span class="c1"></span>      <span class="nx">elements</span> <span class="o">=</span> <span class="p">[</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">)]</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">// 查找 div
</span><span class="c1"></span>      <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">elements</span> <span class="o">=</span> <span class="nx">selectorOrArrayOrTemplate</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">createElement</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;template&#34;</span><span class="p">)</span>
    <span class="nx">container</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">string</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span>
    <span class="k">return</span> <span class="nx">container</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">firstChild</span>
  <span class="p">}</span>

  <span class="c1">// api 可以操作elements
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span> <span class="c1">// 创建一个对象，这个对象的 __proto__ 为括号里面的东西
</span><span class="c1"></span>  <span class="c1">// const api = {__proto__: jQuery.prototype}
</span><span class="c1"></span>  <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">api</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">elements</span><span class="o">:</span> <span class="nx">elements</span><span class="p">,</span>
    <span class="nx">oldApi</span><span class="o">:</span> <span class="nx">selectorOrArrayOrTemplate</span><span class="p">.</span><span class="nx">oldApi</span>
  <span class="p">})</span>
  <span class="c1">// api.elements = elements
</span><span class="c1"></span>  <span class="c1">// api.oldApi = selectorOrArrayOrTemplate.oldApi
</span><span class="c1"></span>  <span class="k">return</span> <span class="nx">api</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="原型">原型</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">constructor</span><span class="o">:</span> <span class="nx">jQuery</span><span class="p">,</span>
  <span class="nx">jquery</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="nx">get</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span>
  <span class="p">},</span>
  <span class="nx">appendTo</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">node</span> <span class="k">instanceof</span> <span class="nx">Element</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">el</span> <span class="p">=&gt;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">el</span><span class="p">))</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">jquery</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">el</span> <span class="p">=&gt;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">el</span><span class="p">))</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="nx">append</span><span class="p">(</span><span class="nx">children</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">children</span> <span class="k">instanceof</span> <span class="nx">Element</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">children</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">children</span> <span class="k">instanceof</span> <span class="nx">HTMLCollection</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">children</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
      <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">children</span><span class="p">.</span><span class="nx">jquery</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">children</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">node</span> <span class="p">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">node</span><span class="p">))</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="nx">find</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">elements2</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">))</span>
      <span class="nx">array</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">elements2</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">array</span><span class="p">.</span><span class="nx">oldApi</span> <span class="o">=</span> <span class="k">this</span> <span class="c1">// this 就是 旧 api
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">each</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">i</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="k">this</span>
  <span class="p">},</span>
  <span class="nx">parent</span><span class="p">()</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">node</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">})</span>
    <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">children</span><span class="p">()</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">node</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(...</span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">})</span>
    <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">print</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="c1">// 闭包：函数访问外部的变量
</span><span class="c1"></span>  <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">element</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
      <span class="nx">element</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="k">this</span>
  <span class="p">},</span>
  <span class="nx">end</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">oldApi</span> <span class="c1">// this 就是新 api
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="库封装完成">库封装完成</h2>
<blockquote>
<p>可以把代码公开了</p>
</blockquote>
<ul>
<li>
<p>发布到 GitHub</p>
</li>
<li>
<p>添加文档，告诉别人怎么用</p>
</li>
<li>
<p>获得称赞 ❤️ 🧡 💛 💚 💙 💜 🖤 🤍 🤎</p>
<ul>
<li>实现一个封装的库，提供给别人使用，好用的话，别人就会给你点赞</li>
</ul>
<ul>
<li>jQuery 就是早期一个程序员写的库，并提供给所有开发者使用 👍👍</li>
</ul>
</li>
<li>
<p>这就是程序员的社区。人人为我，我为人人</p>
</li>
</ul>
<blockquote>
<p>当然现在的水平，肯定不够指导别人。</p>
<p>就先把代码写完整，自己用成功一次即可</p>
<p>以后会学习「如何做单元测试」（当然「单元测试」可能比「封装jQuery」的代码还难）</p>
</blockquote>
<blockquote>
<p>现在需要做的就是：自己能动手写成至少 10% 的这么一个轮子</p>
<ul>
<li>只要你能完成，那代码水平肯定会显著提高</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="jquery-有多牛-x">jQuery 有多牛 X</h2>
<blockquote>
<p>它是目前前端<strong>最长寿</strong>的库，2006年发布 （已经14岁了）</p>
<ul>
<li>vue 、react 也才四五岁</li>
<li>在前端历史上，有数以万计的库，最终能够活下来并一直被使用的库，很少很少。</li>
<li>jQuery 是目前最长寿的一个</li>
</ul>
</blockquote>
<blockquote>
<p>它是世界上使用<strong>最广泛</strong>的库，<a href="https://trends.builtwith.com/javascript/jQuery" target="_blank" rel="noopener noreffer">全球80%的网站</a>在用</p>
<ul>
<li>可能现在新的科技公司不会再用 jQuery</li>
<li>但是老牌大公司，像是阿里巴巴、淘宝，一直都在用 jQuery</li>
</ul>
</blockquote>
<h3 id="设计模式">设计模式？</h3>
<blockquote>
<p>为什么 jQuery 这么牛 X   ？</p>
<ul>
<li>因为 jquery 的代码设计，做的 特 ~ 别 ~ 的 好。</li>
<li>好到没办法改进</li>
<li>我们今天学习的、很多写代码的套路，都是从 jQuery 的源码中学来的（工作个四五年再去看 jQuery 源码学习，小白直接看无异于自杀）</li>
</ul>
</blockquote>
<h3 id="jquery-用到了哪些设计模式">jQuery 用到了哪些设计模式</h3>
<ul>
<li>
<p><strong>不用 new 的构造函数</strong>（jQuery做到了），这个模式没有专门的名字</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">JQuery</span><span class="p">(</span><span class="s1">&#39;.test&#39;</span><span class="p">)</span>   <span class="p">=&gt;</span>   <span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.test&#39;</span><span class="p">)</span>  <span class="c1">//在jQuery之前没人想到可以这样
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>$(<strong>支持多种参数</strong>)，这个模式叫做<strong>重载</strong></p>
<ul>
<li>可以传选择器、传数组、传 html 结构</li>
</ul>
</li>
<li>
<p><strong>用闭包隐藏细节</strong>，这个模式没有专门的名字</p>
<ul>
<li>闭包：在一个函数中，调用了函数外部的变量</li>
<li><u>用户永远无法直接操作 elements （隐藏细节），必须通过 api 中的函数才能操作到 elements</u></li>
<li>jQuery 每次生成 elements 后，这个 elements 可以一直存活。因为 jQuery 函数返回的 api 、api 中的函数里仍然在获取 elements 且函数返回值是 api。细想，这就导致 elements 一直在被访问，不断在函数的返回值中被调用。直到 api 消失，elements 才会消失</li>
</ul>
</li>
<li>
<p>$div.text() 即可读也可写，这个模式叫 <strong>getter/setter</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">getText</span><span class="p">()</span>
<span class="nx">setText</span><span class="p">(</span><span class="s1">&#39;newValue&#39;</span><span class="p">)</span>  <span class="c1">// 以前都是两个函数来实现读、写
</span><span class="c1">// 而jQuery中只用一个函数，根据参数个数，区分读写
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>$.fn 是 $.prototype 的别名，这叫<strong>别名</strong></p>
<ul>
<li>这的确是设计模式，因为在 jQuery 前并没有人这么干过</li>
</ul>
</li>
<li>
<p>jQuery <strong>针对不同环境使用不同代码</strong>，这叫<strong>适配器</strong></p>
<ul>
<li>电源适配器：你在日本，就调整成 110v，在中国，就调整成220v</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(){</span>
    
<span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(){</span>
    
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="设计模式到底是啥">设计模式到底是啥</h3>
<ul>
<li>老子这个代码写得太漂亮了，别人肯定也用得到（去掉 new、重载、闭包、getter/setter、别名、适配器…）</li>
<li>那就给这种写法取个名字吧，比如：适配器模式（if else）</li>
<li>设计模式，就是对通用代码取个名字而已
<ul>
<li>实际上就是程序员的黑话、行话</li>
</ul>
</li>
</ul>
<p>​</p>
<blockquote>
<ul>
<li><strong>适配器</strong>：就是针对不同环境使用不同代码</li>
<li><strong>别名</strong>：让一个名字等于另外一个名字、</li>
<li><strong>getter/setter</strong>：一个函数，既可以get 、也可以 set （可读可写）</li>
<li><strong>闭包隐藏细节</strong>：生成一个变量（elements），一个函数（addClass）去读这个变量</li>
<li><strong>重载</strong>：一个函数支持多种形式的参数</li>
<li><strong>不用 new 的构造函数</strong>：要知道是怎么一回事   <code>const api = new JQuery('.test')   =&gt;   const api = $('.test')</code></li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="我应该学习设计模式吗">我应该学习设计模式吗？</h3>
<h4 id="设计模式不是用来学的">设计模式不是用来学的</h4>
<ul>
<li>你看了这些代码</li>
<li>但你并不知道这代码用来解决什么问题</li>
<li>看了白看</li>
</ul>
<h4 id="设计模式是用来总结的">设计模式是用来总结的</h4>
<ul>
<li>
<p>你只管去写代码</p>
</li>
<li>
<p>把你的代码尽量写好，不断重写</p>
</li>
<li>
<p>总结你的代码，把写得好的地方抽象出来</p>
<ul>
<li>
<p>看看符合哪个设计模式</p>
<p>（并不是知道设计模式才这么写的，而是写完后发现，居然用到了设计模式）</p>
</li>
<li>
<p>你就可以告诉别人你用到了这几个设计模式</p>
</li>
<li>
<p>显得你特别高端</p>
</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="有人说不用学-jquery">有人说不用学 jQuery</h3>
<h4 id="真相">真相</h4>
<ul>
<li>jQuery 这么简单、经典的库，为什么不学？</li>
<li>通过 jQuery 可以学会很多封装技巧，为什么不学？
<ul>
<li>把一个变量放到函数里面、暴露出 api，api 可以操作变量，这就是 封装</li>
</ul>
</li>
<li>连 jQuery 都理解不了，Vue / React 肯定学不好</li>
</ul>
<h4 id="推荐文章">推荐文章</h4>
<ul>
<li>《<a href="https://fangyinghang.com/why-still-jquery/" target="_blank" rel="noopener noreffer">jQuery都过时了，那我还学它干嘛？</a>》</li>
</ul>]]></description>
</item><item>
    <title>jQuery 的设计思想（上）</title>
    <link>https://liubingxuan.xyz/dom-jquery-handwritten/</link>
    <pubDate>Sat, 24 Oct 2020 01:23:34 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://liubingxuan.xyz/dom-jquery-handwritten/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="前言">前言</h2>
<ul>
<li>本节内容，把上节封装的 dom 代码，改用 jQuery 风格再次重新封装</li>
<li>jQuery 非常简单</li>
</ul>
<p>​</p>
<h2 id="用-jquery-风格重新封装">用 jQuery 风格重新封装</h2>
<blockquote>
<p>这节课你可能经常对自己说：我怎么没想到？！</p>
</blockquote>
<h2 id="准备工作">准备工作</h2>
<blockquote>
<p>每节的准备工作都差不多，溜溜的用起来</p>
</blockquote>
<p>新建项目目录 <a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c7-JS%e7%bc%96%e7%a8%8b%e6%8e%a5%e5%8f%a3%5c3-jQuery%e4%b8%ad%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%9e%8b%ef%bc%88%e4%b8%8a%ef%bc%89" rel="">dom-2</a>   &gt;    src    &gt;    index.html 、 main.js 、 jquery.js</p>
<h3 id="indexhtml">index.html</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh-CN&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span>
        <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,viewport-fit=cover&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>手写jQuery<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
  你好
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;jquery.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;main.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="jqueryjs">jquery.js</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 第一步，声明  window.jQuery 是一个函数（？！先不用管为什么是函数）
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`我是jQuery`</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="mainjs">main.js</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">jQuery</span><span class="p">()</span> <span class="c1">// window.jQuery()    // output：我是jQuery
</span></code></pre></td></tr></table>
</div>
</div><h3 id="开启本地服务">开启本地服务</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">yarn</span> <span class="nx">global</span> <span class="nx">add</span> <span class="nx">parcel</span>
<span class="nx">parcel</span> <span class="nx">src</span><span class="o">/</span><span class="nx">index</span><span class="p">.</span><span class="nx">html</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="链式风格-">链式风格 ❤️</h2>
<blockquote>
<p>看一下我们就要实现一个什么的代码 👇</p>
</blockquote>
<h3 id="也叫-jquery-风格">也叫 jQuery 风格</h3>
<ul>
<li>window.jQuery() 是我们提供的全局函数</li>
</ul>
<h3 id="特殊函数-jquery">特殊函数 jQuery</h3>
<ul>
<li><code>jQuery(选择器) </code> 用于获取对应的元素</li>
<li>但它却不返回这些元素</li>
<li>相反，它返回一个对象，称为 <strong>jQuery 构造出来的对象</strong>    <a href="" rel="">（ 也就是最初代码中的那个 api ）</a></li>
<li>这个对象可以操作对应的元素</li>
<li>听不懂？直接写代码！</li>
<li><a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c7-JS%e7%bc%96%e7%a8%8b%e6%8e%a5%e5%8f%a3%5c3-jQuery%e4%b8%ad%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%9e%8b%ef%bc%88%e4%b8%8a%ef%bc%89" rel="">本地项目dom-2</a></li>
</ul>
<p>​</p>
<h3 id="代码-">代码 ⭕️</h3>
<h4 id="indexhtml-1">index.html</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;test&#34;</span><span class="p">&gt;</span>你好1<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;test&#34;</span><span class="p">&gt;</span>你好2<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;test&#34;</span><span class="p">&gt;</span>你好3<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;jquery.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;main.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="jqueryjs-1">jquery.js</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 第一步，声明  window.jQuery 是一个函数（？！）（先不用管为什么是函数）
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span>  <span class="c1">// 获取 selector 的全部元素（得到一个数组）
</span><span class="c1"></span>  <span class="c1">// return elements
</span><span class="c1"></span>  <span class="c1">// 常规操作：就直接返回这个通过选择器找到的元素。
</span><span class="c1"></span>  <span class="c1">// 但jQuery做了反常规的操作：获取到元素后，没有返回这个元素，而是返回了可以操作这个元素的 api
</span><span class="c1"></span>  <span class="c1">// 如下：
</span><span class="c1"></span>  <span class="c1">// api 可以操作 elements
</span><span class="c1"></span>  <span class="c1">// api 是个对象，里面包含各种可以操作 elements 的函数。
</span><span class="c1"></span>  <span class="c1">// 如，addClass 就是给 elements 添加类名的函数
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// 函数内访问了函数外部的变量，这就是「闭包」
</span><span class="c1"></span>    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// elements 是 addClass 这个函数外部的变量
</span><span class="c1"></span>      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 遍历所有获取到的元素，添加类名
</span><span class="c1"></span>        <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
        
      <span class="p">}</span>
      <span class="c1">// return null
</span><span class="c1"></span>      <span class="k">return</span> <span class="nx">api</span>  <span class="c1">// 返回值是 api，而 api 里有很多方法，所以可以通过返回值继续调用.addClass 形成一个链条
</span><span class="c1"></span>    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">api</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="mainjs-1">main.js</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">(</span><span class="s2">&#34;.test&#34;</span><span class="p">)</span> <span class="c1">// 通过选择器获取到元素，但不返回该元素，返回 api 对象 (api对象里有很多方法)
</span><span class="c1">// console.log(api.addClass)
</span><span class="c1">// 遍历所有获取到的元素，添加 .red 类名
</span><span class="c1"></span><span class="nx">api</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&#34;red&#34;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>
<span class="c1">// api.addClass 返回值是 api，而 api 里有很多方法，所以可以通过返回值继续调用.addClass 形成一个链条
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h3 id="jquery-代码变型-1">jQuery 代码变型 1️⃣</h3>
<blockquote>
<p>下面的 return 的变化，必须理解</p>
</blockquote>
<h4 id="return-的骚操作--1">return 的骚操作  1️⃣</h4>
<blockquote>
<p>用 this 代替 api</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span>  <span class="c1">// 获取 selector 的全部元素（得到一个数组）
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> 
        <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
        
      <span class="p">}</span>
      <span class="c1">// return api
</span><span class="c1"></span>      <span class="k">return</span> <span class="k">this</span>  
      <span class="cm">/*
</span><span class="cm">      * 如果用一个对象来调用函数，那么这个函数中的this，就是前面的对象
</span><span class="cm">      * obj.fn(p1) 等价于 ↓
</span><span class="cm">      * obj.fn.call(obj, p1)   // 在fn中，this就是obj
</span><span class="cm">      * 调用时 api.addClass(&#34;red&#34;) =&gt; 同理，在 addClass 中 this 就是 api，二者等价
</span><span class="cm">      * 那 addClass 函数中，原本是 return api，就可以换成 return this
</span><span class="cm">      * 注：this 的值，与调用时前面写了什么有关，只在函数被调用时才能确定this指代什么
</span><span class="cm">      * */</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">api</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="return-的骚操作--2">return 的骚操作  2️⃣</h4>
<blockquote>
<p>完全去掉 jQuery 中的 <code>api</code></p>
<ul>
<li>既然先创建了 api 对象，然后返回 api 对象，那是不是可以直接返回对象，省略 api 的赋值环节 呢？</li>
<li>岂不是「多此一举」</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> 
  <span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="p">{</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
        
      <span class="p">}</span>
      <span class="k">return</span> <span class="k">this</span> 
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">api</span>    <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span><span class="p">}</span>

<span class="c1">// 省略 api 的赋值环节 👇 
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span>  <span class="c1">// 获取 selector 的全部元素（得到一个数组）
</span><span class="c1"></span>  <span class="c1">// const api = {
</span><span class="c1"></span>  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
        
      <span class="p">}</span>
      <span class="k">return</span> <span class="k">this</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="c1">// return api 
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="jquery-的核心思想">jQuery 的核心思想</h3>
<blockquote>
<p>第一个核心点：闭包</p>
</blockquote>
<ol>
<li>jQuery 函数，接收一个 css 选择器</li>
<li>通过选择器，获取到这个元素 elements（但不会返回这个元素），它会返回一个对象</li>
<li>返回的对象中，包含很多函数。这些函数都可以操作这个元素 elements</li>
</ol>
<p>原理：</p>
<ul>
<li>用「闭包」去维持这个 elements
<ul>
<li>因为 addClass 函数在访问 elements。被访问的变量，是不会随便就被浏览器回收掉的</li>
<li>这就是 jQuery 的核心思想之一</li>
</ul>
</li>
</ul>
<blockquote>
<p>第二个核心点：链式操作</p>
</blockquote>
<ul>
<li>addClass 函数，肯定能猜到：用户在调用 addClass 时，肯定是通过<code> jQuery(选择器)</code> 得到的 api 来调用的</li>
<li>所以才会大胆的 return this。</li>
<li>addClass 函数，希望把 「点 . 」前面的东西，作为 addClass 的返回值  <code>api.addClass(&quot;red&quot;)</code></li>
<li>这样就相当于，api 从 addClass 函数前面，传递到了函数后面，这样就可以接着调用 addClass
<code>👇api.addClass(&quot;red&quot;)👇.addClass(&quot;blue&quot;)</code></li>
<li>这就是 「链式操作」</li>
</ul>
<p>​</p>
<h3 id="jquery-代码变型-2">jQuery 代码变型 2️⃣</h3>
<h4 id="mainjs-简化调用">main.js 简化调用</h4>
<blockquote>
<p>去掉变量 x</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">(</span><span class="s2">&#34;.test&#34;</span><span class="p">)</span>  <span class="c1">// 声明出来 x ，接着直接使用。那赋值操作，显得多此一举
</span><span class="c1"></span><span class="nx">x</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&#34;red&#34;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;blue&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>

<span class="c1">// 👇 最终写成 👇
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s2">&#34;.test&#34;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&#34;red&#34;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;blue&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="小总结">小总结</h3>
<ul>
<li>所谓高级的前端代码，就是把中间过程全部省掉了</li>
<li>把所有多次一举、无关紧要的东西，都尽量删掉。</li>
<li>最后只留下一个最少信息的、最精炼的代码。</li>
<li>虽然代码特别简洁、优雅，但对于学习者来说，就是看不懂。（说明「源码」真的不适合学习者）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="jquery-是构造函数吗">jQuery 是构造函数吗？</h2>
<blockquote>
<p>讲到这里可能会有这个疑问 👆</p>
</blockquote>
<blockquote>
<p>构造函数的特点：① 前面有 new      ② 构造出对象</p>
<ul>
<li>结合这两个特点，可以认为  jQuery 是构造函数，也可以认为不是构造函数</li>
</ul>
</blockquote>
<h3 id="是">是</h3>
<ul>
<li>因为 jQuery 函数确实构造出了一个对象</li>
</ul>
<h3 id="不是">不是</h3>
<ul>
<li>因为不需要写 new jQuery() 就能构造一个对象</li>
<li>以前讲的构造函数都要结合 new 才行</li>
</ul>
<h3 id="结论">结论</h3>
<ul>
<li>jQuery 是一个不需要加 new （就可以构造出对象）的构造函数</li>
<li>jQuery 不是常规意义（严格意义）上的构造函数</li>
<li>这是因为 jQuery 用了一些技巧（目前没必要讲，讲了新手就更迷惑了）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="术语">术语</h2>
<h3 id="口头约定-">口头约定 👄</h3>
<blockquote>
<p>[前面](# 特殊函数 jQuery)提到：jQuery 函数，返回一个对象，称为 **jQuery 构造出来的对象 ** <a href="" rel="">（ 也就是最初代码中的那个 api ）</a></p>
</blockquote>
<p>口头约定：</p>
<ul>
<li>以后说到 <strong>jQuery对象</strong> 就代指 <a href="" rel="">jQuery函数 构造出来的对象</a>   （为了省事，少说几个字）</li>
<li>不是说 「 jQuery 这个对象 」</li>
<li>一定要记清楚</li>
</ul>
<p>​</p>
<h3 id="其他举例">其他举例</h3>
<ul>
<li>Object 是个函数</li>
<li><strong>Object 对象</strong>，表示 Object 这个构造函数 构造出来的对象（不是 Object 本身是对象）</li>
<li>Array 是个函数</li>
<li><strong>Array 对象/数组对象</strong>，表示 Array 构造出来的对象（不是 Array 本身是对象）</li>
<li>Function 是个函数</li>
<li><strong>Function 对象 / 函数对象</strong>，表示 Function 构造出来的对象（不是 Function 本身是对象）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="更多功能的封装-">更多功能的封装 ⭕️</h2>
<blockquote>
<p>链式风格</p>
</blockquote>
<blockquote>
<p>📌📌📌📌📌📌📌📌更多代码实现、解析、注释，请查看<a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c7-JS%e7%bc%96%e7%a8%8b%e6%8e%a5%e5%8f%a3%5c3-jQuery%e4%b8%ad%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%9e%8b%ef%bc%88%e4%b8%8a%ef%bc%89" rel="">本地项目dom-2</a> 📌📌📌📌📌📌📌📌</p>
</blockquote>
<h3 id="查">查</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">)</span>                <span class="c1">// 返回值并不是元素，而是一个api对象 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.red&#39;</span><span class="p">)</span>   <span class="c1">// 查找#xxx里的.red元素 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">parent</span><span class="p">()</span>       <span class="c1">// 获取爸爸 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">children</span><span class="p">()</span>     <span class="c1">// 获取儿子 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">siblings</span><span class="p">()</span>     <span class="c1">// 获取兄弟 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">index</span><span class="p">()</span>        <span class="c1">// 获取排行老几（从0开始） 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">next</span><span class="p">()</span>         <span class="c1">// 获取弟弟 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">prev</span><span class="p">()</span>         <span class="c1">// 获取哥哥 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;.red&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span>       <span class="c1">// 遍历并对每个元素执行fn
</span></code></pre></td></tr></table>
</div>
</div><h4 id="代码">代码</h4>
<p><a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c7-JS%e7%bc%96%e7%a8%8b%e6%8e%a5%e5%8f%a3%5c3-jQuery%e4%b8%ad%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%9e%8b%ef%bc%88%e4%b8%8a%ef%bc%89" rel="">本地项目dom-2</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/*
</span><span class="cm">  * elements 永远表示选择器的目标元素的集合（伪数组）
</span><span class="cm">  * */</span>
  <span class="kd">let</span> <span class="nx">elements</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">selectorOrArray</span> <span class="o">===</span> <span class="s2">&#34;string&#34;</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 重载
</span><span class="c1"></span>    <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">selectorOrArray</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">elements</span> <span class="o">=</span> <span class="nx">selectorOrArray</span>
  <span class="p">}</span>
  <span class="c1">// 👇 返回 jQuery函数 构造的对象 api（this就是这个api、api可以操作elements）
</span><span class="c1"></span>  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="k">this</span>
    <span class="p">},</span>
    <span class="nx">find</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">array</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)))</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 重点理解这句 【代码分析，见本地项目dom-2的注释】
</span><span class="c1"></span>    <span class="p">},</span>
    <span class="nx">oldApi</span><span class="o">:</span> <span class="nx">selectorOrArray</span><span class="p">.</span><span class="nx">oldApi</span><span class="p">,</span>
    <span class="nx">end</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">oldApi</span>
    <span class="p">},</span>
    <span class="nx">each</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">elements</span><span class="p">)</span>  <span class="c1">// 遍历每项，对每一项都执行某个方法
</span><span class="c1"></span>      <span class="p">}</span>
      <span class="k">return</span> <span class="k">this</span>
    <span class="p">},</span>
    <span class="nx">print</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">elements</span><span class="p">)</span>
      <span class="k">return</span> <span class="k">this</span>
    <span class="p">},</span>
		<span class="nx">parent</span><span class="p">()</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">node</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 去重 
</span><span class="c1"></span>          <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span>
        <span class="p">}</span>
      <span class="p">})</span>
      <span class="nx">array</span><span class="p">.</span><span class="nx">oldApi</span> <span class="o">=</span> <span class="k">this</span>
      <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="nx">children</span><span class="p">()</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">node</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span> <span class="p">{</span> 
          <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(...</span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>        <span class="p">}</span>
      <span class="p">})</span>
      <span class="nx">array</span><span class="p">.</span><span class="nx">oldApi</span> <span class="o">=</span> <span class="k">this</span>
      <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="cm">/********************* 下面的课上未讲 *********************/</span>
    <span class="cm">/*
</span><span class="cm">    siblings()
</span><span class="cm">    index()
</span><span class="cm">    next()
</span><span class="cm">    prev()
</span><span class="cm">    */</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="练习">练习</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="cm">/*
</span><span class="cm">  &lt;div id=&#34;test&#34;&gt;
</span><span class="cm">    &lt;div class=&#34;child&#34;&gt;1&lt;/div&gt;
</span><span class="cm">    &lt;div class=&#34;child&#34;&gt;2&lt;/div&gt;
</span><span class="cm">    &lt;div class=&#34;child&#34;&gt;3&lt;/div&gt;
</span><span class="cm">  &lt;/div&gt;
</span><span class="cm">*/</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">){</span>
  <span class="kd">let</span> <span class="nx">elements</span>
  <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">selectorOrArray</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">){</span>
    <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span>
  <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">selectorOrArray</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">){</span>
    <span class="nx">elements</span> <span class="o">=</span> <span class="nx">selectorOrArray</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">){</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">n</span><span class="p">=&gt;</span><span class="nx">n</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">))</span>
    <span class="p">},</span>
    <span class="nx">find</span><span class="p">(</span><span class="nx">selector</span><span class="p">){</span>
      <span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">n</span><span class="p">=&gt;{</span>
        <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(...</span><span class="nx">n</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">))</span>
      <span class="p">})</span>
      <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="nx">each</span><span class="p">(</span><span class="nx">fn</span><span class="p">){</span>
      <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
        <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">i</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#test&#39;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.child&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">)</span> <span class="c1">// 请确保这句话成功执行
</span></code></pre></td></tr></table>
</div>
</div><h3 id="增">增</h3>
<blockquote>
<p>只捋一捋思路，<a href="https://github.com/FrankFang/dom-2-prototype/blob/master/src/jquery.js" target="_blank" rel="noopener noreffer">最终代码</a></p>
</blockquote>
<h4 id="代码-1">代码</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 先简单回顾 dom 创建节点 👇（两种方式）
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  <span class="c1">// ①传入标签名
</span><span class="c1"></span><span class="nx">template</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span>  <span class="c1">// ②传入html结构，最后返回 template.content.firstChild
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">elements</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">selectorOrArrayOrTemplate</span> <span class="o">===</span> <span class="s2">&#34;string&#34;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s2">&#34;&lt;&#34;</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 创建 div
</span><span class="c1"></span>      <span class="nx">elements</span> <span class="o">=</span> <span class="p">[</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">)];</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">// 查找 div
</span><span class="c1"></span>      <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">elements</span> <span class="o">=</span> <span class="nx">selectorOrArrayOrTemplate</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">createElement</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;template&#34;</span><span class="p">);</span>
    <span class="nx">container</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">string</span><span class="p">.</span><span class="nx">trim</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">container</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">;</span>
  <span class="p">}</span>
	
  <span class="c1">// 返回jQuery创建的api
</span><span class="c1"></span>  <span class="k">return</span><span class="p">{</span>
    <span class="nx">appendTo</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">node</span> <span class="k">instanceof</span> <span class="nx">Element</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">el</span> <span class="p">=&gt;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">el</span><span class="p">));</span>
      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">jquery</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">el</span> <span class="p">=&gt;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">el</span><span class="p">));</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="c1">// ...
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 创建 div，插入到 body 中
</span><span class="c1"></span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&lt;span&gt;1&lt;/span&gt;&lt;/div&gt;&#39;</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span> 
</code></pre></td></tr></table>
</div>
</div><h3 id="删">删</h3>
<blockquote>
<p>和dom实现逻辑一样</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$div</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span> 
<span class="nx">$div</span><span class="p">.</span><span class="nx">empty</span><span class="p">()</span>  
</code></pre></td></tr></table>
</div>
</div><h3 id="改">改</h3>
<blockquote>
<p>和dom实现逻辑一样</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$div</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="o">?</span><span class="p">)</span> <span class="c1">// 读写文本内容  // 传了参数就是「写」，不传参数就是「读」
</span><span class="c1"></span><span class="nx">$div</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="o">?</span><span class="p">)</span> <span class="c1">// 读写HTML内容  // 传了参数就是「写」，不传参数就是「读」
</span><span class="c1"></span><span class="nx">$div</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="o">?</span><span class="err">）</span>  <span class="c1">// 读写属性 
</span><span class="c1"></span><span class="nx">$div</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span><span class="p">})</span>  <span class="c1">// 读写style // 注意方法名是css
</span><span class="c1"></span><span class="nx">$div</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span> 
<span class="nx">$div</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> 
<span class="nx">$div</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="err">·</span>  
</code></pre></td></tr></table>
</div>
</div><h4 id="注意">注意</h4>
<ul>
<li>$div 大部分时候，对应了多个 div 元素</li>
<li>一定要默认  $div 是一个数组，然后遍历它 （每个操作都要遍历）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="window--windowjquery">window.$ = window.jQuery</h2>
<blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#test&#39;</span><span class="p">)</span> <span class="c1">// 每次使用都要这么写，很麻烦
</span></code></pre></td></tr></table>
</div>
</div><p>什么？你嫌  jQuery  太长</p>
<ul>
<li>你是对的</li>
<li>jQuery 这个单词，确实不好拼写（还要大小写区分）</li>
<li>怎么让 jQuery 变得更短呢？</li>
<li>还记得 bash alias 吗，添加一个别名即可</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 一定在代码最后添加
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">){...}</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>之后在任何地方使用 $ 就相当于使用 jQuery</li>
<li>还可以再省事 👇</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">){...}</span>   
<span class="c1">// 写在一行上，顺序是从右向左执行
</span><span class="c1">// 先执行 window.jQuery = function(){}
</span><span class="c1">// 然后再把 window.jQuery 的结果，赋值给 window.$
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>这就是很多高级程序员会使用的写法</li>
</ul>]]></description>
</item></channel>
</rss>

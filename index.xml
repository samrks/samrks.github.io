<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Sam&#39;s Garage</title>
        <link>http://samrks.github.io/</link>
        <description>‪Stay young. Stay naïve. Stay curious.</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ryuukousen@gmail.com (Sam)</managingEditor>
            <webMaster>ryuukousen@gmail.com (Sam)</webMaster><lastBuildDate>Sat, 12 Dec 2020 21:03:26 &#43;0800</lastBuildDate>
            <atom:link href="http://samrks.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>【置顶】开博纪念🥰</title>
    <link>http://samrks.github.io/celebration/</link>
    <pubDate>Fri, 06 Mar 2020 20:10:04 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/celebration/</guid>
    <description><![CDATA[<h2 id="g-">G！🎉🎉 💪</h2>
<blockquote>
<p>Life is simply about getting hit over and over :)</p>
</blockquote>
<blockquote>
<p>Never put off till tomorrow what you can do today :)</p>
</blockquote>
<blockquote>
<p>make IT :)</p>
</blockquote>]]></description>
</item><item>
    <title>浅析 MVC</title>
    <link>http://samrks.github.io/mvc-what-is-mvc/</link>
    <pubDate>Sat, 12 Dec 2020 21:03:26 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/mvc-what-is-mvc/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="mvc-是啥">MVC 是啥</h2>
<blockquote>
<p>MVC 是一种非常出名的架构模式（设计模式）。</p>
<p>如何设计一个程序的结构，这是一门专门的学问，叫做架构模式（architectural pattern），属于编程的方法论。</p>
</blockquote>
<p>MVC，将代码分为三个模块，写成三个对象</p>
<ul>
<li>M - Model（数据模型）负责操作所有数据</li>
<li>V - View（视图）负责所有 UI 界面</li>
<li>C - Controller（控制器）负责其他</li>
</ul>
<p>MVC 没有严格的定义，每个程序员对 MVC 的理解都可能存在分歧，唯一统一的就是对 M / V / C 三个单词的认知</p>
<blockquote>
<p>使用 MVC 模式的目的，简单来说就是希望 <strong>通过将代码分离以提高代码的灵活性和复用性</strong>。</p>
</blockquote>
<h3 id="mvc-伪代码">MVC 伪代码</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 数据层，关于数据的操作放在这里
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">m</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="c1">// 数据初始化
</span><span class="c1"></span>    <span class="nx">n</span><span class="o">:</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">100</span><span class="p">)</span>  
  <span class="p">},</span>
  <span class="nx">update</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/*更新数据*/</span> <span class="p">},</span>
  <span class="k">delete</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/*删除数据*/</span> <span class="p">},</span>
  <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/*获得数据*/</span> <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 视图层，关于视图的操作放在这里
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">v</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;挂载点（容器）&#39;</span><span class="p">,</span>
  <span class="nx">html</span><span class="o">:</span> <span class="s1">&#39;需要插入元素内的HTML内容&#39;</span><span class="p">,</span>
  <span class="nx">render</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span> <span class="cm">/*（获取数据）渲染html视图*/</span> <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 控制层，关于事件监听的放到这里
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="c1">// 找到重要的元素绑定事件
</span><span class="c1"></span>  <span class="c1">// 如果触发事件调用更改数据方法及渲染方法
</span><span class="c1"></span>  <span class="nx">a</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;找到a&#39;</span><span class="p">),</span>
  <span class="nx">b</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;找到b&#39;</span><span class="p">),</span>
  <span class="nx">c</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;找到c&#39;</span><span class="p">),</span>
  <span class="nx">bindEvents</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>   <span class="c1">// bindEvents 在 render 时执行
</span><span class="c1"></span>    <span class="nx">a</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
      <span class="c1">// 调用数据层方法更改数据
</span><span class="c1"></span>      <span class="c1">// 调用视图层方法渲染页面
</span><span class="c1"></span>    <span class="p">})</span>
    <span class="nx">b</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span><span class="cm">/**/</span><span class="p">})</span>
    <span class="nx">b</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span><span class="cm">/**/</span><span class="p">})</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="为什么用-mvc">为什么用 MVC</h3>
<blockquote>
<p>对于「惯用简单、朴素的思想（监听事件、改变DOM元素）来写代码」的人来说，可能认为「改用 MVC 的方式去实现某个功能」会更复杂、麻烦</p>
</blockquote>
<ul>
<li>虽然朴素的代码逻辑没有什么问题，但如果代码量增大，功能相似的代码可能出现大量重复，后期维护会非常麻烦，而且还存在变量污染的可能。这样的代码复用性很低。</li>
<li>套用 MVC 架构的过程虽然麻烦、需要很多调试，但是后期维护成本低。每一部分代码都以一个对象（模块）的方式储存在一个独立的空间，负责某一项功能，我们更容易找到对应代码，并且在其内部修改不会对外部的代码造成很大影响</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 找到重要的元素
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">$button1</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#add1&#34;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">$button2</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#minus1&#34;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">$button3</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#mul2&#34;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">$button4</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#divide2&#34;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">$number</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#number&#34;</span><span class="p">)</span>
<span class="c1">// 获得数据
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">)</span>
<span class="nx">$number</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">n</span> <span class="o">||</span> <span class="mi">100</span><span class="p">)</span>

<span class="c1">// 监听事件，改变数据
</span><span class="c1"></span><span class="nx">$button1</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>  <span class="c1">// 加1
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">$number</span><span class="p">.</span><span class="nx">text</span><span class="p">())</span>
  <span class="nx">n</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
  <span class="nx">$number</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
<span class="p">})</span>
<span class="nx">$button2</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>  <span class="c1">// 减1
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">$number</span><span class="p">.</span><span class="nx">text</span><span class="p">())</span>
  <span class="nx">n</span> <span class="o">-=</span> <span class="mi">1</span>
  <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
  <span class="nx">$number</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
<span class="p">})</span>
<span class="nx">$button3</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>  <span class="c1">// 乘2
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">$number</span><span class="p">.</span><span class="nx">text</span><span class="p">())</span>
  <span class="nx">n</span> <span class="o">*=</span> <span class="mi">2</span>
  <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
  <span class="nx">$number</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
<span class="p">})</span>
<span class="nx">$button4</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>  <span class="c1">// 除2
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">$number</span><span class="p">.</span><span class="nx">text</span><span class="p">())</span>
  <span class="nx">n</span> <span class="o">/=</span> <span class="mi">2</span>
  <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s2">&#34;n&#34;</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
  <span class="nx">$number</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="模块化">模块化</h2>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noopener noreffer">MDN：模块</a></p>
</blockquote>
<p>在项目中实现「模块化」，通俗来讲，就是创建多个 js 文件，把相关功能的代码聚集到同一个 js 文件中，这样就实现了模块化。</p>
<p>随着应用的功能不断增加，业务逻辑越来越复杂，代码也会变得更加复杂。如果仍将所有功能代码放在一个 js 文件中，不同功能的代码散乱一团难以查找辨别，可能起变量名都会变得非常费劲，最终导致代码的可读性、复用性极差，后期难以维护。</p>
<p>所以，为了保证「代码能有清晰的结构」、「方便查找某个功能对应的代码区」，我们依据功能不同，将代码拆分成不同的模块（文件），使各个模块之间实现「解耦」。</p>
<ul>
<li>解耦：每个模块的代码都独立存在，不需要依赖其他模块。（甚至一个模块用 Vue、一个用 React、一个用 jQuery 都没问题。只不过体积会大一点）</li>
<li>就像我们玩的积木一样，各个积木可以组合在一起形成一个形状，又可以拆分，又可以替换，因为各个积木块都是独立的，只要他们之间的接口（形状）匹配，就可以灵活地组合在一起，解耦就是为了逐渐达到这种理想的状态。</li>
</ul>
<p></p>
<p>划分模块的一个准则是「高内聚、低耦合」</p>
<ul>
<li>高内聚，是指一个软件模块是由相关性很强的代码组成，只负责一项任务，也就是常说的单一责任原则。</li>
<li>低耦合，是指模块之间的联系越少越好，接口越简单越好，实现低耦合，细线通信。</li>
<li>如果各个模块之间接口很复杂，说明功能划分有不合理之处、模块之间的耦合太高，同时也说明单个模块的内聚不高。</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="eventbus">EventBus</h2>
<h3 id="通信">通信</h3>
<blockquote>
<p>上面我们说了模块化，既然我们把每个功能都分成不同的模块（文件），那么问题来了 —— 如果文件 C 中检查到用户的操作，需要通知文件 M 修改数据，M 修改了数据需要通知文件 V 进行页面渲染怎么办？</p>
</blockquote>
<p>「eventBus」用于实现各个模块之间的通信</p>
<ul>
<li>eventBus 也是一种设计模式或者框架，主要用于组件/对象间通信的优化简化。</li>
<li>eventBus 包含很多方法，on 方法可以监听事件，trigger 方法可以触发事件，off 方法可以卸载监听</li>
<li>不管是 jQuery 还是 Vue 中都有类似于 eventBus 的存在，只不过叫法不一样，不过它们的功能是相似的，都是负责组件（模块）间的通信。</li>
</ul>
<blockquote>
<p>下面演示用 jQuery 生成的 eventBus</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 伪代码
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">$</span> <span class="nx">from</span> <span class="s1">&#39;jquery&#39;</span>
<span class="kr">const</span> <span class="nx">eventbus</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">)</span> <span class="c1">// 返回一个包含eventbus的所有方法的对象
</span><span class="c1"></span>
<span class="kr">const</span> <span class="nx">model</span> <span class="o">=</span> <span class="p">{</span> <span class="c1">// 数据层
</span><span class="c1"></span>  <span class="nx">data</span><span class="o">:</span><span class="p">{</span><span class="s1">&#39;数据&#39;</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span>
  <span class="nx">update</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span><span class="nx">data</span><span class="p">)</span> <span class="c1">// 更新数据
</span><span class="c1"></span>    <span class="nx">eventbus</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;更新数据&#39;</span><span class="p">)</span> <span class="c1">// 触发事件 
</span><span class="c1"></span>  <span class="p">}</span>

<span class="p">}</span>
<span class="kr">const</span> <span class="nx">view</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;挂载点&#39;</span><span class="p">,</span>
  <span class="nx">html</span><span class="o">:</span> <span class="s1">&#39;&lt;div&gt;{{内容}}&lt;/div&gt;&#39;</span><span class="p">,</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">container</span><span class="p">){</span>
    <span class="nx">view</span><span class="p">.</span><span class="nx">el</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">container</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">render</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
    <span class="nx">$</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">html</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;{{n}}&#39;</span><span class="p">,</span> <span class="nx">n</span><span class="p">)).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">el</span><span class="p">)</span> <span class="c1">// 更换新的(数据)内容，渲染进页面
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
<span class="kr">const</span> <span class="nx">control</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">container</span><span class="p">){</span>
    <span class="nx">view</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="nx">container</span><span class="p">)</span>  <span class="c1">// 拿到挂载点（元素容器）
</span><span class="c1"></span>    <span class="nx">view</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// 初始化页面
</span><span class="c1"></span>    <span class="nx">autoBindEvents</span><span class="p">()</span>
    <span class="nx">eventbus</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;更新数据&#39;</span><span class="p">,()</span> <span class="p">=&gt;</span> <span class="p">{</span> 
      <span class="c1">// 监听数据层的 eventbus.trigger
</span><span class="c1"></span>      <span class="c1">// 如果有被触发，说明数据有更新，从而进行渲染
</span><span class="c1"></span>      <span class="nx">view</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span>
    <span class="p">})</span>
  <span class="p">},</span>
  <span class="nx">add</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// 改变数据
</span><span class="c1"></span>    <span class="nx">m</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span><span class="nx">n</span><span class="o">:</span> <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">})</span>
  <span class="p">},</span>
  <span class="nx">minus</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// 改变数据
</span><span class="c1"></span>    <span class="nx">m</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span><span class="nx">n</span><span class="o">:</span> <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">})</span>
  <span class="p">},</span>
  <span class="nx">autoBindEvents</span><span class="p">()</span> <span class="p">{</span>  <span class="c1">// 监听改变数据的按钮
</span><span class="c1"></span>    <span class="nx">view</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;app1&#39;</span><span class="p">,</span> <span class="s1">&#39;add&#39;</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="eventbus-类">EventBus 类</h3>
<blockquote>
<p>当需求更复杂的时候（多个应用功能都须用到 eventBus），我们将 eventBus 单独写成一个类 EventBus.js</p>
<p>让生成的实例对象继承 EventBus，这样每个实例都拥有了可以触发和监听的功能，相当灵活</p>
</blockquote>
<blockquote>
<p>遵循「事不过三」原则</p>
<ul>
<li>同样的代码写三遍，就应该抽成一个函数</li>
<li>同样的属性写三遍，就应该做成【<strong>共用属性（原型或类）</strong>】</li>
<li>同样的原型写三遍，就应该用继承</li>
</ul>
<p>代价：有的时候会造成继承层级太深，无法一下看懂代码。可以通过写文档、画类图解决</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// EventBus.js
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">$</span> <span class="nx">from</span> <span class="s2">&#34;jquery&#34;</span>

<span class="kr">class</span> <span class="nx">EventBus</span> <span class="p">{</span>
  <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_eventBus</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="nx">on</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_eventBus</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="nx">trigger</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_eventBus</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="nx">off</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_eventBus</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">EventBus</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// app.js
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">EventBus</span> <span class="nx">from</span> <span class="s2">&#34;./base/EventBus.js&#34;</span>
<span class="kr">const</span> <span class="nx">e</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventBus</span><span class="p">()</span>
<span class="nx">e</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">)</span>          <span class="c1">// 触发 xxx 事件
</span><span class="c1"></span><span class="nx">e</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{...})</span>  <span class="c1">// 监听 xxx 事件，执行函数
</span><span class="c1"></span><span class="nx">e</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">)</span>              <span class="c1">// 删除 xxx 事件
</span></code></pre></td></tr></table>
</div>
</div><h4 id="类的继承">类的继承</h4>
<blockquote>
<p>遵循「事不过三」原则</p>
<ul>
<li>同样的代码写三遍，就应该抽成一个函数</li>
<li>同样的属性写三遍，就应该做成共用属性（原型或类）</li>
<li>同样的原型写三遍，就应该用【<strong>继承</strong>】</li>
</ul>
<p>代价：有的时候会造成继承层级太深，无法一下看懂代码。可以通过写文档、画类图解决</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// Model.js
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">EventBus</span> <span class="nx">from</span> <span class="s2">&#34;./EventBus&#34;</span>
<span class="kr">class</span> <span class="nx">Model</span> <span class="kr">extends</span> <span class="nx">EventBus</span> <span class="p">{</span>  <span class="c1">// extends 👈👈👈👈👈
</span><span class="c1"></span>  <span class="p">...</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// app.js
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">Model</span> <span class="nx">from</span> <span class="s2">&#34;./base/Model.js&#34;</span>
<span class="kr">const</span> <span class="nx">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Model</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">trigger</span><span class="p">)</span>
<span class="p">...</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="vue-中的-eventbus">Vue 中的 EventBus</h3>
<blockquote>
<p>Vue 有没有继承 EventBus  ？ 答：有</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 验证
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">v</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
  <span class="p">...</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
<span class="c1">// 第一层是 Vue 赋予的属性
</span><span class="c1">// 第二层里有 $on（事件监听）、$emit（事件触发trigger） 、$off（取消监听）、$once ... 
</span><span class="c1">// 用 $ 开头，都是 Vue 内置的方法
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>由上可知， Vue 也可以做 eventBus</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// const eventBus = $(window)
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">eventBus</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">()</span>  
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">eventBus</span><span class="p">.</span><span class="nx">$on</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">eventBus</span><span class="p">.</span><span class="nx">$emit</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">eventBus</span><span class="p">.</span><span class="nx">$off</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<h2 id="view--renderdata">view = render(data)</h2>
<blockquote>
<p>这个思维，引导了 React 的诞生</p>
</blockquote>
<ul>
<li>比起操作 DOM 对象，直接 render 更简单</li>
<li>只要改变 data，就可以得到对应的 view</li>
</ul>
<h3 id="代价">代价</h3>
<blockquote>
<p>render 粗扩的渲染肯定比 DOM 操作<strong>浪费性能</strong></p>
</blockquote>
<ul>
<li>
<p>例：用户切换到 tab 1，<strong>DOM 操作</strong>直接找到选中的 tab，添加 class 激活即可。</p>
<p>但 <strong>render 思维</strong>是在数据修改后，将当前元素容器全部移除，再依据新的数据重新渲染元素，肯定比之前更费性能</p>
</li>
<li>
<p>当然，render 的代价可以通过「虚拟 DOM」来弥补，让 render 只更新该更新的地方</p>
<ul>
<li>「虚拟 DOM」render 时，会对比第一次和第二次的区别，只有发生变化的地方才会重新 render</li>
</ul>
</li>
</ul>
<h3 id="图示-">图示 ⭕️</h3>
<blockquote>
<p>对比 DOM 操作和 render 思维</p>
<ul>
<li>黑字思路：数据从右边流向左边，最后再渲染回右边</li>
<li>绿字思路：数据永远保持在左边，最后被渲染到右边  ✔️✔️✔️
<ul>
<li>数据的流向更稳定</li>
</ul>
</li>
</ul>
</blockquote>
<p></p>
<h3 id="例">例</h3>
<h4 id="初步代码-">初步代码 💩</h4>
<blockquote>
<p>操作 DOM</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">container</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="nx">container</span><span class="p">)</span>
    <span class="nx">c</span><span class="p">.</span><span class="nx">bindEvents</span><span class="p">()</span> 
  <span class="p">},</span>
  <span class="nx">bindEvents</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="s2">&#34;#add1&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">()</span>
    <span class="p">})</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="s2">&#34;#minus1&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">-=</span> <span class="mi">1</span>
      <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">()</span>
    <span class="p">})</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="s2">&#34;#mul2&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">*=</span> <span class="mi">2</span>
      <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">()</span>
    <span class="p">})</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="s2">&#34;#divide2&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">/=</span> <span class="mi">2</span>
      <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">()</span>
    <span class="p">})</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kr">export</span> <span class="k">default</span> <span class="nx">c</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// main.js
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">x</span> <span class="nx">from</span> <span class="s2">&#34;./app1.js&#34;</span>   <span class="c1">// x 就是 c 的地址
</span><span class="c1"></span><span class="nx">x</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="s2">&#34;#app1&#34;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="c">&lt;!-- index.html --&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;page&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">section</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app1&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">section</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;main.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="转换">转换</h4>
<blockquote>
<p>改写为 「 view = render(data) 思维」</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">container</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="nx">container</span><span class="p">)</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// view = render(data) 第一次渲染
</span><span class="c1"></span>    <span class="nx">c</span><span class="p">.</span><span class="nx">autoBindEvents</span><span class="p">()</span>
  <span class="p">},</span>
  <span class="c1">// ... ,
</span><span class="c1"></span>  <span class="c1">// ... ,
</span><span class="c1"></span>  <span class="nx">bindEvents</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 事件委托
</span><span class="c1"></span>    <span class="nx">v</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="s2">&#34;#add1&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// view = render(data)
</span><span class="c1"></span>    <span class="p">})</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="s2">&#34;#minus1&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">-=</span> <span class="mi">1</span>
      <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// view = render(data)
</span><span class="c1"></span>    <span class="p">})</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="s2">&#34;#mul2&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">*=</span> <span class="mi">2</span>
      <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// view = render(data)
</span><span class="c1"></span>    <span class="p">})</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="s2">&#34;#divide2&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">/=</span> <span class="mi">2</span>
      <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// view = render(data)
</span><span class="c1"></span>    <span class="p">})</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="表驱动编程">表驱动编程</h2>
<p>表驱动编程（Table-Driven Methods）是一种编程模式。</p>
<p>适用场景：<strong>消除代码中频繁的 if else 或 switch case 的逻辑结构代码</strong>，使代码更加简化</p>
<ul>
<li>事实上，任何信息都可以通过表来挑选。在简单情况下用逻辑语句是更简单的，但是一旦判断条件增多，那可能要写大量重复的判断语句，这时候我们通过<strong>遍历</strong>表来实现条件判断，将事半功倍。</li>
</ul>
<h3 id="例1">例1</h3>
<blockquote>
<p>需求：写一个函数，传入年月，返回对应天数</p>
<ul>
<li><a href="https://blog.csdn.net/xuehyunyu/article/details/73556048/" target="_blank" rel="noopener noreffer">闰年</a>满足：（四年一润 且 百年不润） 或 （四百年再润）</li>
</ul>
</blockquote>
<p>常规写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">getDay</span><span class="p">(</span><span class="nx">year</span><span class="p">,</span> <span class="nx">month</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">isLeapYear</span> <span class="o">=</span> <span class="nx">year</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">year</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">!==</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">year</span> <span class="o">%</span> <span class="mi">400</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">month</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">28</span> <span class="o">+</span> <span class="nx">isLeapYear</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">month</span><span class="o">===</span><span class="mi">1</span><span class="o">||</span><span class="nx">month</span><span class="o">===</span><span class="mi">3</span><span class="o">||</span><span class="nx">month</span><span class="o">===</span><span class="mi">5</span><span class="o">||</span><span class="nx">month</span><span class="o">===</span><span class="mi">7</span><span class="o">||</span><span class="nx">month</span><span class="o">===</span><span class="mi">8</span><span class="o">||</span><span class="nx">month</span><span class="o">===</span><span class="mi">10</span><span class="o">||</span><span class="nx">month</span><span class="o">===</span><span class="mi">12</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">31</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">month</span> <span class="o">===</span> <span class="mi">4</span> <span class="o">||</span> <span class="nx">month</span> <span class="o">===</span> <span class="mi">6</span> <span class="o">||</span> <span class="nx">month</span> <span class="o">===</span> <span class="mi">9</span> <span class="o">||</span> <span class="nx">month</span> <span class="o">===</span> <span class="mi">11</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">30</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getDay</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>  <span class="c1">// 31
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getDay</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>   <span class="c1">// 29
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getDay</span><span class="p">(</span><span class="mi">2019</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>   <span class="c1">// 28
</span></code></pre></td></tr></table>
</div>
</div><p>表驱动写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">monthDays</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">[</span><span class="mi">31</span><span class="p">,</span><span class="mi">28</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">31</span><span class="p">],</span>
  <span class="p">[</span><span class="mi">31</span><span class="p">,</span><span class="mi">29</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">31</span><span class="p">]</span>
<span class="p">]</span>
<span class="kd">function</span> <span class="nx">getDay</span><span class="p">(</span><span class="nx">year</span><span class="p">,</span> <span class="nx">month</span><span class="p">){</span>
  <span class="kd">let</span> <span class="nx">isLeapYear</span> <span class="o">=</span> <span class="nx">year</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">year</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">!==</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">year</span> <span class="o">%</span> <span class="mi">400</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span>
  <span class="k">return</span> <span class="nx">monthDays</span><span class="p">[</span><span class="nx">isLeapYear</span><span class="p">][</span><span class="nx">month</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getDay</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span> <span class="c1">// 31
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getDay</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>  <span class="c1">// 29
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getDay</span><span class="p">(</span><span class="mi">2019</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>  <span class="c1">// 28
</span></code></pre></td></tr></table>
</div>
</div><h3 id="例2">例2</h3>
<blockquote>
<p>监听元素绑定事件</p>
</blockquote>
<p>常规写法</p>
<ul>
<li>常规写法，看起来逻辑直白，。如果监听事件有10个… 100个，那么代码量将非常之大</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">add1</span><span class="p">(){</span> <span class="p">...</span> <span class="p">}</span>
<span class="nx">min1</span><span class="p">(){</span> <span class="p">...</span> <span class="p">}</span>
<span class="nx">mul2</span><span class="p">(){</span> <span class="p">...</span> <span class="p">}</span>
<span class="nx">div2</span><span class="p">(){</span> <span class="p">...</span> <span class="p">}</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#add1&#39;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">add1</span><span class="p">)</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#min1&#39;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">min1</span><span class="p">)</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#mul2&#39;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">mul2</span><span class="p">)</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#div2&#39;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">div2</span><span class="p">)</span>
<span class="nb">document</span><span class="p">........</span>
</code></pre></td></tr></table>
</div>
</div><p>表驱动写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">controller</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">add1</span><span class="p">(){</span>  <span class="p">},</span>
  <span class="nx">min1</span><span class="p">(){</span>  <span class="p">},</span>
  <span class="nx">mul2</span><span class="p">(){</span>  <span class="p">},</span>
  <span class="nx">div2</span><span class="p">(){</span>  <span class="p">},</span>
  <span class="nx">events</span><span class="o">:</span> <span class="p">{</span> <span class="c1">// 表驱动编程（对象）
</span><span class="c1"></span>    <span class="s2">&#34;click #add1&#34;</span><span class="o">:</span> <span class="s2">&#34;add1&#34;</span><span class="p">,</span> <span class="c1">// key 的前半为要监听的事件，后半为监听的元素，value 为要执行的方法
</span><span class="c1"></span>    <span class="s2">&#34;click #min1&#34;</span><span class="o">:</span> <span class="s2">&#34;min1&#34;</span><span class="p">,</span>
    <span class="s2">&#34;click #mul2&#34;</span><span class="o">:</span> <span class="s2">&#34;mul2&#34;</span><span class="p">,</span>
    <span class="s2">&#34;click #div2&#34;</span><span class="o">:</span> <span class="s2">&#34;div2&#34;</span>
  <span class="p">},</span>
  <span class="nx">autoBindEvents</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">events</span><span class="p">){</span> <span class="c1">// 遍历对象获得对应的 key 去做赋值操作
</span><span class="c1"></span>      <span class="kr">const</span> <span class="nx">handler</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">events</span><span class="p">[</span><span class="nx">key</span><span class="p">]]</span>
      <span class="kr">const</span> <span class="p">[</span><span class="nx">event</span><span class="p">,</span> <span class="nx">selector</span><span class="p">]</span> <span class="o">=</span> <span class="nx">key</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">)</span>  <span class="c1">// [&#34;click&#34;, &#34;#min1&#34;]
</span><span class="c1"></span>      <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;容器&#34;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">selector</span><span class="p">,</span> <span class="nx">handler</span><span class="p">)</span> <span class="c1">// 将提取出来的值去监听事件
</span><span class="c1"></span>    <span class="p">})</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>「常规写法」的代码虽然更简单直白，但代码过于重复。随着数据规模的增大，如果监听事件有10个100个，那么这种写法的代码量也在加剧</p>
<p>「表驱动编程」让代码具有一个<strong>稳定的复杂度</strong>，不论数据规模多大，都能保持简单。</p>
<ul>
<li>拒绝重复，保持<strong>稳定的简单</strong>，这才是程序员所追求的</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h2 id="参考文章">参考文章</h2>
<p><a href="https://efe.baidu.com/blog/mvc-deformation/" target="_blank" rel="noopener noreffer">前端MVC变形记</a>：https://www.techug.com/post/mvc-deformation.html</p>
<p><a href="https://juejin.cn/post/6844904030825611278#heading-3" target="_blank" rel="noopener noreffer">MVC浅析</a></p>]]></description>
</item><item>
    <title>DOM 事件机制 &amp; 事件委托</title>
    <link>http://samrks.github.io/dom-event-event-delegation/</link>
    <pubDate>Tue, 27 Oct 2020 20:33:47 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/dom-event-event-delegation/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="dom-事件流">DOM 事件流</h2>
<blockquote>
<p>为什么有「事件流」？</p>
</blockquote>
<p>假如在一个button上注册了一个click事件，又在它的 父元素 div 上注册了一个 click 事件，那么当我们点击 button，是先触发父元素上的事件，还是button上的事件呢，这就需要一种约定去规范事件的执行顺序，就是事件执行的流程。</p>
<p>浏览器在发展的过程中出现了两种不同的规范</p>
<ul>
<li>IE 9（微软） 以下的 IE 浏览器使用的是事件冒泡，先从具体的接收元素，然后逐步向上传播到不具体的元素。</li>
<li>Netscape（网景） 采用的是事件捕获，先由不具体的元素接收事件，最具体的节点最后才接收到事件。</li>
<li>而 W3C（万维网）制定的 Web 标准中，是同时采用了两种方案，事件捕获和事件冒泡都可以。</li>
</ul>
<p>​</p>
<h2 id="事件的传播">事件的传播</h2>
<blockquote>
<p>又称「事件机制」 或 「事件模型」</p>
</blockquote>
<p>一个事件发生后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段。</p>
<blockquote>
<ul>
<li>第一阶段：从window对象传导到目标节点（上层传到底层），称为“捕获阶段”（capture phase）。</li>
<li>第二阶段：在目标节点上触发，称为“目标阶段”（target phase）。</li>
<li>第三阶段：从目标节点传导回window对象（从底层传回上层），称为“冒泡阶段”（bubbling phase）。</li>
</ul>
</blockquote>
<p>这种三阶段的传播模型，使得同一个事件会在多个节点上触发。</p>
<h3 id="1事件捕获">1.事件捕获</h3>
<blockquote>
<p>捕获是<strong>从上到下</strong>。</p>
</blockquote>
<p>事件传播的最上层对象是 window，接着依次是 document，html（document.documentElement）和body（document.body），然后按照普通的 html 结构一层一层往下传，最后到达目标元素。</p>
<p>我们只需要将 addEventListener 的第三个参数改为 true ，就可以实现事件捕获。</p>
<h3 id="2事件冒泡">2.事件冒泡</h3>
<blockquote>
<p>冒泡是<strong>从下到上</strong>。</p>
</blockquote>
<p>所谓事件冒泡就是事件像泡泡一样从最开始生成的地方一层一层往上冒，越来越大。从目标元素开始，一层层往上传，最后经过 body、html 到达 window 结束。</p>
<p>addEventListener 默认就是把事件绑定在冒泡阶段（第三个参数空着或者传 falsy 值 ）。</p>
<p></p>
<h3 id="示例">示例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>点击<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>上面代码中，<code>&lt;div&gt;</code> 节点之中有一个<code>&lt;p&gt;</code>节点。</p>
<p>如果对这两个节点，都设置click事件的监听函数（每个节点的捕获阶段和监听阶段，各设置一个监听函数），共计设置四个监听函数。然后，对<code>&lt;p&gt;</code>点击，click事件会触发四次。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">phases</span> <span class="o">=</span> <span class="p">{</span>
  <span class="mi">1</span><span class="o">:</span> <span class="s1">&#39;capture&#39;</span><span class="p">,</span>
  <span class="mi">2</span><span class="o">:</span> <span class="s1">&#39;target&#39;</span><span class="p">,</span>
  <span class="mi">3</span><span class="o">:</span> <span class="s1">&#39;bubble&#39;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">)</span>

<span class="nx">div</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
<span class="nx">p</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
<span class="nx">div</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
<span class="nx">p</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>

<span class="kd">function</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">tag</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">.</span><span class="nx">tagName</span>
  <span class="kd">var</span> <span class="nx">phase</span> <span class="o">=</span> <span class="nx">phases</span><span class="p">[</span><span class="nx">event</span><span class="p">.</span><span class="nx">eventPhase</span><span class="p">]</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Tag: &#39;&#34;</span> <span class="o">+</span> <span class="nx">tag</span> <span class="o">+</span> <span class="s2">&#34;&#39;. EventPhase: &#39;&#34;</span> <span class="o">+</span> <span class="nx">phase</span> <span class="o">+</span> <span class="s2">&#34;&#39;&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 点击以后的结果
</span><span class="c1">// Tag: &#39;DIV&#39;. EventPhase: &#39;capture&#39;
</span><span class="c1">// Tag: &#39;P&#39;. EventPhase: &#39;target&#39;
</span><span class="c1">// Tag: &#39;P&#39;. EventPhase: &#39;target&#39;
</span><span class="c1">// Tag: &#39;DIV&#39;. EventPhase: &#39;bubble&#39;
</span></code></pre></td></tr></table>
</div>
</div><p>上面代码表示，click事件被触发了四次：<code>&lt;div&gt;</code>节点的捕获阶段和冒泡阶段各1次，<code>&lt;p&gt;</code>节点的目标阶段触发了2次。</p>
<p>捕获阶段：事件从<code>&lt;div&gt;</code>向<code>&lt;p&gt;</code>传播时，触发<code>&lt;div&gt;</code>的click事件；
目标阶段：事件从<code>&lt;div</code>&gt;到达<code>&lt;p&gt;</code>时，触发<code>&lt;p&gt;</code>的click事件；
冒泡阶段：事件从<code>&lt;p&gt;</code>传回<code>&lt;div&gt;</code>时，再次触发<code>&lt;div&gt;</code>的click事件。
其中，<code>&lt;p&gt;</code>节点有两个监听函数（addEventListener方法第三个参数的不同，会导致绑定两个监听函数），因此它们都会因为click事件触发一次。所以，<code>&lt;p&gt;</code>会在target阶段有两次输出。</p>
<p>注意，浏览器总是假定click事件的目标节点，就是点击位置嵌套最深的那个节点（本例是<code>&lt;div&gt;</code>节点里面的<code>&lt;p&gt;</code>节点）。所以，<code>&lt;p&gt;</code>节点的捕获阶段和冒泡阶段，都会显示为target阶段。</p>
<p>事件传播的最上层对象是window，接着依次是document，html（document.documentElement）和body（document.body）。也就是说，上例的事件传播顺序，在捕获阶段依次为window、document、html、body、div、p，在冒泡阶段依次为p、div、body、html、document、window。</p>
<h3 id="一个特例">一个特例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">ele</span><span class="p">&gt;</span>点我<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 👇先监听冒泡阶段的点击事件
</span><span class="c1"></span><span class="nx">ele</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;2&#39;</span><span class="p">)</span>
<span class="p">})</span>
<span class="c1">// 👇再监听捕获阶段的点击事件
</span><span class="c1"></span><span class="nx">ele</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">)</span>
<span class="p">},</span> <span class="kc">true</span><span class="p">)</span>

<span class="c1">// 点击div以后的结果
</span><span class="c1">// 2  （冒泡）
</span><span class="c1">// 1  （捕获）
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 👇先监听捕获阶段的点击事件
</span><span class="c1"></span><span class="nx">ele</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">)</span>
<span class="p">},</span> <span class="kc">true</span><span class="p">)</span>
<span class="c1">// 👇再监听冒泡阶段的点击事件
</span><span class="c1"></span><span class="nx">ele</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;2&#39;</span><span class="p">)</span>
<span class="p">})</span>

<span class="c1">// 点击div以后的结果
</span><span class="c1">// 1   （捕获）
</span><span class="c1">// 2   （冒泡）
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>点击触发后的结果：与点击事件绑定在哪个阶段并无直接关系，而是谁写在前，谁先执行</p>
</blockquote>
<p>当只有一个单一的元素被监听时（不存在父子元素关系），分别在捕获和冒泡两个阶段，监听这个元素的点击事件。这种情况下，点击事件被触发后，则不再遵循「先捕获后冒泡」的机制，而是「谁先监听，谁先执行」</p>
<h2 id="addeventlistener-">addEventListener 👂</h2>
<h3 id="事件绑定-api">事件绑定 API</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">baba</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">(</span><span class="s1">&#39;onclick&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>  <span class="c1">// 微软IE5发明：默认进入冒泡阶段
</span><span class="c1"></span><span class="nx">baba</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>  <span class="c1">// 网景发明：默认进入捕获阶段
</span><span class="c1"></span><span class="nx">baba</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="nx">bool</span><span class="p">)</span><span class="err">·</span><span class="c1">// ❤️W3C标准：加了参数 bool，用于指定让函数运行在哪个阶段
</span></code></pre></td></tr></table>
</div>
</div><h4 id="如果-bool-不传-或为-falsyhttpsdevelopermozillaorgzh-cndocsglossaryfalsy">如果 bool 不传 （或为 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy" target="_blank" rel="noopener noreffer">falsy</a>）</h4>
<ul>
<li>默认情况</li>
<li>就让 fn 走<strong>冒泡</strong>，即当浏览器在冒泡阶段发现 baba 有 fn 监听函数，就会调用 fn，并提供事件信息</li>
<li>大多数人习惯上都不会传这个参数（可见 W3C 可能更倾向于 IE 的方案：默认把 fn 放在冒泡阶段）</li>
</ul>
<h4 id="如果-bool-为-true">如果 bool 为 true</h4>
<ul>
<li>就让 fn 走<strong>捕获</strong>，即当浏览器在捕获阶段发现 baba 有 fn 监听函数，就会调用 fn，并提供事件信息</li>
</ul>
<p>​</p>
<h3 id="补充事件移除">补充：事件移除</h3>
<blockquote>
<p>removeEventListener</p>
</blockquote>
<p>通过 addEventListener() 添加的事件只能用 <strong>removeEventListener()</strong> 来移除</p>
<ul>
<li>移除时，传入的参数与添加事件使用的参数相同</li>
<li>通过 addEventListener() 添加的匿名函数无法删除</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">btn</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;myBtn&#34;</span><span class="p">)</span>
<span class="nx">btn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
<span class="p">},</span> <span class="kc">false</span><span class="p">)</span>
<span class="nx">btn</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="c1">// 匿名函数无法移除
</span><span class="c1"></span>  <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
<span class="p">},</span> <span class="kc">false</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">btn</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;myBtn&#34;</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">handler</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">btn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="nx">handler</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
<span class="nx">btn</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="nx">handler</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>  <span class="c1">// 有效！
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="target--currenttarget">target 🆚 currentTarget</h2>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/currentTarget" target="_blank" rel="noopener noreffer">Event.currentTarget</a> 找到事件<strong>绑定</strong>的元素。</p>
<p>区别与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/target" target="_blank" rel="noopener noreffer">Event.target</a> ，是事件<strong>触发</strong>的元素。</p>
</blockquote>
<h3 id="区别">区别</h3>
<blockquote>
<p>一个是用户点击的（触发事件的元素），一个是开发者监听的（事件绑定的元素）</p>
</blockquote>
<ul>
<li>e.target ：用户操作的元素</li>
<li>e.currentTarget ：程序员监听的元素</li>
<li>this 是 e.currentTarget，非常不推荐在监听代码里使用 this（因为经常会忘记  this 到底指代哪一个）</li>
</ul>
<h3 id="举例">举例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>文字<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>给 div 绑定点击事件，用户点击“文字”</li>
<li>e.target 就是 span</li>
<li>e.currentTarget 就是 div</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="阻止默认事件">阻止默认事件</h2>
<blockquote>
<p>默认事件，又称「默认动作」「默认行为」</p>
<p>例如：表单一点击提交按钮(submit)就会刷新页面、点击a标签默认执行页面跳转或是锚点定位等。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>如果调用这个方法，默认事件行为将不再触发。</p>
<h3 id="使用场景1">使用场景1</h3>
<blockquote>
<p>使用a标签仅仅是想当做一个普通的按钮，点击实现一个功能，不想页面跳转，也不想锚点定位。</p>
</blockquote>
<h4 id="方法一">方法一</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;javascript:;&#34;</span><span class="p">&gt;</span>链接<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="方法二">方法二</h4>
<p>使用 JS 方法来阻止：当我们点击A标签的时候，会先触发click事件，其次才会执行自己的默认行为。所以只需给其 click 事件 return false ，让执行中断</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;test&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;http://www.google.com&#34;</span><span class="p">&gt;</span>链接<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="nx">test</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
    <span class="nx">e</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">event</span>  <span class="c1">// 兼容不同浏览器
</span><span class="c1"></span>    <span class="k">return</span> <span class="kc">false</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="方法三">方法三</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;test&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;http://www.google.com&#34;</span><span class="p">&gt;</span>链接<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="nx">test</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
    <span class="nx">e</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">event</span>
    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用场景2">使用场景2</h3>
<blockquote>
<p>限制输入框最多只能输入六个字符，如何实现？</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#39;tempInp&#39;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="nx">tempInp</span><span class="p">.</span><span class="nx">onkeydown</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ev</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">ev</span> <span class="o">=</span> <span class="nx">ev</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">event</span>
    <span class="kd">let</span> <span class="nx">val</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span> <span class="c1">// trim去除字符串首尾空格（不兼容）
</span><span class="c1"></span>    <span class="c1">// this.value = this.value.replace(/^ +| +$/g,&#39;&#39;) 兼容写法
</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">val</span><span class="p">.</span><span class="nx">length</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">len</span> <span class="o">&gt;=</span> <span class="mi">6</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">val</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
      <span class="c1">// 阻止默认行为去除特殊按键（DELETE\BACK-SPACE\方向键...）
</span><span class="c1"></span>      <span class="kd">let</span> <span class="nx">code</span> <span class="o">=</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">which</span> <span class="o">||</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">keyCode</span>  <span class="c1">// 当前按下的按键的code码
</span><span class="c1"></span>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="sr">/^(46|8|37|38|39|40)$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">code</span><span class="p">))</span> <span class="p">{</span>  <span class="c1">// 如果按下的是特殊按键，则阻止默认事件（按下无效）
</span><span class="c1"></span>        <span class="nx">ev</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="阻止事件传播">阻止事件传播</h2>
<blockquote>
<p>阻止事件进一步的 冒泡 / 捕获</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">e</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">()</span> 
</code></pre></td></tr></table>
</div>
</div><h3 id="示例-1">示例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;level1&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;level2&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;level3&#34;</span><span class="p">&gt;</span>
			点我
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">level1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.level1&#39;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">level2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.level2&#39;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">level3</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.level3&#39;</span><span class="p">)</span>

<span class="nx">level1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
<span class="p">})</span> 
<span class="nx">level2</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;2&#34;</span><span class="p">)</span>
<span class="p">})</span> 
<span class="nx">level3</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
  <span class="nx">e</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">()</span>  <span class="c1">// 阻止冒泡，输出： 3
</span><span class="c1"></span><span class="p">})</span>

<span class="c1">// 不阻止冒泡，点击文字，输出顺序： 3  2  1
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">level1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
<span class="p">},</span> <span class="kc">true</span><span class="p">)</span> 
<span class="nx">level2</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;2&#34;</span><span class="p">)</span>
  <span class="nx">e</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">()</span>  <span class="c1">// 阻止捕获，输出： 1  2
</span><span class="c1"></span><span class="p">},</span> <span class="kc">true</span><span class="p">)</span> 
<span class="nx">level3</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
<span class="p">},</span> <span class="kc">true</span><span class="p">)</span>

<span class="c1">// 不阻止捕获，点击文字，输出顺序： 1  2  3
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="插曲如何阻止滚动-">插曲：如何阻止滚动 🖱️</h2>
<h3 id="scroll-不支持阻止默认事件">scroll 不支持阻止默认事件</h3>
<blockquote>
<p>MDN 搜索 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/scroll_event" target="_blank" rel="noopener noreffer">scroll event</a></p>
<p>滚动事件，不能阻止默认事件。 那怎么让页面无法滚动呢？</p>
</blockquote>
<h3 id="解决办法">解决办法</h3>
<ul>
<li>要阻止滚动，可阻止 wheel（鼠标滚轮） 和 touchstart（移动端触屏） 的默认动作</li>
<li>拖拽滚动条，还能实现滚动，所以还需要隐藏滚动条</li>
</ul>
<h3 id="代码">代码</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">x</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>4<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  ...  
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>100<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  <span class="c">&lt;!-- p标签撑起页面，超出一屏高度，出现滚动条 --&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="c1">// PC 端
</span><span class="c1"></span>  <span class="nx">x</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;wheel&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>  <span class="c1">// 绑定滚轮事件 wheel，触发滚轮事件，就阻止执行
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
  <span class="p">})</span>
  <span class="c1">// 移动端
</span><span class="c1"></span>  <span class="nx">x</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;touchstart&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>  <span class="c1">// 手机端是触屏拖拽滚动，那就阻止touchstart触屏事件
</span><span class="c1"></span>    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
  <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="p">::</span><span class="nd">-webkit-scrollbar</span> <span class="p">{</span> <span class="k">width</span><span class="p">:</span> <span class="mi">0</span> <span class="cp">!important</span> <span class="p">}</span>   <span class="c">/* 隐藏滚动条 */</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>注意：你需要找准滚动条所在的元素（在 document 上）</li>
<li>用 overflow: hidden 也可以直接取消滚动条。但此时 JS 依然可以修改 scrollTop</li>
</ul>
<p>​</p>
<h2 id="浏览器自带事件">浏览器自带事件</h2>
<ul>
<li>一共 100 多种事件，<a href="https://developer.mozilla.org/zh-CN/docs/Web/Events" target="_blank" rel="noopener noreffer">列表</a> 在MDN上</li>
<li>用户打印、写字、全屏、复制粘贴、键盘按键、点击鼠标、拖放事件、媒体事件（比如直播：被播放、关闭、暂停、加速）…</li>
</ul>
<ul>
<li>非常多的事件，都可以被监听。</li>
<li>想一下全部理解，是不可能的。用到再查就可以</li>
</ul>
<table>
<thead>
<tr>
<th>事件名称</th>
<th>应用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>error</td>
<td></td>
</tr>
<tr>
<td>abort</td>
<td>中止事件</td>
</tr>
<tr>
<td>load</td>
<td>加载成功事件</td>
</tr>
<tr>
<td>beforeunload</td>
<td>关闭页面事件</td>
</tr>
<tr>
<td>unload</td>
<td>关闭页面之后的事件</td>
</tr>
<tr>
<td>online</td>
<td>网络连上了，触发 online （从没用过）</td>
</tr>
<tr>
<td>offline</td>
<td>WiFi 网络突然断了，触发 offline（从没用过）</td>
</tr>
<tr>
<td>focus</td>
<td>一个元素获取焦点</td>
</tr>
<tr>
<td>blur</td>
<td>一个元素失去焦点</td>
</tr>
<tr>
<td>pageshow</td>
<td>一个页面显示出来，会触发pageshow （从没用过）</td>
</tr>
<tr>
<td>submit</td>
<td>提交</td>
</tr>
<tr>
<td>beforeprint</td>
<td>用户打印</td>
</tr>
<tr>
<td>afterprint</td>
<td>用户打印</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
<p>​</p>
<h2 id="自定义事件">自定义事件</h2>
<blockquote>
<p>开发者可以在【浏览器自带事件】之外，自定义一个事件</p>
</blockquote>
<p>HTML</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;div1&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">button</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>
	  点击触发sam事件
	<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>JS</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">btn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="c1">// new出自定义事件，new CustomEvent(&#39;事件名&#39;, 事件信息)
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CustomEvent</span><span class="p">(</span><span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="p">{</span> 
    <span class="nx">detail</span><span class="o">:</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span> <span class="p">}</span>
  <span class="p">})</span>
  <span class="c1">// EventTarget.dispatchEvent(event) 触发事件
</span><span class="c1"></span>  <span class="nx">btn</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> 
<span class="p">})</span>
<span class="c1">// 现在效果：点击 btn ，触发 sam 事件
</span><span class="c1"></span>
<span class="c1">// 监听 sam 事件
</span><span class="c1"></span><span class="nx">btn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> 
  <span class="nx">congsole</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;sam事件触发了&#39;</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">detail</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="自定义事件会冒泡吗">自定义事件，会冒泡吗？</h3>
<ul>
<li>测试：只监听 div1 的点击事件。看看点击 btn，会触发到 div1 的点击事件吗？</li>
<li>结果：不行，不冒泡。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 监听 div1 的 sam 事件
</span><span class="c1"></span><span class="nx">div1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> 
  <span class="nx">congsole</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;sam事件触发了&#39;</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">detail</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>如果想实现自定义事件的冒泡，还需额外再给自定义事件 <strong>开启冒泡属性</strong></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">btn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CustomEvent</span><span class="p">(</span><span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="p">{</span> 
    <span class="nx">detail</span><span class="o">:</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span> <span class="p">},</span>
    <span class="nx">bubbles</span><span class="o">:</span> <span class="kc">true</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 开启冒泡，添加这句就可以了
</span><span class="c1"></span>    <span class="c1">// cancelable: false  // 是否可以阻止默认事件
</span><span class="c1"></span>  <span class="p">})</span>
  <span class="nx">btn</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> 
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="事件委托">事件委托</h2>
<blockquote>
<p>又称「事件代理」</p>
</blockquote>
<p>由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件委托（代理）。</p>
<h3 id="使用场景-1">使用场景 1</h3>
<p>假设有一个列表，列表之中有<strong>大量的子项</strong>，我们需要在点击每个子项的时候响应一个事件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;list&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>item 1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>item 2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>item 3<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  ......
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>item n<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">===</span> <span class="s1">&#39;li&#39;</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;li 被点击了&#39;</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;li 内容是：&#39;</span> <span class="o">+</span> <span class="nx">t</span><span class="p">.</span><span class="nx">textContent</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>如果给每个子项都绑定一个函数，那对于内存消耗是非常大的，效率上需要消耗很多性能。</li>
<li>借助事件委托，我们只需要给父容器 ul 绑定方法即可</li>
<li>这样不管点击的是哪一个后代元素，都会根据冒泡传播的传递机制，把容器的 click 行为触发，然后把对应的方法执行，根据事件源，我们可以知道点击的是谁，从而完成不同的事。</li>
</ul>
<h3 id="使用场景-2">使用场景 2</h3>
<ul>
<li>在很多时候，我们需要通过用户操作<strong>动态的新增子项元素</strong>。</li>
<li>在最初并没有新增子项元素时，就无法给还未创建的子项元素绑定事件</li>
<li>这种情况就可以采用事件委托的形式，给父级元素绑定事件，监听到子项的动态变化。</li>
</ul>
<p><a href="http://js.jirengu.com/wuwox/1/edit?html,js,output" target="_blank" rel="noopener noreffer">示例</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">button</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>新增按钮<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;div1&#34;</span><span class="p">&gt;</span>
  
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span>
<span class="nx">btn</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">n</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="kr">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">)</span>
  <span class="nx">button</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="s1">&#39;按钮&#39;</span> <span class="o">+</span> <span class="nx">n</span>
  <span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">button</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">list</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">tagName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">===</span> <span class="s1">&#39;button&#39;</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;当前点击的是：&#39;</span> <span class="o">+</span> <span class="nx">t</span><span class="p">.</span><span class="nx">innerText</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="优点">优点</h3>
<ul>
<li>减少内存消耗，提高性能  （例1）
<ul>
<li>如果要监听100个按钮，需要100个监听器，就是100倍的内存。如果之间一个祖先 div，就是只需要一个监听器，节约了99个</li>
</ul>
</li>
<li>可以监听动态的元素  （例2）
<ul>
<li>如果当前元素还不存在，肯定没法直接监听到。只能监听祖先</li>
</ul>
</li>
</ul>
<h3 id="封装事件委托">封装事件委托</h3>
<blockquote>
<p>封装，需要考虑更多边界情况</p>
<ul>
<li>
<p>写出这样一个函数 <code>on('click', '#testDiv', 'li', fn)</code></p>
</li>
<li>
<p>当用户点击 <code>#testDiv</code> 里的 <code>li</code> 元素时，调用 <code>fn</code> 函数</p>
</li>
</ul>
</blockquote>
<p><a href="http://js.jirengu.com/kuxeg/3/edit?html,js,output" target="_blank" rel="noopener noreffer">示例</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">button</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>新增按钮<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;div1&#34;</span><span class="p">&gt;</span>

<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span>
<span class="nx">btn</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">n</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="kr">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">)</span>
  <span class="kr">const</span> <span class="nx">span</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;span&#39;</span><span class="p">)</span>
  <span class="nx">span</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="s1">&#39;按钮&#39;</span> <span class="o">+</span> <span class="nx">n</span>
  <span class="nx">button</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">span</span><span class="p">)</span>
  <span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">button</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;#div1&#39;</span><span class="p">,</span> <span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="nx">fm</span><span class="p">)</span>
<span class="kd">function</span> <span class="nx">fm</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">el</span><span class="p">){</span>  
  <span class="c1">// 不能用箭头函数，this 会获取不到 el
</span><span class="c1"></span>  <span class="c1">// 箭头函数中的 this，只能获取到 window
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">innerText</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">on</span><span class="p">(</span><span class="nx">eventType</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">selector</span><span class="p">,</span> <span class="nx">fn</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">element</span> <span class="k">instanceof</span> <span class="nx">Element</span><span class="p">)){</span>
    <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">eventType</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">el</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span>
    <span class="c1">// 只要el不匹配，就不断获取el的父元素来匹配，直到el获取element，说明容器中压根没有匹配的el，结束循环
</span><span class="c1"></span>    <span class="c1">// el 为 null，则不执行 fn
</span><span class="c1"></span>    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="nx">el</span><span class="p">.</span><span class="nx">matches</span><span class="p">(</span><span class="nx">selector</span><span class="p">)){</span> 
      <span class="k">if</span><span class="p">(</span><span class="nx">el</span> <span class="o">===</span> <span class="nx">element</span><span class="p">){</span>  <span class="c1">// 循环结束条件
</span><span class="c1"></span>        <span class="nx">el</span> <span class="o">=</span> <span class="kc">null</span>
        <span class="k">break</span>
      <span class="p">}</span>
      <span class="nx">el</span> <span class="o">=</span> <span class="nx">el</span><span class="p">.</span><span class="nx">parentNode</span>
    <span class="p">}</span>
    <span class="nx">el</span> <span class="o">&amp;&amp;</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">e</span><span class="p">,</span> <span class="nx">el</span><span class="p">)</span>
  <span class="p">})</span>
  <span class="k">return</span> <span class="nx">element</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="答疑">答疑</h2>
<h3 id="js-支持事件吗">JS 支持事件吗</h3>
<h4 id="答">答</h4>
<blockquote>
<p>不支持。因为 JS 本身没有「事件」（只是调用了 DOM 提供的 addEventListener）</p>
</blockquote>
<ul>
<li>本节内容的 DOM 事件，不属于JS 的功能。
<ul>
<li>术语：本节内容是基于浏览器提供的 DOM 的功能</li>
<li>JS 是浏览器的功能之一。DOM 事件也是浏览器的功能之一（<strong>二者是平行的关系，没有从属关系</strong>）</li>
<li>JS 里面没有 DOM 事件， JS 只是调用了 DOM 提供的 addEventListener 而已</li>
</ul>
</li>
</ul>
<blockquote>
<p>因为 DOM 提供了 事件的功能，还提供了一整套完整的事件机制（捕获冒泡、默认动作、event 对象…）</p>
<p>所以 JS 才可以用</p>
</blockquote>
<h4 id="追问">追问</h4>
<blockquote>
<p>由于 JS 不支持事件，面试官可能问你「能不能手写出一个 JS 事件系统」</p>
</blockquote>
<ul>
<li>如何让JS支持事件？请手写一个事件系统。</li>
<li>目前大家的水平还写不出来，可以先思考一段时间。
（可以搜一搜、实际上也不难，用一个「队列」就可以遭到了）</li>
</ul>
<blockquote>
<p>以上。本节就是对 <strong>DOM事件（不是 JS 事件）</strong> 的一个完整了解</p>
</blockquote>
<h2 id="参考">参考</h2>
<p><a href="https://javascript.ruanyifeng.com/dom/event.html#toc10" target="_blank" rel="noopener noreffer">阮一峰：事件模型</a></p>
<p><a href="https://juejin.im/post/6844903781969166349#heading-19" target="_blank" rel="noopener noreffer">深入理解DOM事件机制</a></p>
<p><a href="https://www.jianshu.com/p/e8a6fad0f7bc" target="_blank" rel="noopener noreffer">e = e || window.event</a></p>]]></description>
</item><item>
    <title> jQuery 快速上手</title>
    <link>http://samrks.github.io/dom-jquery-api/</link>
    <pubDate>Sun, 25 Oct 2020 14:20:02 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/dom-jquery-api/</guid>
    <description><![CDATA[<h2 id="参考">参考</h2>
<ul>
<li>
<p>《<a href="http://www.ruanyifeng.com/blog/2011/07/jquery_fundamentals.html" target="_blank" rel="noopener noreffer">阮一峰：jQuery设计思想</a>》</p>
</li>
<li>
<p>《 <a href="https://www.jquery123.com/" target="_blank" rel="noopener noreffer">jQuery 中文文档</a>》</p>
</li>
</ul>
<p>​</p>
<h2 id="如何获取和使用--jquery">如何获取和使用  jQuery</h2>
<ul>
<li>jQuery 的官方网址是：http://jQuery.com/，从这里可以获取  jQuery  的最新版本。
<ul>
<li>jQuery中文文档：https://www.bootcdn.cn/jquery/</li>
</ul>
</li>
<li>使用的话，就是导入这份 js 文件。</li>
<li>导入方式是在页面，通过<code>&lt;script&gt;</code>标签导入</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;jQuery.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>导入之后，就可以使用  jQuery  的语法了。</p>
<p>​</p>
<h2 id="jquery--版本">jQuery  版本</h2>
<p>1.x：兼容IE678,使用最为广泛的，官方只做BUG维护，功能不再新增。因此一般项目来说，使用1.x版本就可以了，最终版本：1.12.4 (2016年5月20日)</p>
<p>2.x：不兼容IE678，很少有人使用，官方只做BUG维护，功能不再新增。如果不考虑兼容低版本的浏览器可以使用2.x，最终版本：2.2.4 (2016年5月20日)</p>
<p>3.x：不兼容IE678，只支持最新的浏览器。需要注意的是很多老的 jQuery 插件不支持3.x版。目前该版本是官方主要更新维护的版本。</p>
<blockquote>
<p>维护IE678是一件让人头疼的事情，一般我们都会额外加载一个CSS和JS单独处理。值得庆幸的是使用这些浏览器的人也逐步减少，PC端用户已经逐步被移动端用户所取代，如果没有特殊要求的话，一般都会选择放弃对678的支持。</p>
</blockquote>
<p>​</p>
<h2 id="jquery-对象">jQuery 对象</h2>
<ul>
<li>jQuery 对象就是通过 jQuery 包装DOM对象后产生的对象。</li>
<li>jQuery 对象是  jQuery 独有的。</li>
<li>如果一个对象是  jQuery 对象，那么它就可以使用  jQuery 里的方法：例如 <code>$('#i1').html()</code>  。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#i1&#34;</span><span class="p">).</span><span class="nx">html</span><span class="p">()</span>  <span class="c1">// 意思是: 获取id值为 i1 的元素的 html 代码。其中 html() 是  jQuery  里的方法。 
</span><span class="c1">// 相当于： 
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;i1&#34;</span><span class="p">).</span><span class="nx">innerHTML</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>虽然  jQuery 对象是包装 DOM 对象后产生的，但是  jQuery 对象无法使用 DOM 对象的任何方法，同理 DOM对象也没不能使用  jQuery 里的方法。</li>
</ul>
<blockquote>
<p>一个约定，我们在声明一个 jQuery 对象变量的时候在变量名前面加上$：</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">$variable</span> <span class="o">=</span>  <span class="nx">jQuery</span> <span class="nx">对像</span>
<span class="kd">let</span> <span class="nx">variable</span> <span class="o">=</span> <span class="nx">DOM对象</span>
<span class="nx">$variable</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  <span class="c1">//  jQuery 对象转成DOM对象
</span></code></pre></td></tr></table>
</div>
</div><p>拿上面那个例子举例， jQuery 对象和 DOM 对象的使用：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#i1&#34;</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span>       <span class="c1">//  jQuery 对象可以使用 jQuery 的方法
</span><span class="c1"></span><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#i1&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">innerHTML</span>  <span class="c1">// DOM对象使用DOM的方法
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="一选择网页元素">一、选择网页元素</h2>
<blockquote>
<p>jQuery 的基本设计思想和主要用法，就是&quot;选择某个网页元素，然后对其进行某种操作&rdquo;。这是它区别于其他Javascript库的根本特点。</p>
</blockquote>
<blockquote>
<p>使用 jQuery 的第一步，往往就是将一个选择表达式，放进构造函数 jQuery ()（简写为$），然后得到被选中的元素。</p>
</blockquote>
<p>选择表达式可以是CSS选择器：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">)</span> <span class="c1">//选择整个文档对象
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#myId&#39;</span><span class="p">)</span> <span class="c1">//选择ID为myId的网页元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div.myClass&#39;</span><span class="p">)</span> <span class="c1">// 选择class为myClass的div元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[name=first]&#39;</span><span class="p">)</span> <span class="c1">// 选择name属性等于first的input元素
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>也可以是 jQuery 特有的表达式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a:first&#39;</span><span class="p">)</span> <span class="c1">//选择网页中第一个a元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;tr:odd&#39;</span><span class="p">)</span> <span class="c1">//选择表格的奇数行
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#myForm :input&#39;</span><span class="p">)</span> <span class="c1">// 选择表单中的input元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div:visible&#39;</span><span class="p">)</span> <span class="c1">//选择可见的div元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div:gt(2)&#39;</span><span class="p">)</span> <span class="c1">// 选择所有的div元素，除了前三个
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div:animated&#39;</span><span class="p">)</span> <span class="c1">// 选择当前处于动画状态的div元素
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="二改变结果集">二、改变结果集</h2>
<p>jQuery 设计思想之二，就是提供各种强大的过滤器，对结果集进行筛选，缩小选择结果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">has</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">);</span> <span class="c1">// 选择包含p元素的div元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">not</span><span class="p">(</span><span class="s1">&#39;.myClass&#39;</span><span class="p">);</span> <span class="c1">//选择class不等于myClass的div元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;.myClass&#39;</span><span class="p">);</span> <span class="c1">//选择class等于myClass的div元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">first</span><span class="p">();</span> <span class="c1">//选择第1个div元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">eq</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> <span class="c1">//选择第6个div元素
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>有时候，我们需要从结果集出发，移动到附近的相关元素， jQuery 也提供了在DOM树上的移动方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">next</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">);</span> <span class="c1">//选择div元素后面的第一个p元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">parent</span><span class="p">();</span> <span class="c1">//选择div元素的父元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">closest</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">);</span> <span class="c1">//选择离div最近的那个form父元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">children</span><span class="p">();</span> <span class="c1">//选择div的所有子元素
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">siblings</span><span class="p">();</span> <span class="c1">//选择div的同级元素
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="三链式操作">三、链式操作</h2>
<p>jQuery 设计思想之三，就是最终选中网页元素以后，可以对它进行一系列操作，并且所有操作可以连接在一起，以链条的形式写出来，比如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;h3&#39;</span><span class="p">).</span><span class="nx">eq</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>分解开来，就是下面这样：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span> <span class="c1">//找到div元素
</span><span class="c1"></span>
  <span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;h3&#39;</span><span class="p">)</span> <span class="c1">//选择其中的h3元素
</span><span class="c1"></span>
  <span class="p">.</span><span class="nx">eq</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">//选择第3个h3元素
</span><span class="c1"></span>
  <span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">);</span> <span class="c1">//将它的内容改为Hello
</span></code></pre></td></tr></table>
</div>
</div><p>这是 jQuery 最令人称道、最方便的特点。它的原理在于每一步的 jQuery 操作，返回的都是一个 jQuery 对象，所以不同操作可以连在一起。</p>
<p>jQuery 还提供了.end()方法，使得结果集可以后退一步：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>

  <span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;h3&#39;</span><span class="p">)</span>

  <span class="p">.</span><span class="nx">eq</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

  <span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">)</span>

  <span class="p">.</span><span class="nx">end</span><span class="p">()</span> <span class="c1">//退回到选中所有的h3元素的那一步
</span><span class="c1"></span>
  <span class="p">.</span><span class="nx">eq</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">//选中第一个h3元素
</span><span class="c1"></span>
  <span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;World&#39;</span><span class="p">);</span> <span class="c1">//将它的内容改为World
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="四元素的操作取值和赋值">四、元素的操作：取值和赋值</h2>
<blockquote>
<p>操作网页元素，最常见的需求是取得它们的值，或者对它们进行赋值。</p>
</blockquote>
<blockquote>
<p>jQuery 设计思想之四，就是使用同一个函数，来完成取值（getter）和赋值（setter），即&quot;取值器&quot;与&quot;赋值器&quot;合一。到底是取值还是赋值，由函数的参数决定。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span> <span class="c1">//html()没有参数，表示取出h1的值
</span><span class="c1"></span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">);</span> <span class="c1">//html()有参数Hello，表示对h1进行赋值
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>常见的取值和赋值函数如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">.</span><span class="nx">html</span><span class="p">()</span> <span class="c1">// 取出或设置html内容
</span><span class="c1"></span>
<span class="p">.</span><span class="nx">text</span><span class="p">()</span> <span class="c1">// 取出或设置text内容
</span><span class="c1"></span>
<span class="p">.</span><span class="nx">attr</span><span class="p">()</span> <span class="c1">// 取出或设置某个属性的值
</span><span class="c1"></span>
<span class="p">.</span><span class="nx">width</span><span class="p">()</span> <span class="c1">// 取出或设置某个元素的宽度
</span><span class="c1"></span>
<span class="p">.</span><span class="nx">height</span><span class="p">()</span> <span class="c1">// 取出或设置某个元素的高度
</span><span class="c1"></span>
<span class="p">.</span><span class="nx">val</span><span class="p">()</span> <span class="c1">// 取出某个表单元素的值
</span></code></pre></td></tr></table>
</div>
</div><p>需要注意的是，如果结果集包含多个元素，那么赋值的时候，将对其中所有的元素赋值；取值的时候，则是只取出第一个元素的值（.text()例外，它取出所有元素的text内容）。</p>
<p>​</p>
<h2 id="五元素的操作移动">五、元素的操作：移动</h2>
<blockquote>
<p>jQuery 设计思想之五，就是提供两组方法，来操作元素在网页中的位置移动。一组方法是直接移动该元素，另一组方法是移动其他元素，使得目标元素达到我们想要的位置。</p>
<p>假定我们选中了一个div元素，需要把它移动到p元素后面。</p>
</blockquote>
<p>第一种方法是使用 .insertAfter()，把div元素移动p元素后面：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">insertAfter</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">));</span>
</code></pre></td></tr></table>
</div>
</div><p>第二种方法是使用.after()，把p元素加到div元素前面：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">after</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">));</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>表面上看，这两种方法的效果是一样的，唯一的不同似乎只是操作视角的不同。但是实际上，它们有一个重大差别，那就是返回的元素不一样。第一种方法返回div元素，第二种方法返回p元素。你可以根据需要，选择到底使用哪一种方法。</p>
<p>使用这种模式的操作方法，一共有四对：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">.</span><span class="nx">insertAfter</span><span class="p">()</span>  <span class="nx">和</span> <span class="p">.</span><span class="nx">after</span><span class="p">()</span>   <span class="err">：</span><span class="nx">在现存元素的外部</span><span class="err">，</span><span class="nx">从后面插入元素</span>

<span class="p">.</span><span class="nx">insertBefore</span><span class="p">()</span> <span class="nx">和</span> <span class="p">.</span><span class="nx">before</span><span class="p">()</span>  <span class="err">：</span><span class="nx">在现存元素的外部</span><span class="err">，</span><span class="nx">从前面插入元素</span>

<span class="p">.</span><span class="nx">appendTo</span><span class="p">()</span>     <span class="nx">和</span> <span class="p">.</span><span class="nx">append</span><span class="p">()</span>  <span class="err">：</span><span class="nx">在现存元素的内部</span><span class="err">，</span><span class="nx">从后面插入元素</span>

<span class="p">.</span><span class="nx">prependTo</span><span class="p">()</span>    <span class="nx">和</span> <span class="p">.</span><span class="nx">prepend</span><span class="p">()</span> <span class="err">：</span><span class="nx">在现存元素的内部</span><span class="err">，</span><span class="nx">从前面插入元素</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="六元素的操作复制删除和创建">六、元素的操作：复制、删除和创建</h2>
<p>除了元素的位置移动之外， jQuery 还提供其他几种操作元素的重要方法。</p>
<p>复制元素使用 .clone()。</p>
<p>删除元素使用.remove()和.detach()。两者的区别在于，前者不保留被删除元素的事件，后者保留，有利于重新插入文档时使用。</p>
<p>清空元素内容（但是不删除该元素）使用.empty()。</p>
<p>创建新元素的方法非常简单，只要把新元素直接传入 jQuery 的构造函数就行了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;p&gt;Hello&lt;/p&gt;&#39;</span><span class="p">);</span>

<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;li class=&#34;new&#34;&gt;new list item&lt;/li&gt;&#39;</span><span class="p">);</span>

<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;list item&lt;/li&gt;&#39;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="汇总">汇总</h2>
<h3 id="jquery--选择器-">jQuery  选择器 ———</h3>
<blockquote>
<p>选择器通过标签名、属性名或内容对DOM元素进行快速、准确的定位。根据所获取页面中元素的不同，可以将选择器分为：基本选择器、层次选择器、过滤选择器和表单选择器。</p>
</blockquote>
<h3 id="1基本选择器">1、基本选择器</h3>
<blockquote>
<p>使用最频繁的选择器，包括元素 ID、Class 名、元素名等。</p>
</blockquote>
<p>id选择器：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#element-id&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>class选择器：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.class-name&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>元素选择器：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element-name&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="2层次选择器">2、层次选择器</h3>
<blockquote>
<p>通过DOM元素间的层次关系获取元素，主要层次关系包括后代、父子、相邻、兄弟关系等。</p>
</blockquote>
<p>根据祖先元素匹配所有后代元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ancestor descendant&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>根据父元素匹配所有的子元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;parent &gt; child&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>匹配所有紧接在prev元素后的相邻元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;prev + next&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>匹配prev元素之后的所有兄弟元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;prev ~ siblings&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="3过滤选择器">3、过滤选择器</h3>
<blockquote>
<p>过滤选择器根据某类过滤规则进行元素的匹配，以:开头。过滤选择器又分为：简单过滤选择器、内容过滤选择器、可见性过滤选择器、属性过滤选择器、子元素过滤选择器和表单对象属性过滤选择器。</p>
</blockquote>
<h4 id="31-简单过滤选择器">3.1 简单过滤选择器</h4>
<p>获取页面第一个和最后一个X元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:first&#39;</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:last&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有索引值为偶数和奇数的元素，索引值从0开始：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:even&#39;</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:odd&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取等于、大于和小于索引值的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:eq(index)&#39;</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:gt(index)&#39;</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:lt(index)&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取除给定的选择器外的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:not(selector)&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="32-内容过滤选择器">3.2 内容过滤选择器</h4>
<p>获取包含给定文本的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:contains(text)&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有不包含子元素或者文本的空元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:empty&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取含有选择器所匹配的元素的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:has(selector)&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取含有子元素或文本的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:parent&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="33-可见性过滤选择器">3.3 可见性过滤选择器</h4>
<p>获取所有不可见的元素，或者type为hidden的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:hidden&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有可见的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:visible&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="34-属性过滤选择器">3.4 属性过滤选择器</h4>
<p>获取包含给定属性的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element[attribute]&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取属性是给定值的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element[attribute=value]&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取属性不是给定值的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element[attribute!=value]&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取属性是以给定值开始的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element[attribute^=value]&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取属性是以给定值结束的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element[attribute$=value]&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取属性是包含给定值的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element[attribute*=value]&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="35-子元素过滤选择器">3.5 子元素过滤选择器</h4>
<p>获取父元素下的第一个、最后一个、唯一一个子元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;parent:first-child&#39;</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;parent:last-child&#39;</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;parent:only-child&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取父元素下的特定位置的元素，索引值从1开始：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;parent:nth-child(eq|even|odd|index)&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="36-表单对象属性过滤选择器">3.6 表单对象属性过滤选择器</h4>
<p>获取表单中所有属性为可用的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:enabled&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取表单中所有属性为不可用的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:disabled&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取表单中所有被选中的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:checked&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取表单中所有被选中option的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;element:selected&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="4表单选择器">4、表单选择器</h3>
<blockquote>
<p>通过它可以在页面中快速定位某表单对象。</p>
</blockquote>
<p>获取所有input、textarea、select等input元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:input&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有单行文本框：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:text&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有密码框：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:password&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有单项按钮：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:radio&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有复选框：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:checkbox&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有提交按钮：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:submit&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有图像域：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:image&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有重置按钮：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:reset&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有按钮：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:button&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>获取所有文件域：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form:file&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="dom-操作-">DOM 操作 ———</h3>
<blockquote>
<p>在与页面中的元素进行交互式的操作中，主要包括对元素属性、内容、值、CSS等的操作。同时，还有对页面节点的操作，包括节点元素的创建、插入、复制、替换、删除等操作。</p>
</blockquote>
<h3 id="1元素属性操作">1、元素属性操作</h3>
<p>在  jQuery  中，可以对元素属性进行获取、设置、删除等操作。</p>
<p>获取指定属性名的元素属性：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>设置元素属性值，key为属性名称，value为属性值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>设置多个属性值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">attr</span><span class="p">({</span><span class="nx">keyN</span><span class="o">:</span><span class="nx">valueN</span><span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>删除指定属性名的元素属性：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">removeAttr</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="2元素内容操作">2、元素内容操作</h3>
<blockquote>
<p>在 jQuery 中，可以获取和设置元素的HTML或文本内容。</p>
</blockquote>
<p>获取元素的HTML/文本内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">html</span><span class="p">()</span>
<span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">text</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>设置元素的HTML/文本内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>两者的区别是，html() 方法仅支持 HTML 类型的文档，不支持 XML。而 text() 方法不仅支持 HTML 类型，也支持 XML 类型。</p>
</blockquote>
<p>​</p>
<h3 id="3元素值操作">3、元素值操作</h3>
<blockquote>
<p>在 jQuery 中，可以获取和设置元素的值。</p>
</blockquote>
<p>获取元素的值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>设置元素的值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Tips：通过 val().join(&rdquo;,&quot;) 获取 select 标签中的多个选项值。</p>
</blockquote>
<p>​</p>
<h3 id="4元素样式操作">4、元素样式操作</h3>
<blockquote>
<p>在 jQuery 中，可以直接设置样式、增加CSS类别、类别切换、删除类别等操作。</p>
</blockquote>
<p>为指定name的样式设置值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>为元素增加样式类：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="kr">class</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>切换不同的样式类：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="kr">class</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>删除元素的样式类：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="kr">class</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="5创建节点元素">5、创建节点元素</h3>
<blockquote>
<p>如果要在页面中添加某个元素，需要先通过构造函数创建节点元素：</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">html</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="6插入节点元素">6、插入节点元素</h3>
<blockquote>
<p>按照插入元素的位置区分，可以分为内部和外部两种插入方法。</p>
</blockquote>
<h4 id="61-内部插入节点">6.1 内部插入节点</h4>
<p>向所选择的元素内部追加/前置内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">prepend</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>向所选择的元素内部追加/前置function方法所返回的内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="kd">function</span><span class="p">())</span>
<span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">prepend</span><span class="p">(</span><span class="kd">function</span><span class="p">())</span>
</code></pre></td></tr></table>
</div>
</div><p>把所选择的元素追加/前置到另一个指定的元素集合中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">prependTo</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="62-外部插入节点">6.2 外部插入节点</h4>
<p>向所选择的元素外部追加/前置内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">after</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">before</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>向所选择的元素外部追加/前置function方法所返回的内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">after</span><span class="p">(</span><span class="kd">function</span><span class="p">())</span>
<span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">before</span><span class="p">(</span><span class="kd">function</span><span class="p">())</span>
</code></pre></td></tr></table>
</div>
</div><p>把所选择的元素追加/前置到另一个指定的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">insertAfter</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
<span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="7复制节点元素">7、复制节点元素</h3>
<blockquote>
<p>将某个元素节点复制到另一个节点之后。</p>
</blockquote>
<p>复制匹配的DOM元素并且选中复制成功的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">clone</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>在复制时将该元素的所有行为也进行复制：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">clone</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="8替换节点元素">8、替换节点元素</h3>
<p>将所有选择的元素替换成指定的HTML或DOM元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">replaceWith</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>将所有选择的元素替换成指定selector的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">replaceAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>一旦完成替换，被替换元素中的全部事件将会消失。</p>
<p>​</p>
<h3 id="9删除节点元素">9、删除节点元素</h3>
<p>删除指定的元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">remove</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>删除指定的元素，但保留被移除元素的事件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">detach</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>清空所选择的页面元素的内容，但不移除该元素：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">empty</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="10通用操作">10、通用操作</h3>
<blockquote>
<p>这类操作不需要选择元素就可以直接使用。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span>           <span class="c1">// 去除字符串两端的空格。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">()</span>           <span class="c1">// 遍历一个数组或对象。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">inArray</span><span class="p">()</span>        <span class="c1">// 返回一个值在数组中的索引位置。如果该值不在数组中，则返回-1。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">grep</span><span class="p">()</span>           <span class="c1">// 返回数组中符合某种标准的元素。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">()</span>         <span class="c1">// 将多个对象，合并到第一个对象。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">makeArray</span><span class="p">()</span>      <span class="c1">// 将对象转化为数组。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">type</span><span class="p">()</span>           <span class="c1">// 判断对象的类别（函数对象、日期对象、数组对象、正则对象等等）。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">isArray</span><span class="p">()</span>        <span class="c1">// 判断某个参数是否为数组。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">isEmptyObject</span><span class="p">()</span>  <span class="c1">// 判断某个对象是否为空（不含有任何属性）。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">()</span>     <span class="c1">// 判断某个参数是否为函数。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">isPlainObject</span><span class="p">()</span>  <span class="c1">// 判断某个参数是否为用&#34;{}&#34;或&#34;new Object&#34;建立的对象。
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">support</span><span class="p">()</span>        <span class="c1">// 判断浏览器是否支持某个特性。
</span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>jQuery 的设计思想（下）</title>
    <link>http://samrks.github.io/dom-jquery-prototype/</link>
    <pubDate>Sun, 25 Oct 2020 14:20:02 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/dom-jquery-prototype/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="命名风格">命名风格</h2>
<blockquote>
<p>命名风格：我们在写代码时都会有一些风格，这些风格可能是业界共识、也可能是自己的小技巧</p>
<ul>
<li>下面介绍一个命名风格（以前可能是业界共识，但现在已经不太常用了，因为 jQuery 很少人用了）</li>
</ul>
</blockquote>
<h3 id="下面的代码令人误解">下面的代码令人误解</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">div1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.test&#39;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">div2</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.test&#39;</span><span class="p">)</span>
<span class="c1">// div2 到底是 DOM 对象，还是 jQuery 对象? 
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>「DOM 对象」只能使用 DOM API，如 querySelector、appendChild …</li>
<li>「jQuery 对象」只能使用 jQuery 的 API，如 find、 addClass …</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div#test&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>我们会误以为 div 是一个 DOM</li>
<li>实际上 div 是 jQuery 构造的 api 对象</li>
<li>怎么避免这种误解呢？</li>
</ul>
<h3 id="改成这样">改成这样</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">elDiv1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.test&#39;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">$div2</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.test&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<ul>
<li>
<p>声明变量用来表示 DOM 对象，可以变量名可以前置： el  （可选）</p>
</li>
<li>
<p>声明变量用来表示 jQuery 产生的 api 对象，变量名前 + $</p>
</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">$div</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div#test&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>$div.appendChild 不存在，因为它不是 DOM 对象</li>
<li>$div.find 存在，因为它是 jQuery 对象</li>
</ul>
<blockquote>
<p>代码中，所有 $ 开头的变量，都是 jQuery 对象</p>
<ul>
<li>这是约定，除非特殊说明</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="jquery-代码">jQuery 代码</h2>
<blockquote>
<p>当前已经实现的代码</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/*
</span><span class="cm">  * elements 表示通过选择器找到的目标元素组成的伪数组
</span><span class="cm">  * */</span>
  <span class="kd">let</span> <span class="nx">elements</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">selectorOrArray</span> <span class="o">===</span> <span class="s2">&#34;string&#34;</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 重载
</span><span class="c1"></span>    <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">selectorOrArray</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">elements</span> <span class="o">=</span> <span class="nx">selectorOrArray</span>
  <span class="p">}</span>
  <span class="c1">// ↓ api 可以操作 elements（this 就是 jQuery 返回的 api）
</span><span class="c1"></span>  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="k">this</span>
    <span class="p">},</span>
    <span class="nx">find</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`elements`</span><span class="p">,</span> <span class="nx">elements</span><span class="p">)</span>
      <span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">array</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)))</span>
      <span class="p">}</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`array`</span><span class="p">,</span> <span class="nx">array</span><span class="p">)</span>
      <span class="nx">array</span><span class="p">.</span><span class="nx">oldApi</span> <span class="o">=</span> <span class="k">this</span>
      <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="nx">oldApi</span><span class="o">:</span> <span class="nx">selectorOrArray</span><span class="p">.</span><span class="nx">oldApi</span><span class="p">,</span>  <span class="c1">// 在 find 中，通过 array 保存下来的旧的 api
</span><span class="c1"></span>    <span class="nx">end</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">oldApi</span>
    <span class="p">},</span>
    <span class="nx">each</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">elements</span><span class="p">)</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="k">this</span> <span class="c1">// this 就是 api !!!
</span><span class="c1"></span>    <span class="p">},</span>
    <span class="nx">print</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">elements</span><span class="p">)</span>
      <span class="k">return</span> <span class="k">this</span>
    <span class="p">},</span>
    <span class="nx">parent</span><span class="p">()</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="c1">// 遍历父元素 ↓
</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">node</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 去重
</span><span class="c1"></span>          <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span>
        <span class="p">}</span>
      <span class="p">})</span>
      <span class="nx">array</span><span class="p">.</span><span class="nx">oldApi</span> <span class="o">=</span> <span class="k">this</span>
      <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="nx">children</span><span class="p">()</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">node</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(...</span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span>
        <span class="p">}</span>
      <span class="p">})</span>
      <span class="nx">array</span><span class="p">.</span><span class="nx">oldApi</span> <span class="o">=</span> <span class="k">this</span>
      <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="cm">/******************************************/</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="调用">调用</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">api1</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.red&#39;</span><span class="p">)</span>  <span class="c1">// api1 用来操作 red 元素
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">api2</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.blue&#39;</span><span class="p">)</span>  <span class="c1">// api2 用来操作 blue 元素
</span><span class="c1"></span><span class="cm">/*
</span><span class="cm">* 由上，可以发现 api1 和 api2 重复了 （?!! 什么意思）
</span><span class="cm">* */</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="发现问题--api1-和-api2-重复了">发现问题 🎃 api1 和 api2 重复了</h2>
<h3 id="分析-">分析 🎃</h3>
<blockquote>
<p>api1 和 api2 重复了 （?!! 什么意思）</p>
</blockquote>
<p></p>
<ul>
<li>api1 对应一块内存 #101
<ul>
<li>在 #101 中，有 find （#201）、each（#209）</li>
<li>内存 #201 对应一个find函数、内存 #209 对应一个each函数</li>
</ul>
</li>
<li>api2 对应内存 #409
<ul>
<li>在 #409 中，有 find （#509）、each（#519）</li>
<li>内存 #509 对应一个find函数、内存 #519 对应一个each函数</li>
</ul>
</li>
<li>可以比较清楚的发现：
<ul>
<li>两个 find 、两个 each 实际上应该是同一个函数的实现</li>
<li>但 jQuery 每创建一个 api ，这些函数也都被再次创建了一遍</li>
<li>201和509（209和519）是完全一样的两块内存</li>
</ul>
</li>
<li>这就是前面提到的「 api1 和 api2 重复了」</li>
</ul>
<h3 id="解决方法-">解决方法 🎃</h3>
<ul>
<li>
<p>find 和 each 应该作为「共用属性」</p>
</li>
<li>
<p>那为什么不把共用的属性写到一个对象上去呢？</p>
<ul>
<li>用一个 __proto__ 属性保存下共有属性的地址，即可</li>
<li>把这个包含共有属性的对象，放到 jQuery 上，让 jQuery.prototype 等于这个对象</li>
</ul>
<p></p>
</li>
</ul>
<h4 id="套用原型公式">套用原型公式</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">对象</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">其构造函数</span><span class="p">.</span><span class="nx">prototype</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">api1</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.red&#39;</span><span class="p">)</span>
<span class="nx">api1</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span>   <span class="c1">// 原型公式
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">api2</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.blue&#39;</span><span class="p">)</span>
<span class="nx">api2</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="使用原型-改造-jquery-">使用原型 改造 jQuery ⭕️</h2>
<h3 id="第一版-jquery-代码">第一版 jQuery 代码</h3>
<blockquote>
<p>先看看之前的版本</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">elements</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">selectorOrArray</span> <span class="o">===</span> <span class="s2">&#34;string&#34;</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 重载
</span><span class="c1"></span>    <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">selectorOrArray</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">elements</span> <span class="o">=</span> <span class="nx">selectorOrArray</span>
  <span class="p">}</span>
  <span class="c1">// ↓ api 可以操作 elements（this 就是 jQuery 返回的 api）
</span><span class="c1"></span>  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">jquery</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nx">oldApi</span><span class="o">:</span> <span class="nx">selectorOrArray</span><span class="p">.</span><span class="nx">oldApi</span><span class="p">,</span>  <span class="c1">// 通过 array 保存下上一次的api
</span><span class="c1"></span>    <span class="c1">// 下面是各种功能函数
</span><span class="c1"></span>    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{...},</span>
    <span class="nx">find</span><span class="p">()</span> <span class="p">{...},</span>
    <span class="nx">each</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{...},</span>
    <span class="nx">appendTo</span><span class="p">()</span> <span class="p">{...},</span>
    <span class="p">...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用原型进行改造-">使用原型进行改造 ⭕️</h3>
<h4 id="-共有属性函数转移到原型上">① 共有属性（函数）转移到原型上</h4>
<blockquote>
<p>把所有共有属性，都移到 jQuery 的原型 prototype 上</p>
<p>别忘了 constructor</p>
</blockquote>
<ul>
<li>这里是直接给 jQuery.prototype 赋新值，这样写很方便，但是会导致原本原型上的 <a href="" rel="">constructor</a> 被覆盖丢失，所以要手动加回去 <a href="" rel="">constructor</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">constructor</span><span class="o">:</span> <span class="nx">jQuery</span><span class="p">,</span>
  <span class="nx">jquery</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="c1">// 下面是各种功能函数
</span><span class="c1"></span>  <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{...},</span>
  <span class="nx">find</span><span class="p">()</span> <span class="p">{...},</span>
  <span class="nx">each</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{...},</span>
  <span class="nx">appendTo</span><span class="p">()</span> <span class="p">{...},</span>
  <span class="p">...</span>
<span class="p">}</span>
  
</code></pre></td></tr></table>
</div>
</div><h4 id="-把-prototype-赋予-jquery-创建的对象">② 把 prototype 赋予 jQuery 创建的对象</h4>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener noreffer">Object.create()</a> ：创建对象，并给对象指定原型 __proto__</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">elements</span>
  <span class="c1">// ...
</span><span class="c1"></span>  
  <span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>  <span class="c1">// 创建 api对象，并指定其原型是 jQuery.prototype
</span><span class="c1"></span>  <span class="c1">// 相当于 const api = {__proto__: jQuery.prototype}
</span><span class="c1"></span>  <span class="p">...</span>
  
  <span class="k">return</span> <span class="nx">api</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="-往-api-上添加-elements-oldapi">③ 往 api 上添加 elements 、oldApi</h4>
<blockquote>
<p>问题分析：</p>
<p>当我们把所有功能函数都从 api（独立函数） 上拿走，放到原型（独立对象）上之后
原型上的函数就获取不到 jQuery 里的 elements ，elements 仅作用在在 window.jQuery 函数中</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">p1</span><span class="p">){</span> 
  <span class="kd">let</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">p1</span><span class="p">)</span>
  <span class="k">return</span> <span class="nx">api</span>
<span class="p">};</span>
<span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="nx">get</span><span class="p">(</span><span class="nx">index</span><span class="p">){</span> <span class="k">return</span> <span class="nx">elements</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span> <span class="p">},</span>    <span class="c1">// 这里的elements获取不到上面的 elements
</span><span class="c1"></span>  <span class="nx">end</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">oldApi</span><span class="p">},</span>
  <span class="nx">find</span><span class="p">(){</span> <span class="p">},</span> 
  <span class="c1">// ...
</span><span class="c1"></span><span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>那 find、get … 怎么操作 elements 呢？</p>
<ul>
<li>
<p>每生成新的 elements，都会创建、返回新的 api（api 的原型上就是这些功能函数）</p>
</li>
<li>
<p><strong>需要找到它们之间的联系</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.test&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">)</span>  
<span class="c1">// addClass 函数中的 this 指向函数调用者 $(&#39;.test&#39;)
</span><span class="c1">// 而 $(&#39;.test&#39;) === api ，所以函数中的 this 指向的就是 api
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>所以要想在函数内部，获取到 elements，可以把 elements 放到 api 上</p>
</li>
</ul>
</li>
<li>
<p>那就在 api 上添加一个属性 elements，用来保存  jQuery 创建的 elements</p>
</li>
<li>
<p>在原型里的函数中，通过 <a href="" rel="">this.elements</a>，就可以访问到这个【目标元素的数组】，加以操作</p>
</li>
</ul>
<blockquote>
<p>综上：</p>
<ul>
<li>在原型里的函数，要获取到 jQuery 里的变量。必须通过桥梁【 api 、this 】
<ul>
<li><strong>桥梁：只要 api 上有 jQuery 里的变量，函数就能通过 this 关键字获取到这个变量</strong></li>
</ul>
</li>
</ul>
</blockquote>
<p>注：oldApi 代码如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">end</span><span class="p">(){</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">oldApi</span>  
  <span class="c1">// end 原本就是要操作【调用者api】中的 oldApi
</span><span class="c1"></span>  <span class="c1">// 所以 this(api) 上必须有 oldApi，end才能操作到，所以同样也需要往 api 上添加 oldApi
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p><a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c7-JS%e7%bc%96%e7%a8%8b%e6%8e%a5%e5%8f%a3%5c4-jQuery%e4%b8%ad%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%9e%8b%ef%bc%88%e4%b8%8b%ef%bc%89%5cdom-2-github-prototype%5csrc" rel="">完整代码</a></p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener noreffer">Object.assign</a>：把后面对象的属性，复制到前面的对象上（注意是浅复制，JS 本身没有深复制）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">elements</span>
  <span class="c1">// ...  elements = document.querySelectorAll(selectorOrArray)
</span><span class="c1"></span> 
  <span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span>
  <span class="c1">// 把所需变量放到 api 上（两种方式）
</span><span class="c1"></span>  <span class="c1">// （方式一 👇）
</span><span class="c1"></span>  <span class="c1">// api.elements = elements 
</span><span class="c1"></span>  <span class="c1">// api.oldApi = selectorOrArray.oldApi // 等同于 ↓
</span><span class="c1"></span>  <span class="c1">// （方式二 👇）
</span><span class="c1"></span>  <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">api</span><span class="p">,</span> <span class="p">{</span>  <span class="c1">// Object.assign（两个参数）把后面对象的属性，复制到前面的对象上
</span><span class="c1"></span>    <span class="nx">elements</span><span class="o">:</span> <span class="nx">elements</span><span class="p">,</span>
    <span class="nx">oldApi</span><span class="o">:</span> <span class="nx">selectorOrArray</span><span class="p">.</span><span class="nx">oldApi</span>
  <span class="p">})</span>
  
  <span class="k">return</span> <span class="nx">api</span>
<span class="p">}</span>

<span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 函数在这里
</span><span class="c1"></span>  <span class="nx">constructor</span><span class="o">:</span> <span class="nx">jQuery</span><span class="p">,</span>
  <span class="nx">jquery</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>

  <span class="c1">// 所有对 elements 的调用，都改成 this.elements
</span><span class="c1"></span>  <span class="nx">get</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span>
  <span class="p">},</span>
  <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">element</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
      <span class="nx">element</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="k">this</span>
  <span class="p">},</span>
  <span class="nx">end</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">oldApi</span> <span class="c1">// this 就是新 api
</span><span class="c1"></span>  <span class="p">}</span>
  <span class="nx">find</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">elements2</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">))</span>
      <span class="nx">array</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">elements2</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">array</span><span class="p">.</span><span class="nx">oldApi</span> <span class="o">=</span> <span class="k">this</span> <span class="c1">// find 返回值会覆盖原本的 api，所以提取保存下旧的 api（this）
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">each</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{...},</span>
  <span class="nx">appendTo</span><span class="p">()</span> <span class="p">{...},</span>
  <span class="p">...</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c7-JS%e7%bc%96%e7%a8%8b%e6%8e%a5%e5%8f%a3%5c4-jQuery%e4%b8%ad%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%9e%8b%ef%bc%88%e4%b8%8b%ef%bc%89%5cdom-2-github-prototype%5csrc" rel="">完整代码</a></li>
</ul>
<h3 id="补充-jqueryfn">补充： jQuery.fn</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{...}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>在 jQuery 的源码中，你会发现还多赋值了一个 jQuery.fn （如上）。用 fn 来表示 prototype 原型
<ul>
<li>可能是嫌弃 prototype 这个单词太长了，所以想用 fn 来表示</li>
<li>也可能是想兼容一些不太理解 prototype 的开发者，所以干脆换一个更短的单词 fn</li>
<li>总之，就是 jQuery 的源码中，对 jQuery 的 prototype 原型取了一个别名叫： fn</li>
</ul>
</li>
</ul>
<h3 id="总结">总结</h3>
<blockquote>
<p>$  指代 jQuery</p>
</blockquote>
<ul>
<li>
<p>把共用属性（函数）全都放到  $.prototype</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">.</span><span class="nx">fn</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// 名字太长不爽，再起个别名 fn
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>然后让 api.__proto__ 指向 $.fn （也就是让 api.__proto__ 指向了 $.prototype）</p>
</li>
</ul>
<h3 id="完整代码">完整代码</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">elements</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">selectorOrArrayOrTemplate</span> <span class="o">===</span> <span class="s2">&#34;string&#34;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s2">&#34;&lt;&#34;</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 创建 div
</span><span class="c1"></span>      <span class="nx">elements</span> <span class="o">=</span> <span class="p">[</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">)]</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">// 查找 div
</span><span class="c1"></span>      <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">elements</span> <span class="o">=</span> <span class="nx">selectorOrArrayOrTemplate</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">createElement</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;template&#34;</span><span class="p">)</span>
    <span class="nx">container</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">string</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span>
    <span class="k">return</span> <span class="nx">container</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">firstChild</span>
  <span class="p">}</span>

  <span class="c1">// api 可以操作elements
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span> <span class="c1">// 创建一个对象，这个对象的 __proto__ 为括号里面的东西
</span><span class="c1"></span>  <span class="c1">// const api = {__proto__: jQuery.prototype}
</span><span class="c1"></span>  <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">api</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">elements</span><span class="o">:</span> <span class="nx">elements</span><span class="p">,</span>
    <span class="nx">oldApi</span><span class="o">:</span> <span class="nx">selectorOrArrayOrTemplate</span><span class="p">.</span><span class="nx">oldApi</span>
  <span class="p">})</span>
  <span class="c1">// api.elements = elements
</span><span class="c1"></span>  <span class="c1">// api.oldApi = selectorOrArrayOrTemplate.oldApi
</span><span class="c1"></span>  <span class="k">return</span> <span class="nx">api</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="原型">原型</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">constructor</span><span class="o">:</span> <span class="nx">jQuery</span><span class="p">,</span>
  <span class="nx">jquery</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="nx">get</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span>
  <span class="p">},</span>
  <span class="nx">appendTo</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">node</span> <span class="k">instanceof</span> <span class="nx">Element</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">el</span> <span class="p">=&gt;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">el</span><span class="p">))</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">jquery</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">el</span> <span class="p">=&gt;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">el</span><span class="p">))</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="nx">append</span><span class="p">(</span><span class="nx">children</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">children</span> <span class="k">instanceof</span> <span class="nx">Element</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">children</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">children</span> <span class="k">instanceof</span> <span class="nx">HTMLCollection</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">children</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
      <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">children</span><span class="p">.</span><span class="nx">jquery</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">children</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">node</span> <span class="p">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">node</span><span class="p">))</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="nx">find</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">elements2</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">))</span>
      <span class="nx">array</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">elements2</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">array</span><span class="p">.</span><span class="nx">oldApi</span> <span class="o">=</span> <span class="k">this</span> <span class="c1">// this 就是 旧 api
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">each</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">i</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="k">this</span>
  <span class="p">},</span>
  <span class="nx">parent</span><span class="p">()</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">node</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">})</span>
    <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">children</span><span class="p">()</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">node</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(...</span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">})</span>
    <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">print</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="c1">// 闭包：函数访问外部的变量
</span><span class="c1"></span>  <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">element</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
      <span class="nx">element</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="k">this</span>
  <span class="p">},</span>
  <span class="nx">end</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">oldApi</span> <span class="c1">// this 就是新 api
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="库封装完成">库封装完成</h2>
<blockquote>
<p>可以把代码公开了</p>
</blockquote>
<ul>
<li>
<p>发布到 GitHub</p>
</li>
<li>
<p>添加文档，告诉别人怎么用</p>
</li>
<li>
<p>获得称赞 ❤️ 🧡 💛 💚 💙 💜 🖤 🤍 🤎</p>
<ul>
<li>实现一个封装的库，提供给别人使用，好用的话，别人就会给你点赞</li>
</ul>
<ul>
<li>jQuery 就是早期一个程序员写的库，并提供给所有开发者使用 👍👍</li>
</ul>
</li>
<li>
<p>这就是程序员的社区。人人为我，我为人人</p>
</li>
</ul>
<blockquote>
<p>当然现在的水平，肯定不够指导别人。</p>
<p>就先把代码写完整，自己用成功一次即可</p>
<p>以后会学习「如何做单元测试」（当然「单元测试」可能比「封装jQuery」的代码还难）</p>
</blockquote>
<blockquote>
<p>现在需要做的就是：自己能动手写成至少 10% 的这么一个轮子</p>
<ul>
<li>只要你能完成，那代码水平肯定会显著提高</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="jquery-有多牛-x">jQuery 有多牛 X</h2>
<blockquote>
<p>它是目前前端<strong>最长寿</strong>的库，2006年发布 （已经14岁了）</p>
<ul>
<li>vue 、react 也才四五岁</li>
<li>在前端历史上，有数以万计的库，最终能够活下来并一直被使用的库，很少很少。</li>
<li>jQuery 是目前最长寿的一个</li>
</ul>
</blockquote>
<blockquote>
<p>它是世界上使用<strong>最广泛</strong>的库，<a href="https://trends.builtwith.com/javascript/jQuery" target="_blank" rel="noopener noreffer">全球80%的网站</a>在用</p>
<ul>
<li>可能现在新的科技公司不会再用 jQuery</li>
<li>但是老牌大公司，像是阿里巴巴、淘宝，一直都在用 jQuery</li>
</ul>
</blockquote>
<h3 id="设计模式">设计模式？</h3>
<blockquote>
<p>为什么 jQuery 这么牛 X   ？</p>
<ul>
<li>因为 jquery 的代码设计，做的 特 ~ 别 ~ 的 好。</li>
<li>好到没办法改进</li>
<li>我们今天学习的、很多写代码的套路，都是从 jQuery 的源码中学来的（工作个四五年再去看 jQuery 源码学习，小白直接看无异于自杀）</li>
</ul>
</blockquote>
<h3 id="jquery-用到了哪些设计模式">jQuery 用到了哪些设计模式</h3>
<ul>
<li>
<p><strong>不用 new 的构造函数</strong>（jQuery做到了），这个模式没有专门的名字</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">JQuery</span><span class="p">(</span><span class="s1">&#39;.test&#39;</span><span class="p">)</span>   <span class="p">=&gt;</span>   <span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.test&#39;</span><span class="p">)</span>  <span class="c1">//在jQuery之前没人想到可以这样
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>$(<strong>支持多种参数</strong>)，这个模式叫做<strong>重载</strong></p>
<ul>
<li>可以传选择器、传数组、传 html 结构</li>
</ul>
</li>
<li>
<p><strong>用闭包隐藏细节</strong>，这个模式没有专门的名字</p>
<ul>
<li>闭包：在一个函数中，调用了函数外部的变量</li>
<li><u>用户永远无法直接操作 elements （隐藏细节），必须通过 api 中的函数才能操作到 elements</u></li>
<li>jQuery 每次生成 elements 后，这个 elements 可以一直存活。因为 jQuery 函数返回的 api 、api 中的函数里仍然在获取 elements 且函数返回值是 api。细想，这就导致 elements 一直在被访问，不断在函数的返回值中被调用。直到 api 消失，elements 才会消失</li>
</ul>
</li>
<li>
<p>$div.text() 即可读也可写，这个模式叫 <strong>getter/setter</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">getText</span><span class="p">()</span>
<span class="nx">setText</span><span class="p">(</span><span class="s1">&#39;newValue&#39;</span><span class="p">)</span>  <span class="c1">// 以前都是两个函数来实现读、写
</span><span class="c1">// 而jQuery中只用一个函数，根据参数个数，区分读写
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>$.fn 是 $.prototype 的别名，这叫<strong>别名</strong></p>
<ul>
<li>这的确是设计模式，因为在 jQuery 前并没有人这么干过</li>
</ul>
</li>
<li>
<p>jQuery <strong>针对不同环境使用不同代码</strong>，这叫<strong>适配器</strong></p>
<ul>
<li>电源适配器：你在日本，就调整成 110v，在中国，就调整成220v</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(){</span>
    
<span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(){</span>
    
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="设计模式到底是啥">设计模式到底是啥</h3>
<ul>
<li>老子这个代码写得太漂亮了，别人肯定也用得到（去掉 new、重载、闭包、getter/setter、别名、适配器…）</li>
<li>那就给这种写法取个名字吧，比如：适配器模式（if else）</li>
<li>设计模式，就是对通用代码取个名字而已
<ul>
<li>实际上就是程序员的黑话、行话</li>
</ul>
</li>
</ul>
<p>​</p>
<blockquote>
<ul>
<li><strong>适配器</strong>：就是针对不同环境使用不同代码</li>
<li><strong>别名</strong>：让一个名字等于另外一个名字、</li>
<li><strong>getter/setter</strong>：一个函数，既可以get 、也可以 set （可读可写）</li>
<li><strong>闭包隐藏细节</strong>：生成一个变量（elements），一个函数（addClass）去读这个变量</li>
<li><strong>重载</strong>：一个函数支持多种形式的参数</li>
<li><strong>不用 new 的构造函数</strong>：要知道是怎么一回事   <code>const api = new JQuery('.test')   =&gt;   const api = $('.test')</code></li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="我应该学习设计模式吗">我应该学习设计模式吗？</h3>
<h4 id="设计模式不是用来学的">设计模式不是用来学的</h4>
<ul>
<li>你看了这些代码</li>
<li>但你并不知道这代码用来解决什么问题</li>
<li>看了白看</li>
</ul>
<h4 id="设计模式是用来总结的">设计模式是用来总结的</h4>
<ul>
<li>
<p>你只管去写代码</p>
</li>
<li>
<p>把你的代码尽量写好，不断重写</p>
</li>
<li>
<p>总结你的代码，把写得好的地方抽象出来</p>
<ul>
<li>
<p>看看符合哪个设计模式</p>
<p>（并不是知道设计模式才这么写的，而是写完后发现，居然用到了设计模式）</p>
</li>
<li>
<p>你就可以告诉别人你用到了这几个设计模式</p>
</li>
<li>
<p>显得你特别高端</p>
</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="有人说不用学-jquery">有人说不用学 jQuery</h3>
<h4 id="真相">真相</h4>
<ul>
<li>jQuery 这么简单、经典的库，为什么不学？</li>
<li>通过 jQuery 可以学会很多封装技巧，为什么不学？
<ul>
<li>把一个变量放到函数里面、暴露出 api，api 可以操作变量，这就是 封装</li>
</ul>
</li>
<li>连 jQuery 都理解不了，Vue / React 肯定学不好</li>
</ul>
<h4 id="推荐文章">推荐文章</h4>
<ul>
<li>《<a href="https://fangyinghang.com/why-still-jquery/" target="_blank" rel="noopener noreffer">jQuery都过时了，那我还学它干嘛？</a>》</li>
</ul>]]></description>
</item><item>
    <title>jQuery 的设计思想（上）</title>
    <link>http://samrks.github.io/dom-jquery-handwritten/</link>
    <pubDate>Sat, 24 Oct 2020 01:23:34 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/dom-jquery-handwritten/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="前言">前言</h2>
<ul>
<li>本节内容，把上节封装的 dom 代码，改用 jQuery 风格再次重新封装</li>
<li>jQuery 非常简单</li>
</ul>
<p>​</p>
<h2 id="用-jquery-风格重新封装">用 jQuery 风格重新封装</h2>
<blockquote>
<p>这节课你可能经常对自己说：我怎么没想到？！</p>
</blockquote>
<h2 id="准备工作">准备工作</h2>
<blockquote>
<p>每节的准备工作都差不多，溜溜的用起来</p>
</blockquote>
<p>新建项目目录 <a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c7-JS%e7%bc%96%e7%a8%8b%e6%8e%a5%e5%8f%a3%5c3-jQuery%e4%b8%ad%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%9e%8b%ef%bc%88%e4%b8%8a%ef%bc%89" rel="">dom-2</a>   &gt;    src    &gt;    index.html 、 main.js 、 jquery.js</p>
<h3 id="indexhtml">index.html</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;zh-CN&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span>
        <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,viewport-fit=cover&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>手写jQuery<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
  你好
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;jquery.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;main.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="jqueryjs">jquery.js</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 第一步，声明  window.jQuery 是一个函数（？！先不用管为什么是函数）
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`我是jQuery`</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="mainjs">main.js</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">jQuery</span><span class="p">()</span> <span class="c1">// window.jQuery()    // output：我是jQuery
</span></code></pre></td></tr></table>
</div>
</div><h3 id="开启本地服务">开启本地服务</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">yarn</span> <span class="nx">global</span> <span class="nx">add</span> <span class="nx">parcel</span>
<span class="nx">parcel</span> <span class="nx">src</span><span class="o">/</span><span class="nx">index</span><span class="p">.</span><span class="nx">html</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="链式风格-">链式风格 ❤️</h2>
<blockquote>
<p>看一下我们就要实现一个什么的代码 👇</p>
</blockquote>
<h3 id="也叫-jquery-风格">也叫 jQuery 风格</h3>
<ul>
<li>window.jQuery() 是我们提供的全局函数</li>
</ul>
<h3 id="特殊函数-jquery">特殊函数 jQuery</h3>
<ul>
<li><code>jQuery(选择器) </code> 用于获取对应的元素</li>
<li>但它却不返回这些元素</li>
<li>相反，它返回一个对象，称为 <strong>jQuery 构造出来的对象</strong>    <a href="" rel="">（ 也就是最初代码中的那个 api ）</a></li>
<li>这个对象可以操作对应的元素</li>
<li>听不懂？直接写代码！</li>
<li><a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c7-JS%e7%bc%96%e7%a8%8b%e6%8e%a5%e5%8f%a3%5c3-jQuery%e4%b8%ad%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%9e%8b%ef%bc%88%e4%b8%8a%ef%bc%89" rel="">本地项目dom-2</a></li>
</ul>
<p>​</p>
<h3 id="代码-">代码 ⭕️</h3>
<h4 id="indexhtml-1">index.html</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;test&#34;</span><span class="p">&gt;</span>你好1<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;test&#34;</span><span class="p">&gt;</span>你好2<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;test&#34;</span><span class="p">&gt;</span>你好3<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;jquery.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;main.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="jqueryjs-1">jquery.js</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 第一步，声明  window.jQuery 是一个函数（？！）（先不用管为什么是函数）
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span>  <span class="c1">// 获取 selector 的全部元素（得到一个数组）
</span><span class="c1"></span>  <span class="c1">// return elements
</span><span class="c1"></span>  <span class="c1">// 常规操作：就直接返回这个通过选择器找到的元素。
</span><span class="c1"></span>  <span class="c1">// 但jQuery做了反常规的操作：获取到元素后，没有返回这个元素，而是返回了可以操作这个元素的 api
</span><span class="c1"></span>  <span class="c1">// 如下：
</span><span class="c1"></span>  <span class="c1">// api 可以操作 elements
</span><span class="c1"></span>  <span class="c1">// api 是个对象，里面包含各种可以操作 elements 的函数。
</span><span class="c1"></span>  <span class="c1">// 如，addClass 就是给 elements 添加类名的函数
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// 函数内访问了函数外部的变量，这就是「闭包」
</span><span class="c1"></span>    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// elements 是 addClass 这个函数外部的变量
</span><span class="c1"></span>      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 遍历所有获取到的元素，添加类名
</span><span class="c1"></span>        <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
        
      <span class="p">}</span>
      <span class="c1">// return null
</span><span class="c1"></span>      <span class="k">return</span> <span class="nx">api</span>  <span class="c1">// 返回值是 api，而 api 里有很多方法，所以可以通过返回值继续调用.addClass 形成一个链条
</span><span class="c1"></span>    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">api</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="mainjs-1">main.js</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">(</span><span class="s2">&#34;.test&#34;</span><span class="p">)</span> <span class="c1">// 通过选择器获取到元素，但不返回该元素，返回 api 对象 (api对象里有很多方法)
</span><span class="c1">// console.log(api.addClass)
</span><span class="c1">// 遍历所有获取到的元素，添加 .red 类名
</span><span class="c1"></span><span class="nx">api</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&#34;red&#34;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>
<span class="c1">// api.addClass 返回值是 api，而 api 里有很多方法，所以可以通过返回值继续调用.addClass 形成一个链条
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h3 id="jquery-代码变型-1">jQuery 代码变型 1️⃣</h3>
<blockquote>
<p>下面的 return 的变化，必须理解</p>
</blockquote>
<h4 id="return-的骚操作--1">return 的骚操作  1️⃣</h4>
<blockquote>
<p>用 this 代替 api</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span>  <span class="c1">// 获取 selector 的全部元素（得到一个数组）
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> 
        <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
        
      <span class="p">}</span>
      <span class="c1">// return api
</span><span class="c1"></span>      <span class="k">return</span> <span class="k">this</span>  
      <span class="cm">/*
</span><span class="cm">      * 如果用一个对象来调用函数，那么这个函数中的this，就是前面的对象
</span><span class="cm">      * obj.fn(p1) 等价于 ↓
</span><span class="cm">      * obj.fn.call(obj, p1)   // 在fn中，this就是obj
</span><span class="cm">      * 调用时 api.addClass(&#34;red&#34;) =&gt; 同理，在 addClass 中 this 就是 api，二者等价
</span><span class="cm">      * 那 addClass 函数中，原本是 return api，就可以换成 return this
</span><span class="cm">      * 注：this 的值，与调用时前面写了什么有关，只在函数被调用时才能确定this指代什么
</span><span class="cm">      * */</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">api</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="return-的骚操作--2">return 的骚操作  2️⃣</h4>
<blockquote>
<p>完全去掉 jQuery 中的 <code>api</code></p>
<ul>
<li>既然先创建了 api 对象，然后返回 api 对象，那是不是可以直接返回对象，省略 api 的赋值环节 呢？</li>
<li>岂不是「多此一举」</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> 
  <span class="kr">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="p">{</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
        
      <span class="p">}</span>
      <span class="k">return</span> <span class="k">this</span> 
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">api</span>    <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span><span class="p">}</span>

<span class="c1">// 省略 api 的赋值环节 👇 
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span>  <span class="c1">// 获取 selector 的全部元素（得到一个数组）
</span><span class="c1"></span>  <span class="c1">// const api = {
</span><span class="c1"></span>  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
        
      <span class="p">}</span>
      <span class="k">return</span> <span class="k">this</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="c1">// return api 
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="jquery-的核心思想">jQuery 的核心思想</h3>
<blockquote>
<p>第一个核心点：闭包</p>
</blockquote>
<ol>
<li>jQuery 函数，接收一个 css 选择器</li>
<li>通过选择器，获取到这个元素 elements（但不会返回这个元素），它会返回一个对象</li>
<li>返回的对象中，包含很多函数。这些函数都可以操作这个元素 elements</li>
</ol>
<p>原理：</p>
<ul>
<li>用「闭包」去维持这个 elements
<ul>
<li>因为 addClass 函数在访问 elements。被访问的变量，是不会随便就被浏览器回收掉的</li>
<li>这就是 jQuery 的核心思想之一</li>
</ul>
</li>
</ul>
<blockquote>
<p>第二个核心点：链式操作</p>
</blockquote>
<ul>
<li>addClass 函数，肯定能猜到：用户在调用 addClass 时，肯定是通过<code> jQuery(选择器)</code> 得到的 api 来调用的</li>
<li>所以才会大胆的 return this。</li>
<li>addClass 函数，希望把 「点 . 」前面的东西，作为 addClass 的返回值  <code>api.addClass(&quot;red&quot;)</code></li>
<li>这样就相当于，api 从 addClass 函数前面，传递到了函数后面，这样就可以接着调用 addClass
<code>👇api.addClass(&quot;red&quot;)👇.addClass(&quot;blue&quot;)</code></li>
<li>这就是 「链式操作」</li>
</ul>
<p>​</p>
<h3 id="jquery-代码变型-2">jQuery 代码变型 2️⃣</h3>
<h4 id="mainjs-简化调用">main.js 简化调用</h4>
<blockquote>
<p>去掉变量 x</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">(</span><span class="s2">&#34;.test&#34;</span><span class="p">)</span>  <span class="c1">// 声明出来 x ，接着直接使用。那赋值操作，显得多此一举
</span><span class="c1"></span><span class="nx">x</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&#34;red&#34;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;blue&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>

<span class="c1">// 👇 最终写成 👇
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s2">&#34;.test&#34;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&#34;red&#34;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;blue&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="小总结">小总结</h3>
<ul>
<li>所谓高级的前端代码，就是把中间过程全部省掉了</li>
<li>把所有多次一举、无关紧要的东西，都尽量删掉。</li>
<li>最后只留下一个最少信息的、最精炼的代码。</li>
<li>虽然代码特别简洁、优雅，但对于学习者来说，就是看不懂。（说明「源码」真的不适合学习者）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="jquery-是构造函数吗">jQuery 是构造函数吗？</h2>
<blockquote>
<p>讲到这里可能会有这个疑问 👆</p>
</blockquote>
<blockquote>
<p>构造函数的特点：① 前面有 new      ② 构造出对象</p>
<ul>
<li>结合这两个特点，可以认为  jQuery 是构造函数，也可以认为不是构造函数</li>
</ul>
</blockquote>
<h3 id="是">是</h3>
<ul>
<li>因为 jQuery 函数确实构造出了一个对象</li>
</ul>
<h3 id="不是">不是</h3>
<ul>
<li>因为不需要写 new jQuery() 就能构造一个对象</li>
<li>以前讲的构造函数都要结合 new 才行</li>
</ul>
<h3 id="结论">结论</h3>
<ul>
<li>jQuery 是一个不需要加 new （就可以构造出对象）的构造函数</li>
<li>jQuery 不是常规意义（严格意义）上的构造函数</li>
<li>这是因为 jQuery 用了一些技巧（目前没必要讲，讲了新手就更迷惑了）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="术语">术语</h2>
<h3 id="口头约定-">口头约定 👄</h3>
<blockquote>
<p>[前面](# 特殊函数 jQuery)提到：jQuery 函数，返回一个对象，称为 **jQuery 构造出来的对象 ** <a href="" rel="">（ 也就是最初代码中的那个 api ）</a></p>
</blockquote>
<p>口头约定：</p>
<ul>
<li>以后说到 <strong>jQuery对象</strong> 就代指 <a href="" rel="">jQuery函数 构造出来的对象</a>   （为了省事，少说几个字）</li>
<li>不是说 「 jQuery 这个对象 」</li>
<li>一定要记清楚</li>
</ul>
<p>​</p>
<h3 id="其他举例">其他举例</h3>
<ul>
<li>Object 是个函数</li>
<li><strong>Object 对象</strong>，表示 Object 这个构造函数 构造出来的对象（不是 Object 本身是对象）</li>
<li>Array 是个函数</li>
<li><strong>Array 对象/数组对象</strong>，表示 Array 构造出来的对象（不是 Array 本身是对象）</li>
<li>Function 是个函数</li>
<li><strong>Function 对象 / 函数对象</strong>，表示 Function 构造出来的对象（不是 Function 本身是对象）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="更多功能的封装-">更多功能的封装 ⭕️</h2>
<blockquote>
<p>链式风格</p>
</blockquote>
<blockquote>
<p>📌📌📌📌📌📌📌📌更多代码实现、解析、注释，请查看<a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c7-JS%e7%bc%96%e7%a8%8b%e6%8e%a5%e5%8f%a3%5c3-jQuery%e4%b8%ad%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%9e%8b%ef%bc%88%e4%b8%8a%ef%bc%89" rel="">本地项目dom-2</a> 📌📌📌📌📌📌📌📌</p>
</blockquote>
<h3 id="查">查</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">)</span>                <span class="c1">// 返回值并不是元素，而是一个api对象 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.red&#39;</span><span class="p">)</span>   <span class="c1">// 查找#xxx里的.red元素 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">parent</span><span class="p">()</span>       <span class="c1">// 获取爸爸 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">children</span><span class="p">()</span>     <span class="c1">// 获取儿子 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">siblings</span><span class="p">()</span>     <span class="c1">// 获取兄弟 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">index</span><span class="p">()</span>        <span class="c1">// 获取排行老几（从0开始） 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">next</span><span class="p">()</span>         <span class="c1">// 获取弟弟 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#xxx&#39;</span><span class="p">).</span><span class="nx">prev</span><span class="p">()</span>         <span class="c1">// 获取哥哥 
</span><span class="c1"></span><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;.red&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span>       <span class="c1">// 遍历并对每个元素执行fn
</span></code></pre></td></tr></table>
</div>
</div><h4 id="代码">代码</h4>
<p><a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c7-JS%e7%bc%96%e7%a8%8b%e6%8e%a5%e5%8f%a3%5c3-jQuery%e4%b8%ad%e7%9a%84%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%9e%8b%ef%bc%88%e4%b8%8a%ef%bc%89" rel="">本地项目dom-2</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/*
</span><span class="cm">  * elements 永远表示选择器的目标元素的集合（伪数组）
</span><span class="cm">  * */</span>
  <span class="kd">let</span> <span class="nx">elements</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">selectorOrArray</span> <span class="o">===</span> <span class="s2">&#34;string&#34;</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 重载
</span><span class="c1"></span>    <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">selectorOrArray</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">elements</span> <span class="o">=</span> <span class="nx">selectorOrArray</span>
  <span class="p">}</span>
  <span class="c1">// 👇 返回 jQuery函数 构造的对象 api（this就是这个api、api可以操作elements）
</span><span class="c1"></span>  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="k">this</span>
    <span class="p">},</span>
    <span class="nx">find</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">array</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)))</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 重点理解这句 【代码分析，见本地项目dom-2的注释】
</span><span class="c1"></span>    <span class="p">},</span>
    <span class="nx">oldApi</span><span class="o">:</span> <span class="nx">selectorOrArray</span><span class="p">.</span><span class="nx">oldApi</span><span class="p">,</span>
    <span class="nx">end</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">oldApi</span>
    <span class="p">},</span>
    <span class="nx">each</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">elements</span><span class="p">)</span>  <span class="c1">// 遍历每项，对每一项都执行某个方法
</span><span class="c1"></span>      <span class="p">}</span>
      <span class="k">return</span> <span class="k">this</span>
    <span class="p">},</span>
    <span class="nx">print</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">elements</span><span class="p">)</span>
      <span class="k">return</span> <span class="k">this</span>
    <span class="p">},</span>
		<span class="nx">parent</span><span class="p">()</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">node</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 去重 
</span><span class="c1"></span>          <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span>
        <span class="p">}</span>
      <span class="p">})</span>
      <span class="nx">array</span><span class="p">.</span><span class="nx">oldApi</span> <span class="o">=</span> <span class="k">this</span>
      <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="nx">children</span><span class="p">()</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">node</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span> <span class="p">{</span> 
          <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(...</span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>        <span class="p">}</span>
      <span class="p">})</span>
      <span class="nx">array</span><span class="p">.</span><span class="nx">oldApi</span> <span class="o">=</span> <span class="k">this</span>
      <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="cm">/********************* 下面的课上未讲 *********************/</span>
    <span class="cm">/*
</span><span class="cm">    siblings()
</span><span class="cm">    index()
</span><span class="cm">    next()
</span><span class="cm">    prev()
</span><span class="cm">    */</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="练习">练习</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="cm">/*
</span><span class="cm">  &lt;div id=&#34;test&#34;&gt;
</span><span class="cm">    &lt;div class=&#34;child&#34;&gt;1&lt;/div&gt;
</span><span class="cm">    &lt;div class=&#34;child&#34;&gt;2&lt;/div&gt;
</span><span class="cm">    &lt;div class=&#34;child&#34;&gt;3&lt;/div&gt;
</span><span class="cm">  &lt;/div&gt;
</span><span class="cm">*/</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">){</span>
  <span class="kd">let</span> <span class="nx">elements</span>
  <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">selectorOrArray</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">){</span>
    <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">)</span>
  <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">selectorOrArray</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">){</span>
    <span class="nx">elements</span> <span class="o">=</span> <span class="nx">selectorOrArray</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">addClass</span><span class="p">(</span><span class="nx">className</span><span class="p">){</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">n</span><span class="p">=&gt;</span><span class="nx">n</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">))</span>
    <span class="p">},</span>
    <span class="nx">find</span><span class="p">(</span><span class="nx">selector</span><span class="p">){</span>
      <span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">n</span><span class="p">=&gt;{</span>
        <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(...</span><span class="nx">n</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">))</span>
      <span class="p">})</span>
      <span class="k">return</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="nx">each</span><span class="p">(</span><span class="nx">fn</span><span class="p">){</span>
      <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
        <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">elements</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">i</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#test&#39;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.child&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">)</span> <span class="c1">// 请确保这句话成功执行
</span></code></pre></td></tr></table>
</div>
</div><h3 id="增">增</h3>
<blockquote>
<p>只捋一捋思路，<a href="https://github.com/FrankFang/dom-2-prototype/blob/master/src/jquery.js" target="_blank" rel="noopener noreffer">最终代码</a></p>
</blockquote>
<h4 id="代码-1">代码</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 先简单回顾 dom 创建节点 👇（两种方式）
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  <span class="c1">// ①传入标签名
</span><span class="c1"></span><span class="nx">template</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span>  <span class="c1">// ②传入html结构，最后返回 template.content.firstChild
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">elements</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">selectorOrArrayOrTemplate</span> <span class="o">===</span> <span class="s2">&#34;string&#34;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s2">&#34;&lt;&#34;</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 创建 div
</span><span class="c1"></span>      <span class="nx">elements</span> <span class="o">=</span> <span class="p">[</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">)];</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">// 查找 div
</span><span class="c1"></span>      <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">selectorOrArrayOrTemplate</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">elements</span> <span class="o">=</span> <span class="nx">selectorOrArrayOrTemplate</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">createElement</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;template&#34;</span><span class="p">);</span>
    <span class="nx">container</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">string</span><span class="p">.</span><span class="nx">trim</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">container</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">;</span>
  <span class="p">}</span>
	
  <span class="c1">// 返回jQuery创建的api
</span><span class="c1"></span>  <span class="k">return</span><span class="p">{</span>
    <span class="nx">appendTo</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">node</span> <span class="k">instanceof</span> <span class="nx">Element</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">el</span> <span class="p">=&gt;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">el</span><span class="p">));</span>
      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">jquery</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">el</span> <span class="p">=&gt;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">el</span><span class="p">));</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="c1">// ...
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 创建 div，插入到 body 中
</span><span class="c1"></span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&lt;span&gt;1&lt;/span&gt;&lt;/div&gt;&#39;</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span> 
</code></pre></td></tr></table>
</div>
</div><h3 id="删">删</h3>
<blockquote>
<p>和dom实现逻辑一样</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$div</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span> 
<span class="nx">$div</span><span class="p">.</span><span class="nx">empty</span><span class="p">()</span>  
</code></pre></td></tr></table>
</div>
</div><h3 id="改">改</h3>
<blockquote>
<p>和dom实现逻辑一样</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">$div</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="o">?</span><span class="p">)</span> <span class="c1">// 读写文本内容  // 传了参数就是「写」，不传参数就是「读」
</span><span class="c1"></span><span class="nx">$div</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="o">?</span><span class="p">)</span> <span class="c1">// 读写HTML内容  // 传了参数就是「写」，不传参数就是「读」
</span><span class="c1"></span><span class="nx">$div</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="o">?</span><span class="err">）</span>  <span class="c1">// 读写属性 
</span><span class="c1"></span><span class="nx">$div</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span><span class="p">})</span>  <span class="c1">// 读写style // 注意方法名是css
</span><span class="c1"></span><span class="nx">$div</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span> 
<span class="nx">$div</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> 
<span class="nx">$div</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="err">·</span>  
</code></pre></td></tr></table>
</div>
</div><h4 id="注意">注意</h4>
<ul>
<li>$div 大部分时候，对应了多个 div 元素</li>
<li>一定要默认  $div 是一个数组，然后遍历它 （每个操作都要遍历）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="window--windowjquery">window.$ = window.jQuery</h2>
<blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;#test&#39;</span><span class="p">)</span> <span class="c1">// 每次使用都要这么写，很麻烦
</span></code></pre></td></tr></table>
</div>
</div><p>什么？你嫌  jQuery  太长</p>
<ul>
<li>你是对的</li>
<li>jQuery 这个单词，确实不好拼写（还要大小写区分）</li>
<li>怎么让 jQuery 变得更短呢？</li>
<li>还记得 bash alias 吗，添加一个别名即可</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 一定在代码最后添加
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">){...}</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>之后在任何地方使用 $ 就相当于使用 jQuery</li>
<li>还可以再省事 👇</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selectorOrArray</span><span class="p">){...}</span>   
<span class="c1">// 写在一行上，顺序是从右向左执行
</span><span class="c1">// 先执行 window.jQuery = function(){}
</span><span class="c1">// 然后再把 window.jQuery 的结果，赋值给 window.$
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>这就是很多高级程序员会使用的写法</li>
</ul>]]></description>
</item><item>
    <title>手写 DOM 库</title>
    <link>http://samrks.github.io/dom-dom-handwritten/</link>
    <pubDate>Thu, 22 Oct 2020 15:49:13 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/dom-dom-handwritten/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="前言">前言</h2>
<p><a href="https://github.com/samrks/dom-1" target="_blank" rel="noopener noreffer">本节代码地址</a></p>
<p>​</p>
<p>​</p>
<h2 id="什么叫封装">什么叫封装</h2>
<blockquote>
<p>可以理解成「把一些复杂的东西，打包成盒」，通过简单的命令就可使用</p>
</blockquote>
<h3 id="举例">举例</h3>
<ul>
<li>电脑笔记本就是 CPU、内存、硬盘、主板、显卡 的封装</li>
<li>用户只需要接触显示器、键盘、鼠标、触控板等设备</li>
<li>即可操作复杂的计算机</li>
</ul>
<h3 id="接口">接口</h3>
<ul>
<li>
<p>被封装的东西需要暴露一些功能给外部</p>
</li>
<li>
<p>这些功能就是<strong>接口</strong>，如 USB 接口、HDMI 接口</p>
<ul>
<li>接口都是需要有规范的文档来说明的</li>
<li>全世界厂商都可以根据 USB 接口文档，来生产具有 USB 接口的硬件</li>
<li>深圳华强北就是根据各种文档，很快的复制生产出苹果数据线 … （功能差不多、价格更便宜）</li>
<li>这就是接口的好处，只要知道它的功能和实现细节，所有厂商都能做</li>
</ul>
</li>
<li>
<p>设备只要支持这些接口，即可与被封装的东西通讯</p>
<ul>
<li>比如在键盘上打字，计算机就能接收到我们敲了哪个键</li>
</ul>
</li>
<li>
<p>比如键盘、鼠标支持 USB 接口</p>
</li>
<li>
<p>显示器支持 HDMI 接口</p>
<ul>
<li>全世界所有显示器厂商的产品，都可以连接到任何一台电脑，就是因为有<strong>接口的统一标准</strong>存在</li>
<li>旧的有：VGA 接口（体积大、传输慢）</li>
<li>最新的有：雷电接口、HDMI 接口 （都有新的标准）</li>
</ul>
</li>
</ul>
<p>（示意图）</p>
<p></p>
<p></p>
<p>本节的实现的《我的库》里面就封装了 DOM 的各种奇葩操作</p>
<ul>
<li>document.getElementById   单词太长，封装后就叫 get 或者 find</li>
<li>封装成一个 create 就可以实现创建元素，不需要写 document.createElement … 这么复杂的单词</li>
<li>封装出来的  get、find、create  这些函数，就是接口</li>
<li>所有的页面中，都可以调用这些接口</li>
</ul>
<h2 id="术语">术语</h2>
<h3 id="库">库</h3>
<ul>
<li>我们把提供给其他人用的工具代码，叫做「库」
<ul>
<li>就是把一些好用的函数统一放到一个地方，这个地方就是「库」</li>
</ul>
</li>
<li>比如 jQuery、Underscore 它们就是库（提供了很多函数，供用户调用）</li>
</ul>
<h3 id="api">API</h3>
<ul>
<li>「库」暴露出来的函数或属性（功能）叫做 API（应用编程接口）</li>
<li>API： Application Programming Interface</li>
</ul>
<h3 id="框架">框架</h3>
<ul>
<li>当你的库变得很大，并且<strong>需要学习才能看懂</strong></li>
<li>那么这个库就叫「框架」，比如 Vue / React</li>
</ul>
<h3 id="注意">注意</h3>
<ul>
<li>
<p>编程界的术语大部分都很随便，没有固定的解释</p>
<ul>
<li>可能程序员写了套东西，涵盖很多内容，作者本人也搞不清楚应该怎么定性，就随意的称为「库」</li>
<li>如果遇到有人反驳，那就慢慢讨论、定性</li>
</ul>
</li>
<li>
<p>所以意会即可</p>
<ul>
<li>我们就把「小的功能」叫库，「大的功能」叫框架</li>
</ul>
<p>​</p>
</li>
</ul>
<h2 id="封装技术">封装技术</h2>
<blockquote>
<p>下面我们开始学习封装技术</p>
</blockquote>
<blockquote>
<p>会用两种不同的风格，封装 DOM 操作</p>
<ol>
<li>对象风格（命名空间风格）</li>
<li>链式风格（ jQuery 风格）</li>
</ol>
</blockquote>
<p>​</p>
<p>​</p>
<h2 id="dom-库的初始化-">DOM 库的初始化 ⭕️</h2>
<blockquote>
<p>创建 dom-1 项目目录  &gt;  src 目录  &gt;   index.html、main.js、dom.js</p>
</blockquote>
<h3 id="indexhtml">index.html</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
  示例
  <span class="c">&lt;!-- 注意：要先引入 dom.js；
</span><span class="c">       否则 main 中先引用了dom.js的 API 就会报错：dom is not defined --&gt;</span>
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;dom.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;main.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="domjs">dom.js</h3>
<blockquote>
<p>dom 库（对象） 和 封装的函数（create），有两种呈现关系的形式</p>
</blockquote>
<p>1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">dom</span> <span class="o">=</span> <span class="p">{}</span>
<span class="nx">dom</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{}</span>   <span class="c1">// window.dom.create 省略前缀 window
</span></code></pre></td></tr></table>
</div>
</div><p>2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">dom</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">create</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{}</span>
<span class="p">}</span>
<span class="c1">//  👆可进一步简化：省略 function   // ES6
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">dom</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">create</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="举例封装-create-代码">举例：封装 create 代码</h3>
<blockquote>
<p>更多代码，请直接查看<a href="https://github.com/samrks/dom-1" target="_blank" rel="noopener noreffer">地址</a></p>
</blockquote>
<blockquote>
<p>create  创建节点</p>
</blockquote>
<h4 id="写法-1">写法 1</h4>
<ul>
<li>调用时填入要创建的标签名</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">dom</span> <span class="o">=</span> <span class="p">{}</span>
<span class="nx">dom</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">tagName</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">tagName</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="写法-2">写法 2</h4>
<h5 id="初版有-bug">初版有 bug</h5>
<ul>
<li>调用时直接填入标签结构</li>
<li>但填入 td / tr / tbody … 这种表格内的标签，就会返回 undefined。</li>
<li>这些标签不能直接放入 div 中，通常需要外层有 table 标签包裹才行</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">html</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// const container = document.createElement(&#39;div&#39;)  
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;template&#39;</span><span class="p">)</span>
  <span class="c1">// 如果容器是 div ，不能容纳 td ... 等
</span><span class="c1"></span>  <span class="c1">// 使用 &lt;template&gt;&lt;/template&gt; 作为容器，可以容纳任意元素。
</span><span class="c1"></span>  <span class="nx">container</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">html</span>
  <span class="k">return</span> <span class="nx">container</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="正确代码">正确代码</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">html</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;template&#34;</span><span class="p">)</span>
  <span class="nx">container</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">html</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span>
  <span class="c1">// trim 去掉字符串的两端空格
</span><span class="c1"></span>  <span class="c1">// 因为使用firstChild获取元素，如果传入的html前面有空格，就会只获取到空格(文本元素)，而不是标签元素。
</span><span class="c1"></span>  <span class="c1">// 所以必须提前trim()一下
</span><span class="c1"></span>  <span class="k">return</span> <span class="nx">container</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">firstChild</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="mainjs">main.js</h3>
<h4 id="写法-1-的调用">写法 1 的调用</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">dom</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="s2">&#34;div&#34;</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>   <span class="c1">// (标签) &lt;div&gt;&lt;/div&gt;
</span></code></pre></td></tr></table>
</div>
</div><h4 id="写法-2-的调用">写法 2 的调用</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">dom</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="s2">&#34;&lt;div&gt;&lt;span&gt;123&lt;/span&gt;&lt;/div&gt;&#34;</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>   <span class="c1">// (标签) &lt;div&gt;&lt;span&gt;123&lt;/span&gt;&lt;/div&gt;
</span></code></pre></td></tr></table>
</div>
</div><h2 id="对象风格">对象风格</h2>
<h3 id="也叫-命名空间风格">也叫 命名空间风格</h3>
<ul>
<li>window.dom 是我们提供的全局对象</li>
</ul>
<blockquote>
<p>下面从增删改查 4 个方面，来说明 window.dom 是干什么的（代码量很大哦）、</p>
</blockquote>
<blockquote>
<p><a href="https://github.com/samrks/dom-1" target="_blank" rel="noopener noreffer">本节代码地址</a></p>
</blockquote>
<h3 id="增">增</h3>
<blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/after" target="_blank" rel="noopener noreffer">after()</a>：2020刚出的</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/insertBefore" target="_blank" rel="noopener noreffer">insertBefore</a> 语法：<code>父节点.insertBefore(要插入的子节点，插入到哪个子节点的前面)</code></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">create</span><span class="err">（</span><span class="s1">&#39;&lt;div&gt;hi&lt;/div&gt;&#39;</span><span class="p">)</span>   <span class="c1">// 用于创建节点
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">after</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span><span class="nx">node2</span><span class="p">)</span>          <span class="c1">// 用于新增弟弟
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">before</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span><span class="nx">node2</span><span class="p">)</span>         <span class="c1">// 用于新增哥哥
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">parent</span><span class="p">,</span><span class="nx">child</span><span class="p">)</span>       <span class="c1">// 用于新增儿子
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">wrap</span><span class="p">(</span><span class="sb">`&lt;div&gt;&lt;/div&gt;`</span><span class="p">)</span>        <span class="c1">// 用于新增爸爸
</span></code></pre></td></tr></table>
</div>
</div><p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">dom</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="nx">create</span><span class="p">(</span><span class="nx">string</span><span class="p">){</span> <span class="c1">// 创建节点
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;template&#34;</span><span class="p">)</span>
    <span class="nx">container</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">string</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span>
    <span class="k">return</span> <span class="nx">container</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">firstChild</span>
  <span class="p">},</span>
  <span class="nx">after</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">node2</span><span class="p">){</span> <span class="c1">// 新增兄弟节点
</span><span class="c1"></span>    <span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">node2</span><span class="p">,</span> <span class="nx">node</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">)</span>
  <span class="p">},</span> 
  <span class="nx">before</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">node2</span><span class="p">){</span> <span class="c1">// 新增兄弟节点
</span><span class="c1"></span>    <span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">node2</span><span class="p">,</span> <span class="nx">node</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">append</span><span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="nx">node</span><span class="p">){</span> <span class="c1">// 新增子节点
</span><span class="c1"></span>    <span class="nx">parent</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
  <span class="p">},</span> 
  <span class="nx">wrap</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">parent</span><span class="p">){</span> <span class="c1">// 新增父节点
</span><span class="c1"></span>    <span class="nx">dom</span><span class="p">.</span><span class="nx">before</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">parent</span><span class="p">)</span> 
    <span class="nx">dom</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="nx">node</span><span class="p">)</span> 
  <span class="p">}</span> 
<span class="p">}</span><span class="err">；</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="删">删</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span><span class="nx">用于删除节点</span> 
<span class="nx">dom</span><span class="p">.</span><span class="nx">empty</span><span class="p">(</span><span class="nx">parent</span><span class="p">)</span><span class="nx">用于删除后代</span>
</code></pre></td></tr></table>
</div>
</div><p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">dom</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">remove</span><span class="p">(</span><span class="nx">node</span><span class="p">){</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">node</span>
  <span class="p">},</span>
  <span class="nx">empty</span><span class="p">(</span><span class="nx">node</span><span class="p">){</span>
    <span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">firstChild</span>   
    <span class="c1">// 这块是讲数据结构时最常用的思路，类似用循环实现的递归（不停找下一个，直到全删完了）
</span><span class="c1"></span>    <span class="k">while</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">dom</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">x</span><span class="p">))</span>
      <span class="nx">x</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">firstChild</span> 
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">array</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="改">改</h3>
<blockquote>
<p>用到了【重载】和【适配】</p>
<ul>
<li>重载：传不同个数的参数，执行不同的代码</li>
<li>适配：做很多判断（js 数据类型），什么情况下执行这句、什么情况下执行那句</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="o">?</span><span class="p">)</span>        <span class="c1">// 用于读写属性 
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="o">?</span><span class="p">)</span>                 <span class="c1">// 用于读写文本内容 
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="o">?</span><span class="p">)</span>                 <span class="c1">// 用于读写HTML内容 
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="p">{</span><span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span><span class="p">})</span>   <span class="c1">// 用于修改 
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="kr">class</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">)</span>       <span class="c1">// 用于添加 
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="kr">class</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">)</span>    <span class="c1">// 用于删除
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>         <span class="c1">// 用于添加事件监听 
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>        <span class="c1">// 用于删除事件监听
</span></code></pre></td></tr></table>
</div>
</div><p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">attr</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">text</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span> 
  <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span> 
    <span class="k">if</span> <span class="p">(</span><span class="s2">&#34;innerText&#34;</span> <span class="k">in</span> <span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">node</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">string</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">node</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">string</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="s2">&#34;innerText&#34;</span> <span class="k">in</span> <span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">innerText</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">textContent</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">html</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">string</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> 
    <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">innerHTML</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">style</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 3种调用形式
</span><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">name</span> <span class="o">===</span> <span class="s2">&#34;string&#34;</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">name</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">)</span> <span class="p">{</span> 
      <span class="kr">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="nx">name</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">object</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">node</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">object</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="kr">class</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">add</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">remove</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">has</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">className</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">on</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">node</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">off</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">node</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="查">查</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;选择器&#39;</span><span class="p">)</span>    <span class="c1">// 用于获取标签或标签们
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">parent</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>     <span class="c1">// 用于获取父元素
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>   <span class="c1">// 用于获取子元素
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">siblings</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>   <span class="c1">// 用于获取兄弟姐妹元素
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>       <span class="c1">// 用于获取弟弟
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">previous</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>   <span class="c1">// 用于获取哥哥
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">nodes</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>  <span class="c1">// 用于遍历所有节点
</span><span class="c1"></span><span class="nx">dom</span><span class="p">.</span><span class="nx">index</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>      <span class="c1">// 用于获取排行老几
</span></code></pre></td></tr></table>
</div>
</div><p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">dom</span><span class="p">.</span><span class="nx">find</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">selector</span><span class="p">,</span> <span class="nx">scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span><span class="nx">scope</span> <span class="o">||</span> <span class="nb">document</span><span class="p">).</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> 
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">parent</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">children</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">children</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">siblings</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">children</span><span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="nx">n</span> <span class="p">=&gt;</span> <span class="nx">n</span> <span class="o">!==</span> <span class="nx">node</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">nextSibling</span>
  <span class="k">while</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&amp;&amp;</span> <span class="nx">x</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span> 
    <span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">nextSibling</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">x</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">previous</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">previousSibling</span>
  <span class="k">while</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&amp;&amp;</span> <span class="nx">x</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">previousSibling</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">x</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">each</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">nodeList</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">nodeList</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">nodeList</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">dom</span><span class="p">.</span><span class="nx">index</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">children</span>
  <span class="kd">let</span> <span class="nx">i</span>
  <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">break</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">i</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="总结1">总结1</h2>
<ul>
<li>上面代码，除了「创建节点，用了 template」，其他方法基本都是使用 DOM 的原生 API 来实现</li>
<li>不管是多么高深的库，最后都是用 if-else、for循环、while循环 就搞定了
<ul>
<li>不论什么语言，实现逻辑只需要三种表达形式：顺序执行、if/else、循环</li>
</ul>
</li>
</ul>
<p>​</p>
<h2 id="总结2">总结2</h2>
<ul>
<li>最好的学习方法，就是去看作者的思路，照着他的思路实现一下。比如，vue的作者，就把所有思路写在 vue 文档里，就去看文档就好了。</li>
</ul>
<p>​</p>
<blockquote>
<p>这是许多程序员多年摸索出来的经典代码。
你只需要站在巨人的肩膀上，继续向上探索</p>
</blockquote>
<p>​</p>]]></description>
</item><item>
    <title>DOM 编程 </title>
    <link>http://samrks.github.io/dom-dom-manipulate/</link>
    <pubDate>Wed, 21 Oct 2020 00:41:12 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/dom-dom-manipulate/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="前言">前言</h2>
<blockquote>
<p>本节是 DOM 最基础的部分</p>
</blockquote>
<p>​</p>
<h2 id="前置知识">前置知识</h2>
<blockquote>
<p>需要什么知识</p>
</blockquote>
<ul>
<li>理解简单的 JS 语法，如 变量、if else、循环</li>
<li>会背 JS 的七种数据类型（四基两空一对象、bigInt）</li>
<li>会背 JS 的五个 falsy 值 （0，NaN，null，undefined，空字符串）</li>
<li>知道函数是对象，数组也是对象</li>
<li>会用 div 和 span 标签</li>
<li>会简单的 CSS 布局（flex）</li>
</ul>
<p>​</p>
<h2 id="网页其实是一棵树">网页其实是一棵树</h2>
<blockquote>
<p>第一个知识点</p>
</blockquote>
<p></p>
<p>画成「树」</p>
<p></p>
<h3 id="js-如何操作这棵树">JS 如何操作这棵树</h3>
<ul>
<li>JS 只能操作 JS，是操作不了网页的</li>
<li>**浏览器提供了功能，往 window 上添加了一个 document **</li>
<li>只要有 document 这个对象， JS 就可以操作这棵树了</li>
</ul>
<p>示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">用chrome打开任意网站</span>
<span class="nx">在控制台键入</span><span class="err">：</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span>  <span class="nx">得到一个</span> <span class="err">#</span><span class="nb">document</span> 
<span class="nx">鼠标放在</span> <span class="sb">`#document`</span> <span class="nx">上会发现整个网页被选中了</span><span class="err">，</span><span class="nx">说明document包含整个网页</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>通过 window.document 得到网页的根节点</p>
<ul>
<li>根节点下有 head 、 body …</li>
</ul>
</blockquote>
<p></p>
<p>​</p>
<h3 id="js-用-document-操作网页">JS 用 document 操作网页</h3>
<blockquote>
<p>这就是 Document Object Model 文档对象模型</p>
</blockquote>
<ul>
<li>「用一个 document 对象来操作整个网页」这种思想(模型)，全称叫做 「Document Object Model」</li>
<li>简称 DOM</li>
</ul>
<h3 id="dom-很难用">DOM 很难用</h3>
<blockquote>
<p>请记住这个事实</p>
</blockquote>
<ul>
<li>之前讲过「JS 的原创之处并不优秀，优秀之处并非原创」</li>
<li>DOM 可能比 JS 还要难用</li>
<li>难用到「都没人愿意使用 DOM」</li>
</ul>
<blockquote>
<p>下面会想办法，解决这个难题</p>
</blockquote>
<p>​</p>
<h3 id="如果你觉得-dom-很智障">如果你觉得 DOM 很智障</h3>
<blockquote>
<p>不要怀疑自己，你觉得的是对的</p>
</blockquote>
<ul>
<li>DOM 的接口设计的非常反人类</li>
<li>导致前端人员，不得不使用 jQuery 来操作 DOM</li>
<li>后来 jQuery 又被 Vue 代替了，于是大多数人就用 Vue 来操作 DOM</li>
<li>后来又有 React 了，就用 React 来操作 DOM</li>
<li>从来不会用 DOM 自带的功能来操作 DOM，自带的功能实在是非常反人类</li>
</ul>
<p>​</p>
<p> <a href="https://javascript.info/dom-navigation" target="_blank" rel="noopener noreffer">图片来自</a></p>
<p>​</p>
<p>​</p>
<h2 id="获取元素的-api">获取元素的 API</h2>
<blockquote>
<p>获取元素，也叫标签</p>
</blockquote>
<blockquote>
<p>什么是 API —— 没有准确定义，听多了你自然就知道什么是 API 了</p>
</blockquote>
<h3 id="有很多-api">有很多 API</h3>
<h4 id="通过-id">通过 id</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">id名</span>
<span class="nx">id名</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;id名&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>举例 👇</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">input</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;kw&#34;</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">kw</span>                     <span class="c1">// &lt;input id=&#34;kw&#34;&gt;   （直接获取到这个标签）
</span><span class="c1"></span><span class="nx">kw</span>                            <span class="c1">// &lt;input id=&#34;kw&#34;&gt;
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;kw&#39;</span><span class="p">)</span> <span class="c1">// &lt;input id=&#34;kw&#34;&gt;   （已经有上面两个特别简单的写法，谁还用这个）
</span></code></pre></td></tr></table>
</div>
</div><p>特例 👇</p>
<blockquote>
<p>当 id 名为 JS 关键字/属性时，就不能通过前面两个简单的写法来获取到元素</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 如下图所示
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">parent</span>                      <span class="c1">// parent 在这里是【获取 window 的上一层窗口】的意思
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;parent&#39;</span><span class="p">)</span>  <span class="c1">// 此时，只能通过此写法
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>所以，只要 id 不与全局属性冲突，就可以最简单的直接用这个 id
如果不小心冲突了，就只能退而求其次，用这个很长的 API</p>
</blockquote>
<p>​</p>
<h4 id="通过-标签名">通过 标签名</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="cm">/*
</span><span class="cm"> *  找到所有标签名为 div 的元素。
</span><span class="cm"> *  拿到的是一个数组（伪数组）
</span><span class="cm"> *  要获取到具体某一个 div，需要用下标（也可以遍历）
</span><span class="cm">*/</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>   
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="通过-class-获取元素">通过 class 获取元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="cm">/*
</span><span class="cm"> *  找到所有 class 为 red 的元素。
</span><span class="cm"> *  拿到的是一个数组（伪数组）
</span><span class="cm"> *  要获取到具体某一个 red 元素，需要用下标（也可以遍历）
</span><span class="cm">*/</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="最新的-api-query">最新的 API ：query</h4>
<blockquote>
<p>虽然是 query 开头，但并不是 jQuery 提供的 API，而是 JS 原生的
<a href="https://www.imooc.com/article/13027" target="_blank" rel="noopener noreffer">querySelector 和 getElement(s)ByXxx 方法的区别</a></p>
</blockquote>
<blockquote>
<p>querySelector()，接收一个CSS选择符，返回与该模式匹配的第一个元素
querySelectorAll()，用于选择匹配到的所有元素</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#id名&#39;</span><span class="p">)</span>    <span class="c1">// 借用了css语法，css怎么找到这个标签，括号中就怎么写
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;.red&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="用哪一个-">用哪一个 ⭕️</h3>
<ul>
<li>工作中用最新的， querySelector 和 querySelectorAll</li>
<li>做 demo 直接用 idxxx，千万别让人发现</li>
<li>要兼容 IE 的可怜虫才用 getElement(s)ByXxx</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="获取特定元素的-api">获取特定元素的 API</h3>
<h4 id="获取-html-元素">获取 html 元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="获取-head-元素">获取 head 元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">head</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="获取-body-元素">获取 body 元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">body</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="获取窗口窗口不是元素">获取窗口（窗口不是元素）</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="获取所有元素">获取所有元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">all</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>这个 document.all 是个奇葩，第 6 个falsy值</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="获取到的元素是个啥">获取到的元素是个啥</h2>
<blockquote>
<p>显然是一个对象，我们需要搞清它的<strong>原型</strong></p>
</blockquote>
<h3 id="抓一只-div-对象来看看">抓一只 div 对象来看看</h3>
<p>（图示见[下一P](# div 完整原型链)）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-JS" data-lang="JS"><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>   <span class="c1">// www.baidu.com
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>  
<span class="c1">// 用 dir 可以打印出结构。 （ 如下图，会有很多属性，都是构造函数添加的 ）
</span><span class="c1">// 重点关注【原型链】 
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>注意：这里写的 HTMLDivElment 不是真正的原型</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">HTMLDivElment</span>            <span class="c1">// false
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">HTMLDivElment</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// true   
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// JS 经典公式
</span><span class="c1"></span><span class="nx">对象</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">其构造函数</span><span class="p">.</span><span class="nx">prototype</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>console.dir(div)  开始查看原型链</p>
</blockquote>
<ol>
<li>
<p>点开最外层 <code>div#wrapper.wrapper_new</code>，最先看到的是这个 <strong>div 自身的属性</strong></p>
</li>
<li>
<p>第一层原型 <strong>HTMLDivElement</strong>.prototype</p>
<ul>
<li>点开，这里面也是有很多属性，是<strong>所有 div 共有的属性</strong>，不用细看</li>
</ul>
</li>
<li>
<p>第二层原型 <strong>HTMLElement</strong>.prototype</p>
<ul>
<li>这里面是<strong>所有 HTML 标签共有的属性</strong>，不用细看</li>
</ul>
</li>
<li>
<p>第三层原型 <strong>Element</strong>.prototype</p>
<ul>
<li>这里面是<strong>所有 XML、HTML 标签的共有属性</strong>，你不会以为浏览器只能展示 HTML 吧</li>
<li>AJAX 的 X 指的就是 XML。在没有发明 json 之前，全部处理的都是 XML（XML 里也有标签）</li>
<li>具体这里包含 XML、HTML、SVG、… 各种不同标签都共有的属性，所以叫 Element</li>
<li>在 Element 各种元素之上，我们还有👇节点node的属性</li>
</ul>
</li>
<li>
<p>第四层原型 <strong>Node</strong>.prototype</p>
<ul>
<li>这里面是<strong>所有节点共有的属性</strong>，节点包括 XML 标签文本注释、HTML 标签文本注释等等</li>
</ul>
</li>
<li>
<p>第五层原型 <strong>EventTarget</strong>.prototype</p>
<ul>
<li>只有 3 个共有属性：addEventListener、dispatchEvent、removeEventListener</li>
</ul>
<ul>
<li>最重要的函数属性是 <strong>addEventListener</strong></li>
</ul>
</li>
<li>
<p>最后一层原型就是 <strong>Object</strong>.prototype（根对象）了</p>
<ul>
<li>再往上就是 null 了</li>
</ul>
</li>
</ol>
<blockquote>
<p>综上，div 是个非常复杂的对象</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="div-完整原型链">div 完整原型链</h3>
<blockquote>
<p>自身属性和共有属性，<a href="https://i.loli.net/2020/10/21/bwt5rm24PC8IXa6.png" target="_blank" rel="noopener noreffer">点击查看</a></p>
<p><a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c7-JS%e7%bc%96%e7%a8%8b%e6%8e%a5%e5%8f%a3%5c1-DOM%e7%bc%96%e7%a8%8b%5cdiv%e5%ae%8c%e6%95%b4%e5%8e%9f%e5%9e%8b%e9%93%be.png" rel="">本地查看</a></p>
</blockquote>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;.red&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>由于 div 是由 HTMLDivElement 构造的</li>
<li>HTMLDivElement 构造函数往 this 上添加了一些属性 （this 指代 div）</li>
<li>div 也继承了 Element，所以 Element 也往 this 上添加了一些属性</li>
<li>还继承了 node 构造函数，添加了一些属性</li>
<li>综上，每一层构造函数，都会往 div 身上添加了属性</li>
</ul>
<p>​</p>
<blockquote>
<p>例 👇</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">requestFullScreen</span><span class="p">()</span>   <span class="c1">// 请求全屏（是所有Element的共有属性）
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">head</span><span class="p">.</span><span class="nx">requestFullScreen</span><span class="p">()</span> <span class="c1">// head元素全屏显示  // 这个 API 兼容性一般不是很好，通常不会使用
</span><span class="c1">// 每一个元素都可以要求自己跟屏幕一样大
</span><span class="c1">// head 能调用到这个 API , 就是因为顺着【原型链】继承而来
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="总结">总结</h3>
<ul>
<li>这样我们就可以清楚的知道，获取到的 div  是个啥了</li>
<li>就是个对象，且有 6 层原型</li>
</ul>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="节点类型-nodetype">节点类型 nodeType</h2>
<p>节点？元素？傻傻分不清</p>
<blockquote>
<p>一个网页里面，节点包括很多种。最常见的就是元素、也叫标签</p>
</blockquote>
<blockquote>
<p>节点 Node 包括以下几种</p>
</blockquote>
<ul>
<li>1   表示元素 Element，也叫标签 Tag  （最常见）</li>
<li>3   表示文本 Text</li>
<li>8   表示注释 Comment</li>
<li>9   表示文档 Document</li>
<li>11  表示文档片段 DocumentFragment</li>
</ul>
<p>（记住 1 和 3 即可）</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType" target="_blank" rel="noopener noreffer">MDN</a> 有完整描述，通过 **x.nodeType ** 得到一个数字</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 在任何一个元素上通过 .nodeType 就可以获取到这个元素的类型
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">nodeType</span>  <span class="c1">// 1  表示标签
</span></code></pre></td></tr></table>
</div>
</div><p>示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// www.baidu.com
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
<span class="nx">div</span><span class="p">.</span><span class="nx">nodeType</span>  <span class="c1">// 1
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">childNodes</span>  <span class="c1">// 查看div的所有子节点  // 得到 Nodelist(5) 伪数组。 0: text 第一个子节点就是文本
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">firstChild</span>  <span class="c1">// #text  获取到文本节点
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">.</span><span class="nx">textContext</span>  <span class="c1">// 获取文本里面的内容  &#34;  &#34;  是个空格
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">.</span><span class="nx">nodeType</span>  <span class="c1">// 3  获取到div的第一个子节点的节点类型就是 3 文本
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="节点的增删改查">节点的增删改查</h2>
<blockquote>
<p>程序员的宿命就是增删改查</p>
<ul>
<li>后端，对【数据库】进行增删改查</li>
<li>前端，对【页面元素】进行增删改查</li>
</ul>
</blockquote>
<h2 id="增">增</h2>
<h3 id="创建一个标签节点">创建一个标签节点</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  <span class="c1">// “DOM反人类”再次得到验证：创建一个元素居然写这么长的单词
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;style&#39;</span><span class="p">)</span> 
<span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">)</span> 
<span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">)</span>
<span class="c1">// &lt;div&gt;&lt;/div&gt; 、 &lt;style&gt;&lt;/style&gt; 、 &lt;script&gt;&lt;/script&gt; 、 &lt;li&gt;&lt;/li&gt;
</span></code></pre></td></tr></table>
</div>
</div><h3 id="创建一个文本节点">创建一个文本节点</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">text1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="s1">&#39;你好&#39;</span><span class="err">）</span> 
<span class="c1">// 为什么不能直接写成 text1=&#39;你好&#39;
</span><span class="c1">// 因为 &#39;你好&#39; 是一个字符串；而文本节点是一个【对象】（包含很多原型、函数什么的）
</span></code></pre></td></tr></table>
</div>
</div><h3 id="标签里面插入文本">标签里面插入文本</h3>
<blockquote>
<p>两种形式、3 种写法</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">text1</span><span class="p">)</span> 
<span class="nx">div1</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="s1">&#39;你好&#39;</span>   <span class="nx">或者</span>   <span class="nx">div1</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;你好&#39;</span>
<span class="c1">// 但是不能用 div1.appendChild(&#39;你好&#39;）
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/appendChild" target="_blank" rel="noopener noreffer">appendChild</a> 是 Node 构造函数 添加的</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/textContent" target="_blank" rel="noopener noreffer">textContent</a>  也是 Node 构造函数 添加的</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/innerText" target="_blank" rel="noopener noreffer">innerText</a> 是 HTMLElement 构造函数 添加的</li>
</ul>
<blockquote>
<ul>
<li>
<p>喜欢        Node        就用         Node        提供的接口
喜欢 HTMLElement 就用 HTMLElement 提供的接口</p>
</li>
<li>
<p><strong>但是不能混着用</strong>
示例如下图，会报错：appendChild 只能接收一个 node 节点</p>
</li>
</ul>
</blockquote>
<p></p>
<h3 id="综上">综上</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>你好<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 通过 DOM 创建上面这个html标签 👆
</span><span class="c1">// 需要下面 3 行代码，才能实现
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">div1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>
<span class="kd">let</span> <span class="nx">text1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="s1">&#39;你好&#39;</span><span class="err">）</span>
<span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">text1</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>此时的 div1 并不会显示在页面中，只是在 JS 内存中存活
只有插入页面中，这个 div1 才能生效（显示）</p>
</blockquote>
<p>​</p>
<h3 id="插入页面中">插入页面中</h3>
<ul>
<li>创建的标签，默认处于 JS 线程中
<ul>
<li>不会显示在页面中，只是在 JS 内存中存活</li>
</ul>
</li>
<li>你必须把它插到 head 或者 body 里面，它才会生效、显示在页面中
<ul>
<li>创建的是 style 或 link 元素 …  就需要传入到 head 里才能生效</li>
</ul>
</li>
<li>appendChild 会把元素插入到目标容器的<strong>末尾</strong></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span> 
<span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>
<span class="c1">// 或者
</span><span class="c1"></span><span class="nx">已在页面中的元素</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  <span class="c1">// 创建div元素
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">text1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="s1">&#39;你好&#39;</span><span class="err">）</span><span class="c1">// 创建文本节点
</span><span class="c1"></span><span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">text1</span><span class="p">)</span>  <span class="c1">// 通过appendChild把文本节点添加到div元素中。此时div仍在内存中，不在页面显示
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span> <span class="c1">// &lt;body&gt;&lt;div&gt;你好&lt;/div&gt;&lt;/body&gt;  此时 div 显示在页面中
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="appendchild-疑问">appendChild 疑问</h3>
<h4 id="一个元素只能插入一处">一个元素，只能插入一处</h4>
<blockquote>
<p>页面中有 div#test1 和 div#test2</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span> 
<span class="nx">test1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span> 
<span class="nx">test2</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>  
<span class="c1">// 创建一个 div 元素，先后插入到另外两个div中
</span><span class="c1">// 请问新创建的这一个 div 元素，最终会出现在哪里？
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>请问最终 div 出现在哪里？</p>
<ul>
<li>
<p>选项1、test1 里面</p>
</li>
<li>
<p>选项2、test2 里面</p>
</li>
<li>
<p>选项3、test1 里面 和 test2 里面</p>
</li>
</ul>
</li>
<li>
<p>答案：（鼠标选中显示答案）👉 <font color="white">最终 div 出现在 test2 里面</font></p>
<blockquote>
<p>因为<strong>一个元素不能出现在两个地方，除非复制一份</strong></p>
</blockquote>
<p>同理：送子观音，把一个孩子送到第一户人家，又把他送到第二户人家，那最后在哪降生？ 答：第二户人家
因为一个孩子只会有一个亲生家庭</p>
</li>
</ul>
<p>​</p>
<p>示例</p>
<blockquote>
<p>尝试用 appendChild，把创建好的元素，先后添加到两个地方（无法实现一个元素插入多处）</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  
<span class="kd">let</span> <span class="nx">text1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="s1">&#39;你好&#39;</span><span class="p">)</span>
<span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">text1</span><span class="p">)</span>  
<span class="nx">div1</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="s1">&#39;white&#39;</span>
<span class="nx">div1</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">fontSize</span> <span class="o">=</span> <span class="s1">&#39;100px&#39;</span>
<span class="c1">// 此时内存中有一个 &lt;div&gt;你好&lt;/div&gt; 元素。 背景白色，字体100像素
</span><span class="c1">// 把这个 div1 元素，先后插入到 head 和 body 中
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span>  <span class="c1">// 最终div1元素只会出现在body中 
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h4 id="复制元素使插入多处">复制元素，使插入多处</h4>
<blockquote>
<p>用「克隆节点」 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/cloneNode" target="_blank" rel="noopener noreffer">cloneNode MDN</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div2</span> <span class="o">=</span> <span class="nx">div1</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>  
<span class="c1">// true 深拷贝：该节点的所有后代节点也都会被克隆 //  false 浅拷贝：只克隆该节点本身
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="删">删</h2>
<h3 id="两种方法">两种方法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 旧方法 👇
</span><span class="c1"></span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">childNode</span><span class="p">)</span>  <span class="c1">// 必须找到父节点，来删除子节点 （反人类）
</span><span class="c1"></span>
<span class="c1">// 新方法 👇
</span><span class="c1"></span><span class="nx">childNode</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>  <span class="c1">// IE不支持（兼容性有问题）
</span></code></pre></td></tr></table>
</div>
</div><h4 id="临时探讨为什么-ie-总搞独立">临时探讨：为什么 IE 总搞独立？</h4>
<ul>
<li>实际上在最初，IE 确实是最厉害的浏览器。其他各家浏览器公司为了反制 IE 才搞出「标准」</li>
<li>所以不是 IE 搞独立，而是标准出的太晚了</li>
<li>IE 一家独大的时候，标准还没有出台。IE 也不会提前知道标准的内容。
而且标准中某些内容还会故意跟 IE 反着写</li>
<li>比如 IE 发明了 innerText，标准出台表示不用 innerText 而用 textContent（就导致开发者两个写法都要记😭）</li>
<li>所以并不一定是 IE 故意搞独立，会不会是「标准」在故意使坏呢 ?!  （🤔盲生你发现了华点）</li>
</ul>
<p>​</p>
<h4 id="旧方法">旧方法</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 先创建出 div1，再克隆出 div2
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">div1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  
<span class="kd">let</span> <span class="nx">text1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="s1">&#39;你好&#39;</span><span class="p">)</span>
<span class="nx">div1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">text1</span><span class="p">)</span>
<span class="kd">let</span> <span class="nx">div2</span> <span class="o">=</span> <span class="nx">div1</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>

<span class="c1">// 把 div1/div2 元素，分别插入到 head/body 中
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div2</span><span class="p">)</span> 

<span class="c1">// 再删除节点
</span><span class="c1"></span><span class="nx">div1</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span>
<span class="nx">div2</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">div2</span><span class="p">)</span>

<span class="c1">// 删除后还能再添加回来吗 ？
</span><span class="c1">// 可以的。因为删除节点后，节点还在内存里面，所以还可以添加回来
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div2</span><span class="p">)</span>  
</code></pre></td></tr></table>
</div>
</div><h4 id="新方法">新方法</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 先创建出 div1，再克隆出 div2
</span><span class="c1">// 把 div1/div2 元素，分别插入到 head/body 中
</span><span class="c1"></span>
<span class="c1">// 再删除节点
</span><span class="c1"></span><span class="nx">div1</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>
<span class="nx">div2</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>

<span class="c1">// 删除后还能再添加回来吗 ？
</span><span class="c1">// 可以的。因为删除节点后，节点还在内存里面，所以还可以添加回来  // 跟旧方法的效果一模一样
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>由于【 <code>ele.remove()</code> 】是后发明的，所以不兼容 IE</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="思考">思考</h3>
<ul>
<li>如果一个 node 被移出页面（DOM 树）</li>
<li>那么它还可以再次回到页面中吗？
<ul>
<li>答案：可以。（示例参考上面）</li>
<li>只是被移出来，并没有被彻底干掉，所以还可以存在在 JS 内存中</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="如何彻底干掉元素">如何彻底干掉元素</h3>
<blockquote>
<p>即元素被删除后，就彻底消失、不存在在内存中、也无法重新添加回页面</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 彻底干掉元素，先把元素移出页面
</span><span class="c1"></span><span class="nx">div1</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>
<span class="nx">div2</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>  
<span class="c1">// 这时 div1/div2 都在内存中
</span><span class="c1"></span><span class="nx">div1</span> <span class="o">=</span> <span class="kc">null</span>
<span class="nx">div2</span> <span class="o">=</span> <span class="kc">null</span>  
<span class="c1">// 等于空，div1/div2 就与内存断开联系了，就会被【垃圾回收】掉
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<p>​</p>
<h2 id="改-">改 💡</h2>
<h3 id="改属性">改属性</h3>
<h4 id="写标准属性">写标准属性</h4>
<h5 id="改-class">改 class</h5>
<blockquote>
<p>科普：早期 JS 对象是不能拥有一个「保留字」作为 key 的</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div1</span><span class="p">.</span><span class="k">if</span>  
<span class="c1">// JS引擎的解析器看到 if 会认为是不是 if 语句，而实际上 if 是 对象 div1 的 一个key
</span><span class="c1">// 这就会导致歧义
</span><span class="c1">// 所以 JS 不接受「保留字(JS关键字...)」作为 key
</span><span class="c1"></span>
<span class="nx">div1</span><span class="p">.</span><span class="kr">class</span> <span class="o">=</span> <span class="s2">&#34;red&#34;</span>  <span class="c1">// 修改失败
</span><span class="c1">// 因为 class 也是JS关键字，所以不能使用
</span><span class="c1">// 于是就起了新的名字，用 className 表示标签の类名 class
</span></code></pre></td></tr></table>
</div>
</div><p>正确写法 👇</p>
<blockquote>
<p>注意：每次用 className 修改类名，都会把之前的类名 直接覆盖掉</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 如果只是想【追加】类名
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s1">&#39;red blue&#39;</span>  <span class="c1">// 用 className 就把所有类名都写上
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">)</span>    <span class="c1">// 或者通过👈方式追加类名
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">classList</span>  <span class="c1">// 可以查看div元素当前已有的class类名组成的数组
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h5 id="改-style">改 style</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">style</span> <span class="o">=</span> <span class="s1">&#39;width:100px;color:blue;&#39;</span>  <span class="c1">// 全覆盖  【不推荐】
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="s1">&#39;200px&#39;</span>              <span class="c1">// 改一部分【推荐】
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="s1">&#39;white&#39;</span>    <span class="c1">// 注意「驼峰命名」的大小写
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>JS 不支持有「中划线 - 」的 key 值</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">background</span><span class="o">-</span><span class="nx">color</span>    <span class="c1">// ❌ 中划线会被理解成：减号
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="s1">&#39;background-color&#39;</span><span class="p">]</span> <span class="c1">// ⭕ 就是某些情况支持 key 包含中划线，也只能用[]中括号的形式
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span>     <span class="c1">// ✅
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h5 id="改-data--属性">改 data-* 属性</h5>
<blockquote>
<p>以前有段时间，需要往元素上添加自定义属性。现在基本没人用了（库开发者可能会用到）</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 添加自定义属性
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;data-x&#39;</span><span class="p">,</span> <span class="s1">&#39;test&#39;</span><span class="p">)</span>  <span class="c1">// &lt;div data-x=&#34;test&#34;&gt;&lt;/div&gt;
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">xx</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span>              <span class="c1">// &lt;div data-xx=&#34;sam&#34;&gt;&lt;/div&gt;
</span><span class="c1"></span>
<span class="c1">// 获取自定义属性的属性值
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;data-x&#39;</span><span class="p">)</span>   <span class="c1">// test  
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">xx</span>               <span class="c1">// sam
</span><span class="c1"></span>
<span class="c1">// 修改自定义属性的值
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">xx</span> <span class="o">=</span> <span class="s1">&#39;jack&#39;</span>      
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h4 id="读标准属性">读标准属性</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">id</span>
<span class="nx">div</span><span class="p">.</span><span class="nx">classList</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">href</span> 
<span class="c1">// 👆 大多是属性都是一一对应，直接读就可以
</span></code></pre></td></tr></table>
</div>
</div><h5 id="获取原本的属性值">获取原本的属性值</h5>
<blockquote>
<p>不想被浏览器加工</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">)</span>
<span class="nx">div</span><span class="p">.</span><span class="nx">classList</span>

<span class="nx">a</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">)</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">href</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>两种方法都可以，但值可能稍微有些不同（大多情况两种方法获取的结果是一样的）</p>
</blockquote>
<ul>
<li>一种是简单的书写方式，「xxx.属性名」，但值可能被加工</li>
<li>一种是较长的书写方式，「xxx.getAttribute(&lsquo;属性名&rsquo;)」，虽然长，但可确保结果更准确，更保险一点</li>
</ul>
<h5 id="举例a-标签的特殊情况httpsjsbincomsuqesaredithtmljsconsole-">举例：a 标签的<a href="https://jsbin.com/suqesar/edit?html,js,console" target="_blank" rel="noopener noreffer">特殊情况</a> 👇</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">id</span><span class="o">=</span><span class="s">test</span> <span class="na">href</span><span class="o">=</span><span class="s">&#39;/xxx&#39;</span><span class="p">&gt;&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test</span><span class="p">.</span><span class="nx">href</span><span class="p">)</span>  <span class="c1">// https://null.jsbin.com/xxx  浏览器把域名给补全了
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>如果直接用 js 的属性，读出值。得出的结果，有可能会被浏览器加工</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="改事件处理函数">改事件处理函数</h3>
<h4 id="divonclick-默认为-null">div.onclick 默认为 null</h4>
<blockquote>
<p><a href="https://jsbin.com/qujosiw/edit?html,js,console,output" target="_blank" rel="noopener noreffer">代码在线编译</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;test&#34;</span><span class="p">&gt;</span>test<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test</span><span class="p">.</span><span class="nx">onclick</span><span class="p">)</span>  <span class="c1">// null 
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">test</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">test</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>  <span class="c1">// this: test
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>     <span class="c1">//    x: event
</span><span class="c1"></span><span class="p">}</span>
<span class="c1">// 调用原理：test.onclick.call(test, event)
</span><span class="c1">// 所以 this 和 event ，实际上是浏览器在用户点击时，用 call 传进来的
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>每一个元素都有 onclick 属性，该属性的默认值为 null</li>
<li>默认点击 div 不会有任何事情发生</li>
<li>但是如果你把 div.onclick 改为一个函数 fn
<ul>
<li>那么点击 div 的时候，浏览器就会调用这个函数</li>
<li>并且是这样调用的 fn.call(div, event)
<ul>
<li>div 会被当做 this   （如果要用到 this 就不能用箭头函数、必须用 function）</li>
<li>event 则包含了点击事件的所有信息，如坐标</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>​</p>
<h4 id="divaddeventlistener">div.addEventListener</h4>
<blockquote>
<p>是 div.onclick 的升级版，之后的课程单独讲 DOM Event</p>
</blockquote>
<ul>
<li>div.onclick 只能写一个函数（点击时，执行的所有操作，都必须写在一个函数中）</li>
<li>div.addEventListener 可以写无数个函数（点击时，执行的所有操作，可以写作不同的函数，对于复杂的操作情况非常友好）</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="改内容">改内容</h3>
<h4 id="改文本内容">改文本内容</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>    <span class="c1">// 早期 IE 发明的
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>  <span class="c1">// 出台「标准」中规定的
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>两者几乎没有区别</li>
<li>现在所有浏览器基本都是同时支持这两种写法的</li>
</ul>
<p>​</p>
<h4 id="改html内容">改HTML内容</h4>
<p><a href="https://jsbin.com/vokuqoj/edit?html,js,output" target="_blank" rel="noopener noreffer">代码在线编译</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;strong&gt;重要内容&lt;/strong&gt;&#39;</span> 
</code></pre></td></tr></table>
</div>
</div><ul>
<li>innerText ：所有内容都会被识别为 文本</li>
<li>innerHTML ： 会解析内容、识别标签…
（内容需要注意长度，超过一定限度，如20000个字符，可能会导致浏览器卡爆）</li>
</ul>
<p>​</p>
<h4 id="改标签">改标签</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>      <span class="c1">// 先清空 
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div2</span><span class="p">)</span>   <span class="c1">// 再加内容
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="改爸爸">改爸爸</h3>
<blockquote>
<p>想要找一个新爸爸</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">newParent</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>  <span class="c1">// 直接把div添加到新的父节点内，以前父节点中的div就自动消失了
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>直接这样就可以了，直接从原来的地方消失</li>
</ul>
<h2 id="查">查</h2>
<h3 id="查爸爸">查爸爸</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span> 
<span class="c1">// 或者 
</span><span class="c1"></span><span class="nx">node</span><span class="p">.</span><span class="nx">parentElement</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="查爷爷">查爷爷</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">parentNode</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="查子代">查子代</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">childNodes</span>  <span class="c1">// 包含文本节点
</span><span class="c1">// 或者 
</span><span class="c1"></span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span>    <span class="c1">// 【优先使用】不包含文本节点
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><a href="https://jsbin.com/miqahoj/edit?html,js,console,output" target="_blank" rel="noopener noreffer">查看在线代码</a></p>
</blockquote>
<h4 id="childnodes">childNodes</h4>
<p>例1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">test</span><span class="p">&gt;</span>
	<span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>   <span class="c1">// 7
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>第 1 个子节点是：回车 + 空格，最终缩成一个**空格 **（最开始讲 html 时就讲过，不论几个回车空格，都会缩成一个空格）</li>
<li>第 2 个子节点是：li</li>
<li>第 3 个子节点是：回车 + 空格，最终缩成一个**空格 **</li>
<li>第 4 个子节点是：li</li>
<li>第 5 个子节点是：回车 + 空格，最终缩成一个**空格 **</li>
<li>第 6 个子节点是：li</li>
<li>第 7 个子节点是：回车 + 空格，最终缩成一个**空格 **</li>
</ul>
<p>例2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">test2</span><span class="p">&gt;&lt;</span><span class="nt">li</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">li</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">li</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test2</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>   <span class="c1">// 3   // 因为没有回车和空格
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="children">children</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">test</span><span class="p">&gt;</span>
	<span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>   <span class="c1">// 3     // 即使有回车空格，子元素也是 3 个
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>所以「查子代」优先使用 children</p>
</blockquote>
<p>​</p>
<h4 id="思考元素节点的变化">思考：元素节点的变化</h4>
<blockquote>
<p>当子代变化时，childNodes 和 children 也会实时变化吗？</p>
</blockquote>
<p><a href="https://jsbin.com/rulicaz/edit?html,js,console,output" target="_blank" rel="noopener noreffer">在线代码：children / childNodes</a></p>
<p>答：如果子元素变化，children / childNodes 的长度**也会变化 **</p>
<p><a href="https://jsbin.com/duqexed/edit?html,js,console,output" target="_blank" rel="noopener noreffer">在线代码：querySelectorAll</a></p>
<p>答：通过 document.querySelectorAll 获取子元素集合。如果子元素变化，集合的长度**不会变化 **
querySelectorAll 不会实时根据元素变化，去改变自己。获取过一次之后，就不再变化</p>
<p>​</p>
<p>​</p>
<h3 id="查兄弟姐妹">查兄弟姐妹</h3>
<blockquote>
<p>没有 API 可以直接获取到「任一元素的兄弟元素」，只能通过「先获取到父元素，再获取父元素的子元素」的方式</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">childNodes</span>   <span class="c1">// parentNode 可以和 parentElement 互换
</span><span class="c1"></span><span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">children</span>     <span class="c1">// 同上
</span><span class="c1"></span>
<span class="c1">// 发现问题：上面获取到的数组，都包含了自己，而需求是只要兄弟元素，过滤掉自己  // 只能遍历
</span><span class="c1">// children 遍历排除自己
</span><span class="c1">// childNodes 遍历排除自己和所有文本节点（更麻烦）
</span></code></pre></td></tr></table>
</div>
</div><h4 id="例">例</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
<span class="c1">// div2 有多少个兄弟姐妹
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">siblings</span> <span class="o">=</span> <span class="p">[]</span>
<span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">div2</span><span class="p">.</span><span class="nx">parentElement</span><span class="p">.</span><span class="nx">children</span> <span class="c1">// 先获取到父亲的所有子代，再遍历从中排除自己
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!==</span> <span class="nx">div2</span><span class="p">){</span>
    <span class="nx">silblins</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="查看第一个子代">查看第一个子代</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">firstChild</span>    <span class="c1">// node.parentNode.children[0]
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="查看最后一个子代">查看最后一个子代</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">lastChild</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="查看上一个兄弟">查看上一个兄弟</h3>
<p>距离自己最近的上一个兄弟节点（哥哥）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">previousSibling</span>          <span class="c1">// 如果上一个节点是文本节点(空格、回车...)，就会获取到文本节点
</span><span class="c1"></span><span class="nx">node</span><span class="p">.</span><span class="nx">proviousElementSibling</span>   <span class="c1">// 会避开文本节点，只找元素节点
</span></code></pre></td></tr></table>
</div>
</div><p>补充：[节点类型](# 节点类型 nodeType)</p>
<p>​</p>
<h3 id="查看下一个兄弟">查看下一个兄弟</h3>
<p>距离自己最近的下一个兄弟节点（弟弟）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">node</span><span class="p">.</span><span class="nx">nextSibling</span>         <span class="c1">// 下一个兄弟节点 （包含文本节点）
</span><span class="c1"></span><span class="nx">node</span><span class="p">.</span><span class="nx">nextElementSibling</span>  <span class="c1">// 下一个元素兄弟节点 （只包含元素节点）
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="遍历一个-div-里面的所有元素">遍历一个 div 里面的所有元素</h3>
<blockquote>
<p>与前面的「数据结构——遍历树」逻辑相同</p>
</blockquote>
<blockquote>
<p>DOM 就是一棵树。数据结构中「树」的所有算法都可以用到 DOM 中</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">travel</span> <span class="o">=</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>   <span class="c1">// 与遍历树节点的代码逻辑一致
</span><span class="c1"></span>  <span class="nx">fn</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">){</span> 
    <span class="k">for</span><span class="p">(</span><span class="mi">1</span><span class="nx">et</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="err">；</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
      <span class="nx">travel</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">fn</span><span class="p">)</span> 
    <span class="p">}</span> 
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">travel</span><span class="p">(</span><span class="nx">div1</span><span class="p">,</span> <span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">)</span> 
</code></pre></td></tr></table>
</div>
</div><ul>
<li>看，数据结构多么有用</li>
</ul>
<h2 id="dom-操作是跨线程的详解">DOM 操作是跨线程的（详解）📌</h2>
<blockquote>
<p>面接常问：为什么 DOM 操作比较慢？
因为 DOM 操作和 JS 是两个不同的东西。</p>
</blockquote>
<blockquote>
<p>下面就详细解释：什么叫「DOM 操作是跨线程的」</p>
</blockquote>
<h3 id="浏览器功能划分">浏览器功能划分</h3>
<blockquote>
<p>在《JS世界》那一节里，讲过浏览器功能划分</p>
</blockquote>
<ul>
<li>浏览器有两个重要功能：「渲染引擎」和「JS 引擎」
<ul>
<li>渲染引擎：专门用来渲染 html 和 css</li>
<li>JS 引擎：专门用来执行 JS</li>
</ul>
</li>
<li>这两个引擎在不同的线程中，互不相干</li>
</ul>
<p>​</p>
<h3 id="跨线程操作">跨线程操作</h3>
<h4 id="这两个线程-各司其职">这两个线程-各司其职</h4>
<ul>
<li>
<p>JS 引擎，不能操作页面，只能操作 JS （window对象、object 对象、document对象…之类的）</p>
<ul>
<li>虽然存在 document 对象，但不能通过它操作任何事情，它只能操作document对象本身 —— 只能操作 JS</li>
</ul>
</li>
<li>
<p>渲染引擎，不能操作 JS，只能操作页面</p>
</li>
<li>
<p>这就是【各司其职】</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div1</span><span class="p">)</span>  
<span class="c1">// 但是执行这句JS的调用语句，却使页面发生了改变。这不就违背了【各司其职】的原则 ❓❓
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>既然是各司其职：JS 引擎 只能操作 JS，渲染引擎 只能操作 页面</p>
<ul>
<li>怎么让 div 出现在屏幕中的 ？</li>
<li>理论上，它只能出现在 body 的内存里面</li>
<li>这句 JS 的调用语句到底是如何操作、改变页面的  ❓❓   —— [跨线程通信](# 跨线程通信)</li>
</ul>
</blockquote>
<p>​</p>
<h4 id="跨线程通信">跨线程通信</h4>
<ul>
<li>当浏览器发现 JS 要在 body 里添加一个 div1 对象</li>
<li>浏览器就会通知渲染引擎：
<ul>
<li>在页面里也新增一个 div 元素</li>
<li>新增的 div <strong>元素</strong>的所有属性，都照抄 div1 <strong>对象</strong></li>
</ul>
</li>
</ul>
<blockquote>
<p>所以不是 JS 去渲染、改变了页面，而是浏览器去渲染、改变了页面</p>
</blockquote>
<p>​</p>
<h4 id="图示跨线程操作">图示跨线程操作</h4>
<p></p>
<ul>
<li>
<p>左【JS 执行线程】、中【浏览器】、右【渲染线程】  各自独立的</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  <span class="c1">// 不会影响页面，只改变了JS 执行线程的内存
</span><span class="c1"></span><span class="nx">div</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;hi&#39;</span>              <span class="c1">// 也不会影响页面（第1次改变文本内容）
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>      
<span class="c1">// 浏览器发现JS往body里添加了div节点，浏览器就通知了渲染引擎【慢】。
</span><span class="c1">// 渲染引擎接到通知，就往body里添加了div元素（div元素的属性照搬div节点的属性）
</span><span class="c1"></span><span class="p">...</span>
<span class="nx">div</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span>   
<span class="c1">// 浏览器发现div节点中的文本内容改变了，于是通知渲染引擎【慢】，照搬操作（第2次改变文本内容）
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>大量的时间花费在【中间过程】，也就是「浏览器通知渲染引擎」的过程中</p>
<ul>
<li>这就使得： div 的操作，会比其他几行单线程操作，都慢很多</li>
<li>「第 2 次改变文本内容」需通知渲染引擎。所以「第 2 次改变文本内容」的操作，肯定比「第 1 次」慢</li>
<li>[思考](# DOM 操作慢？)：执行速度变慢，这是模块化的缺点吗 ？</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="dom-操作慢-">DOM 操作慢 ❓❗️</h3>
<blockquote>
<p>网上都说 DOM 操作慢，实际上只是比 JS 操作慢，DOM 操作比网络请求还是快很多的。
关于这一部分内容，大家可以延伸阅读一些文章：</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000004114594" target="_blank" rel="noopener noreffer">为什么说DOM操作很慢</a></li>
<li><a href="https://stackoverflow.com/questions/6817093/but-whys-the-browser-dom-still-so-slow-after-10-years-of-effort" target="_blank" rel="noopener noreffer">为什么经过10年的努力DOM操作还是这么慢</a></li>
</ul>
<p>注意，网上的文章说的不一定都是对的，作为参考了解一下即可。</p>
</blockquote>
<blockquote>
<p>「跨线程操作，使得执行速度变慢」，这是模块化的缺点吗？  答 👇</p>
</blockquote>
<ul>
<li>
<p>虽然变慢了，但是可以实现各线程内部单独的优化。</p>
</li>
<li>
<p>比如，在渲染引擎中可以单独优化渲染，不需要理会 JS 的各种变量的问题 … 因为根本就看不见它们，所以也就无需考虑</p>
</li>
<li>
<p>总结</p>
<ul>
<li>「模块化」可以让划分的每一块，都比较简单、容易优化、容易代替</li>
<li>虽然损失了时间，但「模块化的优点」却是更显著的</li>
</ul>
</li>
</ul>
<h3 id="插入新标签的完整过程生命周期">插入新标签的完整过程（生命周期）</h3>
<blockquote>
<p>这个 div 经历了 3 个过程（vue 也有生命周期：之前、之时、之后）</p>
</blockquote>
<h4 id="在-div1-放入页面之前">在 div1 放入页面之前</h4>
<ul>
<li>你对 div1 所有的操作都属于 JS 线程内的操作</li>
</ul>
<h4 id="把-div1-放入页面之时">把 div1 放入页面之时</h4>
<ol>
<li>浏览器会发现 JS 的意图</li>
<li>就会通知渲染线程在页面中渲染 div1 对应的元素</li>
</ol>
<h4 id="把-div1-放入页面之后">把 div1 放入页面之后</h4>
<blockquote>
<p>为什么要说「可能会 ~，也可能不会」这种看似无意义的话</p>
<ul>
<li>因为不同的浏览器，有不同的逻辑</li>
<li>以下 4 点均以 Chrome 为例</li>
</ul>
</blockquote>
<ol>
<li>
<p>你对 div1 的操作都<strong>有可能</strong>会触发重新渲染</p>
</li>
<li>
<p><code>div1.id='newId'</code> 可能会重新渲染，也可能不会</p>
<ul>
<li>比如，改的这个 id 有 css 样式，那就会触发重新渲染</li>
</ul>
</li>
<li>
<p><code>div1.title = 'new'</code> ，即使改 title**<a href="https://css-tricks.com/css-content/#article-header-id-4" target="_blank" rel="noopener noreffer">也可能会重新渲染</a>**，也可能不会</p>
<ul>
<li>
<p>貌似看起来改 title 不应该影响页面。实际上 title 有时也会渲染在页面里</p>
</li>
<li>
<p>举例 👇</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">title</span><span class="o">=</span><span class="s">&#39;titleHi&#39;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="nt">div</span><span class="p">::</span><span class="nd">after</span><span class="p">{</span> <span class="k">content</span><span class="p">:</span> <span class="nb">attr</span><span class="p">(</span><span class="n">title</span><span class="p">);</span> <span class="p">}</span>   <span class="c">/* 页面中显示出了 `titleHi` */</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
<span class="c">&lt;!-- 
</span><span class="c">   div 的伪元素内容，就是获取了 div 的 title 属性。
</span><span class="c">   这种情况如果改了 div 的 title，页面一定会重新渲染
</span><span class="c">--&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>如果你连续对 div1 多次操作，浏览器可能会<strong>合并成一次操作</strong>，也可能不会（<strong>之前在动画里提到过</strong>）</p>
<ul>
<li>
<p>需求动画效果：让 test 元素的宽度从 100 px 渐变成 200 px</p>
</li>
<li>
<p><a href="http://js.jirengu.com/yefac/1/edit?html,css,js,output" target="_blank" rel="noopener noreffer">代码见链接</a>。这样写为什么不会发生动画 ？</p>
<ul>
<li>在短时间内，对这个元素的 classList 进行了两次操作（两次添加类名）</li>
<li>JS 认为 执行两次、渲染两次是浪费时间，何不合并、渲染一次，更节约渲染时间</li>
<li>由于合并 ，导致动画效果出不来。</li>
</ul>
</li>
<li>
<p>怎么才能不合并、展示出动效</p>
<ul>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">test</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;start&#39;</span><span class="p">)</span>
<span class="c1">// 中间多执行一步
</span><span class="c1"></span><span class="nx">test</span><span class="p">.</span><span class="nx">clientWidth</span>  
<span class="c1">// 获取test的客户端宽度。看似这句代码人畜无害的，但事实并非如此
</span><span class="c1">// 因为这里要获取宽度，使得上面添加class的操作，必须立即渲染
</span><span class="c1">// 所以就不会合并操作（从而展示出动效）
</span><span class="c1"></span><span class="nx">test</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
<ul>
<li>在中间读取宽度，导致 JS 必须先渲染出 start，然后告诉你宽度，最后渲染 end（强行拆分）</li>
<li>又因为中间存在 css 的过渡效果 transition，所以就会展示动画啦</li>
</ul>
</li>
</ol>
<blockquote>
<p>这其实是非常高深的一点  ，很少有人能这么清晰的分析出原因</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="提问">提问</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  
<span class="nx">div</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;hi&#39;</span>          <span class="c1">// 不触发重新渲染
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">)</span>  <span class="c1">// div插入页面之时
</span><span class="c1"></span><span class="p">...</span>
<span class="nx">div</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span>   <span class="c1">// 在div插入页面之后，修改 div 的文本内容，一定会触发重新渲染
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>在 div 插入页面之后</p>
<ul>
<li>修改 div 的文本内容，一定会触发重新渲染</li>
<li><strong>那是否「修改 div 的所有属性，都会触发重新渲染」呢？</strong></li>
</ul>
</blockquote>
<p><a href="http://js.jirengu.com/meviw/2/edit?html,js,output" target="_blank" rel="noopener noreffer">示例代码</a></p>
<ul>
<li>html 中，div 元素有三个不同的属性：<code>id</code>、<code>x</code>、<code>data-x</code>，属性值都是 <code>test</code></li>
<li>JS 中，获取到这个 div 元素为 div1，再分别修改这三个属性的值为 <code>frank</code></li>
<li>那最终页面中的这个 div 元素，是否会三个属性都修改成功了呢 ？
<ul>
<li><code>id</code> 修改成功、<code>x</code> 修改失败、<code>data-x</code> 修改成功</li>
</ul>
</li>
</ul>
<blockquote>
<p>可修改的属性，存在什么规律吗？</p>
</blockquote>
<ul>
<li>如果这个属性是在「标准属性」中、或在「data 属性」中</li>
<li>那么浏览器会自动同步这个修改结果到渲染的页面中</li>
<li>id 属于标准属性、data-x 属于 data 属性，
而 x 属于非标准属性，修改它就不会影响（渲染）到页面</li>
</ul>
<blockquote>
<p>总结「属性同步」的标准，[见下](# 属性同步)</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="属性同步">属性同步</h3>
<h4 id="标准属性">标准属性</h4>
<ul>
<li>对 div1 的标准属性的修改，会被浏览器自动同步到页面中</li>
<li>比如 id、className、title 等（你改了就会直接变）</li>
</ul>
<h4 id="data--属性">data-* 属性</h4>
<ul>
<li>同上</li>
</ul>
<h4 id="非标准属性">非标准属性</h4>
<ul>
<li>对非标准属性的修改，则只会停留在 JS 线程中</li>
<li>不会同步到页面里</li>
<li>比如 x 属性，<a href="http://js.jirengu.com/meviw/2/edit?html,js,output" target="_blank" rel="noopener noreffer">示例代码</a></li>
</ul>
<h4 id="启示">启示</h4>
<ul>
<li>如果你想自定义属性，又想被同步到页面中，请使用 data-  作为前缀（data 属性）</li>
<li>不要使用类似 <code>x</code> 这种属性</li>
</ul>
<h4 id="图示">图示</h4>
<p></p>
<ul>
<li>div 的【标准属性】，自动同步</li>
<li>div 的【data 属性】，自动同步
<ul>
<li>【data 属性】中的【x 属性】，自动同步</li>
</ul>
</li>
<li>div 的 x 属性，什么东西，滚</li>
</ul>
<blockquote>
<p>补充：</p>
<ul>
<li>JS 线程中的属性叫「properties」，渲染线程中的属性叫「attributes」 （[对比](# Property  vs  Attribute)）</li>
<li>所以 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getAttribute" target="_blank" rel="noopener noreffer">Element.getAttribute()</a> 这个 API 获取的是页面中的属性</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="property--vs--attribute">Property  vs  Attribute</h3>
<h4 id="property-属性">property 属性</h4>
<ul>
<li>
<p>JS 线程中 div1 的所有属性，叫做 div1 的 property</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">div1</span><span class="p">.</span><span class="nx">style</span>
<span class="nx">div1</span><span class="p">.</span><span class="nx">id</span>
<span class="nx">div1</span><span class="p">.</span><span class="nx">className</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="attribute-也是属性">attribute 也是属性</h4>
<ul>
<li>
<p>渲染引擎中 div1 对应标签的属性，叫做 attribute</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;test&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;test&#34;</span> <span class="na">data-x</span><span class="o">=</span><span class="s">&#34;test&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h4 id="区别">区别</h4>
<ul>
<li>大部分时候，同名的 property 和 attribute ，值相等</li>
<li>但如果<strong>不是标准属性</strong>，那么它俩只会在一开始时相等
<ul>
<li>非标准属性 x，一开始左右相等。后来 JS 线程中修改了 x 的值，但是渲染线程并不知道，导致不等</li>
</ul>
</li>
<li>但注意 <strong>attribute 只支持字符串</strong>
<ul>
<li>页面中的标签属性的值，只能是字符串，<code>&lt;div id=1&gt; &lt;/div&gt;</code> 中的 id=1 也只是省略了引号的字符串 1</li>
</ul>
</li>
<li>而 property 支持字符串、布尔等类型</li>
</ul>]]></description>
</item><item>
    <title>数据结构（上）</title>
    <link>http://samrks.github.io/algorithm-data-structures-part.1/</link>
    <pubDate>Mon, 19 Oct 2020 00:25:48 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/algorithm-data-structures-part.1/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="目前用过的数据结构">目前用过的数据结构</h2>
<ul>
<li>数组
<ul>
<li>数组可以分为队列、栈等</li>
</ul>
</li>
<li>哈希表
<ul>
<li>用来存储 key - value 对</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="队列-queue">队列 Queue</h2>
<blockquote>
<p>队列，是一种特殊的数组 ——**「先进先出 FIFO」的数组 **</p>
<p>FIFO :  first in ,  first out</p>
</blockquote>
<h3 id="题目">题目</h3>
<ul>
<li>请实现一个「餐厅叫号」网页</li>
<li>点击「取号」按钮，生成一个号码</li>
<li>点击「叫号」按钮，显示「请 X 号就餐]</li>
</ul>
<h3 id="分析">分析</h3>
<ul>
<li>
<p>首先，应该选择「队列 queue」作为数据结构</p>
<ul>
<li>因为「叫号」遵循的应该是「先到先得」的原则，这点与「队列」的「先进先出」是一致的</li>
</ul>
</li>
<li>
<p>队列的两个重要的 API ：入队、出队</p>
<ul>
<li>在 JS 中，「入队」相当于 queue.push （在叫号数组的最后，添加一个人）</li>
<li>在 JS 中，「出队」相当于 queue.shift （把叫号数组中第一个人踢走，结束排队、可以去吃饭了）</li>
</ul>
</li>
<li>
<p>记得练习一下 call 的用法</p>
</li>
<li>
<p>其他的事情就顺其自然了，见<a href="https://codesandbox.io/s/naughty-frost-qkmhd" target="_blank" rel="noopener noreffer">完整代码</a> （<a href="https://codesandbox.io/" target="_blank" rel="noopener noreffer">codesandbox</a>在线编译器）</p>
</li>
<li>
<p>本地编译器中，开启项目，运行 <code>parcel  +（文件路径，如 src/index.html ）</code>  就可以开启本地服务，实时监听</p>
<p><code>yarn global add parcel</code></p>
</li>
</ul>
<p>​</p>
<h3 id="代码">代码</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;screen&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;actions&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;createNumber&#34;</span><span class="p">&gt;</span>取号<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;callNumber&#34;</span><span class="p">&gt;</span>叫号<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
    当前号码： <span class="p">&lt;</span><span class="nt">span</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;newNumber&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
    当前队列： <span class="p">&lt;</span><span class="nt">span</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;queue&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;./main.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 获取到所有页面元素
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">divScreen</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&#34;#screen&#34;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">btnCreateNumber</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&#34;.createNumber&#34;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">btnCallNumber</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&#34;.callNumber&#34;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">spanNewNumber</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&#34;#newNumber&#34;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">spanQueue</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&#34;#queue&#34;</span><span class="p">)</span>

<span class="c1">// 取号
</span><span class="c1">// 取号号码n默认从0开始，每次点击后自增1
</span><span class="c1">// 需要把所有取过的号都记下来，才能实现叫号
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span>
<span class="kd">let</span> <span class="nx">queue</span> <span class="o">=</span> <span class="p">[]</span>
<span class="nx">btnCreateNumber</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">n</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="nx">queue</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>  <span class="c1">// 入队
</span><span class="c1"></span>  <span class="nx">spanNewNumber</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">n</span>
  <span class="nx">spanQueue</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">queue</span><span class="p">)</span>
  <span class="cm">/* innerText 只能显示字符串，
</span><span class="cm">  * 可以用 queue.toString() 显示效果：1,2,3,4
</span><span class="cm">  * 用 JSON.stringify(..) 会把JS对象转换成外观完全一样的字符串, [1,2,3,4]
</span><span class="cm">  * */</span>
<span class="p">}</span>

<span class="c1">// 叫号
</span><span class="c1"></span><span class="nx">btnCallNumber</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">queue</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 当队列为空，就不再执行叫号操作
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">spanQueue</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="sb">`无需排队`</span>
  <span class="p">}</span>
  <span class="kr">const</span> <span class="nx">m</span> <span class="o">=</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span>  <span class="c1">// 出队
</span><span class="c1"></span>  <span class="nx">divScreen</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="sb">`请 </span><span class="si">${</span><span class="nx">m</span><span class="si">}</span><span class="sb"> 号就餐`</span>
  <span class="nx">spanQueue</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">queue</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="问">问</h3>
<blockquote>
<p>如果不知道「队列」这个知识点，你会怎么做？</p>
</blockquote>
<ul>
<li>
<p>懂得「队列」，看到这种实现逻辑（先到先得），能立马知道这符合「队列：入队/出队」（先进先出）
科班生只需要了解：「入队、出队」在 JS 中对应的 API 形式即可</p>
</li>
<li>
<p>没有「数据结构」相关知识的辅助，只能一步一步推导这种逻辑的实现方法（相对薄弱）</p>
</li>
</ul>
<ul>
<li>所以「数据结构」很重要</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="栈-stack">栈 Stack</h2>
<blockquote>
<p>「后进先出 LIFO」的数组</p>
<p>LIFO  :  last in ,  first out</p>
</blockquote>
<h3 id="举例">举例</h3>
<blockquote>
<p>可以以一个不严谨的「坐电梯」的情景来理解 ：
1层直达88层的电梯，先进电梯的人，会站到电梯最后。而后进电梯的人站在电梯最前，会先出电梯</p>
</blockquote>
<blockquote>
<p>现实生活的运行机制中，这种<strong>不公平</strong>的例子很少
所以下面就是以一个**「JS 函数调用」**的例子来展开。JS 的「调用栈」就是「栈」的数据结构</p>
</blockquote>
<ul>
<li>
<p>JS 函数的调用栈 call stack 就是一个栈</p>
</li>
<li>
<p>假设 f1 调用了 f2，f2 有调用了 f3</p>
</li>
<li>
<p>那么 f3 结束后应该回到 f2，f2 结束后应该回到 f1</p>
</li>
</ul>
<h3 id="代码-1">代码</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(){</span> <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">returb</span> <span class="nx">a</span><span class="o">+</span><span class="nx">f2</span><span class="p">()</span> <span class="p">}</span>
<span class="kd">function</span> <span class="nx">f2</span><span class="p">(){</span> <span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="k">return</span> <span class="nx">b</span><span class="o">+</span><span class="nx">f3</span><span class="p">()</span> <span class="p">}</span>
<span class="kd">function</span> <span class="nx">f3</span><span class="p">(){</span> <span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="k">return</span> <span class="nx">c</span> <span class="p">}</span>
<span class="nx">f1</span><span class="p">()</span>
<span class="c1">// 问：上述代码是 如何压栈和弹栈的 ？
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>画一下压栈、出栈过程，便知这是「后入先出」的栈</p>
</blockquote>
<p>首先，栈就是数组</p>
<p></p>
<ul>
<li>压栈就是 push（添加到最后）</li>
<li>弹栈就是 pop（把最前面先弹出来）</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="留一个悬念">留一个悬念</h3>
<h4 id="内存图里的栈内存和这个调用栈">内存图里的栈内存和这个调用栈</h4>
<ul>
<li>它们是什么关系？—— 关系很大</li>
<li>是同一块内存吗？—— （可以说是同一块内存，因为）有很大的地方是重叠的</li>
</ul>
<blockquote>
<p>这块和 JS 关系不大。【内存图 2.0】</p>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="链表-linked-list">链表 Linked List</h2>
<blockquote>
<p>只要满足「一个链一个」这样的数据结构，就是「链表」</p>
</blockquote>
<p></p>
<h3 id="实际使用">实际使用</h3>
<blockquote>
<p>举例：**「JS 的原型链」**中的「链」，实际上就是指「链表」</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>  
<span class="nx">array</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span> 
<span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>
</code></pre></td></tr></table>
</div>
</div><p>从这个角度看，JS 中任何一个普通对象，都是一个链表（因为有原型的概念）</p>
<p></p>
<blockquote>
<p>链表，是一种对数据结构的抽象。这种抽象，是一种很松散的链接关系</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">array</span><span class="p">.</span><span class="nx">push</span> <span class="c1">// array本身没有push，就去数组原型上找
</span><span class="c1"></span><span class="nx">array</span><span class="p">.</span><span class="nx">hasOwnProperty</span>  <span class="c1">// array本身没有，数组原型上没有，只能从对象原型上找到
</span></code></pre></td></tr></table>
</div>
</div><p>这是非常简洁的、实现继承的一种机制</p>
<p>​</p>
<h3 id="链表的好处">链表的好处</h3>
<blockquote>
<p>可以随时把中间的链条给断掉</p>
</blockquote>
<p>例</p>
<ul>
<li>
<p>任意一个数组 array，要去掉链条中的数组原型</p>
</li>
<li>
<p>实现方式：让 array 的 _<em>proto</em>_ 直接指向对象原型（那么这个 array 就不再具备 push 这些方法了）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">array</span><span class="p">.</span><span class="nx">__proto__</span>  <span class="c1">// 得到数组原型
</span><span class="c1"></span><span class="nx">array</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span>  <span class="c1">// 得到对象原型
</span><span class="c1"></span><span class="nx">array</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span>  <span class="c1">// null
</span><span class="c1"></span>    
<span class="c1">// 让 array 的 __proto__ 直接指向对象原型 
</span><span class="c1"></span><span class="nx">array</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>
<span class="nx">array</span><span class="p">.</span><span class="nx">push</span> <span class="c1">// undefined
</span></code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ul>
<h3 id="链表的简单操作-">链表的简单操作 ✅</h3>
<blockquote>
<p>怎么创建链表、怎么在链表上进行增删改查  ——  代码见本地【<a href="D:%5cJirengu%5c%e7%ac%ac1%e9%98%b6%e6%ae%b5%5c6-%e7%ae%97%e6%b3%95%e4%b8%8e%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%5c04-%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%ef%bc%88%e4%b8%8a%ef%bc%89%5clinked_list" rel="">linked_list</a>】项目</p>
</blockquote>
<blockquote>
<p>要在大脑中，能构建出这样的模型</p>
</blockquote>
<h4 id="添加节点">添加节点</h4>
<h5 id="第一次尝试失败-">第一次尝试：失败 ❌</h5>
<h5 id="bug分析">BUG分析</h5>
<ul>
<li>运行下面代码的【appendList 方法】只能实现一种情况：就是在第1个节点后面，添加第2个节点。</li>
<li>当你想添加多个节点，多次运行【appendList 方法】会发现链表中始终只有两个节点</li>
<li>多次运行的结果，就是第二个节点在不断的被替换，而不会将每次运行时用户写的节点添加到已有节点的后面</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="cm">/*
</span><span class="cm">* 如何创建一个链表 ↓
</span><span class="cm">* 最简单的链表，就是只有一个节点的链表
</span><span class="cm">* 一个节点，用对象表示。需要包含两个属性：数据、下一个节点(默认是空)
</span><span class="cm">* */</span>
<span class="kr">const</span> <span class="nx">createList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">data</span><span class="o">:</span> <span class="nx">value</span><span class="p">,</span>
    <span class="nx">next</span><span class="o">:</span> <span class="kc">null</span>   <span class="c1">// 默认下一个节点是空
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
<span class="cm">/* 添加其他节点 */</span>
<span class="kr">const</span> <span class="nx">appendList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="p">{</span> 
    <span class="nx">data</span><span class="o">:</span> <span class="nx">value</span><span class="p">,</span>
    <span class="nx">next</span><span class="o">:</span> <span class="kc">null</span> 
  <span class="p">}</span>
  <span class="nx">list</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">node</span>
  <span class="k">return</span> <span class="nx">node</span>  <span class="c1">// 往list上添加node节点，并把这个node节点作为函数返回值
</span><span class="c1"></span><span class="p">}</span>
<span class="kr">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="nx">createList</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>        <span class="c1">// 创建list链条(只有一个节点)
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">appendList</span><span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>  <span class="c1">// 往list链条上，添加node节点。
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`node`</span><span class="p">,</span> <span class="nx">node</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`list`</span><span class="p">,</span> <span class="nx">list</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="代码简化">代码简化</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nx">data</span><span class="o">:</span> <span class="nx">value</span><span class="p">,</span>   <span class="c1">// 形参value
</span><span class="c1"></span>  <span class="nx">next</span><span class="o">:</span> <span class="kc">null</span>     <span class="c1">// 默认是单节点链表，下一个节点为空
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>上述部分被多次引用。可以提取出来，单独成一个函数 createNode ，来多次调用</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 提取公共部分，独立成一个函数 createNode
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">createNode</span> <span class="o">=</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">data</span><span class="o">:</span> <span class="nx">value</span><span class="p">,</span>
    <span class="nx">next</span><span class="o">:</span> <span class="kc">null</span>  
  <span class="p">}</span>
<span class="p">}</span>
<span class="o">--------------------------------------------------------------------------</span>
<span class="kr">const</span> <span class="nx">createList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">createNode</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;   多次调用
</span><span class="c1"></span><span class="p">}</span>
<span class="kr">const</span> <span class="nx">appendList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">createNode</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;   多次调用
</span><span class="c1"></span>  <span class="nx">list</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">node</span>
  <span class="k">return</span> <span class="nx">node</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="第二次尝试成功-">第二次尝试：成功 ✔️</h5>
<blockquote>
<p>我们说「添加节点」实际上是要在当前链条的**最后一个节点的后面，再添加新的节点 **。**而不是在第一个节点的后面，添加新的节点 **</p>
</blockquote>
<blockquote>
<p>👆 上述这点逻辑，必须清晰认识到，这样代码才有可能写对</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">appendList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">createNode</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="c1">// 先生成我们要新添加的节点的内容
</span><span class="c1"></span>  
  <span class="c1">// 添加节点：我们需要在当前链条的最后一个节点的后面，添加新的节点。
</span><span class="c1"></span>  <span class="c1">// 所以必须找到 list 的最后一个节点
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">list</span> 
  <span class="c1">// 重新赋值给变量x，更保险。直接用list原值，可能会导致问题
</span><span class="c1"></span>  <span class="c1">// 开局假设：链表只有一个节点，声明变量 x，作为链表的这一个节点（也是最后一个节点）
</span><span class="c1"></span>  
  <span class="c1">// 循环遍历
</span><span class="c1"></span>  <span class="c1">// 如果 x 后面还有节点存在，说明 x 不是最后一个节点，需要给 x 重新赋值为下一个节点
</span><span class="c1"></span>  <span class="k">while</span> <span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>  
    <span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">next</span>
  <span class="p">}</span>
  <span class="c1">// x.next === null 
</span><span class="c1"></span>  <span class="c1">// 遍历结束，x.next如果是null了，说明 x 是最后一个节点
</span><span class="c1"></span>  <span class="c1">// 此时只需要，把需要添加的节点，赋值给 x.next 即可
</span><span class="c1"></span>  <span class="nx">x</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">node</span>
  <span class="k">return</span> <span class="nx">node</span>  <span class="c1">// 把需要添加的节点 node 作为函数返回值
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h4 id="删除节点">删除节点</h4>
<blockquote>
<p>现 list 链条上有 3 个节点，每个节点的 data 分别是 10/20/30。需求：从链条中删除 20 的节点</p>
</blockquote>
<h5 id="示例分析">示例分析</h5>
<ol>
<li>
<p>这个实现的思路和[前面的例子](# 链表的好处)类似。</p>
<p>「从链条中删除 20 节点」，实际上就是让 10 节点的 next 不再指向 20，而是直接指向 30</p>
</li>
<li>
<p>删掉 10 和 20 之间的联系后，10 和 20 的 next 仍然分别指向 30。
但是并没有任何对象指向 20 ，20 就相当于没人用的内存垃圾，浏览器会自动把它回收掉</p>
</li>
<li>
<p>所以最终 10 - 20 - 30，就变成了 10 - 30</p>
</li>
</ol>
<p>（图解 ↘）</p>
<p></p>
<p>问题：怎么找到 20 节点的上一个节点（我们只能通过 next 找到当前节点的下一个节点，并没有属性保存当前节点的上一个节点？？）</p>
<p>​</p>
<h5 id="思路">思路</h5>
<ul>
<li>通过上图可知，**「删除 X 节点」**可以转嫁成另一个需求 👇</li>
<li>**「让 X 的上一个节点的 next，直接指向 X 的下一个节点」 **</li>
<li>跳过了 X 节点，相当于从链条中删除了 X 节点（浏览器还会自动回收）</li>
</ul>
<p>​</p>
<h5 id="第一次尝试找规律-">第一次尝试：找规律 ⚠️</h5>
<blockquote>
<p>常规逻辑书写</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="cm">/*
</span><span class="cm">* 删除节点
</span><span class="cm">* 参数1：从哪个链条删除
</span><span class="cm">* 参数2：删除哪个节点
</span><span class="cm">* */</span>
<span class="kr">const</span> <span class="nx">removeFromList_Demo</span> <span class="o">=</span> <span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="nx">node</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>   <span class="c1">// 注意：链条的名称 === 第一个节点的名称
</span><span class="c1"></span>  <span class="c1">// 如果要删除的(node传入的)是第1个节点（那node.next就表示第2个节点）
</span><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">node</span> <span class="o">===</span> <span class="nx">list</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">list</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">next</span>  <span class="c1">// 就将第1个节点list重新赋值为第2个节点（相当于第1节点就不存在了）
</span><span class="c1"></span>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// 如果要删除的(node传入的)是第2个节点（那node.next就表示第3个节点）
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">node</span> <span class="o">===</span> <span class="nx">list</span><span class="p">.</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">list</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">next</span> <span class="c1">// 就将第1个节点的next，直接指向第3个节点（跳过第2节点，相当于删除）
</span><span class="c1"></span>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">// 如果要删除的(node传入的)是第3个节点（那node.next就表示第4个节点）
</span><span class="c1"></span>      <span class="k">if</span> <span class="p">(</span><span class="nx">node</span> <span class="o">===</span> <span class="nx">list</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">list</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">next</span>  <span class="c1">// 就将第2个节点的next，直接指向第四个节点（跳过第3节点，相当于删除）
</span><span class="c1"></span>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// 如果要删除的是第4个节点 =&gt; 让第3个节点.next，直点接指向第5个节（跳过4）
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="nx">node</span> <span class="o">===</span> <span class="nx">list</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
          <span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nx">next</span><span class="p">).</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">next</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="c1">// 找到规律了吗？
</span><span class="c1"></span>          <span class="c1">// 这是一个循环（递归）呀
</span><span class="c1"></span>        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>根据需求，写出上述常规代码：非常冗余，全是近似代码、不断重复。【是否说明这其实是有规律可循的】</p>
</blockquote>
<blockquote>
<p>猜想：是否可以用「循环」来解决代码的重复调用、实现规律</p>
</blockquote>
<p>​</p>
<h5 id="第二次尝试有-bug-">第二次尝试：有 bug ⭕️</h5>
<blockquote>
<p>利用循环，实现规律</p>
</blockquote>
<ul>
<li>删除X节点：就是让【 X 的上一个节点】的 next，直接指向【 X 的下一个节点】（X.next）
<ul>
<li>所以**关键在于： X 的上一个节点怎么找到 **</li>
<li>要知道 X 的上一个节点，这就与 X 节点联系紧密</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="cm">/*
</span><span class="cm">* 删除节点
</span><span class="cm">* 参数1：从哪个链条删除
</span><span class="cm">* 参数2：删除哪个节点
</span><span class="cm">* （链条名===第一个节点）
</span><span class="cm">* */</span>
<span class="kr">const</span> <span class="nx">removeFromList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="nx">node</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">list</span>   <span class="c1">// x 默认为第一个节点
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">p</span> <span class="o">=</span> <span class="kc">null</span>   <span class="c1">// p 始终表示 x 的上一个节点，默认为空
</span><span class="c1"></span>
  <span class="c1">// 传入的 node 表示是要删除的节点。
</span><span class="c1"></span>  <span class="c1">// 要遍历链条中的每一个节点，用 x 表示当前遍历的节点
</span><span class="c1"></span>  <span class="c1">// 将 x 与 node 比对，如果当前节点 x 不等于 node 节点，就给 x 重新赋值下一个节点，再次判断是否相等
</span><span class="c1"></span>  <span class="c1">// 不断循环查找下一个，最终 x 就会找到要删除的那个节点
</span><span class="c1"></span>  <span class="c1">// 因为【x的上一个节点】是关键，所以循环每轮都要把【当前x的上一个节点】记录下来
</span><span class="c1"></span>  <span class="k">while</span> <span class="p">(</span><span class="nx">node</span> <span class="o">!==</span> <span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">p</span> <span class="o">=</span> <span class="nx">x</span>      <span class="c1">// 每轮先用 p 把当前 x 记下来 
</span><span class="c1"></span>    <span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">next</span> <span class="c1">// 然后再把 x 重新赋值为下一个节点
</span><span class="c1"></span>    <span class="c1">//（此时x成为x的下一个节点，p就成为x的上一个节点）
</span><span class="c1"></span>  <span class="p">}</span> 
  <span class="c1">// while 遍历完，得出当前要删除的节点。如果找不到，说明用户传入的 node 不存在 (╯□╰)
</span><span class="c1"></span>  <span class="c1">// 综上，遍历完后，x 和 p 的取值各有两种情况 👇 
</span><span class="c1"></span>  <span class="c1">// console.log(x === node || x === null)  // x 要么找到传入的要删除的节点；要么就是null
</span><span class="c1"></span>  <span class="c1">// console.log(p === x的上一个节点 || p === null)  // p 要么是 x 的上一个节点；要么就是null（说明要删除的就是第1个节点，所以 p 是 null）
</span><span class="c1"></span>  <span class="cm">/*
</span><span class="cm">  * 最后，删除节点，相当于跳过这个节点。
</span><span class="cm">  * x是要删除的节点，那么跳过x这个节点，就应该是x的上一个节点的next ，直接指向 x 的下一个节点 （跳过x）
</span><span class="cm">  * x的上一个节点的next ===&gt; p.next
</span><span class="cm">  * x的下一个节点 ===&gt; x.next
</span><span class="cm">  * */</span>
  <span class="nx">p</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">next</span>   <span class="c1">// ← ←  综上得出
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>通过循环，实现了规律，但有 bug。</p>
<ul>
<li>无法删除第一个节点</li>
<li>缺少很多边界情况的处理</li>
</ul>
</blockquote>
<p>示例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="nx">createList</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
<span class="kr">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">list</span> <span class="c1">// node 就是 list 的第一个节点了现在
</span><span class="c1"></span><span class="nx">removeFromList</span><span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="nx">node</span><span class="p">)</span> <span class="c1">// 你会发现 list 没有任何变化
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">newList</span> <span class="o">=</span> <span class="nx">removeFromList</span><span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="nx">node</span><span class="p">)</span> <span class="c1">// 就算获取返回值也没有用，因为根本就没返回新 list
</span></code></pre></td></tr></table>
</div>
</div><h5 id="第三次尝试成功-">第三次尝试：成功 ✅</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="cm">/*
</span><span class="cm">* 删除节点
</span><span class="cm">* 参数1：从哪个链条删除
</span><span class="cm">* 参数2：删除哪个节点
</span><span class="cm">* removeFromList_Demo1： 原始代码，用于发现规律
</span><span class="cm">* removeFromList_Demo2： 最终代码，用于实现规律（循环），未处理边界情况
</span><span class="cm">* removeFromList：非常抽象，且不是最优方案
</span><span class="cm">* 关键思路：就是让【 X 的上一个节点】的 next，直接指向【 X 的下一个节点】，跳过x节点
</span><span class="cm">* */</span>
<span class="kr">const</span> <span class="nx">removeFromList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="nx">node</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">list</span>
  <span class="kd">let</span> <span class="nx">p</span> <span class="o">=</span> <span class="nx">node</span> <span class="c1">// p 仍然表示x的上一个节点，Demo2中将 p 初始化为 null，这里改为 node
</span><span class="c1"></span>  <span class="k">while</span> <span class="p">(</span><span class="nx">x</span> <span class="o">!==</span> <span class="nx">node</span> <span class="o">&amp;&amp;</span> <span class="nx">x</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Demo2中忘了对null进行处理，如果node不 list中，x就可能为 null
</span><span class="c1"></span>    <span class="nx">p</span> <span class="o">=</span> <span class="nx">x</span>
    <span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">next</span>
    <span class="c1">//（此时x被重新赋值为【x的下一个节点】，那么p就成为【x的上一个节点】，稍稍有点抽象，注意理解）
</span><span class="c1"></span>  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 若 x 为 null，则不需要删除，直接 return， false 表示无法删除不在list里的节点
</span><span class="c1"></span>    <span class="k">return</span> <span class="kc">false</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="nx">p</span><span class="p">)</span> <span class="p">{</span> 
    <span class="c1">// x初值为list，p初值为node。
</span><span class="c1"></span>    <span class="c1">// 如果node接收传参list，则循环过后x===p，也就是两个参数都是list，说明要删除的节点是第一个节点
</span><span class="c1"></span>    <span class="nx">p</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">next</span> <span class="c1">// p是list，list重新赋值为list.next，那list原值就不存在，相当于删除原本的list第一个节点
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">p</span> 
    <span class="c1">// 如果删除的是第一个节点，那么就要把新 list 的头节点 p 返回给外面
</span><span class="c1"></span>    <span class="c1">// 即 newList = removeFromList(list, list)
</span><span class="c1"></span>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">p</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">next</span>  <span class="c1">// 赋值跳过x节点
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">list</span> <span class="c1">// 如果删除的不是第一个节点，返回原来的 list 即可
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
<span class="kr">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="nx">createList</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">list</span> <span class="c1">// node 就是 list 的第一个节点了现在
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">newList</span> <span class="o">=</span> <span class="nx">removeFromList</span><span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="nx">node</span><span class="p">)</span> <span class="c1">// 必须用 newList 获取返回值才能拿到删除了第一个节点的新 list
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>P.S. 当然还有其他更优雅的实现方法，比如将头指针改为头结点，不过有点超纲，就不说了。。。</p>
</blockquote>
<blockquote>
<p>这个删除节点的代码，华中科技大学里第一次听完链表课的同学也只有 10 % 能写出来。</p>
<p>逻辑很绕，比较难。所以放轻松，不理解也别太着急</p>
</blockquote>
<p>​</p>
<p>​</p>
<h4 id="遍历节点">遍历节点</h4>
<blockquote>
<p>对 list 中的每一个节点，进行一些操作</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="cm">/*
</span><span class="cm">* 获取节点
</span><span class="cm">* 参数：要获取第几个节点
</span><span class="cm">* 返回这个节点 node
</span><span class="cm">* 思路：遍历一次记1，遍历两次记2，遍历到第index次把这个节点返回出来
</span><span class="cm">* */</span>
<span class="kr">const</span> <span class="nx">getNode</span> <span class="o">=</span> <span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">list</span>
  <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="k">while</span> <span class="p">(</span><span class="nx">x</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">count</span> <span class="o">!==</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">count</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">next</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">x</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="总结">总结</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">list</span> <span class="o">=</span> <span class="nx">create</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>  <span class="c1">// 创建
</span><span class="c1"></span><span class="nx">node</span> <span class="o">=</span> <span class="nx">get</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> 
<span class="nx">append</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>   <span class="c1">// 添加
</span><span class="c1"></span><span class="nx">remove</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>          <span class="c1">// 删除
</span><span class="c1"></span><span class="nx">travel</span><span class="p">(</span><span class="nx">list</span><span class="p">,</span><span class="nx">fn</span><span class="p">)</span>       <span class="c1">// 遍历
</span></code></pre></td></tr></table>
</div>
</div><h3 id="链表的变形">链表的变形</h3>
<blockquote>
<p>这块比较超纲，就只提出个概念，感兴趣可以自己了解一下</p>
</blockquote>
<h4 id="双向链表">双向链表</h4>
<p>每个节点有一个 previous ，指向上一个节点</p>
<h4 id="循环链表">循环链表</h4>
<p>最后一个节点的 next ，指向头节点</p>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="哈希表-key-value-pairs">哈希表 key-value pairs</h2>
<blockquote>
<p>链表比较复杂，哈希表没有链表复杂</p>
</blockquote>
<p>有人说：哈希表看起来就是 JS 对象的简化版，有什么难点吗？</p>
<ul>
<li>
<p>哈希表的难点，不在于「表」这个字</p>
</li>
<li>
<p>难点在于**「哈希」**二字</p>
</li>
<li>
<p>这里有<a href="https://www.zhihu.com/question/330112288/answer/744362539" target="_blank" rel="noopener noreffer">一篇文章</a>（停车场案例），帮助你理解什么是 hash</p>
</li>
</ul>
<p>​</p>
<h3 id="哈希表">哈希表</h3>
<blockquote>
<p>key-value 的组合</p>
</blockquote>
<ul>
<li>就是存 key-value 这种形式的数据</li>
<li>并没有限制存储容量的上限。但是存的越多，读取就越难</li>
<li>难点就是如何读取hash表更快</li>
</ul>
<p>​</p>
<h3 id="哈希表的难点">哈希表的难点</h3>
<h4 id="场景">场景</h4>
<ul>
<li>假设哈希表 hashTable 里有10000对 key-value （N=10000）</li>
<li>如何使得读取任意一个  hashTable[&lsquo;yyy&rsquo;]  速度都很快呢 ？
<ul>
<li>可以看<a href="https://www.zhihu.com/question/330112288/answer/744362539" target="_blank" rel="noopener noreffer">一篇文章</a>（与停车场案例，同理）</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">hashTable</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">aaa</span><span class="o">:</span> <span class="nx">value1</span>
  <span class="nx">aab</span><span class="o">:</span> <span class="nx">value2</span>
  <span class="nx">aba</span><span class="o">:</span> <span class="nx">value3</span>
  <span class="nx">abb</span><span class="o">:</span> <span class="nx">value4</span>
  <span class="p">...</span>  
  <span class="nx">zzz</span><span class="o">:</span> <span class="nx">value10000</span>  <span class="c1">// 假设共有 10000 对 key-value
</span><span class="c1"></span><span class="p">}</span>
<span class="c1">// 找到 hashTable[`yyy`] 的最快方式
</span></code></pre></td></tr></table>
</div>
</div><h4 id="解决办法">解决办法</h4>
<blockquote>
<p>四种读取  hashTable[&lsquo;yyy&rsquo;]  的方式，如下</p>
</blockquote>
<ol>
<li>
<p>不作任何优化，hash[&lsquo;xxx&rsquo;] 需要遍历所有 key，复杂度为 O(N)    （N表示key的总个数10000）【速度慢】</p>
<ul>
<li>一万个需要1秒，十万个10秒 …</li>
</ul>
</li>
<li>
<p>对 key 排序，使用<strong>二分法</strong>查找，复杂度就是 O(log(2)N)    =&gt;   可简写成（ln N）【速度较快】</p>
</li>
<li>
<p>用字符串对应的 ASCII 数字做索引，复杂度 O(1)  【速度最快，占空间巨大】</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">aaa</span> <span class="p">=&gt;</span> <span class="mi">979797</span>     <span class="p">(</span><span class="nx">a</span><span class="o">:</span> <span class="mi">97</span><span class="p">)</span>
<span class="nx">yyy</span> <span class="p">=&gt;</span> <span class="mi">121121121</span>  <span class="p">(</span><span class="nx">y</span><span class="o">:</span> <span class="mi">121</span><span class="p">)</span>
<span class="c1">// 虽然一次就可以直接找到 yyy, 但是就像停车场的案例，这样导致占用的空间太大了（每一个指都对应一个空间）
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>对索引做除法，取余数，O(1)     【速度最快，节省大部分空间】</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">假设要获取的key的ASCII为</span> <span class="mi">979797</span><span class="err">，</span><span class="nx">准备一个长度为</span> <span class="mi">1000</span> <span class="nx">的容器</span>
<span class="nx">那就用</span> <span class="mi">979797</span> <span class="o">/</span> <span class="mi">1000</span> <span class="nx">余数肯定在</span> <span class="mi">0</span><span class="o">~</span><span class="mi">999</span> <span class="nx">之间</span>
<span class="nx">这个数组只需要</span> <span class="mi">0</span><span class="o">~</span><span class="mi">999</span> <span class="nx">项</span>
<span class="p">{</span>
  <span class="mi">0</span><span class="err">：</span><span class="nx">aaa</span><span class="p">,</span><span class="nx">aab</span><span class="p">,</span><span class="nx">aba</span><span class="p">,</span><span class="nx">abb</span><span class="p">,...</span>
  <span class="mi">1</span><span class="o">:</span> <span class="nx">bbb</span><span class="p">,</span><span class="nx">bba</span><span class="p">,</span><span class="nx">bab</span><span class="p">,</span><span class="nx">baa</span><span class="p">,...</span>
  <span class="mi">2</span><span class="o">:</span> <span class="nx">ccc</span><span class="p">,...</span>
  <span class="p">...</span>
  <span class="mi">998</span><span class="o">:</span> <span class="nx">yyy</span><span class="p">,...</span>
  <span class="mi">999</span><span class="o">:</span> <span class="nx">zzz</span><span class="p">,...</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>（同一个号码有两个）冲突了怎么办，冲突了就顺延</p>
<ul>
<li>998 满了就存 999，999 满了就存到 0，0 满了就存到 1 …</li>
<li>反正只有 1000 个位置</li>
</ul>
</li>
</ol>
<blockquote>
<p>通过哈希表实现更快的读取到数据</p>
<ul>
<li>哈希表解决的就是这个问题（存的很容易，读也得快）</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="树-tree">树 Tree</h2>
<blockquote>
<p>一个链多个</p>
<p>是对链表的升级</p>
</blockquote>
<p></p>
<ul>
<li>children 是个**数组 **</li>
<li>data1 节点有两个子节点（数组元素） data2 / data3  ，共同组成一个「树」结构（可以有无限长）</li>
<li>两个子节点 data2 / data3 可以再向下链接其他的子节点 data4 / 5 / 6 … ，也可不再有其他子节点</li>
<li>如果子节点不再（分枝杈）有 children，就称这个子节点为「叶子」
<ul>
<li>链到头了，最后一个节点</li>
</ul>
</li>
<li>所以 data1 有两个叶子</li>
</ul>
<blockquote>
<p>看起来不像树，像金字塔，倒过来就像树了</p>
</blockquote>
<p></p>
<p>​</p>
<p>​</p>
<h3 id="实际使用-1">实际使用</h3>
<blockquote>
<p>实际生活中，到处都是「树」结构</p>
</blockquote>
<ul>
<li>中国的省市区，可以看成一棵树</li>
<li>公司的层级结构，可以看成一棵树</li>
<li>网页中的节点，可以看成一棵树 
html &gt; head、body，body &gt; div、span、a、p …，head &gt; link、title、meta</li>
</ul>
<p>​</p>
<h3 id="对树进行增删改查">对「树」进行增删改查</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">tree</span> <span class="o">=</span> <span class="nx">createTree</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="c1">// 创建树
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">createNode</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="c1">// 创建节点
</span><span class="c1"></span><span class="nx">addChild</span><span class="p">(</span><span class="nx">tree</span><span class="p">,</span><span class="nx">node</span><span class="p">)</span>          <span class="c1">// 添加节点
</span><span class="c1"></span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">node1</span><span class="p">,</span><span class="nx">node2</span><span class="p">)</span>     <span class="c1">// 删除节点
</span><span class="c1"></span><span class="nx">travel</span><span class="p">(</span><span class="nx">tree</span><span class="p">)</span>                 <span class="c1">// 遍历树
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="创建树根节点">创建树（根节点）</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">createTree</span> <span class="o">=</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">data</span><span class="o">:</span> <span class="nx">value</span><span class="p">,</span>
    <span class="nx">children</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>   <span class="c1">// 子节点
</span><span class="c1"></span>    <span class="nx">parent</span><span class="o">:</span> <span class="kc">null</span>      <span class="c1">// 父节点
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="添加子节点">添加子节点</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="cm">/*
</span><span class="cm">* 添加子节点
</span><span class="cm">* 参数1：往哪个节点下添加子节点
</span><span class="cm">* 参数2：要添加的子节点数据是什么
</span><span class="cm">* */</span>
<span class="kr">const</span> <span class="nx">addChild</span> <span class="o">=</span> <span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">newNode</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">data</span><span class="o">:</span> <span class="nx">value</span><span class="p">,</span>
    <span class="nx">children</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="nx">parent</span><span class="o">:</span> <span class="nx">node</span>
  <span class="p">}</span>
  <span class="nx">node</span><span class="p">.</span><span class="nx">children</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">children</span> <span class="o">||</span> <span class="p">[]</span> <span class="c1">// 必须保证node.children是数组，才能用push方法
</span><span class="c1"></span>  <span class="nx">node</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">newNode</span><span class="p">)</span>
  <span class="k">return</span> <span class="nx">newNode</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="遍历节点-1">遍历节点</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="cm">/*
</span><span class="cm">* 遍历节点
</span><span class="cm">* 先fn操作根节点，然后遍历根节点上的所有子节点，分别用fn操作子节点（不断循环）
</span><span class="cm">* 这种先打印根节点，后处理子节点的遍历方法，称为「先根遍历」法，是比较简单的遍历方法
</span><span class="cm">* 当然还有其他遍历方法
</span><span class="cm">* */</span>
<span class="kr">const</span> <span class="nx">travel</span> <span class="o">=</span> <span class="p">(</span><span class="nx">tree</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">fn</span><span class="p">(</span><span class="nx">tree</span><span class="p">)</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">tree</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">tree</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">travel</span><span class="p">(</span><span class="nx">tree</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">fn</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="删除节点-1">删除节点</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="cm">/*
</span><span class="cm">* 删除节点
</span><span class="cm">* 数组只能通过下标删除元素（splice）
</span><span class="cm">* 所以必须先找到node的兄弟姐妹，遍历兄弟姐妹，看node排行第几（获取下标）
</span><span class="cm">* */</span>
<span class="kr">const</span> <span class="nx">removeNode</span> <span class="o">=</span> <span class="p">(</span><span class="nx">tree</span><span class="p">,</span> <span class="nx">node</span><span class="cm">/*要删除的节点*/</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">siblings</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">children</span>
  <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">siblings</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">siblings</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">index</span> <span class="o">=</span> <span class="nx">i</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nx">siblings</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="查找节点">查找节点</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="cm">/*
</span><span class="cm">* 查找节点
</span><span class="cm">* */</span>
<span class="kr">const</span> <span class="nx">findNode</span> <span class="o">=</span> <span class="p">(</span><span class="nx">tree</span><span class="p">,</span> <span class="nx">node</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">tree</span> <span class="o">===</span> <span class="nx">node</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 要查找的就是根节点
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">tree</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">tree</span> <span class="o">!==</span> <span class="nx">node</span> <span class="o">&amp;&amp;</span> <span class="nx">tree</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 非根节点、且存在子节点的情况
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">tree</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 遍历所有子节点，找到目标node
</span><span class="c1"></span>      <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">findNode</span><span class="p">(</span><span class="nx">tree</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">node</span><span class="p">)</span>  <span class="c1">// 递归
</span><span class="c1"></span>      <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">result</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">undefined</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="kc">undefined</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="数据结构就这么简单-">数据结构就这么简单 ？</h2>
<blockquote>
<p>对，数据结构就是这些代码</p>
<ul>
<li>难在，看着代码简单，但是写起来非常难（逻辑绕）</li>
<li>甚至大脑里面想都想不清楚，必须写出来、log、再慢慢推导</li>
</ul>
</blockquote>
<blockquote>
<p>其实，数据结构必须是**简单的 **</p>
<ul>
<li>所有数据结构都可以通过一句话就概况出来
<ul>
<li>队列是什么：先进先出</li>
<li>栈是什么：先进后出</li>
<li>哈希表是什么： key-value的组合</li>
<li>链表是什么：一个对象链着另一个对象</li>
<li>树是什么：一个对象链着多个对象</li>
</ul>
</li>
<li>它不可以复杂，即使复杂了，也会被程序员重新划分成几个简单问题</li>
</ul>
<p>因为👇程序员崇尚简洁优雅</p>
</blockquote>
<ul>
<li>程序员崇尚简洁优雅</li>
<li>如果你觉得某个编程概念真的很难</li>
<li>那么请相信一定是你哪里理解错了</li>
<li>请试着重新理解一下</li>
<li>把细节<strong>自己动手敲一敲</strong>，才找到错误点。
<ul>
<li>这个过程中可能会突然意识到「噢！！原来是这样，我之前大脑想的是错的」</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<blockquote>
<p>「二叉树」</p>
<ul>
<li>可能是前端中最难的</li>
</ul>
</blockquote>]]></description>
</item><item>
    <title>排序算法</title>
    <link>http://samrks.github.io/algorithm-sort/</link>
    <pubDate>Fri, 16 Oct 2020 15:18:26 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/algorithm-sort/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="前言">前言</h2>
<blockquote>
<p>算法中最简单的就是排序算法</p>
</blockquote>
<p>​</p>
<h2 id="复习代码">复习代码</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">sort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">){</span>
    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span>
    <span class="kd">let</span> <span class="nx">min</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span>
    <span class="nx">numbers</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">[</span><span class="nx">min</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">sort</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">)</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="k">return</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">?</span> <span class="nx">numbers</span> <span class="o">:</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">reverse</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>一句话总结：
每次找到最小的数放前面，然后对后面的数做同样的事情</p>
</blockquote>
<p>​</p>
<h2 id="minindex">minIndex</h2>
<blockquote>
<p>用于找出数组中最小数字的下标</p>
</blockquote>
<h3 id="你永远都有两种写法">你永远都有两种写法</h3>
<ul>
<li>「递归」和「循环」</li>
</ul>
<h3 id="目前的-minindex-递归算法">目前的 minIndex （递归算法）</h3>
<blockquote>
<p>通过 min 函数的「递归」算法，来获取到最小值，从而找到下标</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">minIndex</span><span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">min</span><span class="p">(</span><span class="nx">numbers</span><span class="p">))</span> 
<span class="kd">let</span> <span class="nx">min</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">min</span><span class="p">(</span> <span class="p">[</span><span class="nx">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">min</span><span class="p">(</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span> <span class="p">]</span> <span class="p">)</span>    <span class="c1">// 递归
</span><span class="c1"></span>  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="k">return</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">?</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">:</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="缺点">缺点</h4>
<ul>
<li>看着就繁琐（递归中用了很多括号、还引用了额外的帮助函数min ）</li>
<li>重写吧</li>
</ul>
<h3 id="重写-minindex--循环算法">重写 minIndex 🔔 （循环算法）</h3>
<blockquote>
<p>用循环</p>
</blockquote>
<p>思路：【 index 】作为一个标志，始终代表着「数组 numbers」中的「最小值」的【下标】</p>
<ul>
<li>
<p>第一步，假设下标为 0 的元素，是 numbers 中的最小值，也就是 index = 0</p>
</li>
<li>
<p>把下标 1 的元素与下标 0 的元素进行比较，如果下标 1 的元素，比下标 0 的元素还小，也就是下标 1 是最小值。而 index 始终表示最小值的下标，所以 index 需重新赋值为 1</p>
</li>
<li>
<p>👆这种方法叫【贪婪法】：只要判断是比自己小的值，就认为是最小的值
（俗称「渣男法」：只要看到一个女生比现在的女朋友漂亮，就要换女朋友）</p>
</li>
<li>
<p>逐步分析 👇</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">minIndex</span><span class="p">([</span><span class="mi">9</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>
<span class="p">=&gt;</span> <span class="p">(</span><span class="nx">假设9</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="nx">最小</span><span class="p">)</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span>
<span class="p">=&gt;</span> <span class="p">(</span><span class="mi">9</span><span class="nx">遇到6</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>  <span class="o">-</span>  <span class="mi">9</span><span class="o">&gt;</span><span class="mi">6</span><span class="p">)</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">1</span>
<span class="p">=&gt;</span> <span class="p">(</span><span class="mi">6</span><span class="nx">遇到8</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>  <span class="o">-</span>  <span class="mi">8</span><span class="o">&gt;</span><span class="mi">6</span><span class="p">)</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">1</span>
<span class="p">=&gt;</span> <span class="p">(</span><span class="mi">6</span><span class="nx">遇到13</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">-</span> <span class="mi">13</span><span class="o">&gt;</span><span class="mi">6</span><span class="p">)</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">1</span>
<span class="p">=&gt;</span> <span class="p">(</span><span class="mi">6</span><span class="nx">遇到5</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>  <span class="o">-</span>  <span class="mi">5</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">)</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">4</span>
<span class="p">=&gt;</span> <span class="p">(</span><span class="mi">5</span><span class="nx">遇到4</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span>  <span class="o">-</span>  <span class="mi">4</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">)</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">5</span>
<span class="p">=&gt;</span> <span class="nx">index</span> <span class="nx">变化过程</span> <span class="mi">0</span><span class="err">→</span><span class="mi">1</span><span class="err">→</span><span class="mi">4</span><span class="err">→</span><span class="mi">5</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="源代码循环实现minindex-">源代码（循环实现minIndex） 👇</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">1</span><span class="nx">et</span> <span class="nx">minIndex</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span> 
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
    <span class="k">if</span><span class="p">(</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span> <span class="p">){</span>  
      <span class="nx">index</span> <span class="o">=</span> <span class="nx">i</span> 
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">index</span>
<span class="p">}</span>
<span class="nx">minIndex</span><span class="p">([</span><span class="mi">9</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>index 表示当前最小值下标，已经为 0，所以循环体中，应该是从下标为 1 的元素开始，和下标为 0 的元素进行比较大小</li>
<li>全部遍历完，返回最小值下标</li>
</ul>
<p>​</p>
<h4 id="分析">分析</h4>
<ul>
<li>一目了然，一听就会，一写就错</li>
<li>写错，就记得多测试几次</li>
</ul>
<p>​</p>
<h2 id="启发-">启发 💡</h2>
<blockquote>
<p>是不是所有的「递归」都可以写成「循环」 ？？</p>
</blockquote>
<blockquote>
<p>答：是的</p>
</blockquote>
<ul>
<li><strong>所有的递归，都可以改写成循环</strong></li>
<li>这是已经被证明的事情</li>
<li>如果觉得递归不好理解，都可以改写成循环，一般来说循环会更好理解，但循环写起来会更麻烦、代码量更大</li>
</ul>
<h2 id="选择排序-select-sort--">选择排序 select sort  ⭕️</h2>
<blockquote>
<p>选择排序两种思路</p>
<ol>
<li>递归</li>
<li>循环</li>
</ol>
</blockquote>
<blockquote>
<p>改写 sort</p>
</blockquote>
<p></p>
<h3 id="递归写法">递归写法</h3>
<blockquote>
<p>复习一下  |  递归思路：</p>
<ul>
<li>长度大于2，就找最小值放到前面 + 并对后面所有值再次 sort</li>
<li>长度等于2，就直接判断大小 / 交换两个元素位置，然后返回数组（中止条件）</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">minIndex</span><span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">min</span><span class="p">(</span><span class="nx">numbers</span><span class="p">))</span> 
<span class="kd">let</span> <span class="nx">min</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`numbers: </span><span class="si">${</span><span class="nx">numbers</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
  <span class="k">return</span> <span class="nx">min</span><span class="p">(</span> <span class="p">[</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">min</span><span class="p">(</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span> <span class="p">]</span> <span class="p">)</span>   <span class="c1">// 递归
</span><span class="c1"></span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">sort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> 
  <span class="k">if</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">){</span> 
    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> 
    <span class="kd">let</span> <span class="nx">min</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span> 
    <span class="nx">numbers</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> 
    <span class="k">return</span> <span class="p">[</span><span class="nx">min</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">sort</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">)</span>    <span class="c1">// 递归
</span><span class="c1"></span>  <span class="p">}</span><span class="k">else</span><span class="p">{</span> 
    <span class="k">return</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">?</span> <span class="nx">numbers</span> <span class="o">:</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">reverse</span><span class="p">()</span>  
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="循环实现分析">循环实现分析</h3>
<blockquote>
<p>思路不变：</p>
<ul>
<li>每次找到最小的数放前面，<del>然后对后面的数做同样的事情</del></li>
<li>然后 i++</li>
</ul>
</blockquote>
<blockquote>
<p>「循环的每次找到最小的数，放前面 —— 选择排序」这个思路比较容易想到，但是代码写起来却比较困难</p>
</blockquote>
<p>尝试写循环代码 👇</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">1</span><span class="nx">et</span> <span class="nx">minIndex</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span> 
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
    <span class="k">if</span><span class="p">(</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span> <span class="p">){</span>  
      <span class="nx">index</span> <span class="o">=</span> <span class="nx">i</span> 
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">index</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">sort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;???</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  
    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span>
    <span class="c1">// index 是当前最小数的下标，i 表示当前下标
</span><span class="c1"></span>    <span class="c1">// index 对应的数应该放到 i 处（交换 index 和 i 的元素，这就是👇swap需要实现的）
</span><span class="c1"></span>    <span class="nx">swap</span><span class="p">(</span><span class="nx">numbers</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="c1">// swap 还没实现
</span><span class="c1"></span>    
    <span class="c1">// index、i 都是 index 的意思，建议 i 改名
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="分析-1">分析</h4>
<ul>
<li>怎么知道 <code>i &lt; ???</code> 处应该写什么（结束条件是什么）</li>
<li>提前写好 minIndex 能有效简化问题</li>
<li>用 swap 占位能有效简化问题（虽然还不知道swap应该实现的代码，但是先写个占位符，有助于分析思路）</li>
</ul>
<p>​</p>
<h4 id="一实现-swap">一、实现 swap</h4>
<blockquote>
<p>实现交换 index 和 i 的元素</p>
</blockquote>
<p>1、常规方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">swap</span> <span class="o">=</span> <span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
  <span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">array</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
  <span class="nx">array</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">temp</span>
<span class="p">}</span>
<span class="nx">swap</span><span class="p">(</span><span class="nx">numbers</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>2、JS 解构赋值（析构赋值）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">[</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">]</span>
<span class="c1">// a =&gt; 2
</span><span class="c1">// b =&gt; 1
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h5 id="错误的实现-swap">错误的实现 swap</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">swap</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> 
  <span class="kd">let</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">a</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="nx">b</span>
  <span class="nx">b</span> <span class="o">=</span> <span class="nx">temp</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span><span class="mi">200</span><span class="p">,</span><span class="mi">300</span><span class="p">]</span>  <span class="c1">// 能否实现交换元素位置呢 ？？
</span><span class="c1"></span><span class="nx">swap</span><span class="p">(</span><span class="nx">numbers</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="c1">// [100,200,300]  未实现交换位置
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>你会发现，上述 numbers[1] 和 numbers[2] 的值原封不动</p>
</blockquote>
<p>分析：</p>
<ul>
<li>如果 a / b 是简单类型，传参的时候就会<strong>复制值</strong>
<ul>
<li>numbers[1] 传给 a，相当于 a 复制了 200 这个值，a 与 numbers 并没有连带关系。 b 同理</li>
<li>相当于只是把 a(200) 和 b(300) 交换了值，但这一切与 numbers  并没有关系</li>
</ul>
</li>
<li>而前面常规方法中 numbers 是(数组)对象，传参时是<strong>复制地址</strong>
<ul>
<li><code>let swap = (array, i, j) =&gt; {...}</code>  这里的 array 形参是接收一个数组实参，也就是接收一个对象，对象传递时只是复制了地址，所以 array 形参始终代表了传递进来的实参数组 numbers</li>
<li>所以 array[i] 和 array[j] 交换位置，也就等同于控制 numbers 中对应元素交换了位置</li>
</ul>
</li>
</ul>
<ul>
<li>
<p>这就是【传值 V.S. 传址】的区别</p>
<p>内存图相关知识：所有放在 stack 中的都是直接复制值，放在 heap 里面只能复制地址</p>
</li>
</ul>
<p>​</p>
<h4 id="二分析-i---应该写什么">二、分析 i &lt; ??? 应该写什么</h4>
<blockquote>
<p>怎么知道 i &lt; ??? 处应该写什么</p>
</blockquote>
<p>暴力分析（逐步拆解）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">sort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> 
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;???</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> 
    <span class="nx">swap</span><span class="p">(</span><span class="nx">number</span><span class="err">，</span><span class="nx">index</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>假设 numbers 的长度为 n = 4 👇</p>
<p></p>
<ul>
<li>第一次循环 i = 0，当前遍历的元素下标为 0 ，需要进行比较的元素、其下标 index 的取值范围只能是 1\2\3</li>
<li>第二次循环 i = 1，当前遍历的元素下标为 1 ，需要进行比较的元素、其下标 index 的取值范围只能是 2\3</li>
<li>第三次循环 i = 2，当前遍历的元素下标为 2 ，需要进行比较的元素、其下标 index 的取值范围只能是 3</li>
<li>第四次循环 i = 3，当前遍历的元素下标为 3 ，需要进行比较的元素、其下标 index 无法取值，所以 i 不能等于 3，一定要 i = 3 和 一个空数组进行比较也可以，但多此一举</li>
</ul>
<blockquote>
<p>结论：i 的取值为 0\1\2  【 i 能取到的最大值小于 3 ，也就是  i &lt; numbers 的长度减 1 】</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">){...}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h4 id="发现-2-个问题">发现 2 个问题</h4>
<h5 id="1minindex-查找范围有问题">1、minIndex 查找范围有问题</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>这句话有问题，如果上次循环已经找到了第一个最小的数字，那么之后找最小数字的时候，就可以忽略第一个</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">)</span>  <span class="o">+</span> <span class="nx">i</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="分析-2">👆分析</h5>
<blockquote>
<p>下标 i 、下标 index 对应元素的交换经过</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">  <span class="p">[</span><span class="mi">20</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span>
<span class="p">=&gt;</span> <span class="nx">当前i</span><span class="o">=</span><span class="mi">0</span> <span class="p">,</span> <span class="nx">minIndex</span><span class="p">([</span><span class="mi">20</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">10</span><span class="p">])=&gt;</span><span class="nx">最小值下标index</span><span class="o">=</span><span class="mi">3</span> <span class="p">,</span> <span class="mi">0</span><span class="nx">与3交换位置</span><span class="p">=&gt;[</span><span class="mi">10</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">20</span><span class="p">]</span> <span class="p">,</span> <span class="mi">10</span><span class="nx">位置钉住</span>
<span class="p">=&gt;</span> <span class="nx">当前i</span><span class="o">=</span><span class="mi">1</span> <span class="p">,</span> <span class="nx">minIndex</span><span class="p">([</span><span class="nx">xx</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">20</span><span class="p">])=&gt;</span><span class="nx">最小值下标index</span><span class="o">=</span><span class="mi">3</span> <span class="p">,</span> <span class="mi">1</span><span class="nx">与3交换位置</span><span class="p">=&gt;[</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="p">]</span> <span class="p">,</span> <span class="mi">10</span><span class="o">/</span><span class="mi">20</span><span class="nx">位置钉住</span>
<span class="p">=&gt;</span> <span class="nx">当前i</span><span class="o">=</span><span class="mi">2</span> <span class="p">,</span> <span class="nx">minIndex</span><span class="p">([</span><span class="nx">xx</span><span class="p">,</span><span class="nx">xx</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="p">])=&gt;</span><span class="nx">最小值下标index</span><span class="o">=</span><span class="mi">2</span> <span class="nx">就是当前元素</span> <span class="nx">i</span><span class="err">，</span><span class="nx">无需交换位置</span>
<span class="p">=&gt;</span> <span class="err">（</span><span class="nx">结束</span><span class="err">）</span><span class="nx">i不需要再取3</span><span class="err">，</span><span class="nx">因为上一步已经将最后两个元素进行比较</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>所以说，每一轮 minIndex 的元素，都需要忽略前一个元素，也就是👇</p>
</blockquote>
<ul>
<li>
<p>当 i = 0，需要从 [20, 40, 30, 10] 中找出最小值，忽略 0 个 👉 [10, 40, 30, 20]</p>
</li>
<li>
<p>当 i = 1，需要从 [xx, 40, 30, 20] 中找出最小值，忽略 1 个 👉 [10, 20, 30, 40]</p>
</li>
<li>
<p>当 i = 2，需要从 [xx, xx, 30, 40] 中找出最小值，忽略 2 个 👉 [10, 20, 30, 40]</p>
<p></p>
</li>
</ul>
<blockquote>
<p>综上，发现规律：<strong>i 等于 N，就需要忽略前面 N 个元素</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">所以</span> <span class="p">=&gt;</span>  <span class="nx">minIndex</span><span class="p">(</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">)</span> 
</code></pre></td></tr></table>
</div>
</div><h5 id="2为什么要-i">2、为什么要 +i</h5>
<blockquote>
<ul>
<li>
<p>如果不加 i ， 那么 index 的取值计算，每次都是从 0 开始</p>
</li>
<li>
<p>因为每轮都切掉前面一个元素，导致下标数值发生变化</p>
</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">当</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="err">，</span><span class="nx">忽略0个</span><span class="err">，</span><span class="nx">从</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span> <span class="nx">中找出最小值10</span><span class="o">/</span><span class="nx">下标为</span><span class="err">【</span><span class="mi">3</span><span class="err">】，</span><span class="nx">实际在</span><span class="p">[</span><span class="mi">20</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span><span class="nx">对应下标仍为</span><span class="err">【</span><span class="mi">3</span><span class="err">】</span>
<span class="err">👉</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span>

<span class="nx">当</span> <span class="nx">i</span><span class="o">=</span><span class="mi">1</span><span class="err">，</span><span class="nx">忽略1个</span><span class="p">(</span><span class="nx">下标为0的元素</span><span class="p">)</span><span class="err">，</span><span class="nx">从</span><span class="p">[</span><span class="mi">40</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">20</span><span class="p">]</span><span class="nx">中找出最小值20</span><span class="o">/</span><span class="nx">下标为</span><span class="err">【</span><span class="mi">2</span><span class="err">】</span><span class="nx">实际在</span><span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">20</span><span class="p">]</span><span class="nx">对应下标应为</span><span class="err">【</span><span class="mi">3</span><span class="err">】</span>
<span class="err">👉</span><span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">]</span>

<span class="nx">当</span> <span class="nx">i</span><span class="o">=</span><span class="mi">2</span><span class="err">，</span><span class="nx">忽略2个</span><span class="p">(</span><span class="nx">下标为0</span><span class="o">/</span><span class="mi">1</span><span class="nx">的元素</span><span class="p">)</span><span class="err">，</span><span class="nx">从</span><span class="p">[</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="p">]</span><span class="nx">中找出最小值30</span><span class="o">/</span><span class="nx">下标为</span><span class="err">【</span><span class="mi">0</span><span class="err">】</span><span class="nx">实际在</span><span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="p">]</span><span class="nx">对应下标应为</span><span class="err">【</span><span class="mi">2</span><span class="err">】</span>
<span class="err">👉</span><span class="nx">不交换</span>
</code></pre></td></tr></table>
</div>
</div><p>得出规律</p>
<ul>
<li>i=0时，minIndex =&gt; 3，index =&gt; 3  👉 相当于 minIndex(3) + i(0) = index(3)</li>
<li>i=1时，minIndex =&gt; 2，index =&gt; 3  👉 相当于 minIndex(2) + i(1) = index(3)</li>
<li>i=2时，minIndex =&gt; 0，index =&gt; 2  👉 相当于 minIndex(0) + i(2) = index(2)</li>
</ul>
<blockquote>
<p>index = minIndex(…) + i</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 最终得出
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">)</span>  <span class="o">+</span> <span class="nx">i</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="再次分析-i-">再次分析 i&lt; ???</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">sort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> 
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;???</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">)</span>  <span class="o">+</span> <span class="nx">i</span> 
    <span class="nx">swap</span><span class="p">(</span><span class="nx">number</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>假设 numbers 的长度 n = 4</p>
<p></p>
<ul>
<li>i 等于 3 时，在 <code>minIndex(numbers.slice(3))</code>中， numbers 只剩 numbers[3]  也就是 numbers[i] 本身，只剩一个元素，无法再和其他元素进行比较大小了，也就不需要 minIndex 操作了，<strong>所以 i = 3 是无意义的</strong></li>
<li>所以 i 的取值从 0 开始，最大就到 2 为止</li>
<li><strong>结论</strong>：i 的取值范围是 i &lt; 3 ，也就是 i &lt; n-1</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="循环代码注释版">循环代码（注释版）</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">sort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`----`</span><span class="p">)</span> <span class="c1">// 这个log很精髓
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`i: </span><span class="si">${</span><span class="nx">i</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span> <span class="c1">// 打印i，知道这是第几次比较
</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span> <span class="o">+</span> <span class="nx">i</span> <span class="c1">// 找到最小值下标
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`index: </span><span class="si">${</span><span class="nx">index</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`min: </span><span class="si">${</span><span class="nx">numbers</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">!==</span> <span class="nx">i</span><span class="p">){</span>  <span class="c1">// 如果最小值下标index 与 i 不等，就交换二者位置，相等就什么也不做
</span><span class="c1"></span>      <span class="nx">swap</span><span class="p">(</span><span class="nx">numbers</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> 
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`swap </span><span class="si">${</span><span class="nx">index</span><span class="si">}</span><span class="sb">: </span><span class="si">${</span><span class="nx">i</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span> <span class="c1">// 打印出调换的 index 和 i
</span><span class="c1"></span>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`numbers: </span><span class="si">${</span><span class="nx">numbers</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">numbers</span>
<span class="p">}</span>

<span class="c1">// 下面是sort中引用的两个帮助函数： swap / minIndex
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">swap</span> <span class="o">=</span> <span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>   <span class="c1">// 用于交换位置
</span><span class="c1"></span>  <span class="c1">// let temp = array[i]
</span><span class="c1"></span>  <span class="c1">// array[i] = array[j]
</span><span class="c1"></span>  <span class="c1">// array[j] = temp
</span><span class="c1"></span>  <span class="p">[</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">array</span><span class="p">[</span><span class="nx">j</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">array</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span>  <span class="c1">// 也可以用解构赋值法，交换元素位置
</span><span class="c1"></span><span class="p">}</span>

<span class="kd">let</span> <span class="nx">minIndex</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>  <span class="c1">// 用于找出最小值下标
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">index</span><span class="p">]){</span>
      <span class="nx">index</span> <span class="o">=</span> <span class="nx">i</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">index</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="汇总-">汇总 ✅</h3>
<h4 id="循环代码纯净版">循环代码（纯净版）</h4>
<blockquote>
<p>思路：循环的每轮，找到未排序数组中的最小值的下标，用于交换位置，把最小值放到最前面</p>
<ul>
<li>循环的每轮，都假设 i 为当前轮次的最小值下标，并且 i 还可以表示当前未排序数组的第一位元素。</li>
<li>通过 minIndex 找到未排序数组中的最小值下标</li>
<li>如果最小值下标与假设不符，就通过 swap 交换位置</li>
</ul>
</blockquote>
<p>三部分组成：sort（循环排序）、swap（实现交换位置）、minIndex（找最小值下标）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">sort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>   <span class="c1">// 👈 重点理解！！（边界：为什么-1）
</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span> <span class="o">+</span> <span class="nx">i</span>   <span class="c1">// 👈 重点理解！！（最小值下标：为什么+i）
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">!==</span> <span class="nx">i</span><span class="p">){</span> <span class="nx">swap</span><span class="p">(</span><span class="nx">numbers</span><span class="p">,</span><span class="nx">index</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span> <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">numbers</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">swap</span> <span class="o">=</span> <span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">i</span> <span class="p">,</span><span class="nx">j</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="p">[</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">array</span><span class="p">[</span><span class="nx">j</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">array</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">minIndex</span> <span class="o">=</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">index</span><span class="p">]){</span>
      <span class="nx">index</span> <span class="o">=</span> <span class="nx">i</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">index</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="补充双层-for-循环写法">补充：双层 for 循环写法</h4>
<blockquote>
<p>特点：代码量少，只需一个函数。但思路、算法过程不易理解</p>
</blockquote>
<blockquote>
<p>思路同上：每轮找未排序数组中的最小值的下标，用于交换位置，把最小值放到最前面</p>
<ul>
<li>外层循环：每轮开局，都假设当前遍历元素 j（同时也是未排序数组的第一个元素）为最小值 minIndex</li>
<li>内层循环：当前未排序数组中的第一个元素 j 和 后面元素依次比较大小，确定当前最小值下标</li>
<li>如果当前最小值下标与假设不符，就交换二者位置</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">selectSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// j表示每轮遍历的元素的下标；i表示下一位元素的下标
</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">minIndex</span> <span class="o">=</span> <span class="nx">j</span>  <span class="c1">// 每轮都假设当前元素是最小值，当前元素下标 j 是最小值下标
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> 
      <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">minIndex</span><span class="p">])</span> <span class="p">{</span> <span class="c1">//  当前元素与下一个元素，进行两两比较，找出最小值下标
</span><span class="c1"></span>        <span class="nx">minIndex</span> <span class="o">=</span> <span class="nx">i</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">minIndex</span> <span class="o">!==</span> <span class="nx">j</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 若最小值不是当前元素 j ，那就把最小元素与当前元素交换位置
</span><span class="c1"></span>      <span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">minIndex</span><span class="p">],</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">minIndex</span><span class="p">]]</span>
    <span class="p">}</span> 
    <span class="c1">// 每一轮都从未排序数组中找出最小值，并放到未排序数组的最前面(第一位)
</span><span class="c1"></span>    <span class="c1">// 注：每一轮遍历的当前元素 j 所在位置，就是当前未排序数组的第一位
</span><span class="c1"></span>  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">arr</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="对比递归写法">对比：递归写法</h4>
<blockquote>
<p>特点：思路更简明、但需要帮助函数   【边界处理 ( 中止条件 ) 是关键！！】</p>
</blockquote>
<blockquote>
<p>递归思路：</p>
<ul>
<li>长度大于2，就找最小值放到前面 + 并对后面所有值再次 sort</li>
<li>长度等于2，就直接判断大小 / 交换两个元素位置，然后返回数组。【👈中止条件（边界处理）】</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">minIndex</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">min</span><span class="p">(</span><span class="nx">arr</span><span class="p">))</span>
<span class="kd">let</span> <span class="nx">min</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">min</span><span class="p">(</span> <span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">min</span><span class="p">(</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span> <span class="p">]</span> <span class="p">)</span>  <span class="c1">// 递归
</span><span class="c1"></span>  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="k">return</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">?</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">:</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>   <span class="c1">// 👈 边界处理很关键！！
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">sort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">){</span>
    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">minIndex</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
    <span class="kd">let</span> <span class="nx">minNum</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span>
    <span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">[</span><span class="nx">minNum</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">sort</span><span class="p">(</span><span class="nx">arr</span><span class="p">))</span>   <span class="c1">// 递归
</span><span class="c1"></span>  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="k">return</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">?</span> <span class="nx">arr</span> <span class="o">:</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">reverse</span><span class="p">()</span>   <span class="c1">// 👈 边界处理很关键！！
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="总结">总结</h3>
<blockquote>
<p>选择排序的两种实现方式：递归、循环</p>
</blockquote>
<ul>
<li>思路：每次选择最小 / 大的，放在最前面 / 最后面。选到最后没得选了，就排完了</li>
<li>假设有 10 个元素，就需要选择 8 次、对比 8 次。
<ul>
<li>第 1 个元素不用选，默认第 1 个直接和第 2 个对比</li>
<li>第 10 个也不用选，选第 9 个时，就已经和第 10 个对比了</li>
<li>所以只需要对比 8 次</li>
</ul>
</li>
<li>每次对比，需要进行一次搜索（找到最小值）</li>
<li>所以时间复杂度、大概是「 n 的平方 」</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="总结-">总结 👆</h2>
<h3 id="1-所有递归都能改成循环">1. 所有递归都能改成循环</h3>
<h3 id="2-循环的时候有很多细节">2. 循环的时候有很多细节</h3>
<ul>
<li>循环时特别容易被细节干扰，这些细节很难想清楚</li>
<li>要动手列出表格，找规律</li>
<li>尤其是<strong>边界条件</strong>很难确定</li>
<li>我们没有处理长度为 0 和 1 的数组（if length === 0 | 1 直接 return 即可）</li>
</ul>
<h3 id="3-如果-debug">3. 如果 debug</h3>
<ul>
<li>学会看控制台</li>
<li>学会打 log</li>
<li>打 log 的时候，注意加标记</li>
</ul>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="快速排序-quick-sort-">快速排序 quick sort ⭕️</h2>
<blockquote>
<p>特点就是「快」</p>
</blockquote>
<blockquote>
<p>只讲递归思路，不讲循环思路。通过上面的学习，已经知道递归更简单、循环非常复杂（细节很多）</p>
</blockquote>
<h3 id="递归思路">递归思路</h3>
<blockquote>
<p>以某某为基准</p>
</blockquote>
<ul>
<li>想象你是一个体育委员</li>
<li>你面对的同学为 [12，3，7，21，5，9，4，6]</li>
<li>**「以某某为基准，小的去前面，大的去后面」  **  （不会规定「你」需要站在哪里）</li>
<li>你只需要重复说上面这句话，就能让他们完成排序</li>
<li>神奇不神奇？</li>
<li>用图说明一下</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">12</span><span class="err">，</span><span class="mi">3</span><span class="err">，</span><span class="mi">7</span><span class="err">，</span><span class="mi">21</span><span class="err">，</span><span class="mi">5</span><span class="err">，</span><span class="mi">9</span><span class="err">，</span><span class="mi">4</span><span class="err">，</span><span class="mi">6</span><span class="p">]</span>
			   		 <span class="err">👆</span>
<span class="p">=&gt;</span> <span class="nx">假设站在靠中间的</span> <span class="mi">21</span> <span class="nx">上</span>
<span class="p">=&gt;</span> <span class="nx">喊话</span><span class="err">「</span><span class="nx">以21为基准</span><span class="err">，</span><span class="nx">比21小的</span><span class="err">，</span><span class="nx">站到21前面</span><span class="err">，</span><span class="nx">大的站到后面</span><span class="err">」</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">12</span><span class="err">，</span><span class="mi">3</span><span class="err">，</span><span class="mi">7</span><span class="err">，</span><span class="mi">5</span><span class="err">，</span><span class="mi">9</span><span class="err">，</span><span class="mi">4</span><span class="err">，</span><span class="mi">6</span><span class="err">，</span><span class="mi">21</span><span class="p">]</span>   <span class="nx">经过这一次排序</span><span class="err">，</span><span class="mi">21</span> <span class="nx">的位置就钉住了</span>
						    			 <span class="err">👆</span>
<span class="p">=&gt;</span> <span class="nx">再次随机找一个数</span><span class="err">（</span><span class="nx">从中间找</span><span class="err">），</span><span class="nx">喊话</span><span class="err">「</span><span class="nx">以5为基准</span><span class="err">，</span><span class="nx">比它小的站到前面</span><span class="err">，</span><span class="nx">比它大的站到后面</span><span class="err">」</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">12</span><span class="err">，</span><span class="mi">3</span><span class="err">，</span><span class="mi">7</span><span class="err">，</span><span class="mi">5</span><span class="err">，</span><span class="mi">9</span><span class="err">，</span><span class="mi">4</span><span class="err">，</span><span class="mi">6</span><span class="err">，</span><span class="mi">21</span><span class="p">]</span>
             <span class="err">👆</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="err">，</span><span class="mi">4</span><span class="err">，</span>   <span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="err">，</span><span class="mi">12</span><span class="err">，</span><span class="mi">7</span><span class="err">，</span><span class="mi">9</span><span class="err">，</span><span class="mi">6</span><span class="err">，</span><span class="p">(</span><span class="mi">21</span><span class="p">)]</span>  <span class="c1">// [3,4]是比5小的，[12,7,9,6]是比5大的，5的位置就钉住了
</span><span class="c1"></span>
<span class="p">=&gt;</span> <span class="nx">接下来在</span><span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span><span class="nx">中间任选一个</span><span class="err">（</span><span class="nx">假设选4吧</span><span class="err">），</span><span class="nx">喊话</span><span class="err">「</span><span class="nx">比4大的去前面</span><span class="err">，</span><span class="nx">比4小的去后面</span><span class="err">」</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="err">、</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="err">、</span><span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span><span class="err">、</span><span class="p">(</span><span class="mi">21</span><span class="p">)</span>  <span class="c1">// 此时 4 的位置就钉住了。3固定了吗？不行，每次指向谁，谁才能固定
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="nx">此时指向3</span><span class="err">，</span><span class="nx">发现3就一个元素自身</span><span class="err">，</span><span class="nx">那无需比较</span><span class="err">，</span><span class="mi">3</span><span class="nx">可以固定了</span>
<span class="p">=&gt;</span> <span class="nx">下面跑到右边一组去</span><span class="err">，</span><span class="nx">指向</span> <span class="mi">7</span> <span class="nx">吧</span><span class="err">，</span><span class="nx">喊话</span><span class="err">「</span><span class="nx">比7大的去前面</span><span class="err">，</span><span class="nx">比7小的去后面</span><span class="err">」</span>
<span class="p">=&gt;</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="err">、</span><span class="p">[</span><span class="mi">6</span><span class="p">,(</span><span class="mi">7</span><span class="p">),</span><span class="mi">12</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span><span class="err">、</span><span class="p">(</span><span class="mi">21</span><span class="p">)</span>   <span class="c1">// 假设下面指向6，就一个可以直接固定了
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">6</span><span class="p">),(</span><span class="mi">7</span><span class="p">),[</span><span class="mi">12</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span><span class="err">、</span><span class="p">(</span><span class="mi">21</span><span class="p">)</span>   <span class="c1">// 下面指向 9 吧，所以9就钉住了，喊话「比9大的往后面去...」
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span><span class="err">、</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="err">、</span><span class="p">(</span><span class="mi">21</span><span class="p">)</span>   <span class="c1">// 就剩12一个元素了，此时指向 12，就一个所以直接固定位置
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span><span class="err">、</span><span class="p">(</span><span class="mi">21</span><span class="p">)</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">21</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>思路</p>
<ul>
<li>一共 8 个元素，每指向一个元素，就会固定一个元素的位置</li>
<li>所以只需要指 8 次，就完成排序了</li>
<li>【这就是快速排序的思路】</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="快排源码递归">快排源码（递归）</h3>
<blockquote>
<p>下面是在<a href="http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html" target="_blank" rel="noopener noreffer">阮一峰写的版本</a>基础上、加工成 ES6</p>
</blockquote>
<blockquote>
<p>因为使用递归思想，所以必须考虑中止条件、对各种情况进行相应处理</p>
</blockquote>
<p>逐步分析 👇</p>
<ul>
<li>
<p>如果发现数组<strong>只有一个元素</strong>，就无需排序，直接放行（中止条件）</p>
<p>注意：这里条件必须写 <code>arr.length &lt;= 1</code>  ，不能只有<code>arr.lenght === 1</code> 这会导致递归无法结束</p>
</li>
<li>
<p><a href="https://zh.forvo.com/search/pivot/en/" target="_blank" rel="noopener noreffer">pivot</a>  /ˈpɪvət/ —— 基准、中心点、轴</p>
</li>
<li>
<p>取地板（舍去小数部分）：Math.floor(3.5)  →  3</p>
</li>
<li>
<p>pivot ，这里的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener noreffer">splice</a> 用于删除数组中的某个元素，并把它。（splice 会修改原数组）
因为 JS 中 splice 提取后返回的是一个数组，必须通过 [0] 的方式才能拿到数字本身。并赋值给变量 pivot
拿到基准数，并将基准数从 arr 中删除</p>
</li>
<li>
<p>既然已经拿到基准数的下标，为什么不直接通过 <code>let pivot = arr[pivotIndex]</code> 来获取到基准数，而是还要通过 splice 的返回值来获取基准数、这么麻烦的方式？？
因为这里实际上是完成两个操作：第一目的是获取基准数、第二目的是还需要将基准数从 arr 中删除，所以使用 splice 正好可以同时完成这两个操作</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">quickSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">arr</span> <span class="p">}</span>   <span class="c1">// 最基本的情况：发现指向的数组只剩下一个元素
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">pivotIndex</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>  <span class="c1">// 获取基准的索引、找到靠中间的数字（取地板）
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">pivot</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">pivotIndex</span><span class="p">,</span> <span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>  <span class="c1">// 拿到基准数，并将基准数从 arr 中删除
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">left</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="kd">let</span> <span class="nx">right</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>   <span class="c1">// 遍历被删掉基准数后的数组 （执行喊话操作）
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">pivot</span><span class="p">){</span> 
      <span class="nx">left</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>  <span class="c1">// 如果当前遍历元素小于基准数，就放到left数组中
</span><span class="c1"></span>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
      <span class="nx">right</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="c1">// 由此得到了三部分：左边数组、基准数、右边数组
</span><span class="c1"></span>    <span class="p">}</span> 
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">quickSort</span><span class="p">(</span><span class="nx">left</span><span class="p">).</span><span class="nx">concat</span><span class="p">(</span> <span class="p">[</span><span class="nx">pivot</span><span class="p">],</span> <span class="nx">quickSort</span><span class="p">(</span><span class="nx">right</span><span class="p">)</span> <span class="p">)</span>  <span class="c1">// 👈 代码的核心就是这句
</span><span class="c1"></span>  <span class="c1">// 不断对左边数组快排、右边数组快排、连接两边数组和基准数
</span><span class="c1"></span>  <span class="c1">// 停止条件是 数组只剩下一个元素，直接返回数组
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>思路：</p>
<ul>
<li>对数组「找基准数、然后左右分半」 … 不断递归（循环）这个操作</li>
<li>直到数组只剩一个元素，就不再执行直接返回</li>
</ul>
</blockquote>
<blockquote>
<p>所有算法的思路都很简单，难再代码实现</p>
</blockquote>
<h4 id="代码纯净版">代码（纯净版）</h4>
<blockquote>
<p>思路：</p>
<ul>
<li>每次找一个中间基准数。将数组对半，大于基准数，放到左边数组，小于基准数放到右边数组。</li>
<li>然后再次分别对左边/右边数组排序（层层递归、压栈）</li>
<li>中止（边界）条件：数组&lt;=1个元素，就可以直接返回这个具体值（开始弹栈）</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">quickSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">){</span> <span class="k">return</span> <span class="nx">arr</span> <span class="p">}</span>
  <span class="kd">let</span> <span class="nx">pivotIndex</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
  <span class="kd">let</span> <span class="nx">pivot</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">pivotIndex</span><span class="p">,</span><span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
  <span class="kd">let</span> <span class="nx">left</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="kd">let</span> <span class="nx">right</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">pivot</span><span class="p">){</span> <span class="nx">left</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">}</span>
    <span class="k">else</span><span class="p">{</span> <span class="nx">right</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">quickSort</span><span class="p">(</span><span class="nx">left</span><span class="p">).</span><span class="nx">concat</span><span class="p">([</span><span class="nx">pivot</span><span class="p">],</span> <span class="nx">quickSort</span><span class="p">(</span><span class="nx">right</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="补充说明">补充说明</h3>
<blockquote>
<p>例：<code>let pivot = arr.splice(pivotIndex, 1)[0]</code>  因为 splice 的特性，导致必须用 [0] 来拿到基准数本身</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">16</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="mi">45</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="nx">a</span>  <span class="c1">// [32]
</span><span class="c1"></span><span class="o">------------------------------</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">16</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="mi">45</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
<span class="nx">a</span>  <span class="c1">// 32
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>算法如果涉及到某个语言的细节，这是非常不好的。
最好的算法写法是用「伪代码」来写。自己发明语法，就不用纠结 API 的问题了。</p>
</blockquote>
<blockquote>
<p>面试时，可以尝试鸡贼的写法，询问面试官可否使用「伪代码」来写</p>
</blockquote>
<p>​</p>
<h3 id="思路一句话">思路一句话</h3>
<blockquote>
<p>以某个元素为基准，小的往前放，大的往后放</p>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="归并排序-merge-sort-">归并排序 merge sort ⭕️</h2>
<blockquote>
<p>是当前三种排序算法中最难理解的一个</p>
</blockquote>
<h3 id="不以某某为基准">「不」以某某为基准</h3>
<ul>
<li>想象你是一个体育委员</li>
<li>你面对的同学为 [12，3，7，21，5，9，4，6]</li>
<li><strong>左边一半排好序，右边一半排好序</strong></li>
<li>**然后把左右两边合并（merge）起来 **</li>
<li>神奇不神奇？</li>
<li>用图说明一下</li>
</ul>
<p>​</p>
<h3 id="思路分析">思路分析</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">   <span class="p">[</span><span class="mi">12</span><span class="err">，</span><span class="mi">3</span><span class="err">，</span><span class="mi">7</span><span class="err">，</span><span class="mi">21</span><span class="err">，</span><span class="mi">5</span><span class="err">，</span><span class="mi">9</span><span class="err">，</span><span class="mi">4</span><span class="err">，</span><span class="mi">6</span><span class="p">]</span>

<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">21</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>  <span class="c1">// 【每次都把数组看作左边和右边，并让左右边自己排序】
</span><span class="c1"></span>    <span class="err">↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span>        
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">21</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span>  <span class="c1">// 左右排序完成（先忽略排序细节）
</span><span class="c1"></span>
<span class="p">=&gt;</span> <span class="nx">现在只需要把左右两部分</span><span class="err">【</span><span class="nx">结合</span><span class="err">】</span><span class="nx">起来</span><span class="err">，</span><span class="nx">怎么结合</span><span class="err">？</span> <span class="c1">// 【合并】
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>   
	  <span class="err">👆</span>              <span class="err">👆</span>
    <span class="c1">// 左手指向左边第一个，右手指向右边第一个。比较两个值大小，把较小的放到容器中。 ✅✅
</span><span class="c1"></span>    <span class="c1">// 此时左边的 3 更小，所以先把 3 放到下面容器中。然后左手指向下一个元素 7 
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span>                        <span class="p">]</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>    
	     <span class="err">👆</span>           <span class="err">👆</span>
   <span class="c1">// 此时比较 7 和 4。把较小值 右边的 4 放到容器中。右手指向下一元素
</span><span class="c1"></span>   <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span>                      <span class="p">]</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span> 
	     <span class="err">👆</span>              <span class="err">👆</span>
   <span class="c1">// 此时比较 7 和 5。把较小值 右边的 5 放到容器中。右手指向下一元素
</span><span class="c1"></span>   <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span>                   <span class="p">]</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span> 
	     <span class="err">👆</span>                 <span class="err">👆</span>
   <span class="c1">// 此时比较 7 和 6。把较小值 右边的 6 放到容器中。右手指向下一元素
</span><span class="c1"></span>   <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span>                <span class="p">]</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span> 
	     <span class="err">👆</span>                    <span class="err">👆</span>
   <span class="c1">// 此时比较 7 和 9。把较小值 左边的 7 放到容器中。左手指向下一元素
</span><span class="c1"></span>   <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span>             <span class="p">]</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span> 
	        <span class="err">👆</span>                 <span class="err">👆</span>
   <span class="c1">// 此时比较 12 和 9。把较小值 右边的 9 放到容器中。右边元素排完了.
</span><span class="c1"></span>   <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span>           <span class="p">]</span>

<span class="nx">当某一边元素全部排完</span><span class="err">，</span><span class="nx">另一边元素就可以全部照抄了</span> <span class="err">（</span><span class="nx">左边还剩12</span><span class="p">,</span><span class="mi">21</span><span class="nx">直接放进容器中</span><span class="err">）✅✅</span>
<span class="nx">大功告成</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span>

</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>综上可知：<strong>【合并】的算法</strong>其实很简单：左右两边 index 同时遍历，把较小值 push 到容器中</p>
</blockquote>
<blockquote>
<p>问题是：怎么让左右两边自己先完成排序？ （递归思想 👇）</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">数组</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span> <span class="nx">分成左右两边</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">21</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span> <span class="nx">之后</span>
<span class="nx">将左边</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">21</span><span class="p">]</span> <span class="nx">再次划分为两部分</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span><span class="err">、</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span><span class="mi">21</span><span class="p">]</span>
<span class="nx">将左边</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="nx">再次划分为两部分</span> <span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="err">、</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span>  
<span class="nx">当拆分到只有两个元素时</span><span class="err">，</span><span class="nx">就可以直接比较大小排序了</span><span class="err">（</span><span class="nx">如果不会</span><span class="err">，</span><span class="nx">还可以再进行前面的</span><span class="err">【</span><span class="nx">合并</span><span class="err">】</span><span class="nx">操作</span><span class="err">）</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="err">、</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span> 
<span class="p">=&gt;</span>  <span class="err">👆</span>     <span class="err">👆</span>    <span class="c1">// 左手指向左边第一个，右手指向右边第一个。将较小值放到容器中
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span>   <span class="p">]</span>  
   <span class="c1">// 此时右边全部排完。那么左边直接照抄落到容器后面即可
</span><span class="c1"></span>   <span class="c1">// 大功告成
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">12</span><span class="p">]</span><span class="err">，</span><span class="nx">同理得到</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>上面 从 [12]、 [3] 得到 [3, 12]  这一步是最关键的一步。</li>
<li>将数组 [12,3]，[7,21]  拆分为 [12]  [3]，[7] [21] … **「使得所有数组，变成了排好序的数组」**怎么理解这句？
<ul>
<li>被拆分后，数组中只有一个元素，一个元素也就无需排序。</li>
<li>变相的理解成 **「此时所有的数组，都是无需排序的数组（排好序的数组）」 **</li>
</ul>
</li>
</ul>
<blockquote>
<p>归并排序的算法：默认只能，对两个排好序的数组，进行排序</p>
<ul>
<li>这个算法可能乍一看，很不可思议，好像什么都没做，就排好序了。</li>
<li>一定要拆解步骤，才能发现这里面的神奇之处。</li>
</ul>
</blockquote>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 再合并（左手指左一、右手指右一，较小值放到容器中）✅✅
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">12</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span>
    <span class="err">👆</span>       <span class="err">👆</span>
   <span class="c1">// 比较 3 和 7。把较小值 左边的 3 放到容器中。左手指向下一元素 12
</span><span class="c1"></span>   <span class="p">[</span><span class="mi">3</span><span class="p">,</span>        <span class="p">]</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">12</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span>
       <span class="err">👆</span>    <span class="err">👆</span>
   <span class="c1">// 比较 12 和 7。把较小值 右边的 7 放到容器中。右手指向下一元素 21
</span><span class="c1"></span>   <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span>     <span class="p">]</span>
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">12</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span>
       <span class="err">👆</span>       <span class="err">👆</span>
   <span class="c1">// 比较 12 和 21。把较小值 左边的 12 放到容器中。左边全部排完。右边剩下[21]直接落到后面
</span><span class="c1"></span>   <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span>    <span class="p">]</span>

  <span class="c1">// 大功告成
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="源码分析">源码分析</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">mergeSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">arr</span>
  <span class="p">}</span>
  <span class="kd">let</span> <span class="nx">left</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span> 
  <span class="kd">let</span> <span class="nx">right</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span>
  <span class="k">return</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">mergeSort</span><span class="p">(</span><span class="nx">left</span><span class="p">),</span> <span class="nx">mergeSort</span><span class="p">(</span><span class="nx">right</span><span class="p">))</span>  <span class="c1">// 👈关键
</span><span class="c1"></span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">merge</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="c1">// 👈 核心
</span><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">b</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">a</span>
  <span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">?</span> <span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span> <span class="o">:</span> <span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nx">b</span><span class="p">))</span>
  <span class="c1">// 关键 👆
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="详细注释-">详细注释 👇</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">mergeSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 长度为1的数组，无需排序，所以默认它是已经排好序的数组【这点非常关键】
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">arr</span>
  <span class="p">}</span>
  <span class="c1">// arr.slice(begin,end) 截取数组下标从begin到end的部分，返回新数组（包括begin，不包括end）
</span><span class="c1"></span>  <span class="c1">// 原数组 arr 不改变
</span><span class="c1"></span>  <span class="c1">// 省略 end，则 slice 会一直提取到原数组末尾
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">left</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">// left是从下标0截取到一半的位置（不包括end）
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">right</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">// right是从一半的位置，截取到末尾（包括begin）
</span><span class="c1"></span>  <span class="k">return</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">mergeSort</span><span class="p">(</span><span class="nx">left</span><span class="p">),</span> <span class="nx">mergeSort</span><span class="p">(</span><span class="nx">right</span><span class="p">))</span> 
  <span class="c1">// 左右再次进行拆分操作。拆到数组只有1个元素，认为所有数组已经排好序。
</span><span class="c1"></span>  <span class="c1">// 对排好序的数组进行 merge 合并（这才是归并算法的核心👇见下）
</span><span class="c1"></span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">merge</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>  <span class="c1">// 【前提条件：merge 接收的a、b两个数组，必须是已经排好序的两个数组】！！！
</span><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">b</span>  <span class="c1">// 一个空数组a和一个已经排好序的数组b，那就直接返回排好序的数组b
</span><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">a</span>  <span class="c1">// 同理
</span><span class="c1"></span>  <span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">?</span> <span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span> <span class="o">:</span> <span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nx">b</span><span class="p">))</span>
  <span class="c1">// 👆这里就是递归的难理解之处，需要拆解步骤 ⚠️⚠️见下
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="拆解-merge">拆解 merge⚠️⚠️</h4>
<blockquote>
<p>【前提条件：merge 接收的 a、b 两个数组，必须是已经排好序的两个数组】！！！</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">	 <span class="nx">merge</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">])</span>
<span class="p">=&gt;</span> <span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">?</span> <span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span> <span class="o">:</span> <span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nx">b</span><span class="p">))</span>

<span class="o">---------------------------------------------</span><span class="nx">拆解</span> <span class="err">👇</span><span class="o">-----------------------------------------</span>
<span class="c1">// 第一步：指向两个数组的第一位，比较大小
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span>  
    <span class="err">↑</span>         <span class="err">↑</span>       
   <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="nx">否</span><span class="err">，</span><span class="nx">执行</span> <span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">merge</span><span class="p">(</span> <span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nx">b</span> <span class="p">)</span> <span class="p">)</span> <span class="c1">// 相当于把较小值摘出，再次merge剩余部分
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="nx">merge</span><span class="p">(</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span> <span class="p">)]</span>
               <span class="err">↑</span>       <span class="err">↑</span>
   <span class="mi">5</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="nx">是</span><span class="err">，</span><span class="nx">执行</span> <span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">merge</span><span class="p">(</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="c1">// 把较小值摘出，再次merge剩余部分
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">merge</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">])</span> <span class="p">]</span>
                 <span class="err">↑</span>       <span class="err">↑</span>
   <span class="mi">5</span> <span class="o">&gt;</span> <span class="mi">4</span> <span class="nx">是</span><span class="err">，</span><span class="nx">执行</span> <span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">merge</span><span class="p">(</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="c1">// 把较小值摘出，再次merge剩余部分
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">merge</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="mi">9</span><span class="p">])</span> <span class="p">]</span>
	                  <span class="err">↑</span>       <span class="err">↑</span>
   <span class="mi">5</span> <span class="o">&gt;</span> <span class="mi">9</span> <span class="nx">否</span><span class="err">，</span><span class="nx">执行</span> <span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">merge</span><span class="p">(</span> <span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nx">b</span> <span class="p">)</span> <span class="p">)</span> <span class="c1">// 把较小值摘出，再次merge剩余部分
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="nx">merge</span><span class="p">([</span><span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="mi">9</span><span class="p">])</span> <span class="p">]</span>
		                   <span class="err">↑</span>     <span class="err">↑</span>
   <span class="mi">10</span> <span class="o">&gt;</span> <span class="mi">9</span> <span class="nx">是</span><span class="err">，</span><span class="nx">执行</span> <span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">merge</span><span class="p">(</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="c1">// 把较小值摘出，再次merge剩余部分    
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="nx">merge</span><span class="p">([</span><span class="mi">10</span><span class="p">],</span> <span class="p">[])</span> <span class="p">]</span>   
   											 <span class="err">↑</span>    <span class="err">↑</span>
   <span class="c1">// 满足中止条件：一个空数组、一个已经排好序的数组 ，那就直接返回排好序的数组b
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="补充slice-用法httpsdevelopermozillaorgzh-cndocswebjavascriptreferenceglobal_objectsarrayslice">补充：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener noreffer">slice 用法</a></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">begin</span><span class="p">,</span> <span class="nx">end</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><strong>截取数组下标从 begin 到 end 的部分，返回一个新数组（包括begin，不包括end）</strong></p>
</li>
<li>
<p>**原始数组不改变 **</p>
</li>
<li>
<p>begin （可省略）</p>
<p>提取起始处的索引（从 0 开始），从该索引开始提取原数组元素。
如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取，slice(-2) 表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。
**如果省略 begin，则 slice 从索引 0 开始。 **
如果 begin 大于原数组的长度，则会返回空数组。</p>
</li>
<li>
<p>end（可省略）</p>
<p>提取终止处的索引（从 0 开始），在该索引处结束提取原数组元素。slice 会提取原数组中索引从 begin 到 end 的所有元素（包含 begin，但不包含 end）。
slice(1,4) 会提取原数组中从第二个元素开始一直到第四个元素的所有元素 （索引为 1, 2, 3的元素）。
如果该参数为负数， 则它表示在原数组中的倒数第几个元素结束抽取。 slice(-2,-1) 表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。
**如果 end 被省略，则 slice 会一直提取到原数组末尾。 **
如果 end 大于数组的长度，slice 也会一直提取到原数组末尾。</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 省略两个参数，可以实现深拷贝效果 ？！
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`newArr: </span><span class="si">${</span><span class="nx">newArr</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>  <span class="c1">// 6,2,3,4,5
</span><span class="c1"></span><span class="nx">newArr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">6</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`修改后，newArr: </span><span class="si">${</span><span class="nx">newArr</span><span class="si">}</span><span class="sb">，arr: </span><span class="si">${</span><span class="nx">arr</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>  <span class="c1">// 6,2,3,4,5   1,2,3,4,5 原数组不改变
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p></p>
<h3 id="代码纯净版-1">代码（纯净版）</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">mergeSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">arr</span>
  <span class="p">}</span>
  <span class="kd">let</span> <span class="nx">left</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span> 
  <span class="kd">let</span> <span class="nx">right</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span>
  <span class="k">return</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">mergeSort</span><span class="p">(</span><span class="nx">left</span><span class="p">),</span> <span class="nx">mergeSort</span><span class="p">(</span><span class="nx">right</span><span class="p">))</span>  
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">merge</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">b</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">a</span>
  <span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">?</span> <span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span> <span class="o">:</span> <span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nx">b</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="总结-1">总结</h3>
<h4 id="归并排序的思路">归并排序的思路</h4>
<ul>
<li>
<p>mergeSort</p>
<ul>
<li>拿到一个乱序的数组，会把数组分成<strong>左右两部分</strong>。然后对左右两边继续调用 mergeSort 再拆分 …</li>
<li>拆分到所有元素独自成一个数组，达到中止条件。</li>
</ul>
</li>
<li>
<p>merge</p>
<ul>
<li>接收两个数组作为参数（只接收排好序的数组）</li>
<li>**每次都比较两个数组的首项，并提取出较小的值，放在最前面 **
因为两个数组都是顺序排列，所以首项一定代表其所在数组的最小值。
两个最小值对比得出的较小值，一定是所有元素中的最小值，所以摘出放在最前面</li>
<li>对剩余数组，继续重复上一步操作</li>
</ul>
</li>
</ul>
<p>​</p>
<h4 id="代码">代码</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">mergeSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">){</span> 
    <span class="k">return</span> <span class="nx">arr</span>
  <span class="p">}</span>
  <span class="kd">let</span> <span class="nx">left</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
  <span class="kd">let</span> <span class="nx">right</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
  <span class="k">return</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">mergeSort</span><span class="p">(</span><span class="nx">left</span><span class="p">),</span> <span class="nx">mergeSort</span><span class="p">(</span><span class="nx">right</span><span class="p">))</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">merge</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">b</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">a</span>
  <span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">?</span> <span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="nx">b</span><span class="p">))</span> <span class="o">:</span> <span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">merge</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="图示">图示</h4>
<h5 id="1">1</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">merge</span><span class="p">(</span>     <span class="nx">a</span>    <span class="p">,</span>    <span class="nx">b</span>    <span class="p">)</span>
<span class="nx">merge</span><span class="p">(</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span> <span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span> <span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h5 id="2">2</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">mergeSort</span><span class="p">([</span><span class="mi">12</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">])</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h5 id="3">3</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">mergeSort</span><span class="p">([</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>
<span class="nx">merge</span><span class="p">(</span> <span class="nx">mergeSort</span><span class="p">([</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">]),</span> <span class="nx">mergeSort</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span> <span class="p">)</span>
<span class="nx">merge</span><span class="p">(</span> <span class="nx">merge</span><span class="p">(</span> <span class="nx">mergeSort</span><span class="p">([</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">]),</span> <span class="nx">mS</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">])</span> <span class="p">),</span> <span class="nx">merge</span><span class="p">(</span> <span class="nx">mergeSort</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">]),</span> <span class="nx">mergeSort</span><span class="p">([</span><span class="mi">8</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span> <span class="p">)</span> <span class="p">)</span>
<span class="nx">m</span><span class="p">(</span><span class="nx">m</span><span class="p">(</span><span class="nx">m</span><span class="p">(</span><span class="nx">mS</span><span class="p">([</span><span class="mi">6</span><span class="p">]),</span><span class="nx">mS</span><span class="p">([</span><span class="mi">3</span><span class="p">])),</span> <span class="nx">m</span><span class="p">(</span><span class="nx">mS</span><span class="p">([</span><span class="mi">2</span><span class="p">]),</span><span class="nx">mS</span><span class="p">([</span><span class="mi">7</span><span class="p">]))</span> <span class="p">)</span> <span class="p">,</span> <span class="nx">m</span><span class="p">(</span><span class="nx">m</span><span class="p">(</span><span class="nx">mS</span><span class="p">([</span><span class="mi">1</span><span class="p">]),</span><span class="nx">mS</span><span class="p">([</span><span class="mi">5</span><span class="p">])),</span> <span class="nx">m</span><span class="p">(</span><span class="nx">mS</span><span class="p">([</span><span class="mi">8</span><span class="p">]),</span><span class="nx">mS</span><span class="p">([</span><span class="mi">4</span><span class="p">]))))</span>
<span class="c1">// 达到 mergeSort 中止条件 👆
</span><span class="c1"></span><span class="nx">m</span><span class="p">(</span> <span class="nx">m</span><span class="p">(</span> <span class="nx">m</span><span class="p">([</span><span class="mi">6</span><span class="p">],[</span><span class="mi">3</span><span class="p">]),</span> <span class="nx">m</span><span class="p">([</span><span class="mi">2</span><span class="p">],[</span><span class="mi">7</span><span class="p">])</span> <span class="p">)</span> <span class="p">,</span> <span class="nx">m</span><span class="p">(</span> <span class="nx">m</span><span class="p">([</span><span class="mi">1</span><span class="p">],[</span><span class="mi">5</span><span class="p">]),</span> <span class="nx">m</span><span class="p">([</span><span class="mi">8</span><span class="p">],[</span><span class="mi">4</span><span class="p">])</span> <span class="p">)</span> <span class="p">)</span>
<span class="c1">// 开始 merge 👇
</span><span class="c1"></span><span class="nx">m</span><span class="p">(</span> <span class="nx">m</span><span class="p">(</span> <span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">m</span><span class="p">([</span><span class="mi">6</span><span class="p">],[])</span> <span class="p">)</span> <span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">m</span><span class="p">([</span><span class="mi">7</span><span class="p">],[])</span> <span class="p">)</span> <span class="p">)</span>  <span class="p">...</span>  <span class="p">)</span> <span class="p">)</span> 
<span class="nx">m</span><span class="p">(</span> <span class="nx">m</span><span class="p">(</span> <span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">concat</span><span class="p">([</span><span class="mi">6</span><span class="p">]),</span> <span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">concat</span><span class="p">([</span><span class="mi">7</span><span class="p">])</span> <span class="p">)</span> <span class="p">,</span> <span class="nx">m</span><span class="p">(</span> <span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">concat</span><span class="p">([</span><span class="mi">5</span><span class="p">]),</span> <span class="p">[</span><span class="mi">4</span><span class="p">].</span><span class="nx">concat</span><span class="p">([</span><span class="mi">8</span><span class="p">])</span> <span class="p">)</span> <span class="p">)</span>
<span class="nx">m</span><span class="p">(</span> <span class="nx">m</span><span class="p">(</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span> <span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span> <span class="p">),</span> <span class="nx">m</span><span class="p">(</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">8</span><span class="p">]</span> <span class="p">)</span> <span class="p">)</span>
<span class="nx">m</span><span class="p">(</span> <span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">m</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="p">)</span> <span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="nx">m</span><span class="p">([</span><span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">8</span><span class="p">])</span> <span class="p">)</span> <span class="p">)</span>
<span class="nx">m</span><span class="p">(</span> <span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">m</span><span class="p">([</span><span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">]))</span> <span class="p">)</span> <span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="p">[</span><span class="mi">4</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">m</span><span class="p">([</span><span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">8</span><span class="p">]))</span> <span class="p">)</span> <span class="p">)</span>
<span class="nx">m</span><span class="p">(</span> <span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">concat</span><span class="p">([</span><span class="mi">6</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">m</span><span class="p">([],</span> <span class="p">[</span><span class="mi">7</span><span class="p">])))</span> <span class="p">),[</span><span class="mi">1</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="p">[</span><span class="mi">4</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span> <span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">m</span><span class="p">([],</span> <span class="p">[</span><span class="mi">8</span><span class="p">]))</span> <span class="p">)</span> <span class="p">)</span> <span class="p">)</span>
  <span class="p">...</span>
  <span class="nx">m</span><span class="p">(</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">]</span> <span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p></p>
<p>​</p>
<h3 id="思路一句话-1">思路一句话</h3>
<blockquote>
<p>每次都分两部分，默认是排好序的，如果没有排好序就先排序。然后对排好序的两个数组，进行合并</p>
</blockquote>
<ul>
<li>
<p>怎么把无序的数组排好序？</p>
<p>很简单，（变相理解）不断拆分数组，直到每个数组中只有一个元素，这样每个数组都是排好序的</p>
</li>
<li>
<p>然后两个一组，开始进行合并</p>
</li>
</ul>
<p>​</p>
<blockquote>
<p>归并的思路确实很抽象，是上述三种算法种最难理解的（很哲学）</p>
<p>如果实在无法理解归并排序，那就学到快速排序就不要再学了</p>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="总结-2">总结</h2>
<h3 id="目前理清了三种排序">目前理清了三种排序</h3>
<ul>
<li>选择排序（递归、循环）
<ul>
<li>每次选择最小的，放在最前面。选到最后没得选了，就排完了</li>
</ul>
</li>
<li>快速排序（递归）
<ul>
<li>以某个元素为基准，小的往前放，大的往后放</li>
</ul>
</li>
<li>归并排序（递归）
<ul>
<li>每次都分两部分，默认是排好序的，如果没有排好序就先排序。然后对排好序的两个数组，进行合并</li>
<li>是上述三种算法种最难理解的（很哲学）</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="接下来">接下来</h3>
<ul>
<li>**计数排序 **（循环）
<ul>
<li>比上面的排序算法都要**快 **</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="计数排序-counting-sort-">计数排序 counting sort ⭕️</h2>
<blockquote>
<p>特性：速度非常快</p>
</blockquote>
<blockquote>
<p>注：本节如果提到哈希，实际说的是哈希表（因为我们并没有接触过哈希函数 … ）</p>
</blockquote>
<h3 id="思路">思路</h3>
<ul>
<li>用一个新的<strong>数据结构</strong> —— <strong>哈希表</strong>，来作记录
<ul>
<li>哈希表：一种 key: value 的形式。</li>
<li>JS 的对象可以算是哈希表的一种形式，但不是纯粹的哈希表。</li>
<li>因为 JS 对象具有隐藏属性、函数，而真正的哈希表里没有隐藏属性，只有数据。
所以 JS 对象不能算是一个完全的哈希表</li>
</ul>
</li>
<li>发现数字 N 就记 N：1，如果再次发现 N 就加 1</li>
<li>最后把哈希表的 key 全部打出来，假设 N：m，那么 N 需要打印 m 次</li>
<li>画图演示</li>
</ul>
<p>​</p>
<h4 id="扑克牌">扑克牌</h4>
<ul>
<li>
<p>「一副扑克牌，（不算大小王）共 52 张，乱序 」</p>
</li>
<li>
<p>怎么对这副扑克牌排序 ，实现 【 AAAA , 2222 , 3333 , 4444 , … , JJJJ , QQQQ , KKKK 】 的排序结果 ？？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">K</span><span class="p">,</span><span class="nx">K</span><span class="p">,</span><span class="nx">J</span><span class="p">,</span><span class="nx">J</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span> <span class="p">......</span> <span class="p">]</span>  <span class="c1">// 52张牌乱序
</span><span class="c1"></span> <span class="c1">// 👇 哈希表：每碰到一个数，就对应位置记上一笔。（类似计数器）
</span><span class="c1"></span> <span class="p">{</span>
     <span class="nx">A</span><span class="err">：</span><span class="mi">0</span>
     <span class="mi">2</span><span class="err">：</span><span class="mi">0</span>
     <span class="mi">3</span><span class="err">：</span><span class="mi">0</span>  
     <span class="nx">J</span><span class="err">：</span><span class="mi">0</span> 
     <span class="nx">Q</span><span class="err">：</span><span class="mi">0</span>	 
     <span class="nx">K</span><span class="err">：</span><span class="mi">0</span>
 <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>人类天生就会排序，只不过可能不会用代码表示出来</p>
</li>
</ul>
<p>​</p>
<h3 id="示例分析">示例分析</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">	 <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
<span class="p">=&gt;</span> <span class="nx">发现数字</span> <span class="nx">N</span> <span class="nx">就记</span> <span class="nx">N</span><span class="err">：</span><span class="mi">1</span><span class="err">，</span><span class="nx">再次发现</span> <span class="nx">N</span> <span class="nx">就加</span> <span class="mi">1</span><span class="err">。</span> 
   <span class="nx">同时记录最大值</span> <span class="nx">max</span><span class="err">：</span><span class="nx">假设第一个元素就是最大值</span><span class="err">，</span><span class="nx">max</span> <span class="o">=</span> <span class="mi">0</span><span class="err">。</span><span class="nx">遇到3</span> <span class="o">&lt;</span><span class="mi">12</span><span class="err">，</span><span class="nx">max不变</span><span class="err">；</span><span class="mi">9</span><span class="o">&lt;</span><span class="mi">12</span><span class="err">，</span><span class="nx">max不变</span> <span class="p">...</span>
	 <span class="nx">后面的数都比</span> <span class="mi">12</span> <span class="nx">小</span><span class="err">，</span><span class="nx">所以</span> <span class="nx">max</span> <span class="nx">就是</span> <span class="mi">12</span>
<span class="p">=&gt;</span> <span class="p">{</span>
     <span class="mi">12</span><span class="o">:</span><span class="mi">1</span>  <span class="p">(</span><span class="nx">max</span><span class="p">)</span>
     <span class="mi">3</span><span class="o">:</span><span class="mi">1</span>
     <span class="mi">9</span><span class="o">:</span><span class="mi">1</span>
     <span class="mi">4</span><span class="o">:</span><span class="mi">1</span>
     <span class="mi">2</span><span class="o">:</span><span class="mi">1</span>
     <span class="mi">8</span><span class="o">:</span><span class="mi">1</span>
     <span class="mi">5</span><span class="o">:</span><span class="mi">1</span>
     <span class="mi">7</span><span class="o">:</span><span class="mi">1</span>
   <span class="p">}</span>
   <span class="nx">现在完成两件事</span><span class="err">：</span>
   <span class="mi">1</span><span class="err">、</span><span class="nx">x最大值为12</span>
   <span class="mi">2</span><span class="err">、</span><span class="nx">所有数据次数记录完毕</span><span class="err">。</span>
   <span class="nx">接下来</span><span class="err">，</span><span class="nx">开始循环</span>
   
<span class="p">=&gt;</span> <span class="nx">设定</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">~</span> <span class="mi">12</span><span class="p">(</span><span class="nx">max</span><span class="p">)</span><span class="err">，</span><span class="nx">如果发现哈希表里存在</span> <span class="nx">i</span> <span class="nx">值</span><span class="err">，</span><span class="nx">就把</span> <span class="nx">i</span> <span class="nx">值打印到一个数组里面</span>
   <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">哈希表中没有</span> <span class="mi">0</span> <span class="p">=&gt;</span> <span class="p">[]</span>
   <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">哈希表中没有</span> <span class="mi">1</span> <span class="p">=&gt;</span> <span class="p">[]</span>
   <span class="nx">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">哈希表中有</span> <span class="mi">2</span>  <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="p">]</span>
   <span class="nx">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">哈希表中有</span> <span class="mi">3</span>  <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span> <span class="p">]</span>
       <span class="mi">4</span>               <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span> <span class="p">]</span>
       <span class="mi">5</span>               <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span> <span class="p">]</span>
       <span class="mi">6</span>               <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span> <span class="p">]</span>
       <span class="mi">7</span>               <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span> <span class="p">]</span>
       <span class="mi">8</span>               <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span> <span class="p">]</span>
       <span class="mi">9</span>               <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span> <span class="p">]</span>
       <span class="mi">10</span>              <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span> <span class="p">]</span>
       <span class="mi">11</span>              <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span> <span class="p">]</span>
       <span class="mi">12</span>              <span class="p">=&gt;</span>  <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">12</span> <span class="p">]</span>   <span class="c1">// 👈 排序完成
</span><span class="c1"></span>
  <span class="c1">// 当 i 从 0 ~ 12 走完，排好序的数组也就得出了
</span><span class="c1"></span>  <span class="c1">// 需要两个条件姐就可以实现排序：哈希表、最大值max
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="初步代码">初步代码</h3>
<blockquote>
<p>补充： <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in" target="_blank" rel="noopener noreffer">in 操作符用法</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">countSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">hashTable</span> <span class="o">=</span> <span class="p">{},</span> <span class="nx">max</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// 遍历数组，得到【哈希表】和【max】
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="k">in</span> <span class="nx">hashTable</span><span class="p">)){</span> <span class="c1">// 发现数字 N 就记 N：1，再次发现 N 就加 1
</span><span class="c1"></span>      <span class="nx">hashTable</span><span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
      <span class="nx">hashTable</span><span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">max</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// max：谁比我大，我就等于谁
</span><span class="c1"></span>      <span class="nx">max</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> 
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;=</span> <span class="nx">max</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// 遍历哈希表
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="nx">j</span> <span class="k">in</span> <span class="nx">hashTable</span><span class="p">){</span>
      <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span>   <span class="c1">// 如果发现这个值在hash表中，就push到数组
</span><span class="c1"></span>    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">result</span>
<span class="p">}</span> 
</code></pre></td></tr></table>
</div>
</div><blockquote>
<h4 id="上述代码有bug">上述代码有bug</h4>
<ul>
<li>遍历哈希表时，没有考虑「一个值在 hash 表中出现多个」的情况</li>
</ul>
</blockquote>
<h4 id="举例验证-bug">举例验证 bug</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
<span class="c1">// 得到 hash表 👇
</span><span class="c1"></span><span class="p">{</span>
  <span class="mi">4</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="mi">2</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
  <span class="mi">5</span><span class="o">:</span> <span class="mi">1</span>  
<span class="p">}</span>
<span class="c1">// 遍历哈希表
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;=</span> <span class="nx">max</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">){</span>  
  <span class="k">if</span><span class="p">(</span><span class="nx">j</span> <span class="k">in</span> <span class="nx">hashTable</span><span class="p">){</span>  <span class="c1">//  如果发现 j 在 hash表 中，就 push 到数组
</span><span class="c1"></span>    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span>   
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// j 取 0~5 （如果发现 j 在hash表中，就把 j 添加到数组）
</span><span class="c1">// j=0  =&gt;  []
</span><span class="c1">// j=1  =&gt;  []
</span><span class="c1">// j=2  =&gt;  [2, ]
</span><span class="c1">// j=3  =&gt;  [2, ]
</span><span class="c1">// j=4  =&gt;  [2,4, ]
</span><span class="c1">// j=5  =&gt;  [2,4,5 ]    遍历完成，结果数组中少了两个元素 2
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="完整代码-">完整代码 ✅</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">countSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">hashTable</span> <span class="o">=</span> <span class="p">{},</span> <span class="nx">max</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="k">in</span> <span class="nx">hashTable</span><span class="p">){</span>
      <span class="nx">hashTable</span><span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span> 
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
      <span class="nx">hashTable</span><span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">max</span><span class="p">){</span> <span class="nx">max</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;=</span> <span class="nx">max</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">j</span> <span class="k">in</span> <span class="nx">hashTable</span><span class="p">){</span>
      <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">hashTable</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  
        <span class="c1">// 假设 j 出现了 3 次，就需循环 3 次(添加 j)的操作。
</span><span class="c1"></span>        <span class="c1">// i 可以取几个值，循环就执行几次，所以 i 应该取 3 个值 （从0开始就取 i = 0，1，2）
</span><span class="c1"></span>        <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span>
      <span class="p">}</span>  
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">result</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="思路总结-">思路总结 ✅</h3>
<ul>
<li>遍历数组，得到一个 hashTable（记录出现过的元素 key，以及出现次数 value）。</li>
<li>同时，在这次遍历数组的过程中，找到数组最大值
（开局假设第一个元素就是最大值max，依次比较，大于 max 的元素，就重新赋值给 max）</li>
<li>此时，已知 hashTable 和 max。</li>
<li>已知最大值 max，所以全部元素的取值都在 0 ~ max 这个范围之间</li>
<li>遍历 0 ~ max 这个范围之间的所有元素，如果与哈希表的 key 一致，就之间把这个元素 push 到数组中
<ul>
<li>如果当前 key(元素) 的 value(出现次数) 不是 1，说明原数组中有 N 个该元素，那就需要把 N 个该元素都在此时 push 到数组中。所以 push 操作需要循环执行 N 次</li>
<li>获取这个 value 次数，作为 for 循环执行次数 i 的依据，来控制 push 的执行轮次</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="计数排序的特点-">计数排序的特点 ✅</h3>
<h4 id="数据结构不同">数据结构不同</h4>
<ul>
<li>
<p>使用了额外的 hashTable （数据结构）</p>
<ul>
<li>计数排序中使用的数据结构升级了</li>
<li>算法也就直接升级了，非常快</li>
</ul>
</li>
<li>
<p>只遍历数组一遍（不过还要遍历一次 hashTable ）</p>
<ul>
<li>之前的排序算法，都会多次遍历数组</li>
<li>选择排序：找第一个最小值，需遍历一遍数组。找第二个最小值，需再把余下元素遍历 …（重复遍历）</li>
</ul>
</li>
<li>
<p>为什么计数排序，可以这么厉害，就遍历一遍数组呢？</p>
<p>答：就是因为有 hashTable，这叫做「用空间换时间」</p>
<ul>
<li>hashTable 就是存储在内存中的一块空间。</li>
<li>用多余的空间就可以节省多余的时间。</li>
<li>通常空间、时间只能二选一：「用空间换时间」或「用时间换空间」
（除非你智商碾压，二者都能实现）</li>
</ul>
</li>
</ul>
<p>​</p>
<h4 id="时间复杂度对比">时间复杂度对比</h4>
<ul>
<li>选择排序 O(n^2）</li>
<li>快速排序 O(n log2n)</li>
<li>归并排序 O(n log2n)</li>
<li>计数排序 O(n + max)
<ul>
<li>时间最少、速度最快，但空间占的多</li>
<li>先遍历一个长度为 n 的数组，再遍历一个长度为 max 的数组</li>
</ul>
</li>
</ul>
<blockquote>
<p>时间复杂度，到底是怎么计算出来的呢？</p>
<ul>
<li>其实有特别简单的方法，几乎不需要太复杂的数学知识  👇 [详见下](# 时间复杂度)</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h3 id="题外话字母出现次数">题外话：字母出现次数</h3>
<p>前面讲过案例「如何统计一段文字中字母出现的次数，并打印结果」
其实就是借鉴了【计数排序】的思维</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">str</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">{}</span>
  <span class="kd">let</span> <span class="nx">newStr</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^a-zA-Z]/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>   <span class="c1">// `HiImSam`
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newStr</span><span class="p">)</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">newStr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">newStr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="k">in</span> <span class="nx">result</span><span class="p">){</span>
      <span class="nx">result</span><span class="p">[</span><span class="nx">newStr</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
      <span class="nx">result</span><span class="p">[</span><span class="nx">newStr</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">result</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="sb">`Hi, I&#39;m Sam`</span>
<span class="kd">let</span> <span class="nx">newStr</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/a-zA-Z/g</span><span class="p">)</span>
<span class="nx">count</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
<span class="o">--------------------------------------------------</span>
<span class="p">{</span>
  <span class="nx">H</span><span class="o">:</span> <span class="mi">1</span>
  <span class="nx">I</span><span class="o">:</span> <span class="mi">1</span>
  <span class="nx">S</span><span class="o">:</span> <span class="mi">1</span>
  <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span>
  <span class="nx">i</span><span class="o">:</span> <span class="mi">1</span>
  <span class="nx">m</span><span class="o">:</span> <span class="mi">2</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="补充正则">补充正则</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">提取数字</span><span class="p">....</span><span class="nx">value</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^\d]/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="nx">提取中文</span><span class="p">....</span><span class="nx">value</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^\u4E00-\u9FA5]/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="nx">提取英文</span><span class="p">....</span><span class="nx">value</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^a-zA-Z]/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="sb">`Hi, I&#39;m Sam`</span>
<span class="kd">let</span> <span class="nx">newStr</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/[a-zA-Z]/g</span><span class="p">)</span>  <span class="c1">//  [&#34;H&#34;, &#34;i&#34;, &#34;I&#34;, &#34;m&#34;, &#34;S&#34;, &#34;a&#34;, &#34;m&#34;]
</span><span class="c1">// match 返回数组
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">newStr</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^a-zA-Z]/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>  <span class="c1">// `HiImSam` （把字符串中所有非字母字符，替换为空）
</span><span class="c1">// replace 返回字符串 （替换思想）
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<p>​</p>
<h2 id="时间复杂度">时间复杂度</h2>
<blockquote>
<p>其实就是举一个比较大的数组，看一下当前算法的规模</p>
</blockquote>
<h3 id="以选择排序为例">以「选择排序」为例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 假设数组长度为 1000 （且处于最坏情况，每次都需要对比，没有任何一次是不需要对比的）
</span><span class="c1"></span><span class="nx">第1次遍历</span><span class="err">，</span><span class="nx">要从</span> <span class="p">[</span><span class="mi">0</span><span class="p">,...,</span><span class="mi">999</span><span class="p">]</span> <span class="nx">找到最小值</span> <span class="nx">min1</span><span class="err">（</span><span class="nx">放到首位</span><span class="err">），</span><span class="nx">需要对比999次</span>
<span class="nx">第2次遍历</span><span class="err">，</span><span class="nx">要从</span> <span class="p">[</span><span class="mi">1</span><span class="p">,...,</span><span class="mi">999</span><span class="p">]</span> <span class="nx">找到最小值</span> <span class="nx">min2</span><span class="err">（</span><span class="nx">放到首位</span><span class="err">），</span><span class="nx">需要对比998次</span>
<span class="nx">第3次遍历</span><span class="err">，</span><span class="nx">要从</span> <span class="p">[</span><span class="mi">2</span><span class="p">,...,</span><span class="mi">999</span><span class="p">]</span> <span class="nx">找到最小值</span> <span class="nx">min3</span><span class="err">（</span><span class="nx">放到首位</span><span class="err">），</span><span class="nx">需要对比997次</span>
<span class="p">...</span>
<span class="nx">第999次遍历</span><span class="err">，</span><span class="nx">要从</span> <span class="p">[</span><span class="mi">998</span><span class="p">,</span><span class="mi">999</span><span class="p">]</span> <span class="nx">找到最小值</span> <span class="nx">min999</span><span class="err">（</span><span class="nx">放到首位</span><span class="err">），</span><span class="nx">需要对比1次</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>长度为 1000 的数组，最坏情况下（每次都需要对比）  1+2+3+4+…+998+999</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">   <span class="p">=&gt;</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">4</span> <span class="o">+</span> <span class="err">…</span> <span class="o">+</span> <span class="mi">998</span> <span class="o">+</span> <span class="mi">999</span>
   <span class="p">=&gt;</span> <span class="mi">1</span><span class="err">≈</span><span class="mi">1000</span> <span class="o">+</span> <span class="mi">2</span><span class="err">≈</span><span class="mi">1000</span> <span class="o">+</span> <span class="mi">3</span><span class="err">≈</span><span class="mi">1000</span> <span class="o">+</span> <span class="mi">4</span><span class="err">≈</span><span class="mi">1000</span> <span class="o">+</span> <span class="p">...</span> <span class="o">+</span> <span class="mi">555</span><span class="err">≈</span><span class="mi">1000</span> <span class="o">+</span> <span class="p">...</span> <span class="o">+</span> <span class="mi">998</span><span class="err">≈</span><span class="mi">1000</span> <span class="o">+</span> <span class="mi">999</span><span class="err">≈</span><span class="mi">1000</span>
   <span class="p">=&gt;</span> <span class="nx">大概1000个1000</span><span class="err">，</span><span class="nx">也就是</span> <span class="mi">1000</span><span class="o">^</span><span class="mi">2</span> 
   <span class="p">=&gt;</span> <span class="nx">n</span><span class="o">^</span><span class="mi">2</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>综上：</p>
<ul>
<li>选择排序：每次找最小的</li>
<li>时间复杂度，是 n 的平方  （这是最坏情况）</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="以快速排序为例">以「快速排序」为例</h3>
<blockquote>
<p>找一个基准数，然后左右分两队</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 假设数组长度为 1000
</span><span class="c1"></span>    <span class="p">[</span><span class="mi">0</span><span class="p">,...,</span><span class="mi">500</span><span class="p">,...,</span><span class="mi">999</span><span class="p">]</span>
            <span class="err">↑</span>
     <span class="err">↙</span>            <span class="err">↘</span>        <span class="c1">// 以500为基准，依次和 500 进行比较
</span><span class="c1"></span><span class="p">[</span><span class="mi">0</span><span class="p">,...,</span><span class="mi">500</span><span class="p">)</span> <span class="p">,</span> <span class="p">[</span><span class="mi">500</span><span class="p">,...,</span><span class="mi">999</span><span class="p">]</span> <span class="c1">// 左边全是比500小的，比较了 500 次。右边全是比500大的，比较了 500 次
</span><span class="c1"></span>
<span class="c1">// 然后 [0,...,500) 中再找一个基准数 250
</span><span class="c1"></span>       <span class="p">[</span><span class="mi">0</span><span class="p">,...,</span><span class="mi">250</span><span class="p">,...,</span><span class="mi">500</span><span class="p">)</span>
               <span class="err">↑</span>
            <span class="err">↙</span>   <span class="err">↘</span>
         <span class="mi">250</span>      <span class="mi">250</span>  <span class="c1">// 左边是比250小的，比较了250次。右边是比250大的，比较了250次，以此类推
</span><span class="c1"></span>
<span class="c1">// 得出图示 👇
</span><span class="c1"></span>       <span class="p">[</span><span class="mi">0</span><span class="p">,...,</span><span class="mi">250</span><span class="p">,...,</span><span class="mi">500</span><span class="p">)</span>      <span class="p">[</span><span class="mi">500</span><span class="p">,...,</span><span class="mi">999</span><span class="p">]</span>       <span class="o">|</span>    <span class="p">=&gt;</span> <span class="mi">500</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">=</span> <span class="mi">1000</span> <span class="nx">次</span>
               <span class="err">↑</span>                      <span class="err">↑</span>             <span class="o">|</span> 
            <span class="err">↙</span>   <span class="err">↘</span>                 <span class="err">↙</span>   <span class="err">↘</span>          <span class="o">|</span> 
         <span class="mi">250</span>      <span class="mi">250</span>            <span class="mi">250</span>     <span class="mi">250</span>        <span class="o">|</span>    <span class="p">=&gt;</span> <span class="mi">250</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">=</span> <span class="mi">1000</span> <span class="nx">次</span>
        <span class="err">↙</span> <span class="err">↘</span>     <span class="err">↙</span> <span class="err">↘</span>          <span class="err">↙</span> <span class="err">↘</span>    <span class="err">↙</span> <span class="err">↘</span>       <span class="o">|</span>
      <span class="mi">125</span>  <span class="mi">125</span>  <span class="mi">125</span>  <span class="mi">125</span>      <span class="mi">125</span>  <span class="mi">125</span>  <span class="mi">125</span>  <span class="mi">125</span>    <span class="o">|</span>    <span class="p">=&gt;</span> <span class="mi">125</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">=</span> <span class="mi">1000</span> <span class="nx">次</span>
             <span class="p">...</span>                      <span class="p">...</span>                        <span class="p">...</span>

<span class="cm">/* 
</span><span class="cm">	虽然每一排比较次数都是 1000 次，但是减少的速度特别快（每次折半） 
</span><span class="cm">	看 1000 能除以多少次 2，就知道这个树形图，能分裂出多少个 1000 次
</span><span class="cm">	1000 ≈ 1024 = 2^10，1000大概是2的10次方，所以最多除以10次。
</span><span class="cm">	如果把树形图比喻成塔，塔最高10层，每层1000次】
</span><span class="cm">*/</span>

	 <span class="nx">复杂度</span><span class="err">：</span>
<span class="p">=&gt;</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">10</span><span class="nx">层</span>   <span class="c1">// log(2)1000 ≈ 10层  (2^10=1024)
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="nx">N</span> <span class="o">*</span> <span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="nx">N</span> 
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>【快速排序】的时间复杂度，是 N * log(2)N</p>
</blockquote>
<p>​</p>
<blockquote>
<p>基本上画出 4 步的图示，就能找到规律，无需花费更多精力来记忆</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="以归并排序为例">以「归并排序」为例</h3>
<blockquote>
<p>思路：每次对半分。对排好序的两个数组，进行合并</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 假设数组长度为 1000
</span><span class="c1"></span>            <span class="p">[</span><span class="mi">0</span><span class="p">,...,</span><span class="mi">999</span><span class="p">]</span>
              <span class="err">↙</span>    <span class="err">↘</span>    <span class="c1">// 拆分成左右两部分，各操作 1 次（共2次）
</span><span class="c1"></span><span class="nx">merge</span><span class="p">([</span><span class="mi">0</span><span class="p">,...,</span><span class="mi">500</span><span class="p">],</span> <span class="p">[</span><span class="mi">500</span><span class="p">,...,</span><span class="mi">999</span><span class="p">])</span>   <span class="c1">// merge合并：分别用左边500个数和右边500个数做对比（共1000次操作）
</span><span class="c1"></span>        <span class="err">↙</span> <span class="err">↘</span>            <span class="err">↙</span> <span class="err">↘</span>  <span class="c1">// 拆分成左右两部分，各操作 1 次（共4次）
</span><span class="c1"></span>      <span class="mi">250</span>    <span class="mi">250</span>      <span class="mi">250</span>    <span class="mi">250</span>   <span class="c1">// merge：拆分成两部分，每部分250个数，逐个对比（共1000次操作） 
</span><span class="c1"></span>     <span class="err">↙↘</span>    <span class="err">↙↘</span>      <span class="err">↙↘</span>    <span class="err">↙↘</span>
   <span class="mi">125</span> <span class="mi">125</span> <span class="mi">125</span> <span class="mi">125</span>  <span class="mi">125</span> <span class="mi">125</span> <span class="mi">125</span> <span class="mi">125</span>  <span class="c1">// merge：拆分，每部分125个数，逐个对比（共1000次操作）
</span><span class="c1"></span>                  <span class="p">...</span>
<span class="c1">// 拆分到，每个数组只有一个元素，就停止：[0]，[1]，[2]...[998]，[999]
</span><span class="c1">// 问题就转换为：1000个数对半拆分，需要多少次就能拆分成1个1个的。 2^10 = 1024
</span><span class="c1">// 所以拆分10次就会停止，得到每个数组只有一个元素
</span><span class="c1">// 所以，需要10次拆分，每次拆分需要执行1000次合并操作
</span><span class="c1"></span>                  
   <span class="nx">复杂度</span><span class="err">：</span>
<span class="p">=&gt;</span> <span class="mi">1000</span><span class="nx">次合并</span> <span class="o">*</span> <span class="mi">10</span><span class="nx">次拆分</span>   <span class="c1">// log(2)1000 ≈ 10次拆分   (2^10=1024)
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="mi">1000</span> <span class="o">*</span> <span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="mi">1000</span>
<span class="p">=&gt;</span> <span class="nx">N</span> <span class="o">*</span> <span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="nx">N</span>                  
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js">   <span class="nx">merge</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">])</span> 
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span>  
<span class="p">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span>    <span class="c1">// 6个元素需要对比5次 / 1000个元素需要对比999次
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="nx">四舍五入就是</span> <span class="nx">n</span> <span class="nx">个元素需要对比</span> <span class="nx">n</span> <span class="nx">次</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<blockquote>
<p>「归并排序」的 时间复杂度：与快速排序一致  N * log(2)N</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="以计数排序为例">以「计数排序」为例</h3>
<blockquote>
<p>思路：每次对半分。对排好序的两个数组，进行合并</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 假设数组长度为 1000
</span><span class="c1"></span>   <span class="p">[</span><span class="mi">0</span><span class="p">,...,</span><span class="mi">999</span><span class="p">]</span>
<span class="p">=&gt;</span> <span class="nx">对数组进行一次遍历</span><span class="err">：</span><span class="nx">得出</span> <span class="nx">计数的</span><span class="err">【</span><span class="nx">哈希表</span><span class="err">】</span><span class="nx">hashTable</span> <span class="err">，</span><span class="nx">并找出最大值</span><span class="err">（</span><span class="nx">假设max是100</span><span class="err">）</span>  <span class="err">（</span><span class="mi">1000</span><span class="nx">次操作</span><span class="err">）</span>
<span class="p">=&gt;</span> <span class="nx">hashTable</span> <span class="nx">里就添加了1000个数据</span>
<span class="p">=&gt;</span> <span class="nx">遍历</span> <span class="nx">min</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">~</span> <span class="nx">max</span><span class="err">（</span><span class="mi">100</span><span class="err">），</span><span class="nx">对应哈希表</span><span class="err">，</span><span class="nx">发现相同值</span><span class="err">，</span><span class="nx">就push输出</span> <span class="err">（</span><span class="mi">100</span><span class="nx">次操作</span><span class="err">）</span>  
                  
   <span class="nx">复杂度</span><span class="err">：</span>
<span class="p">=&gt;</span> <span class="mi">1000</span> <span class="o">+</span> <span class="mi">100</span>  <span class="c1">// 元素在0~100之间
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="nx">n</span> <span class="o">+</span> <span class="nx">max</span>   
<span class="c1">// 如果哈希表有最小值、最大值，如元素在50~100之间，则应该再减去min（只需比较 50 次）
</span><span class="c1"></span><span class="p">=&gt;</span> <span class="nx">n</span> <span class="o">+</span> <span class="nx">max</span> <span class="o">-</span> <span class="nx">min</span> <span class="p">(</span><span class="nx">默认min是0</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>「计数排序」的 时间复杂度： n + max - min (默认min是0)</p>
</blockquote>
<p>​</p>
<blockquote>
<p>基本上画出 4 步的图示，就能找到规律，无需花费更多精力来记忆</p>
<p>不需要做特别精细的分析，只需要看衰减的规律即可</p>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="算法学习总结">算法学习总结</h2>
<h3 id="心法">心法</h3>
<ul>
<li>战略上藐视敌人：思想上暗示自己算法是特别简单的东西</li>
<li>战术上重视敌人：在真正写代码时，要非常重视每一个细节  +1  -1    &lt;   &lt;=   … （细节难以确定时，写写画画逐步分析）</li>
</ul>
<h3 id="特点">特点</h3>
<ul>
<li>思路都很简单</li>
<li>细节都很多
<ul>
<li>不需要多强的智力，需要的是耐心、细心</li>
</ul>
</li>
<li>**多画表，多画图，多 log **</li>
<li>如果实在不想陷入 JS 的细节，可以用「伪代码」</li>
</ul>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="还有哪些排序算法-">还有哪些排序算法 ⁉️</h2>
<p>冒泡排序 <a href="https://visualgo.net/zh/sorting">https://visualgo.net/zh/sorting</a>   点击 BUB    （visualgo只提供伪代码思路参考）</p>
<p>插入排序 <a href="https://visualgo.net/zh/sorting">https://visualgo.net/zh/sorting</a> 点击 INS</p>
<p>希尔排序 <a href="http://sorting.at/">http://sorting.at/</a>  自己选择 Shell Sort</p>
<p>基数排序 <a href="https://visualgo.net/zh/sorting">https://visualgo.net/zh/sorting</a>  点击 RAD</p>
<p></p>
<p></p>
<h3 id="冒泡排序-bubble-sort">冒泡排序 bubble sort</h3>
<blockquote>
<p>最 low 的排序。<a href="https://zhuanlan.zhihu.com/p/45501356" target="_blank" rel="noopener noreffer">思路</a></p>
</blockquote>
<blockquote>
<p><a href="https://visualgo.net/zh/sorting">https://visualgo.net/zh/sorting</a>    （查看图示 + 伪代码）</p>
</blockquote>
<p>两两对比，较大的往后接着对比。</p>
<p>每一轮找出一个最大值，冒泡到最后</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">bubbleSort</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>    <span class="c1">// i 代表轮次（两两比较）
</span><span class="c1"></span>    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">i</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// j 代表当前轮选中元素的下标
</span><span class="c1"></span>      <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]){</span>
        <span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]]</span>  <span class="c1">// 交换元素
</span><span class="c1"></span>      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">arr</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h3 id="插入排序-insertion-sort">插入排序 Insertion Sort</h3>
<blockquote>
<p>参考扑克牌思路，很好理解。  <a href="https://zhuanlan.zhihu.com/p/45638675" target="_blank" rel="noopener noreffer">思路</a></p>
</blockquote>
<blockquote>
<p>扑克牌思路：大部分人抓完牌，手上拿着的牌就已经都是排好序的。</p>
</blockquote>
<blockquote>
<p><a href="https://visualgo.net/zh/sorting">https://visualgo.net/zh/sorting</a> 点击 INS   （查看图示 + 伪代码）</p>
</blockquote>
<p>拿起一张牌，依次和前面的牌对比（所以起始值从下标为 1 的元素开始，才能保证前面有值可对比）</p>
<p>比前面的小，就插入到前面去</p>
<p></p>
<h4 id="思路-1">思路</h4>
<ul>
<li>**从第一个元素开始，该元素可以认为已经被排序 **</li>
<li>取出下一个元素，**在已经排序的元素序列中从后向前扫描 **</li>
<li>把取出的元素放到已排序的元素中间的合适位置</li>
<li>重复步骤2~3</li>
</ul>
<p>就像排队一样，依次每次挑一个同学，把该同学“插入”到已经排好的部分队伍里。</p>
<p>​</p>
<h4 id="代码-1">代码</h4>
<ul>
<li>开局默认第一个元素（前面元素）是已经排好序的。</li>
<li>取出下一个待排序元素，与前面已排好序的元素进行比较</li>
<li>如果后面的元素小于前面已排好序的某个元素，就把后面元素插入到前面已排好序的元素的**相应位置 **</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 插入法JS版
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">insertionSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// 开局默认下标0的元素已排序，所以待排序数组的下标取值从1开始
</span><span class="c1"></span>  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// i 表示当前待排序数组元素的下标
</span><span class="c1"></span>    <span class="c1">// j 表示当前已排序数组元素的下标（默认下标0的元素已排序,所以 j 初始值一定为0）
</span><span class="c1"></span>    <span class="c1">// 已排序元素始终在待排序元素的前面，所以 j 的取值一定小于 i
</span><span class="c1"></span>    <span class="c1">// 综上 j = [0,i)
</span><span class="c1"></span>    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">i</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> 
      <span class="c1">// 当前取出的待排序元素arr[i]，依次和前面已排序元素进行比较
</span><span class="c1"></span>      <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">])</span> <span class="p">{</span>  
        <span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>  <span class="c1">// 在 arr[j] 前面插入 arr[i]，然后把原本的 arr[i] 删除
</span><span class="c1"></span>        <span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">// 因为上一步已经在前面插入一个元素，导致后面元素下标后移一位，原本需要被删除 i 位置上的元素，现在的下标变成了 i+1
</span><span class="c1"></span>        <span class="k">break</span>  <span class="c1">// 跳出内层循环，i++
</span><span class="c1"></span>      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">28</span><span class="p">]</span>
<span class="nx">insertionSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>插入法普通版 for</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">insertionSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">temp</span><span class="p">;</span> <span class="nx">j</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="p">}</span>
    <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">temp</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="o">-----------------------------------------------------</span>
<span class="kd">function</span> <span class="nx">insertionSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">temp</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">arr</span><span class="p">;</span>
<span class="p">}</span>
<span class="o">-------------------------------------------------------</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">28</span><span class="p">]</span>
<span class="nx">insertionSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>插入法普通版 while</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">insertionSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="nx">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">temp</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
      <span class="nx">j</span><span class="o">--</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">arr</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">28</span><span class="p">]</span>
<span class="nx">insertionSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="希尔排序-shell-sort">希尔排序 Shell Sort</h3>
<blockquote>
<p>极其少见</p>
<p>算法应该是比较复杂的，是生想出来的。现实生活中没有可参考的例子、数学中也没有例子</p>
</blockquote>
<blockquote>
<p>1959年，一个叫 Shell 的人发明的</p>
</blockquote>
<p>貌似是间隔着排，先大间隔、然后中间间隔 …  可能会节省一些中间的步骤</p>
<p>​</p>
<h3 id="基数排序-radix-sort">基数排序 Radix Sort</h3>
<blockquote>
<p>特别适合用于**多位数排序 **</p>
<ul>
<li>指未排序数组中的元素，有一位数得、也有两位数、三位数、四位数、五位数的 … （形式多样的数组）</li>
</ul>
</blockquote>
<blockquote>
<p>死记硬背，顺序非常重要，记错了就完了（但是可以理解这个算法的精神 👇 ）</p>
</blockquote>
<p></p>
<ul>
<li>先根据个位数排序，个位是 0 的从下往上叠在一起，个位是 1 的从下往上叠在一起 …
<ul>
<li>然后<strong>按照个位 0-9 堆叠的从下往上的顺序</strong>（这个顺序非常重要）展开所有元素，成一个数组</li>
</ul>
</li>
<li>对这个新数组，根据十位数进行排序，十位数 0-9 从下往上堆叠。
<ul>
<li>然后再按0-9从下往上的顺序展开成数组</li>
</ul>
</li>
<li>…</li>
<li>所有位数都重复上述操作</li>
<li>最后展开的数组，就是排完序的数组</li>
</ul>
<p></p>
<p>​</p>
<p>​</p>
<h3 id="堆排序-heap-sort">堆排序 Heap Sort</h3>
<ul>
<li>堆排序应该是排序的终点了，因为没有比堆排序更复杂的排序了</li>
<li>其他复杂的排序，基本都是在堆排序的基础上进行改进而已</li>
<li>搞定了堆排序，就搞定了**「树」**这个数据结构，就搞定了排序的最难的一部分</li>
</ul>]]></description>
</item></channel>
</rss>

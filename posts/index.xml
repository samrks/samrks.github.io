<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - Sam&#39;s Garage</title>
        <link>http://samrks.github.io/posts/</link>
        <description>所有文章 | Sam&#39;s Garage</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>ryuukousen@gmail.com (Sam)</managingEditor>
            <webMaster>ryuukousen@gmail.com (Sam)</webMaster><lastBuildDate>Wed, 16 Sep 2020 21:41:13 &#43;0800</lastBuildDate><atom:link href="http://samrks.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>JS 函数的执行时机 🚀⌚</title>
    <link>http://samrks.github.io/javascript-timing-of-call-a-function/</link>
    <pubDate>Wed, 16 Sep 2020 21:41:13 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-timing-of-call-a-function/</guid>
    <description><![CDATA[<p>​</p>
<h2 id="js-函数的执行时机">JS 函数的执行时机</h2>
<blockquote>
<p>执行时机，或说调用时机，是 JS 函数的要素之一</p>
</blockquote>
<blockquote>
<p>先抛出结论：JS 函数的执行时机不同，结果不同</p>
</blockquote>
<p>下面逐例分析：函数调用执行的时机，是如何影响结果的</p>
<p>​</p>
<h3 id="例1">例1</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>输出：[未知]</p>
<p>分析：函数只有被调用才会执行。上述代码中的函数 fn 并未被调用，输出更无从说起。</p>
<p>​</p>
<h3 id="例2">例2</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>输出：1</p>
<p>​</p>
<h3 id="例3">例3</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>   
  <span class="c1">// 看到这可能会认为是打印 1
</span><span class="c1"></span>  <span class="c1">// 但此时函数未被调用，可以忽略整个函数。不要提前把 a=1 带入到函数中做记号
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1">// a变成2
</span><span class="c1"></span><span class="nx">fn</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>输出：2</p>
<p>​</p>
<h3 id="例4">例4</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">()</span>   <span class="c1">// 看时机：函数被调用，此时 a=1
</span><span class="c1"></span><span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
</code></pre></td></tr></table>
</div>
</div><p>输出：1</p>
<p>​</p>
<h3 id="例5">例5</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">()</span>
<span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
</code></pre></td></tr></table>
</div>
</div><p>输出：2</p>
<p>分析：</p>
<ul>
<li>setTimeout 口语化理解相当于“过一会”、“尽快”（意思是忙完当前手头事，就立马执行里面的语句）</li>
<li>举个栗子：
<ul>
<li>你在打游戏（运行这段代码）</li>
<li>别人叫你去吃饭（<code>fn()</code>被调用）</li>
<li>你说马上去”（遇到 setTimeout ）</li>
<li>“马上去” 的潜台词，是要先把这局游戏打完才去😜（继续向下执行<code> a=2</code>）</li>
<li>现在打完了（其他代码全部走完）</li>
<li>可以去吃饭了 （<code>console.log(a)</code>）</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="例6-">例6 💡</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  
  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span> 
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  
  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>输出：6  6  6  6  6  6</p>
<p>分析：</p>
<ul>
<li>
<p>首先，<code>let</code> 声明一个 <code>i </code>。 <code>let i</code> 写在 for 循环外，所以  <code> let i</code>（声明 i）不会参与到循环中。始终只有一个 <code>i</code></p>
</li>
<li>
<p>开始 for 循环，逐步拆分 ↓</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">i</span><span class="o">=</span><span class="mi">0</span> <span class="err">（</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="err">）</span>
<span class="nx">遇到</span> <span class="nx">setTimeout</span><span class="err">（</span><span class="nx">执行完其他代码</span><span class="err">，</span><span class="nx">再执行这里</span> <span class="nx">setTimeout</span> <span class="nx">中的语句</span><span class="err">）——</span> <span class="nx">stand</span> <span class="nx">by</span> <span class="err">①</span>
<span class="nx">i</span><span class="o">++</span>  <span class="p">=&gt;</span>  <span class="nx">i</span><span class="o">=</span><span class="mi">1</span> <span class="err">（</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="err">）</span>
<span class="nx">遇到</span> <span class="nx">setTimeout</span> <span class="err">——</span> <span class="nx">stand</span> <span class="nx">by</span> <span class="err">②</span>
<span class="nx">i</span><span class="o">++</span>  <span class="p">=&gt;</span>  <span class="nx">i</span><span class="o">=</span><span class="mi">2</span> <span class="err">（</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="err">）</span> 
<span class="nx">遇到</span> <span class="nx">setTimeout</span> <span class="err">——</span> <span class="nx">stand</span> <span class="nx">by</span> <span class="err">③</span>
<span class="nx">i</span><span class="o">++</span>  <span class="p">=&gt;</span>  <span class="nx">i</span><span class="o">=</span><span class="mi">3</span> <span class="err">（</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="err">）</span>
<span class="nx">遇到</span> <span class="nx">setTimeout</span> <span class="err">——</span> <span class="nx">stand</span> <span class="nx">by</span> <span class="err">④</span>
<span class="nx">i</span><span class="o">++</span>  <span class="p">=&gt;</span>  <span class="nx">i</span><span class="o">=</span><span class="mi">4</span> <span class="err">（</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="err">）</span>
<span class="nx">遇到</span> <span class="nx">setTimeout</span> <span class="err">——</span> <span class="nx">stand</span> <span class="nx">by</span> <span class="err">⑤</span>
<span class="nx">i</span><span class="o">++</span>  <span class="p">=&gt;</span>  <span class="nx">i</span><span class="o">=</span><span class="mi">5</span> <span class="err">（</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="err">）</span>
<span class="nx">遇到</span> <span class="nx">setTimeout</span> <span class="err">——</span> <span class="nx">stand</span> <span class="nx">by</span> <span class="err">⑥</span>
<span class="nx">i</span><span class="o">++</span>  <span class="p">=&gt;</span>  <span class="nx">i</span><span class="o">=</span><span class="mi">6</span>  <span class="nx">不符合条件</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="err">。</span> <span class="nx">循环结束</span><span class="err">。</span>
<span class="nx">stand</span> <span class="nx">by</span> <span class="nx">完毕</span><span class="err">，</span><span class="nx">开始依次执行</span> <span class="err">①②③④⑤⑥，</span><span class="nx">此时</span> <span class="nx">i</span><span class="o">=</span><span class="mi">6</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 6
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 6
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 6
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 6
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 6
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 6
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h4 id="变形">变形</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// 相当于只有一个 i
</span><span class="c1"></span>  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  
  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 6 6 6 6 6 6
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="例7-">例7 💡</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> <span class="c1">// 相当于在每一次循环的代码块中各声明了一个i。一共声明了6个i
</span><span class="c1"></span>  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span> 
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>输出： 0  1  2  3  4  5</p>
<p>分析：</p>
<ul>
<li>
<p>for 和 let  连用，可以近似的理解为：每轮循环创建了一个作用域 {  }</p>
</li>
<li>
<p>let 特性，仅在当前作用域有效</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
    <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="err">，</span> <span class="nx">满足</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span>
    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1">// stand by ①
</span><span class="c1"></span><span class="p">}</span>
<span class="p">{</span>
    <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="err">，</span> <span class="nx">满足</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span>
    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1">// stand by ②
</span><span class="c1"></span><span class="p">}</span>
<span class="p">...</span>
<span class="p">{</span>
    <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">5</span><span class="err">，</span> <span class="nx">满足</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span>
    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1">// stand by ⑥
</span><span class="c1"></span><span class="p">}</span>
<span class="p">{</span>
    <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">6</span><span class="err">，</span> <span class="nx">不满足</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span> <span class="err">，</span><span class="nx">循环结束</span>
<span class="p">}</span>
<span class="c1">// 此时 stand by 完毕，开始依次执行 ①②③④⑤⑥
</span><span class="c1">// 因为 let 存在作用域限制，所以每个 log 打印的都是其所在作用域的 i
</span><span class="c1"></span><span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// 0
</span><span class="c1"></span><span class="p">}</span>
<span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// 1
</span><span class="c1"></span><span class="p">}</span>
<span class="p">...</span>
<span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// 5
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h4 id="变形1">变形1</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="o">!</span> <span class="kd">function</span><span class="p">(</span><span class="nx">j</span><span class="p">){</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span>
    <span class="p">},</span> <span class="mi">0</span><span class="p">)</span>
  <span class="p">}(</span><span class="nx">i</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>输出：0  1  2  3  4  5</p>
<p>分析：利用「立即执行函数」的参数，保存下 i 值</p>
<p>​</p>
<h4 id="变形2">变形2</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">setTimeout</span><span class="p">((</span><span class="nx">j</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span>
  <span class="p">},</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>输出：0  1  2  3  4  5</p>
<p>分析：利用 setTimeout 的第 3 个参数，保存下 i 值。一旦定时器到期，会作为参数传递给 function</p>]]></description>
</item><item>
    <title>JS 函数的基本介绍</title>
    <link>http://samrks.github.io/javascript-function/</link>
    <pubDate>Mon, 14 Sep 2020 20:35:51 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-function/</guid>
    <description><![CDATA[<p>定义函数、call / apply / bind、大师调用法、调用时机、作用域、闭包、形参、调用栈、函数提升、arguments、this、箭头函数、立即执行函数。</p>
<p>​</p>
<h2 id="函数是对象">函数是对象</h2>
<ul>
<li>
<p>函数怎么会是对象……看起来不一样啊</p>
</li>
<li>
<p>解释起来非常抽象，请直接接受这个结论</p>
</li>
</ul>
<blockquote>
<p>函数是一种特殊的对象</p>
</blockquote>
<h2 id="定义一个函数">定义一个函数</h2>
<h3 id="1-具名函数">1️⃣ 具名函数</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">函数名</span><span class="p">(</span><span class="nx">形式参数1</span><span class="p">,</span> <span class="nx">形式参数2</span><span class="p">){</span>
  <span class="nx">语句</span>
  <span class="k">return</span> <span class="nx">返回值</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="2-匿名函数">2️⃣ 匿名函数</h3>
<blockquote>
<p>上面的具名函数，去掉函数名就是匿名函数</p>
<p>匿名函数，通常要声明一个变量进行赋值，不然函数就消失了</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">){</span> <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>也叫函数表达式</p>
<p>ps：等号左边是声明变量 a 并赋值。等号右边部分，才是函数表达式</p>
<h3 id="例">例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>
<span class="p">}</span>
<span class="o">-------------------------------</span> <span class="nx">上面是具名函数</span><span class="err">，</span><span class="nx">函数名为fn</span><span class="err">；</span>
<span class="o">-------------------------------</span> <span class="nx">下面是匿名函数</span><span class="err">，</span><span class="nx">函数没有名字</span><span class="err">，</span><span class="nx">但是声明一个变量a来容纳这个函数的地址</span>
<span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="变态">变态</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span><span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span><span class="p">}</span>
<span class="c1">// fn(1,2)  // 报错 fn 不存在：fn is not defined    // 为什么？
</span><span class="c1"></span><span class="nx">a</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>  <span class="c1">// 3
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>解：</p>
<ul>
<li>如果 fn 函数式的声明是在等号右边，那么这个 fn 的作用域就只能在等号右边、这块<font color="purple"><strong>高亮</strong></font>的范围</li>
<li>出了这块高亮范围，fn 就不存在</li>
<li>其他地方要用这个函数，只能用 a 来调用</li>
</ul>
<p>​</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span><span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span><span class="p">}</span>
<span class="nx">fn</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>  <span class="c1">// 3
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果没有左边赋值的操作，那么 fn 在哪里都可以用</li>
</ul>
<p>​</p>
<h3 id="3-箭头函数">3️⃣ 箭头函数</h3>
<p>写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">f1</span> <span class="o">=</span> <span class="nx">x</span> <span class="p">=&gt;</span> <span class="nx">x</span><span class="o">*</span><span class="nx">x</span> 
<span class="kd">let</span> <span class="nx">f2</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span> <span class="c1">// 多个形参，则圆括号不能省
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">f3</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span> <span class="p">}</span>  <span class="c1">// 写了return，则花括号不能省
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">f4</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;x+y=&#39;</span><span class="p">);</span> <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span> <span class="p">}</span> <span class="c1">// 多语句时，花括号不能省，return不能省
</span></code></pre></td></tr></table>
</div>
</div><p>变态：函数返回值是一个对象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// let f5 = (x,y) =&gt; {name:x, age: y} // JS 中 {} 被优先当做【代码块(label语法)】的起始，而不是对象
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">f5</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="nx">x</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="nx">y</span><span class="p">})</span>  
</code></pre></td></tr></table>
</div>
</div><ul>
<li>函数返回值是一个对象，需要加个圆括号，表示里面是一个整体，不是一个代码块</li>
<li>可以看出 JS 这门语言每次添加新的语法时，可能都多少会有点小bug，大概是因为它要兼容以前得版本，所以有些错误它也解决不了（不是门很严谨的语言）</li>
</ul>
<p>​</p>
<h3 id="4-用构造函数">4️⃣ 用构造函数</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 单语句
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;return x+y&#39;</span><span class="p">)</span>   
<span class="c1">// 多语句
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;console.log(\&#39;hi\&#39;); return x+y&#39;</span><span class="p">)</span>   
<span class="nx">f</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> 
<span class="c1">// hi 
</span><span class="c1">// 3
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>基本没人用，但是能让你知道函数是谁构造的</li>
<li>所有函数都是 Function 构造出来的</li>
<li>包括 Object、Array、Function 也是 （这里都省略了 window. ）
<ul>
<li>Function 本身也是由自己构造出来的（在对象原型的笔记中解释过）</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="函数自身-vs-函数调用区别">函数自身 vs. 函数调用（区别）</h2>
<blockquote>
<p><code>fn</code>    V.S.    <code>fn()</code></p>
</blockquote>
<h3 id="函数自身">函数自身</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>
<span class="nx">fn</span>
</code></pre></td></tr></table>
</div>
</div><p>结果</p>
<ul>
<li>不会有任何结果</li>
<li>因为 fn 没有执行（执行就是调用，调用就是执行）</li>
</ul>
<h3 id="函数调用">函数调用</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>
<span class="nx">fn</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>结果</p>
<ul>
<li>打印出 hi</li>
<li>有圆括号才是调用</li>
</ul>
<h3 id="再进一步">再进一步</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>  <span class="c1">// 很多人认为fn就是函数，实际上这里的fn只是保存了函数的地址
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">fn2</span> <span class="o">=</span> <span class="nx">fn</span> <span class="c1">// 把fn保存的地址复制给fn2
</span><span class="c1"></span><span class="nx">fn2</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>结果</p>
<ul>
<li><strong>fn 保存了匿名函数的地址</strong></li>
<li>这个地址被复制给了 fn2</li>
<li>fn2() 调用了匿名函数</li>
<li>实际上 fn 和 fn2 都是对匿名函数的<strong>引用</strong>而已</li>
<li>真正的函数既不是 fn 也不是 fn2</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="函数的要素9-个">函数的要素（9 个）🤩</h2>
<blockquote>
<p>9个概念需要知道，其他函数的教程，都没这里讲的细</p>
</blockquote>
<h3 id="每个函数都有这些东西">每个函数都有这些东西</h3>
<ol>
<li>
<p>调用时机</p>
</li>
<li>
<p>作用域</p>
</li>
<li>
<p>闭包</p>
</li>
<li>
<p>形式参数</p>
</li>
<li>
<p>返回值</p>
</li>
<li>
<p>调用栈</p>
</li>
<li>
<p>函数提升</p>
</li>
<li>
<p><strong>arguments（除了箭头函数）</strong></p>
</li>
<li>
<p><strong>this（除了箭头函数）</strong></p>
<blockquote>
<p>JS 的三座大山</p>
<ol>
<li>原型、原型链</li>
<li><strong>this</strong></li>
<li>AJAX</li>
</ol>
</blockquote>
<blockquote>
<p>搞懂这三座大山，vue、react、angular … 就都可以去学了。</p>
<p>但如果三个有任何一个没搞清楚，那就还是 JS 没入门的水平。你会感觉一直在 JS 的屏障/瓶颈中</p>
</blockquote>
</li>
</ol>
<p>​</p>
<p>​</p>
<h3 id="1-调用时机-">1️⃣ 调用时机 🧐</h3>
<blockquote>
<p>JS 函数的执行时机 —— 时机不同，结果不同</p>
</blockquote>
<h4 id="例1">例1</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>问打印出多少？答：不知，因为没有调用（函数只有被调用才会执行）</p>
<h4 id="例2">例2</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>问打印出多少？答：1</p>
<h4 id="例3">例3</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>   
  <span class="c1">// 很多人看到这，会认为是打印 1。
</span><span class="c1"></span>  <span class="c1">// 但此时函数根本没执行过，可以完全忽略整个函数，不要提前就把 a=1 带入到函数中做记号
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1">// 到这里，a变成2了
</span><span class="c1"></span><span class="nx">fn</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>问打印出多少？答：2</p>
<h4 id="例4">例4</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">()</span>   <span class="c1">// 看时机：函数被调用，此时a=1
</span><span class="c1"></span><span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
</code></pre></td></tr></table>
</div>
</div><p>问打印出多少？答：1</p>
<h4 id="例5">例5</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>  <span class="c1">// setTimeout 相当于过一会、尽快（意思是当前手头事忙完，就立马执行里面的语句）
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">()</span>
<span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
</code></pre></td></tr></table>
</div>
</div><p>举个栗子：你在打游戏（运行这段js），你妈叫你去吃饭（fn()被调用） ，你说马上去（执行setTimeout）。说了马上去，意思是要先把这局游戏打完才去（继续向下执行a=2）。现在打完了(js全部走完)，可以吃饭 console.log(a)</p>
<p>问打印出多少？答：2</p>
<h4 id="例6-">例6 💡</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1">// 注意：let i 写在for外面，相当于 i 只声明了一个。let i（声明i）的过程不会参加到循环中
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  
  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>  <span class="c1">// 忙完手头事（for循环）立马执行里面的语句 console.log   // 【异步】
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 6 6 6 6 6 6 
</span><span class="c1"></span>  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>上面代码块打印出多少？答：不是 0、1、2、3、4、5，而是 6 个 6</p>
<p>变形：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// 相当于只有一个 i
</span><span class="c1"></span>  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 6 6 6 6 6 6
</span><span class="c1"></span>  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
<span class="o">-------------------------------------------------</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>   <span class="c1">// 这样相当于在每一次循环体的代码块中各声明了一个i，一共声明了6个i
</span><span class="c1"></span>  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 0 1 2 3 4 5 
</span><span class="c1"></span>  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="例7-">例7 💡</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> <span class="c1">// 这样相当于在每一次循环体的代码块中各声明了一个i，一共声明了6个i
</span><span class="c1"></span>  <span class="c1">// 每次循环都会创建一个i 进行赋值，然后留在这个空间中。6次循环创建6个新的i在各自的{}中，互不干涉
</span><span class="c1"></span>  <span class="c1">// 细品：类似于刻舟求剑，每次刻一下，剑的位置竟随着舟的移动也发生了变化
</span><span class="c1"></span>  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span> 
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>问打印出多少？答：是 0、1、2、3、4、5。</p>
<ul>
<li>因为 JS 在 for 和 let 一起用的时候会加东西，每次循环会多创建一个 i（我服了 JS）</li>
</ul>
<p>​</p>
<h4 id="总结">总结</h4>
<ul>
<li>setTimeout 就是尽快、等一会，但是不是现在。相当于先干完手头的，然后去做 setTimeout 里面的</li>
<li>JS 函数的「调用时机」，由于变量的值可能会发生改变，所以每次求值的时候都要想一想所有代码执行的顺序是怎样的。如果不能确定代码执行的顺序，那么最终结果可能就是不对的。</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="2-作用域">2️⃣ 作用域</h3>
<blockquote>
<p>每个函数都会默认创建一个作用域</p>
</blockquote>
<blockquote>
<p>作用域特别简单，就是画圈圈</p>
</blockquote>
<h4 id="例1-1">例1</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>           <span class="c1">// let声明的变量的作用域仅在当前这个 {...} 中
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// 报错 a is not defined  // a不存在
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>问：是不是因为 fn 没执行，导致 a 不存在 ？？</p>
</blockquote>
<h4 id="例2-1">例2</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// 即使 fn 执行了，a 还是不存在，仍旧报错
</span></code></pre></td></tr></table>
</div>
</div><p>答：就算 fn 执行了，也访问不到作用域里面的 a</p>
<ul>
<li>跟执不执行没有关系。</li>
<li>let 声明的变量的作用域非常好找。</li>
<li>在 let 声明语句的前面找到一个 <code>{</code>  ，在 let 语句后面找到一个 <code>}</code>  ，这俩半个花括号组成的作用域<code>{ } </code>，就是 let 变量的作用域</li>
</ul>
<p>​</p>
<h4 id="全局变量-vs-局部变量">全局变量 vs. 局部变量</h4>
<ul>
<li>在<strong>顶级作用域</strong>声明的变量是【全局变量】</li>
<li><strong>挂载到 window 上的属性</strong>是【全局变量】</li>
<li>其他都是【局部变量】</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>     <span class="c1">// let 声明的变量 a，仅在fn函数的{}内生效，所以是局部变量
</span><span class="c1"></span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span>   <span class="c1">// let声明的变量b，是在顶级作用域声明的，所以是全局变量，全局可访问
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">c</span> <span class="o">=</span> <span class="mi">3</span>  <span class="c1">// 在window上声明变量c，c就是全局变量，全局可访问
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">f1</span><span class="p">(){</span>
  <span class="nb">window</span><span class="p">.</span><span class="nx">d</span> <span class="o">=</span> <span class="mi">4</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">f2</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">f1</span><span class="p">()</span> <span class="c1">// 3   // 函数里也可以访问到 window 上的 c
</span><span class="c1"></span><span class="nx">f2</span><span class="p">()</span> <span class="c1">// 4   // f2函数中能访问到f1函数中，声明在window 上的变量d
</span></code></pre></td></tr></table>
</div>
</div><p>只要是挂载在window上的变量，不论在哪个作用域声明/挂载的，都是全局变量，全局可访问</p>
<blockquote>
<p>为什么有些方法可以直接使用，因为是挂在 window 上的</p>
<p>例如： Object / window.Object 、parseInt / window.parseInt  …</p>
</blockquote>
<h4 id="函数可嵌套">函数可嵌套</h4>
<blockquote>
<p>作用域也可嵌套</p>
<p>就近原则</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(){</span>
  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>

  <span class="kd">function</span> <span class="nx">f2</span><span class="p">(){</span>   <span class="c1">// 在f1函数中声明了一个f2函数
</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>  
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> 
  <span class="nx">a</span> <span class="o">=</span> <span class="mi">3</span>
  <span class="nx">f2</span><span class="p">()</span> 
<span class="p">}</span>
<span class="nx">f1</span><span class="p">()</span>  
<span class="c1">// 1
</span><span class="c1">// 2
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="作用域规则">作用域规则</h4>
<p>如果多个作用域有同名变量 a  （如上）</p>
<ul>
<li>那么查找 a 的声明时，就向上取最近的作用域</li>
<li>简称「<strong>就近原则</strong>」</li>
<li>查找 a（分清作用域）的过程与函数执行无关
<ul>
<li>函数的作用域与函数执行无关 —— 静态作用域（又叫 词法作用域，属于编译原理的知识）</li>
<li>函数的作用域与函数执行有关 —— 动态作用域，但 JS 里没有动态作用域，只有静态</li>
</ul>
</li>
<li>但 a 的值与函数执行有关</li>
</ul>
<h4 id="例4-">例4 ⭐️</h4>
<blockquote>
<p>看懂这个例子，作用域就没什么问题了</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(){</span>
  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="kd">function</span> <span class="nx">f2</span><span class="p">(){</span>
    <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="kd">function</span> <span class="nx">f3</span><span class="p">(){</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">a</span> <span class="o">=</span> <span class="mi">22</span>
    <span class="nx">f3</span><span class="p">()</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="mi">100</span>
  <span class="nx">f2</span><span class="p">()</span>
<span class="p">}</span>
<span class="nx">f1</span><span class="p">()</span>
<span class="c1">// 1
</span><span class="c1">// 22
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>作用域总结：==「就近原则」==</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="3-闭包">3️⃣ 闭包</h3>
<blockquote>
<p>闭包上面讲过了  ——  讲过了吗？！</p>
</blockquote>
<h4 id="重看例4">重看例4</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(){</span>
  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="kd">function</span> <span class="nx">f2</span><span class="p">(){</span>
    <span class="o">---------------------------</span>
    <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="kd">function</span> <span class="nx">f3</span><span class="p">(){</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>  <span class="c1">// f3里面用到了外层函数f2的变量 a ，那么 a 和 f3 就是闭包
</span><span class="c1"></span>    <span class="p">}</span>
    <span class="o">---------------------------</span>
    <span class="nx">a</span> <span class="o">=</span> <span class="mi">22</span>
    <span class="nx">f3</span><span class="p">()</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="mi">100</span>
  <span class="nx">f2</span><span class="p">()</span>
<span class="p">}</span>
<span class="nx">f1</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p><strong>闭包</strong></p>
<ul>
<li><strong>如果一个函数用到了外部的变量</strong></li>
<li><strong>那么这个函数加这个变量</strong></li>
<li><strong>就叫做闭包</strong>
<ul>
<li>左边的 a 和 f3 组成了闭包</li>
<li>闭包的用途以后讲，这里先把【闭包】的形式记下来即可</li>
<li>你也可以先搜一下</li>
</ul>
</li>
</ul>
<blockquote>
<p>“ 闭包这么简单吗？怎么看到网上讲的各种花里胡哨…  ”</p>
<p>frank：在 JS 基础知识这方面，我很有自信，我比其他所有在网上教你的人都懂。网上教的乱七八糟的</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="4-形式参数">4️⃣ 形式参数</h3>
<h4 id="形式参数的意思就是非实际参数">形式参数的意思就是非实际参数</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>
<span class="p">}</span>
<span class="c1">// 其中 x 和 y 就是【形参】，因为并不是实际的参数，x/y并【不代表任何实际的值】，仅代表参数的【顺序】
</span><span class="c1"></span>
<span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="c1">// 调用 add 时，1 和 2 是实际参数【实参】，会被赋值给 x 和 y
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>其他 JS 教程可能会说： JS 传参时分为「值传递」和「地址传递」。</p>
<p>上面记法太复杂，如果你<strong>搞懂了内存图</strong>，就知道没那么麻烦。</p>
<ul>
<li>实际上，<strong>传参就是把 stack 里记的内容拷贝给形参</strong>（不要区分什么值和地址，太麻烦了）</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>
<span class="p">}</span>
<span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>  <span class="c1">// 3
</span><span class="c1">// x接收到的 1，和 add(1,2) 这里的1，不是同一个1，只是复制了一份给 x
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">addObject</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span><span class="p">.</span><span class="nx">value</span> <span class="o">+</span> <span class="nx">y</span><span class="p">.</span><span class="nx">value</span>
<span class="p">}</span>
<span class="nx">addObject</span><span class="p">({</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},{</span><span class="nx">value</span><span class="o">:</span><span class="mi">2</span><span class="p">})</span>  <span class="c1">// 3
</span><span class="c1">// 怎么知道调用时，赋给x的{value:1}和 addObject(x,y)中x接收到的{value:1}是不是同一个
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 测试一下
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="mi">2</span><span class="p">}</span>
<span class="kd">function</span> <span class="nx">addObject</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span> <span class="c1">// 执行函数不仅把value加起来，还偷偷把x的内容改掉，看看是否影响到外面定义的x
</span><span class="c1"></span>  <span class="nx">x</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>
  <span class="k">return</span> <span class="nx">x</span><span class="p">.</span><span class="nx">value</span> <span class="o">+</span> <span class="nx">y</span><span class="p">.</span><span class="nx">value</span>
<span class="p">}</span>
<span class="nx">addObject</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span>   <span class="c1">// 3
</span><span class="c1"></span><span class="nx">a</span>  <span class="c1">// {value: 1, name: &#34;xxx&#34;}    // 诶! a被改了
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>如果搞懂内存图，就会知道，当我们在赋值时，只是把 a 存的 stack 内容，拷贝给形参</p>
<ul>
<li>实际上，<strong>传参就是把 stack 里记的内容拷贝给形参</strong>（不要区分什么值和地址，太麻烦了）</li>
<li>而形参 x / y ，应该会存储在「不知道什么区」（代指任何应该出现的区）</li>
</ul>
</blockquote>
<p>​</p>
<h4 id="形参可认为是变量声明">形参可认为是变量声明</h4>
<blockquote>
<p>其实，形参的本质就是变量声明</p>
<p>「形参」并不特殊，就是个语法糖</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 上面代码近似等价于下面代码
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">add</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>   <span class="c1">// 为什么用 var ?  答：历史原因，当时发明形参时 就只有var声明
</span><span class="c1"></span>  <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
  <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="形参可多可少">形参可多可少</h4>
<blockquote>
<p>形参只是给参数取名字而已</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span>   <span class="c1">// 只声明一个形参，如果传了两个参数，怎么拿到第2个形参呢？
</span><span class="c1"></span>  <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="p">}</span>
<span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>   <span class="c1">// 3
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>arguments 就是所有形参组成的数组</p>
<p>所以我们没有必要，把形参全部声明出来。通过 arguments 就可以全部获取到</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">z</span><span class="p">){</span>  
  <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>   <span class="c1">// z 怎么办？无所谓，声明着玩
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>   <span class="c1">// 7
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>JS 代码就是这么随意，形参爱多就多，爱少就少，没有规则约束</p>
<ul>
<li>后来这种特性造成一些问题，比如 TypeScript 兴起，TS 要求形参必须按照严格的类型和顺序</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="5-返回值">5️⃣ 返回值</h3>
<h4 id="每个函数都有返回值">每个函数都有返回值</h4>
<blockquote>
<p>不存在没有返回值的函数</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">hi</span><span class="p">(){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span> <span class="p">}</span>
<span class="nx">hi</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>没写 return，会默认返回值是 undefined</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">hi</span><span class="p">(){</span> <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span> <span class="p">}</span>
<span class="nx">hi</span><span class="p">()</span>  
<span class="c1">// hi           // 会照常执行语句的打印效果，并不表示这是语句的返回值
</span><span class="c1">// undefined    // 返回值
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>return console.log('hi')</code> 也就是说返回值为 console.log(&lsquo;hi&rsquo;) 的值，也就是 log 函数 的返回值，因为 log 函数没有 return，所以最终的值就是 undefined</p>
<blockquote>
<p>return 的结果，还是比较严谨的</p>
</blockquote>
</li>
</ul>
<p>​</p>
<h4 id="函数执行完了后才会返回">函数执行完了后才会返回</h4>
<blockquote>
<p>如果不执行，就不会有返回值</p>
<p>执行了，才会有返回值</p>
</blockquote>
<p>​</p>
<h4 id="只有函数有返回值">只有函数有返回值</h4>
<ul>
<li>1+2 的返回值为 3  ❌ （这是我们常见的一种口误，没有 return 哪来的返回值）</li>
<li>1+2 的值为 3   ✅</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="6-调用栈-">6️⃣ 调用栈 ⭐️</h3>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack" target="_blank" rel="noopener noreffer">MDN：Call stack</a></p>
</blockquote>
<blockquote>
<p>很抽象。是函数非常重要的要素。</p>
</blockquote>
<p>什么是调用栈</p>
<ul>
<li>JS 引擎在调用一个函数前</li>
<li>需要把函数所在的环境 push 到一个数组里</li>
<li>这个数组叫做调用栈</li>
<li>等函数执行完了，就会把环境弹(pop)出来</li>
<li>然后 return 到之前的环境，继续执行后续代码</li>
</ul>
<h4 id="举例">举例</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;1+2的结果为&#39;</span> <span class="o">+</span> <span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="调用栈的作用抽象">调用栈的作用（抽象）</h4>
<ul>
<li><strong>计算机是健忘的</strong>，每次进到一个函数，都要记下来等会要回到哪。把记录写到「调用栈」中</li>
<li>所以要把这个回到的地址，写到这个调用栈里面 ——<strong>「压栈」</strong>
<ul>
<li>在进入一个函数后，还要再进入另一个函数（嵌套的），那也要把这个子函数的地址放到栈里</li>
</ul>
</li>
<li>等当前子函数执行完毕，就**「弹栈」**—— 告诉计算机函数执行完要回到哪了。当前父函数执行完，再弹栈…
<ul>
<li>弹栈，会立刻删除调用栈列表中压栈时存下的对应信息。</li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack" target="_blank" rel="noopener noreffer">MDN 调用栈</a></p>
<p>这个模型还是比较重要的。</p>
<ul>
<li>JS 每次进入一个函数之前，先存档，执行完毕，没什么问题就读档，消掉前面的档</li>
<li>类似玩游戏打boss之前要存档，dead了后，就能自动读档到打boss之前的游戏进度 —— 与 JS 的流程不是非常一致，就是大概意思.</li>
<li>主要理解上面的流程图</li>
</ul>
</blockquote>
<blockquote>
<p>「栈」会不会满呢？</p>
<ul>
<li>如果使用<strong>递归函数</strong>，就有可能把栈压满。</li>
<li>因为递归函数，可能会一直不停的在压栈。</li>
</ul>
</blockquote>
<h4 id="递归函数">递归函数</h4>
<h5 id="阶乘">阶乘</h5>
<ul>
<li>当 n 不等于 1，就执行 n × f(n-1)</li>
<li>当 n 等于 1，就返回 1</li>
</ul>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">n</span> <span class="o">!==</span> <span class="mi">1</span> <span class="o">?</span> <span class="nx">n</span><span class="o">*</span> <span class="nx">f</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h5 id="理解递归">理解递归</h5>
<blockquote>
<p>层层递进↘，再层层回归↙  —— 递归</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">f</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="nx">f</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="nx">f</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nx">f</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
<span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
<span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="p">(</span><span class="mi">6</span><span class="p">)</span>
<span class="mi">24</span>
</code></pre></td></tr></table>
</div>
</div><p>先递进↘，再回归↙</p>
<ul>
<li>很多教程中，说递归就是不停的调用自己，实际上是不正确的理解</li>
<li>调用自己 !== 递归。调用自己有时候会死循环的，死循环就不是递归。递归——先递进，再回归、</li>
<li>递归的尽头，就在 <strong><code>f(1) === 1</code></strong>  这个关键点。</li>
</ul>
<p>​</p>
<h4 id="递归函数的调用栈">递归函数的调用栈</h4>
<h5 id="递归函数的调用栈很长">递归函数的调用栈很长</h5>
<ul>
<li>
<p>请画出阶乘 (4) 的调用栈</p>
<p></p>
</li>
<li>
<p>阶乘 4 ，会压 4 次栈</p>
</li>
<li>
<p>阶乘 10000 ，会压 10000 次栈  （数值太大，Chrome 计算不了）</p>
<p></p>
</li>
<li>
<p>试试「阶加」10000，压 10000 次栈</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">n</span> <span class="o">!==</span> <span class="mi">1</span> <span class="o">?</span> <span class="nx">n</span><span class="o">+</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
<span class="nx">sum</span><span class="p">(</span><span class="mi">10000</span><span class="p">)</span> <span class="c1">// 50005000 
</span><span class="c1"></span><span class="nx">sum</span><span class="p">(</span><span class="mi">20000</span><span class="p">)</span> <span class="c1">// Maximum call stack size exceeded 【爆栈】
</span></code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ul>
<h4 id="爆栈">爆栈</h4>
<blockquote>
<p>如果调用栈中压入的帧过多，程序就会崩溃 —— 爆栈</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">n</span> <span class="o">!==</span> <span class="mi">1</span> <span class="o">?</span> <span class="nx">n</span><span class="o">+</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
<span class="nx">sum</span><span class="p">(</span><span class="mi">10000</span><span class="p">)</span>   <span class="c1">// 要压10000次栈 // 50005000
</span><span class="c1"></span><span class="nx">sum</span><span class="p">(</span><span class="mi">20000</span><span class="p">)</span>   <span class="c1">// 要压20000次栈 // 已经报错。Maximum call stack size exceeded
</span></code></pre></td></tr></table>
</div>
</div><p>可以用<strong>二分法</strong>，试试 Chrome 最多能压多少次栈</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">sum</span><span class="p">(</span><span class="mi">15000</span><span class="p">)</span>  <span class="c1">// 爆栈
</span><span class="c1"></span><span class="nx">sum</span><span class="p">(</span><span class="mi">12500</span><span class="p">)</span>  <span class="c1">// 爆栈
</span><span class="c1"></span><span class="nx">sum</span><span class="p">(</span><span class="mi">11431</span><span class="p">)</span>  <span class="c1">// 爆栈
</span><span class="c1"></span><span class="nx">sum</span><span class="p">(</span><span class="mi">11430</span><span class="p">)</span>  <span class="c1">// 65328165
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Chrome 的调用栈的长度，大概 11000 ~ 12000 左右，不是固定值（因为里面可能已经放了一些别的东西）</p>
</blockquote>
<p>​</p>
<h4 id="调用栈最长有多少">调用栈最长有多少</h4>
<blockquote>
<p>使用下面代码，可以测试一个浏览器的调用栈的长度</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">computeMaxCallStackSize</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="nx">computeMaxCallStackSize</span><span class="p">();</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 报错说明 stack overflow 了
</span><span class="c1"></span>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>Chrome 12578
Firefox 26773
Node 12536</p>
</li>
<li>
<p>Chrome 和 Node 的用的是同一个 JS 引擎，所以测出来差不多。
Firefox 用的是自己的 JS 引擎，所以可能大一些</p>
</li>
</ul>
<p>​</p>
<h4 id="总结-1">总结—————————————</h4>
<blockquote>
<p>什么是调用栈</p>
<ul>
<li>
<p>就是我们进入一个函数时，要先把这个环境存下来，然后再进去，不然函数执行完就不知道怎么回去了。
要存的东西很多，就需要一个数组来保存。这个保存函数所在环境的数组，就叫<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack" target="_blank" rel="noopener noreffer">「调用栈」</a></p>
</li>
<li>
<p>调用栈的长度大概是在一万到两万左右，超过这个值程序就会崩溃 —— 爆栈</p>
</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h3 id="7-函数提升">7️⃣ 函数提升</h3>
<h4 id="什么是函数提升">什么是函数提升</h4>
<blockquote>
<p>不管你把具名函数声明在哪里，它都会跑到第一行</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){}</span>
</code></pre></td></tr></table>
</div>
</div><p>示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>
<span class="p">}</span>
<span class="c1">// 3
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>有一种代码规范就是，把所有声明的函数，都集中放到最后面，这样代码阅读起来就更简洁</p>
</blockquote>
<p>拓展</p>
<ul>
<li>
<p>如果同时声明 变量 add 和 函数 add，那 add 到底是谁呢？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">add</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">add</span><span class="p">(){}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>报错：add 已经被声明了。</p>
<p>输出 add，结果为 函数 add。（函数会提升，自动变成 ↓↓ 这样）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">add</span><span class="p">(){}</span>
<span class="kd">let</span> <span class="nx">add</span> <span class="o">=</span> <span class="mi">1</span> 
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>let 特性：如果这个变量已经存在，就不允许再次重复声明，会直接报错</p>
</li>
<li>
<p>但是用 var 声明，就不会报错</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">function</span> <span class="nx">add</span><span class="p">(){}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">add</span>
<span class="kd">function</span> <span class="nx">add</span><span class="p">(){}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
<li>
<p>由上，用 var 可能有很多问题，搞不清到底表示函数还是什么。（押题再讲 var）</p>
</li>
<li>
<p>如果只用 let ，那世界就清净了。因为只要 let 重复声明，就会报错，避免上述搞不清变量到底是谁的 bug</p>
<blockquote>
<p>学习方法：难得东西着重去学；简单的东西，可以放到面试准备阶段背</p>
<p>就比如：var 很复杂，但又没什么用，只是面试会考到。所以我们只在面试准备阶段，讲一下</p>
</blockquote>
</li>
</ul>
<p>​</p>
<h4 id="什么不是函数提升">什么不是函数提升</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>这是赋值，右边的匿名函数声明不会提升，你在什么时候写，它就什么时候声明</p>
</blockquote>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>   <span class="c1">// 报错
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span><span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span><span class="p">}</span>   <span class="c1">// 这个函数的声明并没有提升，导致声明前先调用，所以会报错
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<h3 id="8-arguments">8️⃣ arguments</h3>
<h3 id="9-this-">9️⃣ this ⚡️</h3>
<blockquote>
<p>arguments 和 this，是<strong>除了箭头函数</strong>，每个函数都有的。</p>
</blockquote>
<ul>
<li>箭头函数，是新出的语法，故意摒弃了这两个特性。</li>
<li>可见，新的语法并不认为这俩是好东西</li>
<li>正如 JS 之父说的：JS 的原创之处并不优秀、优秀之处并非原创</li>
<li>arguments 和 this 就是 JS 原创的，使得 JS 语法特别独特，也特别不好用</li>
</ul>
<p>​</p>
<h2 id="理解-arguments">理解 arguments</h2>
<blockquote>
<p>译为：参数</p>
</blockquote>
<blockquote>
<p>注意</p>
<ul>
<li>arguments 是所有参数组成的伪数组</li>
<li>每次<strong>调用函数</strong>时，都会对应产生一个 arguments</li>
<li>我们应该尽量不对 arguments 内的元素进行修改，修改 arguments 会让代码变得令人疑惑</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">()</span>
<span class="nx">fn</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="nx">fn</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>发现：打印 arguments，结果类似<strong>数组</strong></p>
<ul>
<li>实际上， <strong>arguments 是包含所有参数的伪数组</strong>。
<ul>
<li>arguments 数组的原型是「根对象」——包含对象的共有属性。没有 push、shift、join … 这些数组共有方法</li>
<li>没有数组共有方法的数组，就是「伪数组」</li>
</ul>
</li>
</ul>
</blockquote>
<blockquote>
<p>「伪数组」怎么变真数组 ？</p>
<ul>
<li>通过 <code>Array.from(array)</code> 可以把任何不是数组的东西，转换为真数组（具有数组的共有属性）</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h2 id="理解-this-">理解 this ⚡️</h2>
<blockquote>
<p>this 可以说是 JS 的 “ 千古奇案 ” —— 各种取值，眼花缭乱</p>
</blockquote>
<h3 id="情况一">情况一</h3>
<blockquote>
<p>如果不给任何条件，那么 this 默认指向 window（包含所有全局变量）</p>
<ul>
<li>这种情况，通常用不上。因为如果要获取 window 上的某变量，直接写就行 <code>window.xxx</code> ，不需要用 this 来指代</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<h3 id="如何指定-this">如何指定 this</h3>
<blockquote>
<p>目前只能用 fn.call(…)</p>
</blockquote>
<h4 id="情况一-1">情况一</h4>
<blockquote>
<p>如果传的 this 不是对象，JS 会尽量<strong>封装成对象</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>          <span class="c1">// → 对象1
</span><span class="c1"></span><span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">undefined</span><span class="p">)</span>  <span class="c1">// → window
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p></p>
<h4 id="什么叫封装成对象">什么叫「封装成对象」？</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">就是</span> <span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>   <span class="c1">// 具有 number 的共有属性 —— 但基本没人用
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="怎么禁用这个自动封装的特性-">怎么禁用这个自动封装的特性 ？</h4>
<blockquote>
<p>例：传数字 1，最终 this 就是指向【数字 1】，而不被自动封装成【对象 1】</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 很简单，在声明函数的时候，【使用严格模式】，相当于告诉 JS 不要随便添加东西
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="s1">&#39;use strict&#39;</span>  
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">undefined</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p></p>
<p>​</p>
<p>​</p>
<h3 id="同时指定-this-和-arguments">同时指定 this 和 arguments</h3>
<ul>
<li>目前可以用 fn.call(xxx, 1,2,3) 传 this 和 arguments</li>
<li><strong>第1个参数是 this，后面所有参数是 arguments</strong></li>
<li>xxx 作为 this，会被自动转化成对象（JS 的糟粕）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span> 
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<h3 id="-this-是隐藏参数arguments-是普通参数-">“ this 是隐藏参数、arguments 是普通参数 ”</h3>
<blockquote>
<p>this 是参数（此结论是 frank 个人的）</p>
</blockquote>
<blockquote>
<p>↑↑ 是什么意思呢 ？ —— 我们需要花很多例子，来理解这句话</p>
</blockquote>
<blockquote>
<p>要理解 this，先从 JS 中把 this 排除出去。就是看看不用 this，能不能达到跟 this 一样的功能 ！</p>
</blockquote>
<h3 id="假设没有-this">假设没有 this</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;frank&#39;</span><span class="p">,</span>
  <span class="nx">sayHi</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`你好，我叫`</span> <span class="o">+</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>  <span class="c1">// 以前是使用 this.name，改成 person.name
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>为什么这里可以用 person.name，应该还没完成 person 的声明吧 ？</p>
<ul>
<li>因为这是一个函数，函数等会儿才会执行，等到执行时，person 不是已经完成了声明吗 ！！所以这是可以的</li>
<li>我们在 person 对象中声明一个函数的时候，在函数中可以用变量 person 得到这个对象的引用</li>
<li>在不准用 this 的前提下，这段代码是合法的，也符合我们的预期</li>
</ul>
<blockquote>
<p>我们可以用直接保存了对象地址的<strong>变量</strong>获取 &lsquo;name&rsquo;
我们把这种办法简称为<strong>引用</strong> （ 一个变量<strong>保存了</strong>一个对象的<strong>地址</strong>，就叫引用）</p>
</blockquote>
<h4 id="问题一">问题一</h4>
<blockquote>
<p>如果先声明了这个函数，后声明对象</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">sayHi</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`你好，我叫`</span> <span class="o">+</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> 
  <span class="c1">// 函数声明时怎么知道会有 person 变量呢，person 还没声明 ？
</span><span class="c1"></span>  <span class="c1">// 虽然执行上没问题，但先后逻辑上确实略有不通之处
</span><span class="c1"></span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;frank&#39;</span><span class="p">,</span>
  <span class="s1">&#39;sayHi&#39;</span><span class="o">:</span> <span class="nx">sayHi</span>  <span class="c1">// 引用sayHi函数
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">person</span>
<span class="nx">sayHi</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>分析</p>
<ul>
<li>person 如果改名，sayHi 中引用 person 的地方也必须跟着修改，否则 sayHi 函数就挂了</li>
<li>甚至有可能有 2 个单独 JS 文件，一个放着 person，而 sayHi 函数在另一个文件里面。
这样就显得更加奇怪：一个文件居然需要知道另一个文件中有什么变量</li>
<li>所以我们可能不是很希望 sayHi 函数里出现 person 引用
（感觉上这个代码有点不好，但也不是那么不好，较尴尬令人不爽 🙃 ）</li>
</ul>
<p>​</p>
<h4 id="问题二-">问题二 ⚡️⚡️</h4>
<blockquote>
<p>对象还好，如果用 类 class 的话，问题就更大了。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">Person</span><span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span> 
    <span class="c1">// this 指临时的新对象，这里的 this 是 new 强制指定的。我们就不讨论了 😅
</span><span class="c1"></span>  <span class="p">}</span>
  <span class="nx">sayHi</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">???</span><span class="p">)</span> <span class="c1">// 问题在这，怎么打印出name呢？声明类时，还没有new出任何实例对象，没法引用
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>我们想在 sayHi 中获取到当前对象的 name，但此时根本就没有当前对象，那怎么获取 ？</p>
<ul>
<li>我们就需要一种机制，来获取到未来的对象的 name 的引用</li>
</ul>
</blockquote>
<p>分析</p>
<ul>
<li>这里只有类，还没创建对象，故不可能获取对象的引用</li>
<li>那么如何拿到对象的 name 属性？ 🤔</li>
</ul>
<p>​</p>
<h4 id="需要一种办法拿到未来的对象">需要一种办法拿到未来的对象</h4>
<blockquote>
<p>复述问题：我们需要在函数中，获取一个对象的引用，但这个对象还未创建，那要怎么获取 ？</p>
</blockquote>
<blockquote>
<p>怎样才能获取的未来对象的引用，以便拿到对象的 name 属性？  →  怎样在不知道对象名字的情况下，拿到对象的引用 ？</p>
</blockquote>
<h4 id="一种土办法用参数传参">一种土办法，用参数（传参）</h4>
<p>对象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;frank&#39;</span><span class="p">,</span>
  <span class="nx">sayHi</span><span class="p">(</span><span class="nx">p</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`你好，我叫`</span> <span class="o">+</span> <span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>  
<span class="c1">// 用参数的形式，把你要得到的对象，传给了你
</span><span class="c1">// 这种方法，看起来很冗余、很挫
</span></code></pre></td></tr></table>
</div>
</div><p>类</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">Person</span><span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span> <span class="p">}</span>
  <span class="nx">sayHi</span><span class="p">(</span><span class="nx">p</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`你好，我叫`</span> <span class="o">+</span> <span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="谁会用这种办法--python">谁会用这种办法 —— Python</h4>
<blockquote>
<p>Python 在每一个函数中加了一个参数，并且约定这个参数就是后面创建的新对象</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span> <span class="c1"># 构造函数</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>

    <span class="k">def</span> <span class="nf">sayHi</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="s1">&#39;Hi, I am &#39;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>

<span class="n">person</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s1">&#39;frank&#39;</span><span class="p">)</span>
<span class="n">person</span><span class="o">.</span><span class="n">sayHi</span><span class="p">()</span>   <span class="c1"># Python 默认会把 sayHi 前面的 person 作为参数传到 sayHi 中，所以 self 就是这个参数</span>
</code></pre></td></tr></table>
</div>
</div><p>特点</p>
<ul>
<li>每个函数都接受一个额外的 self</li>
<li><strong>这个 self 就是后面会创建并传进来的对象</strong></li>
<li>只不过 Python 会偷偷帮你传对象
<ul>
<li>person.sayHi() 等价于 person.sayHi(person)</li>
</ul>
</li>
<li><strong>person 就被传给 self 了</strong>（得到了一个未来的对象的引用）</li>
</ul>
<blockquote>
<p>这其实是任何语言都要解决的问题 —— 在写代码的时候，不知道后面要创建的对象叫什么</p>
</blockquote>
<p>​</p>
<h4 id="js-没有模仿-python-的思路">JS 没有模仿 Python 的思路</h4>
<blockquote>
<p>JS 走了另一条路 —— 更难理解的路 —— 这就是 JS 的第二座大山 this</p>
</blockquote>
<p>​</p>
<h3 id="js-在每个函数里加了-this-">JS 在每个函数里加了 this ⚡️⚡️</h3>
<blockquote>
<p>JS 没有像 Python 那样加一个参数，而是发明了一个关键字 —— this</p>
<p>在任何一个函数里，可<strong>用 this 获取到那个</strong>你现在还不知道名字的<strong>对象</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;frank&#39;</span><span class="p">,</span>
  <span class="nx">sayHi</span><span class="p">(</span><span class="nx">隐藏的this</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`你好，我叫`</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">()</span>
<span class="o">----------------------------------------------------</span>
<span class="kr">class</span> <span class="nx">Person</span><span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span> <span class="p">}</span>
  <span class="nx">sayHi</span><span class="p">(</span><span class="nx">p</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`你好，我叫`</span> <span class="o">+</span> <span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;frank&#39;</span><span class="p">)</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">()</span>  <span class="c1">// 隐式的写了 this = p （JS引擎擅自执行的操作）
</span><span class="c1">// ↑↑ 相当于 ↓↓ 
</span><span class="c1">// person.sayHi(person)  
</span><span class="c1">// JS 和 Python 做了一样的处理：会自动把 person 传给 sayHi
</span><span class="c1">// 然后 person 被传给 this 了（person 是个地址）
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<ul>
<li>JS 做的第 1 件事：把 this关键字 赋予 sayHi。</li>
<li>JS 做的第 2 件事：把 person(地址) 传给 this。</li>
<li>综上，就是把 person 给了 sayHi</li>
</ul>
<p>这样，每个函数都能用 this 获取一个未知对象（person）的引用了</p>
</blockquote>
<blockquote>
<h3 id="personsayhi-会隐式地把-person-作为-this-传给-sayhi"><strong>person.sayHi() 会隐式地把 person 作为 this 传给 sayHi</strong></h3>
<p>（ 而不是像 Python 一样作为第 1 个参数 self ，传给 sayHi ）</p>
<p><strong>方便 sayHi 获取 person 对应的对象</strong></p>
</blockquote>
<p>​</p>
<h3 id="总结-2">总结</h3>
<blockquote>
<p>总结一下目前的知识</p>
</blockquote>
<ul>
<li>我们想让函数获取对象的引用</li>
<li>但是并不想通过变量名做到</li>
<li>Python 通过额外的 self 参数做到</li>
<li>JS 通过额外的 this 做到：
<ul>
<li>person.sayHi() 会把 person 自动传给 sayHi，sayHi 可以通过 this 引用 person</li>
</ul>
</li>
<li>其他
<ul>
<li>注意 person.sayHi 和 person.sayHi() 的区别</li>
<li>注意 person.sayHi() 的断句 (person.sayHi) ( )</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="这就引出另一个问题-">这就引出另一个问题 💡</h3>
<h4 id="到底哪个对">到底哪个对</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;frank&#39;</span><span class="p">,</span>
  <span class="nx">sayHi</span><span class="p">(){</span>  <span class="c1">// 隐藏的this参数
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`你好，我叫`</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// 自动隐式的把 person 传给 sayHi
</span><span class="c1"></span><span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">()</span>        <span class="c1">// 省略传参 ？
</span><span class="c1"></span><span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>  <span class="c1">// 完整传参 ？  哪种写法是对的
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>省略形式反而对了，完整形式反而是错的</p>
</blockquote>
<h4 id="js-怎么解决这种不和谐">JS 怎么解决这种不和谐</h4>
<blockquote>
<p>[Python](#谁会用这种办法 —— Python) 至少有明确的约定：这种 person.sayHi() 写法就会把 person 传给 sayHi 的第 1 个显式参数 self 。</p>
<p>那 JS 要怎么解释 this 的存在呢 ？（函数并没有显式的形参，this 完全是一个不成文的、隐性的约定）</p>
<ul>
<li>JS 提供两种调用形式</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="两种调用">两种调用🧐</h3>
<h4 id="小白调用法-">小白调用法 🚫</h4>
<ul>
<li>person.sayHi()</li>
<li>会自动把 person 传到函数里，作为 this</li>
</ul>
<h4 id="大师调用法-">大师调用法 ✅</h4>
<blockquote>
<p>使用 JS 新出的调用方法：call</p>
</blockquote>
<ul>
<li>
<p>person.sayHi.call(person)</p>
</li>
<li>
<p>需要自己手动把 person 传到函数里，作为 this （更为清晰）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;frank&#39;</span><span class="p">,</span>
  <span class="nx">sayHi</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`你好，我叫`</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">.</span><span class="nx">call</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="mi">1</span><span class="p">})</span>   <span class="c1">// call 里传什么 this 就是什么，非常清晰
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="应该学习哪种">应该学习哪种？</h4>
<ul>
<li>学习大师调用法，因为小白调用法你早就会了</li>
<li>从这段笔记开始，默认用大师调用法</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="指定-this-">指定 this 😈</h2>
<h3 id="call-指定-this">call 指定 this</h3>
<blockquote>
<p>call 是 JS 新出的调用方法。call 会使得所有东西变得明朗起来</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;frank&#39;</span><span class="p">,</span>
  <span class="nx">sayHi</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`你好，我叫`</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>  <span class="c1">// call传什么this就是什么
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">.</span><span class="nx">call</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="mi">1</span><span class="p">})</span>   <span class="c1">// call 里传什么 this 就是什么，非常清晰
</span><span class="c1"></span><span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">.</span><span class="nx">call</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;jack&#39;</span><span class="p">})</span>
<span class="o">-------------------------------------------------------------------------------</span>
<span class="c1">// 大多数情况，我们需要this就是当前对象
</span><span class="c1"></span><span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>  
<span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">()</span>  <span class="c1">// 为什么不用这种写法？因为隐藏了太多细节，只适合小白
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<h3 id="所有函数调用必须强迫自己使用大师调用法-call--apply">所有函数调用，必须强迫自己使用「大师调用法」—— call / apply</h3>
</blockquote>
<p>​</p>
<h4 id="例1-2">例1</h4>
<blockquote>
<p>有一个 add 函数，不需要用到 this，那如何使用 call 调用 ？</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="没有用到-this">没有用到 this</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">add</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">undefined</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="c1">// 3   
</span><span class="c1">// call的第1个参数是指定this的，后面所有参数作为实参传递给函数对应形参
</span></code></pre></td></tr></table>
</div>
</div><h5 id="为什么要多写一个-undefined">为什么要多写一个 undefined</h5>
<ul>
<li>因为第一个参数要作为 this</li>
<li>但是代码里没有用 this</li>
<li>所以只能用 undefined 占位</li>
<li>其实用 null 也可以</li>
</ul>
<p>​</p>
<h4 id="例2-2">例2</h4>
<blockquote>
<p>Array.prototype.forEach 这个函数就用到了 this</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">array</span><span class="p">.</span><span class="nx">forEach2</span><span class="p">()</span>   <span class="c1">// 小白写法：脑子一懵，就不知道了this是什么了
</span><span class="c1"></span><span class="nx">array</span><span class="p">.</span><span class="nx">forEach2</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span>  <span class="c1">// [1,2,3]  // 大师写法：规定了call里面的就是this，所以清晰明了的知道此时打印的this就是传进去的array数组本身
</span></code></pre></td></tr></table>
</div>
</div><h5 id="尝试写出完整的-foreach-函数">尝试写出完整的 forEach 函数</h5>
<blockquote>
<p>forEach 功能是遍历当前数组。当前数组在哪呢？ 就是 this，this 就可以作为未来数组的引用</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">){</span>  <span class="c1">// 传一个方法fn
</span><span class="c1"></span>  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="nx">fn</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">i</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>  <span class="c1">// 对每一个元素，执行fn方法
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Tips</p>
<p>我们在看一个函数的代码时，不要想 this 的值是什么 ， 因为 this 的值是不确定的，没人知道</p>
<ul>
<li>只有在函数被调用时（用大师法传进 this），才清晰的知道 this 是什么</li>
</ul>
</blockquote>
<h5 id="如何调用">如何调用</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">){</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="nx">fn</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">i</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> 
<span class="nx">array</span><span class="p">.</span><span class="nx">forEach2</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">)</span> <span class="c1">// 大师：显式的指定了this
</span><span class="c1"></span><span class="nx">array</span><span class="p">.</span><span class="nx">forEach2</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">)</span> <span class="c1">// 小白：隐式的把array作为this
</span></code></pre></td></tr></table>
</div>
</div><p>this 是什么</p>
<ul>
<li>由于大家使用 forEach2 的时候总是习惯于用 arr.forEach2</li>
<li>所以 arr 就被自动传给 forEach2 了</li>
</ul>
<p>​</p>
<h4 id="this-一定是数组吗">this 一定是数组吗</h4>
<ul>
<li>
<p>不一定，比如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">){</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="nx">fn</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">i</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// 我们可以指定 this 为一个对象转化的伪数组
</span><span class="c1"></span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach2</span><span class="p">.</span><span class="nx">call</span><span class="p">({</span><span class="mi">0</span><span class="o">:</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="mi">1</span><span class="o">:</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="nx">length</span><span class="o">:</span><span class="mi">2</span><span class="p">},</span> <span class="nx">item</span><span class="p">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ul>
<blockquote>
<p>所以 this 就是我们可以任意指定的参数而已。</p>
<ul>
<li>使用小白写法，JS 就会猜你想要的 this 是什么，绝大部分情况都能猜对。</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="总结-this-的两种使用方法">总结 this 的两种使用方法</h3>
<blockquote>
<p>不论什么方式调用函数，实际上都在传递 this 。 区别在于：你【知道】传的 this 什么 或【不知道】</p>
</blockquote>
<h4 id="隐式传递">隐式传递</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">fn</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="c1">// 等价于 fn.call(undefined, 1, 2)
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">child</span><span class="p">.</span><span class="nx">fn</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// 等价于 obj.child.fn.call(obj.child, 1)   // 一个对象的属性上的fn函数
</span></code></pre></td></tr></table>
</div>
</div><h4 id="显式传递">显式传递</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">undefined</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">undefined</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="apply-区别">apply 区别</h4>
<ul>
<li>apply 要在后面其他参数的部分，加上中括号 [  ]</li>
<li>apply 后面的参数要用<strong>数组</strong>的形式来表示</li>
<li>只是写法形式不同，其他都和 call 是一样的</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="绑定-this">绑定 this</h3>
<blockquote>
<p>如果不确定 this 是什么，可以使用 bind <strong>强制绑定</strong></p>
</blockquote>
<h4 id="使用-bind-可以让-this-不被改变">使用 .bind 可以让 this 不被改变</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">f2</span> <span class="o">=</span> <span class="nx">f1</span><span class="p">.</span><span class="nx">bind</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;frank&#39;</span><span class="p">})</span> <span class="c1">// 那么 f2 就是 f1 绑定了 this 之后的新函数
</span><span class="c1"></span><span class="nx">f2</span><span class="p">()</span> <span class="c1">// 等价于 f1.call({name:&#39;frank&#39;})
</span><span class="c1">// 打印结果：{name: &#34;frank&#34;} undefined undefined  // this是传进来的对象，p1/p2没传所以是undefined
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li>f2 是 f1 的 this 绑定之后的版本</li>
<li>调 f2 相当于调 f1，唯一的区别就是，f2 的 this 被绑定了，绑定成通过 bind 传递的参数</li>
</ul>
<blockquote>
<p>有什么用呢？ —— 后面学 vue / react 可能就天天遇到了</p>
</blockquote>
<p>​</p>
<h4 id="bind-还可以绑定其他参数">.bind 还可以绑定其他参数</h4>
<blockquote>
<p>bind 除了可以绑定 this，其实可以<strong>用来绑定所有参数</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">f3</span> <span class="o">=</span> <span class="nx">f1</span><span class="p">.</span><span class="nx">bind</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;frank&#39;</span><span class="p">},</span> <span class="s1">&#39;hi&#39;</span><span class="p">)</span>
<span class="nx">f3</span><span class="p">()</span> <span class="c1">// 等价于 f1.call({name:&#39;frank&#39;}, hi)  // 已经绑死了：this是这个对象，p1是&#39;hi&#39;
</span><span class="c1"></span><span class="nx">f3</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>  <span class="c1">// 因为 this 和 p1 已经绑死了，所以这里传的 3 会作为 p2
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<h2 id="箭头函数">箭头函数</h2>
<blockquote>
<p>「箭头函数」没有 arguments 和 this 。</p>
</blockquote>
<blockquote>
<p>上面讲 this 用了大量篇幅，因为 this 功能太复杂且隐晦。所以新版 JS 就放弃了 this</p>
</blockquote>
<h3 id="函数里面的-this-就是外面的-this">函数里面的 this 就是外面的 this</h3>
<blockquote>
<p>默认的 this 是 window</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="c1">// window
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span> <span class="o">===</span> <span class="nb">window</span><span class="p">)</span> <span class="c1">// true
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="c1">// 这里的this无需确认，外面的this是什么，箭头函数里面的this就是什么
</span><span class="c1"></span><span class="nx">fn</span><span class="p">()</span> <span class="c1">// window
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<blockquote>
<p>对于箭头函数来说，变量就是普通变量</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="nx">fn</span><span class="p">()</span>   <span class="c1">// 1
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>函数打印变量a 。就近原则，先找函数里有没有变量a，没有。就用函数外的变量a</p>
</blockquote>
<blockquote>
<p>this 同理，箭头函数里面没有 this 变量，就找外层的 this 变量。所以箭头函数中的 this 就是外面的 this</p>
</blockquote>
<p>​</p>
<h3 id="就算用-call-也无法指定-this">就算用 call 也无法指定 this</h3>
<blockquote>
<p>怎么证明箭头函数里面没有 this 呢？</p>
</blockquote>
<blockquote>
<p>可以用 call 来尝试指定箭头函数的 this 。 结果，无法指定，this 仍然指向 window</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
<span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;frank&#39;</span><span class="p">})</span> <span class="c1">// 仍是 window
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>不论是用 call 、 bind … 都无法改变箭头函数中 this 的指向，永远是和 函数外的this 保持一致。
除非外面的 this 改变了，否则 箭头函数的 this 不会变化</p>
</blockquote>
<h3 id="箭头函数没有-arguments">箭头函数没有 arguments</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)</span>  <span class="c1">// arguments是所有参数组成的伪数组
</span><span class="c1"></span><span class="nx">fn</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>  <span class="c1">// 报错：arguments is not defined
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>没有 this ，没有 arguments 的函数就是「箭头函数」</p>
</blockquote>
<h2 id="总结-3">总结</h2>
<p>每个函数都有这些东西</p>
<ol>
<li><strong>调用时机</strong>：决定了变量的值</li>
<li><strong>作用域</strong>：同时多个作用域，遵循「就近原则」</li>
<li><strong>闭包</strong>：如果一个函数用到了外部的变量，那么这个函数加这个变量，就叫做闭包</li>
</ol>
<ul>
<li><strong>形式参数</strong>：给参数取名字，相当于声明一个变量</li>
</ul>
<ol start="5">
<li><strong>返回值</strong>：return ，默认 return undefined</li>
<li><strong>调用栈</strong>：进去每个函数前都要先压栈，出来函数前要弹栈</li>
<li><strong>函数提升</strong>：函数跑到最前面</li>
<li><strong>arguments（除了箭头函数）</strong>：包含所有参数的伪数组</li>
<li><strong>this（除了箭头函数）</strong>：引用一个当前不存在的对象，是 call() 方法的第一个参数</li>
</ol>
<p>​</p>
<p>​</p>
<h2 id="立即执行函数">立即执行函数</h2>
<blockquote>
<p>只有 JS 有的变态玩意，现在用得少</p>
</blockquote>
<h3 id="声明局部变量es6-之前">声明局部变量（ES6 之前）</h3>
<blockquote>
<p>在 ES6 之前，怎么获得一个局部变量</p>
</blockquote>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 以前只有 var声明时
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1">// a 是一个全局变量
</span><span class="c1"></span>
<span class="c1">// 如果想声明一个局部变量，必须写一个函数
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>   <span class="c1">// 在函数里，声明的 a 才是局部变量
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>  
<span class="p">}</span>

<span class="nx">fn</span><span class="p">()</span>           <span class="c1">// 2
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// 1
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>用函数确能得到局部变量，但也同时增加了一个全局的函数（不也是全局变量），这与初衷相悖</p>
</blockquote>
<h4 id="思考--办法">思考 / 办法</h4>
<blockquote>
<p>思考：如果函数没有名字，那就不会生成一个全局函数，然后直接调用这个没名的函数不就行了</p>
</blockquote>
<blockquote>
<p>办法：声明一个匿名函数，然后直接调用执行 —— 没有暴露任何一个全局变量 或 全局函数</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>   <span class="c1">// 获得局部变量a，但副作用是又带来一个全局函数
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fn</span><span class="p">()</span> <span class="c1">// 2
</span><span class="c1"></span><span class="o">-----------------------------------------</span> <span class="err">↑↑</span> <span class="nx">改写成</span> <span class="err">↓↓</span> <span class="o">---------------</span>
<span class="c1">// 去掉函数名
</span><span class="c1"></span><span class="kd">function</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>   <span class="c1">// 获得局部变量a，但副作用是又带来一个全局函数
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span> <span class="p">()</span> <span class="c1">// 把圆括号加到匿名函数的后面
</span><span class="c1">// 上面就是声明一个匿名函数，然后直接调用执行
</span></code></pre></td></tr></table>
</div>
</div><h4 id="执行--报错">执行 / 报错</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span> <span class="p">()</span> 
<span class="c1">// Uncaught SyntaxError: Function statements require a function name
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>执行，报错（JS认为语法不对）</p>
</blockquote>
<h4 id="解决">解决</h4>
<blockquote>
<p>JS 的程序员绞尽脑汁，找到一些解决办法    ↓↓</p>
</blockquote>
<ul>
<li>
<p>匿名函数前加一个操作符</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">+</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span> <span class="p">()</span>
<span class="c1">// 2
</span><span class="c1">// NaN（返回值并不影响需求，所以放着就好）
</span></code></pre></td></tr></table>
</div>
</div><p></p>
</li>
<li>
<p>只要做一个运算，上面函数的写法都可以直接执行，不会再报错（与 undefined 运算，返回都是 NaN）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">+</span> <span class="kd">function</span><span class="p">(){...}()</span>   <span class="c1">// NaN
</span><span class="c1"></span><span class="o">-</span> <span class="kd">function</span><span class="p">(){...}()</span>   <span class="c1">// NaN
</span><span class="c1"></span><span class="mi">1</span><span class="o">*</span> <span class="kd">function</span><span class="p">(){...}()</span>  <span class="c1">// NaN   // 乘号必须左右都有值
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>取反也可以 <strong><code>!</code></strong></p>
<p>返回值为 undefined  =&gt;  ! undefined  =&gt;  true</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">!</span> <span class="kd">function</span><span class="p">(){...}()</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>…</p>
</li>
</ul>
<blockquote>
<p>这样我们终于就得到 JS 中，只要一个局部变量的方法</p>
</blockquote>
<blockquote>
<p>总结：为得到一个局部变量，不得不去造一个函数，并执行这个函数 —— 这也是 JS（旧） 的问题</p>
</blockquote>
<h3 id="总结原理">总结原理</h3>
<ul>
<li>ES 5 时代，为了得到局部变量，必须引入一个函数</li>
<li>但是这个函数如果有名字，就得不偿失</li>
<li>于是这个函数必须是匿名函数</li>
<li>声明匿名函数，然后立即加个 () 执行它</li>
<li>但是 JS 标准认为这种语法不合法</li>
<li>所以 JS 程序员寻求各种办法</li>
<li>最终发现，只要在匿名函数前面加个运算符即可</li>
<li>!、~、()、+、- 都可以</li>
<li>但是这里面有些运算符会往上走</li>
<li>所以方方推荐永远用 ! 来解决</li>
</ul>
<p>​</p>
<h3 id="声明局部变量es6-之后">声明局部变量（ES6 之后）</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>
<span class="mi">2</span>
<span class="kc">undefined</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>  <span class="c1">// 报错 a is not defined
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="注意事项">注意事项</h3>
<blockquote>
<p>推荐永远用 ! 来解决</p>
</blockquote>
<p>用 +、括号 … 可能有 bug</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span> <span class="c1">// 没有这句时，代码执行一切正常，返回值也是 undefined。一旦有这句话，代码执行就不同了
</span><span class="c1"></span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span> <span class="p">())</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>JS 有个特点：它的回车是没有意义的</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 上面代码执行过程，如下
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>  <span class="p">=&gt;</span>  <span class="nx">log函数返回值</span> <span class="kc">undefined</span>  <span class="p">=&gt;</span> <span class="kc">undefined</span><span class="p">(</span><span class="kd">function</span><span class="p">(){}())</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>因为回车是没有意义的，等同于 undefined 后面跟着一对 <strong><code>( )</code></strong>，所以把 undefined 当成函数执行，必然报错</p>
</blockquote>
<h4 id="总结-4">总结</h4>
<blockquote>
<p>永远<strong>不要</strong>用 【圆括号】来写立即执行函数（圆括号会往上面代码凑，甚至可能连起来执行）</p>
<ul>
<li>虽然可以用【分号】来强制结束/分隔两个语句 。但显然也没感叹号方便</li>
<li><strong>这是 JS 中唯一需要加分号 <code>;</code> 的地方</strong>，其他任何代码不需要分号</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">);</span>   <span class="c1">// 可以用 ; 分隔两个语句   // 如果别人用了圆括号，一定要在前面加 ; 分号
</span><span class="c1"></span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span> <span class="p">())</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>用【感叹号】最合适，因为感叹号不会往上面代码看，只会往后看</p>
</blockquote>]]></description>
</item><item>
    <title>JS 数组</title>
    <link>http://samrks.github.io/javascript-array/</link>
    <pubDate>Fri, 11 Sep 2020 21:34:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-array/</guid>
    <description><![CDATA[<p>「数组的基本方法」「伪数组」「数组的增删改查」「索引越界！」</p>
<p>​</p>
<h2 id="数组对象">数组对象</h2>
<blockquote>
<p>一种特殊的对象</p>
</blockquote>
<h2 id="js-其实没有真正的数组">JS 其实没有真正的数组</h2>
<blockquote>
<p>只是用对象去模拟数组</p>
</blockquote>
<p>其他语言、基于底层的语言，比如 C 语言，会告诉你【数组是连续的内存分配】</p>
<h2 id="js-数组不是典型数组">JS 数组不是典型数组</h2>
<h3 id="典型的数组">典型的数组</h3>
<ul>
<li>
<p>元素的数据类型相同</p>
</li>
<li>
<p>使用连续的内存存储</p>
</li>
<li>
<p>通过数字下标获取元素</p>
<p></p>
</li>
</ul>
<h3 id="但-js-的数组不这样">但 JS 的数组不这样</h3>
<blockquote>
<p>JS 的数组，实际上是用 key / value 模拟的，本质是对象</p>
</blockquote>
<p></p>
<ul>
<li>
<p>元素的数据类型可以不同</p>
</li>
<li>
<p>内存不一定是连续的（对象是随机存储的）</p>
</li>
<li>
<p>不支持数字下标，而是通过<strong>字符串下标</strong></p>
<ul>
<li>
<p>这意味着数组可以有任何 key</p>
</li>
<li>
<p>比如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>  <span class="c1">// [&#34;0&#34;, &#34;1&#34;, &#34;2&#34;]
</span><span class="c1"></span><span class="nx">arr</span><span class="p">[</span><span class="s1">&#39;xxx&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>   <span class="c1">// 下标为&#39;xxx&#39;，值为&#39;xxx&#39;
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">yyy</span> <span class="o">=</span> <span class="s1">&#39;yyy&#39;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p></p>
</li>
</ul>
<h2 id="创建一个数组-">创建一个数组 💡</h2>
<h3 id="新建">新建</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>           <span class="c1">// 简写
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>  <span class="c1">// 正规：方便理解原理
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>      <span class="c1">// [empty × 3] 数组为空，但 length为3
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="转化-arrayfrom-用字符串创建数组">转化（ Array.from 用字符串创建数组）</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="s1">&#39;1,2,3&#39;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>  <span class="c1">//  [&#34;1&#34;, &#34;2&#34;, &#34;3&#34;]
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="s1">&#39;123&#39;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>  
<span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="s1">&#39;123&#39;</span><span class="p">)</span>    <span class="c1">// 最新的ES标准提供的api：会把不是数组的东西，尝试变成数组
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>  <span class="c1">// []
</span><span class="c1"></span><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="c1">// []
</span><span class="c1"></span><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">})</span> <span class="c1">// []
</span><span class="c1"></span><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">({</span><span class="mi">0</span><span class="o">:</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="o">:</span><span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="o">:</span><span class="s1">&#39;c&#39;</span><span class="p">})</span> <span class="c1">// []
</span><span class="c1"></span><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">({</span><span class="mi">0</span><span class="o">:</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="o">:</span><span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="o">:</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="nx">length</span><span class="o">:</span> <span class="mi">3</span><span class="p">})</span> <span class="c1">// [&#34;a&#34;, &#34;b&#34;, &#34;c&#34;]
</span></code></pre></td></tr></table>
</div>
</div><p>总结：<code>Array.from()</code> 只在符合以下条件的情况下，才能<strong>把对象转换成数组</strong></p>
<ul>
<li>条件1 ：这个对象需要有 0,1,2,3… 这种形式的属性，符合数组的下标</li>
<li>条件2： 这个对象需要有 length 属性</li>
</ul>
<blockquote>
<p>满足以上条件，<code>Array.from(xxx)  </code> 就可以尝试把 一个对象 转化成 真正的数组</p>
</blockquote>
<h4 id="变态情况">变态情况</h4>
<ol>
<li>
<p>前面提到：JS 的数组 不支持数字下标，而是通过<strong>字符串下标</strong>。
那这里要转化的对象<code>{0:'a', 1:'b', 2:'c'}</code>的 key 值 0,1,2 都是数字，为什么可以被识别？</p>
<blockquote>
<p>答：当 JS 发现 0,1,2 是数字格式，会先自动调用  <code> (1).toString()</code> 方法，把数字全部转化为 字符串</p>
</blockquote>
</li>
<li>
<p>对象中的下标为 0,1,2  但 length 不为 3  的情况</p>
<p></p>
<blockquote>
<p>答：会以 length 为主，有多余的就删，不足就补 undefined。总之，length 值不变</p>
</blockquote>
</li>
<li>
<p>对象中的下标为乱序</p>
<p></p>
<blockquote>
<p>答：不会依照下标的乱序来转换数组，而是<strong>自动调整为顺序</strong>排列内容</p>
</blockquote>
</li>
</ol>
<h3 id="伪数组">伪数组</h3>
<ul>
<li>伪数组的原型链中并<strong>没有数组的原型</strong></li>
<li>换言之，如果一个数组，不具有数组的共有属性（push、pop…等方法），那它就是一个伪数组</li>
<li>可以通过 <code>Array.from()</code> 变成真正的数组</li>
</ul>
<p>下面的是【真数组】</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>  <span class="c1">// new Array(1,2,3,4)
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span>                      <span class="c1">// true
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>           <span class="c1">// true
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__proto__</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>下面的是【伪数组】</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>1<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>2<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>3<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kd">let</span> <span class="nx">divList</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>  <span class="c1">// 获取文档中所有div元素，组成一个数组
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">divList</span><span class="p">)</span> <span class="c1">// 伪数组
</span><span class="c1"></span>  <span class="nx">divList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>  <span class="c1">// 报错 TypeError: divList.push is not a function 伪数组不具有数组的共有属性
</span><span class="c1"></span>  
  <span class="kd">let</span> <span class="nx">divArray</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">divList</span><span class="p">)</span>  <span class="c1">// 把【伪数组】转换为【真数组】
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">divArray</span><span class="p">)</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>divList【伪数组】  ↓↓</p>
</blockquote>
<p></p>
<hr>
<blockquote>
<p>divArray 【真数组】 ↓↓</p>
</blockquote>
<p></p>
<blockquote>
<p>总结：没有数组共有属性的「数组」，就是伪数组</p>
<ul>
<li>不知道 JS 为什么要设计伪数组，没什么用。</li>
<li>如果拿到的是伪数组，尽量转换成真数组，再操作</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="合并两个数组得到新数组">合并两个数组，得到新数组</h3>
<blockquote>
<p>不改变原数组</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="nx">arr1</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">arr2</span><span class="p">)</span>   <span class="c1">// [3, 3, 3, 4, 4, 4]  // 返回一个新数组，原数组不改变
</span></code></pre></td></tr></table>
</div>
</div><h3 id="截取一个数组的一部分">截取一个数组的一部分</h3>
<blockquote>
<p>不改变原数组</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>  
<span class="nx">arr1</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">// 从第3个元素开始，获得新数组 [3,4,5,6]   // 原数组 arr1 不改变
</span></code></pre></td></tr></table>
</div>
</div><h3 id="截取数组全部">截取数组全部</h3>
<blockquote>
<p>不改变原数组</p>
</blockquote>
<ul>
<li>相当于把原数组复制了一遍</li>
<li>slice(0)  经常用于<strong>复制数组</strong>。JS 并没有提供专门的复制数组的方法，所以要实现复制效果，就使用 slice(0)</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="nx">arr1</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">// 全部截取，赋给arr2
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注意，所以 JS 原生提供的，都是【浅拷贝】，没有深拷贝</p>
<p>深拷贝在【押题】中讲解</p>
</blockquote>
<h2 id="数组的增删改查-">数组的增删改查 ❤️</h2>
<h3 id="删元素">删元素</h3>
<h4 id="-跟对象一样">🙁 跟对象一样</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">]</span>
<span class="k">delete</span> <span class="nx">arr</span><span class="p">[</span><span class="s1">&#39;0&#39;</span><span class="p">]</span>  <span class="c1">// arr[0] 可不加引号，此时js会自动加引号
</span><span class="c1"></span><span class="nx">arr</span>  <span class="c1">// [empty, &#39;b&#39;, &#39;c&#39;]    // 变成【稀疏数组】
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">delete</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="k">delete</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="nx">arr</span> <span class="c1">// [empty × 3]      // 变成【稀疏数组】
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>神奇，即使把元素全部 delete ，数组的长度也没有变</p>
</blockquote>
<p>​</p>
<h5 id="稀疏数组">稀疏数组</h5>
<blockquote>
<p>稀疏数组：只有长度 length，但没有对应的下标，这种数组就是稀疏数组</p>
<p>（感兴趣可以取了解一下，稀疏数组没什么好处，倒是有很多 bug）</p>
</blockquote>
<p>例 1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>   
<span class="nx">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>   <span class="c1">// 数组原本3个元素，下标0,1,2   // 现在添加第4个元素、下标为3
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1,2,3,4]  // 仍是普通数组，没有异常
</span><span class="c1"></span>
<span class="nx">arr</span><span class="p">[</span><span class="mi">100</span><span class="p">]</span> <span class="o">=</span> <span class="mi">101</span>  <span class="c1">// 数组原本4个元素，下标0,1,2,3，现在跳级直接添加下标为100的元素
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1, 2, 3, 4, empty × 96, 101]  // 如果跳级添加下标，会导致数组变成【稀疏数组】// length: 101
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>例 2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="k">delete</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="nx">arr</span> <span class="c1">// [1,empty,3]  length: 3    // 使用 delete 删除数组元素，也会导致【稀疏数组】
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h4 id="-如果直接改-length-可以删元素吗">🙁 如果直接改 length 可以删元素吗</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">1</span>  
<span class="nx">arr</span> <span class="c1">// [1]
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li>我X，居然可以？！</li>
<li>JS 真神奇</li>
<li><strong>重要忠告</strong>：不要随便改 length</li>
</ul>
<blockquote>
<p>🈲 尽量不要使用 delete 和 改 length 的方式，删除数组元素</p>
</blockquote>
<p>​</p>
<h4 id="-推荐-3-种-api">😍 推荐 3 种 API</h4>
<blockquote>
<p>一个对象提供的函数，就叫做 API 。书写形式： <code>对象.方法名()</code></p>
</blockquote>
<h5 id="删除头部的元素">删除头部的元素</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span> <span class="c1">// arr 被修改，并返回被删元素
</span></code></pre></td></tr></table>
</div>
</div><h5 id="删除尾部的元素">删除尾部的元素</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span> <span class="c1">// arr 被修改，并返回被删元素
</span></code></pre></td></tr></table>
</div>
</div><h5 id="删除中间的元素允许增加元素">删除中间的元素（允许增加元素）</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span>               <span class="c1">// 从下标为 index 的位置开始删除后面所有元素
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>            <span class="c1">// 从下标为 index 的位置开始删除 3 个元素
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>            <span class="c1">// 从下标为 index 的位置开始删除 1 个元素
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="o">-</span><span class="nx">index</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>           <span class="c1">// 从倒数第 index 位开始删除 3 个元素（index为负时，不表示下标）
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">)</span>       <span class="c1">// 并在删除位置添加 &#39;x&#39;
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">)</span>  <span class="c1">// 并在删除位置添加 &#39;x&#39;，&#39;y&#39;
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener noreffer">splice MDN</a>   功能非常强大</li>
</ul>
<h5 id="示例">示例</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span>  <span class="c1">// 1    // arr.shift() 删除第一个元素，返回被删除元素
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [2,3]
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span> <span class="c1">// 3     // arr.pop() 删除最后一个元素，返回被删除元素
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1,2]
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// [3]     // arr.slice(2,1) 在下标为2的位置删除1个元素，返回被删除元素组成的数组
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1,2,4,5,6,7]
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="c1">// [3,4,5]     // 从下标2开始删除3个元素，返回被删除元素组成的数组
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1,2,6,7]
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>      <span class="c1">// [3,4,5]  // 从下标2开始删除3个元素，添加元素0。返回被删除元素组成的数组
</span><span class="c1"></span><span class="nx">arr</span>                    <span class="c1">// [1,2,0,6,7]
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>  <span class="c1">// [0]      // 从下标2开始删除1个元素，添加元素3,4,5。返回被删除元素组成的数组
</span><span class="c1"></span><span class="nx">arr</span>                    <span class="c1">// [1,2,3,4,5,6,7]
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">777</span><span class="p">)</span>   <span class="c1">// [7]      // 从倒数第1位删除1个元素，添加元素777。返回被删除元素组成的数组
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<h3 id="查看所有元素">查看所有元素</h3>
<blockquote>
<p>遍历</p>
</blockquote>
<h4 id="-查看所有属性名">🙁 查看所有属性名</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span> 

<span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>   <span class="c1">// 遍历属性名
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="c1">// 遍历属性值
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">arr</span><span class="p">){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">key</span><span class="si">}</span><span class="sb">: </span><span class="si">${</span><span class="nx">arr</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span> <span class="p">}</span>  <span class="c1">// for-in 更适用于遍历对象
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Object.keys 、 Object.values、for…in… 这 3 种方法，都更适用于遍历对象，不适合遍历数组</p>
<ul>
<li>通常我们遍历数组，只希望查看对应正常顺序的下标的元素。</li>
<li>如果遍历数组，获取到一个下标为 &lsquo;x&rsquo; 的元素，可能是很奇怪的😱（如下图）</li>
<li>所以上述三种方式，虽然可以用，但<strong>不是</strong>最适合/最常见的遍历数组的方式</li>
</ul>
</blockquote>
<p></p>
<p>​</p>
<h4 id="-查看数字字符串属性名和值">😍 查看数字（字符串）属性名和值</h4>
<h5 id="for-循环">for 循环</h5>
<blockquote>
<ul>
<li>
<p>用 for 循环遍历（可以自己控制下标）</p>
</li>
<li>
<p>让下标  <code>i</code>  从 <code>0</code> 增长到 <code>length-1 </code></p>
</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">i</span><span class="si">}</span><span class="sb">: </span><span class="si">${</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span> 
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li><strong>for 循环，是访问数组的比较常见的形式</strong></li>
<li>for…in… 用来访问对象</li>
</ul>
<h5 id="foreach">forEach</h5>
<blockquote>
<p>forEach 接收一个函数作为参数。这种函数，称为回调函数</p>
<ul>
<li>
<p>forEach 的作用：就是遍历数组的每一项，<strong>访问到每一个元素都执行一遍回调函数</strong>。</p>
</li>
<li>
<p>该回调函数，默认参数</p>
<ul>
<li>【第1个形参】表示元素本身，通常写作 item</li>
<li>【第2个形参】表示当前下标，通常写作 index</li>
<li>【第3个形参】表示数组本身，通常写作 array （大部分情况用不到）</li>
</ul>
<p>形参的名称无所谓，顺序是关键</p>
</li>
</ul>
</blockquote>
<p><strong>例 1</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">){</span> <span class="c1">// 回调函数的默认第1个形参item表示元素本身、第2个形参index表示当前下标
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">index</span><span class="si">}</span><span class="sb">: </span><span class="si">${</span><span class="nx">item</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>也可以用 forEach/map 等原型上的函数</p>
<p></p>
</li>
</ul>
<h6 id="手写-foreach">手写 forEach</h6>
<blockquote>
<p>为了更好地理解上述代码（forEach）是怎么实现遍历数组的
下面手动封装一个 forEach 函数</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">forEach</span><span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">fn</span><span class="p">){</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// 访问传入的 array 的每一项，对每项执行什么操作呢？↓
</span><span class="c1"></span>    <span class="nx">fn</span><span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">array</span><span class="p">)</span>  <span class="c1">// 对每一项调用 fn，把数组的相关值作为参数传入到 fn 中
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>forEach 用 for 访问 array 的每一项</li>
<li>对每一项调用 <code>fn(array[i], i, array)</code>。数组有几项，fn 就执行几次</li>
<li>为什么要传入 array 呢？不为什么，规定如此。</li>
</ul>
<p><strong>例 2</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">]</span>
<span class="nx">forEach</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">z</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">z</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li>注意：例 2 是 <code>forEach(arr,function)</code>的形式 ，例 1 是 <code>arr.forEach(function)</code> 的形式。</li>
<li>两种写法其实是等价的。因为 JS 会自动把顺序倒过来，按照 例2  的形式执行</li>
</ul>
<h5 id="面试问区别是什么">面试问：区别是什么</h5>
<blockquote>
<p>两者区别，回答的关键点就是：<strong>前者能实现、而后者做不到的</strong></p>
</blockquote>
<ul>
<li>实际上大多数情况，for 和 forEach 都是通用的</li>
<li>只有一种情况
<ul>
<li>for 循环里面有 break 和 continue，而 forEach 是不支持的
forEach 只是个普通函数，而 for 是个 关键字，关键字的功能可能会更强大一点</li>
</ul>
</li>
</ul>
<p>示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">]</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">i</span><span class="si">}</span><span class="sb">: </span><span class="si">${</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">===</span><span class="mi">3</span><span class="p">){</span><span class="k">break</span><span class="p">;}</span>
<span class="p">}</span>
<span class="o">-----------------------------------------------------</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">i</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">===</span><span class="mi">3</span><span class="p">){</span><span class="k">return</span> <span class="kc">false</span><span class="p">}</span>  <span class="c1">// 无效
</span><span class="c1"></span><span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p><strong>⭐️区别：</strong></p>
<ol>
<li>for 循环中间，可以 break 或 continue。而 forEach 一旦开始就会一直走到尾，即使 return 也无法结束</li>
<li>for 是关键字，{  } 是块级作用域。而 forEach 是一个函数，{  } 是函数作用域</li>
</ol>
<p>​</p>
<p>​</p>
<h3 id="查看单个属性">查看单个属性</h3>
<h4 id="跟对象一样">跟对象一样</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">111</span><span class="p">,</span><span class="mi">222</span><span class="p">,</span><span class="mi">333</span><span class="p">]</span> 
<span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>注意：不论给下标什么数字，一定都会变成字符串。JS 中没有「数字下标」这么一说</p>
<p>​</p>
<h4 id="索引越界-">索引越界 ⭐️</h4>
<blockquote>
<p>「索引越界」指给的数组索引（下标）不存在</p>
</blockquote>
<p>下述两种情况，需要注意避免</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">[</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">===</span> <span class="kc">undefined</span> 
<span class="nx">arr</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="kc">undefined</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;=</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// i===length时，数组中并没有对应元素，值为 undefined
</span><span class="c1"></span>  <span class="nx">console</span><span class="mf">.1</span><span class="nx">og</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">toString</span><span class="p">())</span>
<span class="p">}</span>
<span class="c1">// 报错：Cannot read property &#39;toString&#39; of undefined （ undefined不是对象，没有toString ）
</span></code></pre></td></tr></table>
</div>
</div><p>访问任何不存在的下标时，得到的结果都是 undefined</p>
<blockquote>
<p>当碰到报错 Cannot read property &lsquo;xxx&rsquo; of undefined，很有可能是数组的索引越界了</p>
<p>解决办法：console.log 大法</p>
</blockquote>
<p></p>
<p>​</p>
<h4 id="查找某个元素是否在数组里">查找某个元素是否在数组里</h4>
<h5 id="-方法一遍历">❌ 方法一：遍历</h5>
<blockquote>
<p>降智写法</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">55</span><span class="p">]</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">===</span><span class="mi">22</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;arr中存在22&#39;</span><span class="p">)</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;不存在&#39;</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="-方法二api">😍 方法二：API</h5>
<blockquote>
<p>indexOf 返回只要不是 -1 ，就说明存在</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>  <span class="c1">// 存在返回下标，否则返回 -1
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">55</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">22</span><span class="p">)</span>  <span class="c1">// 1
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span>  <span class="c1">// 0
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">66</span><span class="p">)</span>  <span class="c1">// -1
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="查找满足条件的元素">查找满足条件的元素</h4>
<h5 id="降智写法遍历">❌降智写法：遍历</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">0</span><span class="p">){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`数组中的偶数：</span><span class="si">${</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span> <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// 数组中的偶数：2
</span><span class="c1">// 数组中的偶数：4
</span></code></pre></td></tr></table>
</div>
</div><h5 id="更好的方法使用-find">😍更好的方法：使用 find</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">item</span><span class="o">%</span><span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1">// 找第一个偶数
</span></code></pre></td></tr></table>
</div>
</div><p>完整写法</p>
<blockquote>
<p>find 用法：找到<strong>第一个</strong>符合条件（return true）的元素，就停止，并返回这个元素</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span><span class="o">%</span><span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span>
<span class="p">})</span>
<span class="c1">// 2
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="查找满足条件的元素的索引">查找满足条件的元素的索引</h4>
<blockquote>
<p>findIndex 用法：找到<strong>第一个</strong>符合条件（return true）的元素，就停止，并返回这个元素的下标</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">findlndex</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">item</span><span class="o">%</span><span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1">// 找第一个偶数的索引
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">44</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span><span class="o">%</span><span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span>
<span class="p">})</span>
<span class="c1">// 1
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="增加数组中的元素">增加数组中的元素</h3>
<h4 id="-不推荐">❌ 不推荐</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>   
<span class="nx">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>   <span class="c1">// 数组原本3个元素，下标0,1,2   // 现在添加第4个元素、下标为3
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1,2,3,4]  // 仍是普通数组，没有异常
</span><span class="c1"></span>
<span class="nx">arr</span><span class="p">[</span><span class="mi">100</span><span class="p">]</span> <span class="o">=</span> <span class="mi">101</span>  <span class="c1">// 数组原本4个元素，下标0,1,2,3，现在跳级直接添加下标为100的元素
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1, 2, 3, 4, empty × 96, 101]  // 如果跳级添加下标，会导致数组变成【稀疏数组】// length: 101
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p><code>arr[index]</code> 的方式，可以增加数组元素</p>
<p>但如果跳级增加下标，会导致数组变成【稀疏数组】，所以不推荐这种方式</p>
</blockquote>
<p>​</p>
<p>​</p>
<h4 id="-在尾部加元素">✅ 在尾部加元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">newItem</span><span class="p">)</span>      <span class="c1">// 修改 arr，返回新长度 
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">item1</span><span class="p">,</span> <span class="nx">item2</span><span class="p">)</span> <span class="c1">// 修改 arr，返回新长度
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">)</span>  <span class="c1">// 6   // 修改原数组，并返回该数组的新长度
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1, 2, 3, &#34;a&#34;, &#34;b&#34;, &#34;c&#34;]
</span><span class="c1"></span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">666</span><span class="p">)</span>
<span class="nx">arr</span> <span class="c1">// [1, 2, 3, &#34;a&#34;, &#34;b&#34;, &#34;c&#34;, 666]
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h4 id="-在头部加元素">✅ 在头部加元素</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">newItem</span><span class="p">)</span>      <span class="c1">// 修改 arr，返回新长度 
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">item1</span><span class="p">,</span> <span class="nx">item2</span><span class="p">)</span>  <span class="c1">// 修改 arr，返回新长度
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span><span class="s1">&#39;y&#39;</span><span class="p">,</span><span class="s1">&#39;z&#39;</span><span class="p">)</span> <span class="c1">// [&#34;x&#34;, &#34;y&#34;, &#34;z&#34;, 1, 2, 3]
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="mi">777</span><span class="p">)</span>         <span class="c1">// [777, &#34;x&#34;, &#34;y&#34;, &#34;z&#34;, 1, 2, 3]
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h4 id="-在中间添加元素">✅ 在中间添加元素</h4>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener noreffer">splice MDN</a>  功能强大</p>
<p>前面讲，可以用 splice 来[删除指定位置的元素](# 删除中间的元素（允许增加元素）)，这里用来<a href="" rel="">往指定位置添加元素</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">)</span>      <span class="c1">// 在 index 处插入&#39;x&#39;，原元素向后移一位  // 第2个参数写 0 表示不删除元素
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">666</span><span class="p">)</span>   <span class="c1">// []   // 返回被删除元素组成的数组，0表示不删除元素，所以返回空数组
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1, 666, 2, 3]
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>splice：可以删除元素、添加元素 （会用 splice 基本可以对数组进行任何操作）</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="修改数组中的元素">修改数组中的元素</h3>
<h4 id="直接修改">直接修改</h4>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="nx">arr</span> <span class="c1">// [1,0,3]
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>  <span class="c1">// [2]    // 把下标为1的元素删除，插入一个0  // 相当于修改元素
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1,0,3]
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="反转顺序-reverse">反转顺序 reverse</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">reverse</span><span class="p">()</span> <span class="c1">// 修改原数组
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">reverse</span><span class="p">()</span>  <span class="c1">// [3,2,1]
</span><span class="c1"></span><span class="nx">arr</span>            <span class="c1">// [3,2,1] 
</span></code></pre></td></tr></table>
</div>
</div><h5 id="著名面试题">著名面试题</h5>
<blockquote>
<p>翻转字符串</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">s</span> <span class="o">=</span> <span class="s1">&#39;abcde&#39;</span>
<span class="nx">s</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>                     <span class="c1">// [&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;, &#34;e&#34;]
</span><span class="c1"></span><span class="nx">s</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">reverse</span><span class="p">()</span>           <span class="c1">// [&#34;e&#34;, &#34;d&#34;, &#34;c&#34;, &#34;b&#34;, &#34;a&#34;]
</span><span class="c1"></span><span class="nx">s</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">reverse</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>  <span class="c1">// &#34;edcba&#34;
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="自定义顺序-sort">自定义顺序 sort</h4>
<blockquote>
<p>把乱序，改为【从大到小】或【从小到大】的顺序</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span>    <span class="c1">// 会改变原数组
</span></code></pre></td></tr></table>
</div>
</div><h5 id="从小到大">从小到大</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">()</span>   <span class="c1">// [1,2,3,4,5]  // sort 默认【从小到大】排序
</span></code></pre></td></tr></table>
</div>
</div><h5 id="从大到小怎么实现-">从大到小怎么实现 ？</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// sort 接收一个回调
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>   <span class="c1">// 两个形参，表示每次进行两两比较的两个数值
</span><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">){</span>
    <span class="k">return</span> <span class="mi">1</span>
  <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">b</span><span class="p">){</span>
    <span class="k">return</span> <span class="mi">0</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
  <span class="p">}</span>
<span class="p">})</span>  
<span class="c1">// [1, 2, 3, 4, 5]
</span><span class="c1"></span><span class="o">----------------------------------------------------------------------------------</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">){</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
  <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">b</span><span class="p">){</span>
    <span class="k">return</span> <span class="mi">0</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="k">return</span> <span class="mi">1</span>
  <span class="p">}</span>
<span class="p">})</span>
<span class="c1">// [5, 4, 3, 2, 1]
</span></code></pre></td></tr></table>
</div>
</div><h5 id="例">例</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;Kate&#39;</span><span class="p">,</span> <span class="nx">score</span><span class="o">:</span> <span class="mi">99</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;Jack&#39;</span><span class="p">,</span> <span class="nx">score</span><span class="o">:</span> <span class="mi">85</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;Ryan&#39;</span><span class="p">,</span> <span class="nx">score</span><span class="o">:</span> <span class="mi">100</span><span class="p">}</span>
<span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>需求：根据每一项的 score 进行排序</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">()</span> <span class="c1">// 显然无效，因为 JS 看不出要怎么比较，我们需要指定给 JS：让它用每一项的 score 来进行比较
</span></code></pre></td></tr></table>
</div>
</div><p>怎么指定？用回调函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;Kate&#39;</span><span class="p">,</span> <span class="nx">score</span><span class="o">:</span> <span class="mi">99</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;Jack&#39;</span><span class="p">,</span> <span class="nx">score</span><span class="o">:</span> <span class="mi">85</span><span class="p">},</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;Ryan&#39;</span><span class="p">,</span> <span class="nx">score</span><span class="o">:</span> <span class="mi">100</span><span class="p">}</span>
<span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>  <span class="c1">// a/b代表两两比较的数组元素（也就是3个对象）
</span><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">score</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">score</span><span class="p">){</span><span class="k">return</span> <span class="mi">1</span><span class="p">}</span>
  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">score</span> <span class="o">===</span> <span class="nx">b</span><span class="p">.</span><span class="nx">score</span><span class="p">){</span><span class="k">return</span> <span class="mi">0</span><span class="p">}</span>
  <span class="k">else</span><span class="p">{</span><span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h5 id="简化写法">简化写法</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">a</span><span class="o">-</span><span class="nx">b</span> <span class="c1">// a&gt;b返回一个正数，a&lt;b返回负数，a===b返回0
</span><span class="c1"></span><span class="p">})</span>
<span class="c1">// [1, 2, 3, 4, 5]
</span><span class="c1"></span><span class="o">-------------------------------------------------</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">b</span><span class="o">-</span><span class="nx">a</span>  <span class="c1">// b&gt;a返回一个正数，b&lt;a返回负数，a===b返回0
</span><span class="c1"></span><span class="p">})</span>
<span class="c1">// [5, 4, 3, 2, 1]
</span></code></pre></td></tr></table>
</div>
</div><p>==&gt; 箭头函数，进一步简化</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)=&gt;</span><span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span>  <span class="c1">// 从小到大
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)=&gt;</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span>  <span class="c1">// 从大到小
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">a</span><span class="p">.</span><span class="nx">score</span> <span class="o">-</span> <span class="nx">b</span><span class="p">.</span><span class="nx">score</span><span class="p">)</span>  <span class="c1">// 从小到大
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">score</span> <span class="o">-</span> <span class="nx">a</span><span class="p">.</span><span class="nx">score</span><span class="p">)</span>  <span class="c1">// 从大到小
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<p>​</p>
<h2 id="数组变换-">数组变换 ⚡️</h2>
<blockquote>
<p>高级 API</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">map</span><span class="p">([</span><span class="err">🐮</span><span class="p">,</span> <span class="err">🥔</span><span class="p">,</span> <span class="err">🐔</span><span class="p">,</span> <span class="err">🌽</span><span class="p">],</span> <span class="nx">cook</span><span class="p">)</span>     <span class="c1">// n变n
</span><span class="c1"></span> <span class="p">=&gt;</span> <span class="p">[</span><span class="err">🍔</span><span class="p">,</span> <span class="err">🍟</span><span class="p">,</span> <span class="err">🍗</span><span class="p">,</span> <span class="err">🍿</span><span class="p">]</span>

<span class="nx">filter</span><span class="p">([</span><span class="err">🍔</span><span class="p">,</span> <span class="err">🍟</span><span class="p">,</span> <span class="err">🍗</span><span class="p">,</span> <span class="err">🍿</span><span class="p">],</span> <span class="nx">isNotMeet</span><span class="p">)</span>    <span class="c1">// n变少
</span><span class="c1"></span> <span class="p">=&gt;</span> <span class="p">[</span><span class="err">🍟</span><span class="p">,</span> <span class="err">🍿</span><span class="p">]</span>

<span class="nx">reduce</span><span class="p">([</span><span class="err">🍔</span><span class="p">,</span> <span class="err">🍟</span><span class="p">,</span> <span class="err">🍗</span><span class="p">,</span> <span class="err">🍿</span><span class="p">],</span> <span class="nx">eat</span><span class="p">)</span>    <span class="c1">// n变1
</span><span class="c1"></span> <span class="p">=&gt;</span> <span class="err">💩</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h3 id="map">map</h3>
<blockquote>
<p>n 变 n</p>
<ul>
<li>
<p>ES6 新方法 map</p>
</li>
<li>
<p>map 会对数组进行遍历，可以对每一项都执行指定的操作（对数组元素每一项进行一一映射）</p>
</li>
<li>
<p>map 方法的返回值为【数组每一项经过回调处理后的返回值 组成的新数组】</p>
</li>
<li>
<p><strong>返回新的数组，不改变原数组</strong></p>
</li>
<li>
<p>语法： <code>Array.map(function(ele, index, arr){...});</code>  回调函数</p>
<ul>
<li>参数1：遍历的元素  item</li>
<li>参数2：元素下标  index</li>
<li>参数3：原数组 array （通常用不到这个参数）</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="例-1">例 1</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">];</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">ele</span><span class="p">,</span><span class="nx">index</span><span class="p">,</span><span class="nx">arr</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;ele ==&gt; &#34;</span><span class="p">,</span> <span class="nx">ele</span><span class="p">,</span><span class="s2">&#34; index ==&gt; &#34;</span><span class="p">,</span> <span class="nx">index</span> <span class="p">,</span><span class="s2">&#34; arr ==&gt; &#34;</span><span class="p">,</span><span class="nx">arr</span><span class="p">)</span>
<span class="p">})</span> 
<span class="c1">// [undefined,undefined,undefined,undefined] 
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li>
<p>因为回调里没有 return，所以会采用函数的默认返回值 undefined，作为每一项回调处理后的返回值，并将这4个返回值组成新的数组，作为最终返回值</p>
</li>
<li>
<p>所以最后结果就是 4 个 undefined 组成的新数组</p>
<blockquote>
<p>总结：</p>
<p>对每一项元素进行处理的语句要写在 return 后面。</p>
<p>否则每一项处理后的返回值都是 undefined</p>
</blockquote>
</li>
</ul>
<h4 id="例-2">例 2</h4>
<blockquote>
<p>需求：对 arr 进行操作（每个数乘2），返回新的数组[2,4,6,8]</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 以前的方法: for循环
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">newArr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span>   <span class="c1">// 返回新数组
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newArr</span><span class="p">)</span>  <span class="c1">// [2,4,6,8]
</span><span class="c1"></span><span class="o">--------------------------------------------------------------</span>
<span class="c1">// ES6: map
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">ele</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">ele</span><span class="o">*</span><span class="mi">2</span>
<span class="p">});</span>

<span class="c1">// 用箭头函数进行重构：return 的语句可以直接写在箭头后，省略&#39;return&#39;
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">ele</span> <span class="p">=&gt;</span> <span class="nx">ele</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">newArr</span><span class="p">)</span> <span class="c1">// [1,2,3,4]  [2,4,6,8]
</span></code></pre></td></tr></table>
</div>
</div><h4 id="例-3-计算每一项的平方">例 3 ：计算每一项的平方</h4>
<blockquote>
<p>需求：把 arr 的每一项都平方  （这个也可[用 reduce 实现](# 计算每一项的平方)）</p>
</blockquote>
<ul>
<li>
<p>for 循环（旧）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  
  <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">*</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>   <span class="c1">// 在原数组上进行修改
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">arr</span> <span class="c1">// [1, 4, 9, 16, 25, 36]
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>使用 map 简化过程（ES6 新增）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">item</span> <span class="o">*</span> <span class="nx">item</span><span class="p">)</span>  <span class="c1">// [1, 4, 9, 16, 25, 36]  返回新数组，原数组不改变
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="filter">filter</h3>
<blockquote>
<p>n 变少</p>
<ul>
<li>用于<strong>筛选</strong>数组中符合条件的<strong>全部元素</strong>，返回的是这些元素组成的新数组</li>
<li><strong>返回新的数组，不改变原数组</strong></li>
</ul>
</blockquote>
<h4 id="区别于-find-方法">区别于 find 方法</h4>
<ul>
<li><strong>find方法</strong> 查找符合条件的<strong>第一个元素</strong>，并返回这个<strong>元素</strong>；没有符合条件的元素，返回 <strong>undefined</strong></li>
<li><strong>filter方法</strong> 查找符合条件的<strong>全部元素</strong>，并返回这些元素组成的<strong>新数组</strong>；没有符合条件的元素，返回<strong>空数组<code>[ ]</code></strong></li>
</ul>
<h4 id="例-1-1">例 1</h4>
<p>需求：筛选出 arr 中的偶数（也可以<a href="#%e7%ad%9b%e9%80%89%e5%87%ba%e6%89%80%e6%9c%89%e5%81%b6%e6%95%b0" rel="">用 reduce 实现</a>）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">item</span><span class="o">%</span><span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span> <span class="p">)</span>   <span class="c1">// [2, 4, 6]  // 把符合条件、返回true的item，筛选出来组成新数组
</span></code></pre></td></tr></table>
</div>
</div><h4 id="例-2-1">例 2</h4>
<p>需求：筛选出大于等于3的元素</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">ele</span> <span class="p">,</span> <span class="nx">index</span> <span class="p">,</span> <span class="nx">arr</span><span class="p">)</span> <span class="p">=&gt;{</span>
  <span class="k">return</span> <span class="nx">ele</span> <span class="o">&gt;=</span> <span class="mi">3</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ele</span><span class="p">)</span>  <span class="c1">// 不会执行这句，因为函数中遇到 return 就返回（结束）了
</span><span class="c1"></span><span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newArr</span><span class="p">);</span> <span class="c1">// [3,4] 
</span></code></pre></td></tr></table>
</div>
</div><p>需求：筛选出大于等于10的元素</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span> <span class="nx">ele</span> <span class="p">=&gt;</span> <span class="nx">ele</span> <span class="o">&gt;=</span> <span class="mi">10</span> <span class="p">)</span> <span class="c1">// []
</span></code></pre></td></tr></table>
</div>
</div><h4 id="例-3-删除元素">例 3 ：删除元素</h4>
<blockquote>
<p>需求：删除数组中值为 3 的元素</p>
</blockquote>
<p>方法一：filter</p>
<p>会把<strong>符合条件的全部元素删除</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
<span class="nx">arr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">ele</span> <span class="p">=&gt;</span> <span class="nx">ele</span><span class="o">!==</span><span class="mi">3</span> <span class="p">)</span>  <span class="c1">// 筛选出不等于3的元素，相当于从数组中删除值为3的元素
</span><span class="c1">// filter会返回新的数组，再重新赋值给原数组，相当于从原数组中删除 值为3的元素
</span></code></pre></td></tr></table>
</div>
</div><p>方法二：findIndex + splice</p>
<p>会把<strong>符合条件的第一个元素删除</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">(</span><span class="nx">ele</span> <span class="p">=&gt;</span> <span class="nx">ele</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span>  <span class="c1">// 找到下标，通过splice方法从数组中删除对应下标的元素
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// [3]
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [4, 5, 6, 3, 3, 3, 7]
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="reduce">reduce</h3>
<blockquote>
<p>n 变 1</p>
<ul>
<li>reduce 是数组里面最难理解，也是功能最强大的 API（第二名是 splice）</li>
<li>reduce 可以代替 map 和 filter，只不过对新人有一定难度</li>
</ul>
</blockquote>
<h4 id="求数组元素之和">求数组元素之和</h4>
<h5 id="用-for-循环实现">用 for 循环实现</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1">// 作为结果的初始值为0
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span> <span class="o">&lt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>   <span class="c1">// sum = sum + arr[i]
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">)</span>  <span class="c1">// 15
</span></code></pre></td></tr></table>
</div>
</div><h5 id="用-reduce-来实现">用 reduce 来实现</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="c1">// arr.reduce(()=&gt;{}, 0)  // reduce中，0作为结果的初始值，写在第2个参数上 
</span><span class="c1"></span>										     <span class="c1">// 第1个参数是一个函数：规定每一次遍历要对上一次的结果进行什么操作
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">total</span><span class="p">,</span><span class="nx">current</span><span class="p">)=&gt;</span><span class="nx">total</span><span class="o">+</span><span class="nx">current</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1">// 15
</span><span class="c1">// reduce的回调函数，默认形参1是上一次的返回值（初始0），形参2是当前元素
</span><span class="c1">// 求和，就是要把上一次的结果再加上当前元素，获得二者的和，所以回调执行的就是 total+current
</span><span class="c1">// total初始值为0（相当于上面for循环例子中的sum）
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>第1轮，遍历获取元素 1，执行回调，total为初始值0 + current是当前遍历到的元素1，回调返回0+1=&gt; 1</li>
<li>第2轮，遍历获取元素 2，执行回调，total为上一次的返回值 1 + current：2，回调返回 1+2 =&gt; 3</li>
<li>第3轮，遍历获取元素 3，执行回调，total为上一次的返回值 3 + current：3，回调返回 3+3 =&gt; 6</li>
<li>第4轮，遍历获取元素 4，执行回调，total为上一次的返回值 6 + current：4，回调返回 6+4 =&gt; 10</li>
<li>第5轮，遍历获取元素 5，执行回调，total为上一次的返回值 10 + current：5，回调返回 10+5 =&gt; 15</li>
</ul>
<h5 id="变形">变形</h5>
<p>计算数组中成员的总年龄</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;张三&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">40</span><span class="p">},</span>
  <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;李四&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">50</span><span class="p">},</span>
  <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;王五&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">60</span><span class="p">}</span>
<span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">total</span><span class="p">,</span> <span class="nx">current</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">total</span><span class="p">,</span> <span class="nx">current</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span> <span class="c1">// 0 40   // 40 50   // 90 60
</span><span class="c1"></span>  <span class="k">return</span> <span class="nx">total</span> <span class="o">+</span> <span class="nx">current</span><span class="p">.</span><span class="nx">age</span>
<span class="p">},</span> <span class="mi">0</span><span class="p">)</span> 
<span class="c1">// 150
</span></code></pre></td></tr></table>
</div>
</div><h4 id="计算每一项的平方">计算每一项的平方</h4>
<h5 id="用-map-实现">用 map 实现</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">item</span> <span class="o">*</span> <span class="nx">item</span><span class="p">)</span>  <span class="c1">// [1, 4, 9, 16, 25, 36]  返回新数组，原数组不改变
</span></code></pre></td></tr></table>
</div>
</div><h5 id="用-reduce-实现">用 reduce 实现</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span> 
<span class="c1">// arr.reduce((total,current)=&gt;{ return total.push(current*current) }, [])  
</span><span class="c1">// 报错 total.push is not a function 因为 push 的返回值并不是新的数组，而是length，所以不能用 push
</span><span class="c1">// 连接两个数组，用 concat
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">result</span><span class="p">,</span> <span class="nx">item</span><span class="p">)=&gt;{</span> <span class="k">return</span> <span class="nx">result</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">item</span> <span class="o">*</span> <span class="nx">item</span><span class="p">)</span> <span class="p">},</span> <span class="p">[])</span> 
<span class="c1">// [1, 4, 9, 16, 25, 36]
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>补充：concat 用法：不修改原数组，返回新数组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>         <span class="c1">// [0, 1]
</span><span class="c1"></span><span class="nx">arr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>     <span class="c1">// [0, 1, 2]  所以必须重新赋值给arr，才能实现push效果
</span><span class="c1"></span><span class="nx">arr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">concat</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span> <span class="c1">// [0, 1, 2, 3, 4]
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h4 id="筛选出所有偶数">筛选出所有偶数</h4>
<h5 id="用-filter-实现">用 filter 实现</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">item</span><span class="o">%</span><span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span> <span class="p">)</span>   <span class="c1">// [2, 4, 6]  // 把符合条件、返回true的item，筛选出来组成新数组
</span></code></pre></td></tr></table>
</div>
</div><h5 id="用-reduce-实现-1">用 reduce 实现</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">result</span><span class="p">,</span><span class="nx">item</span><span class="p">)=&gt;{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">1</span><span class="p">){</span>  <span class="c1">// 如果是奇数，不做任何处理，直接返回 原result
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">result</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span> <span class="c1">// 如果是偶数，就把偶数连到result中，再返回新数组，作为下一轮的result
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">result</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">},[])</span>
</code></pre></td></tr></table>
</div>
</div><h6 id="简写">简写</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">result</span><span class="p">,</span><span class="nx">item</span><span class="p">)=&gt;</span> <span class="nx">item</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">?</span> <span class="nx">result</span> <span class="o">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">,</span> <span class="p">[])</span>
</code></pre></td></tr></table>
</div>
</div><h6 id="再进一步探索炫技">再进一步探索（炫技）</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">result</span><span class="p">,</span><span class="nx">item</span><span class="p">)=&gt;</span> 
  <span class="c1">// item % 2 === 1 ? result : result.concat(item) 
</span><span class="c1"></span>  <span class="c1">// 原理：如果item是奇数就不concat到result中
</span><span class="c1"></span>  <span class="c1">// ==&gt; 换言之，若是奇数，可concat一个空 // item%2===1 ? result.concat() : result.concat(item)
</span><span class="c1"></span>  <span class="c1">// ==&gt; 也就是，我总是需要concat一个东西 ==&gt; 那就可以转换为
</span><span class="c1"></span>  <span class="nx">result</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">item</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">?</span> <span class="p">[]</span> <span class="o">:</span> <span class="nx">item</span><span class="p">)</span>    
<span class="p">,</span> <span class="p">[])</span>

<span class="c1">// [2, 4, 6]
</span></code></pre></td></tr></table>
</div>
</div><h4 id="将多维数组转为一维数组">将多维数组，转为一维数组</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// reduce的参数total和current也可以执行【数组合并】这样的操作
</span><span class="c1"></span>
<span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="mi">6</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="p">[</span><span class="mi">4</span><span class="p">]]];</span>
<span class="kd">var</span> <span class="nx">fun</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">total</span><span class="p">,</span> <span class="nx">current</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">current</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">//递归
</span><span class="c1"></span>      <span class="kd">var</span> <span class="nx">news</span> <span class="o">=</span> <span class="nx">fun</span><span class="p">(</span><span class="nx">current</span><span class="p">);</span> <span class="c1">// 返回一个数组
</span><span class="c1"></span>      <span class="nx">total</span> <span class="o">=</span> <span class="nx">total</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">news</span><span class="p">);</span>
      <span class="k">return</span> <span class="nx">total</span> <span class="c1">// 将返回的数组拼接回total中
</span><span class="c1"></span>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">total</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">current</span><span class="p">);</span>
      <span class="k">return</span> <span class="nx">total</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="p">[])</span> <span class="c1">//[]：表示给total赋初始值，total是一个空数组
</span><span class="c1"></span>  <span class="k">return</span> <span class="nx">newArr</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fun</span><span class="p">(</span><span class="nx">arr</span><span class="p">));</span>
</code></pre></td></tr></table>
</div>
</div><p>多维数组转为一维数组，也可以用flat方法等【方法很多，可以查看es6入门2/zuoye目录中的大家的解法】</p>
<p></p>
<hr>
<ul>
<li>reduce 叫做累加器</li>
<li>对数组进行遍历，执行加减乘除操作等等</li>
<li>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</li>
<li>常用来【求和】</li>
<li>语法：<code>array.reduce(function(total, current, currentIndex, arr), initialValue)</code>
<ul>
<li><strong>参数 total ： 必需。上一次循环计算结束后的return返回值；</strong>
<ul>
<li>如果回调函数没有return，则第二次循环时total为undefined</li>
</ul>
</li>
<li>**参数 current **： 必需。当前的元素</li>
<li>参数 currentIndex：可选。当前元素下标</li>
<li>参数 arr：可选。原数组</li>
<li><strong>参数 initialValue</strong>：可选。传递给函数的初始值</li>
</ul>
</li>
</ul>
<h2 id="题目">题目</h2>
<h3 id="第一题把数字变成星期">第一题：把数字变成星期</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">item</span><span class="p">,</span><span class="nx">index</span><span class="p">)=&gt;{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="o">===</span><span class="mi">0</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;周日&#39;</span><span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="o">===</span><span class="mi">1</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;周一&#39;</span><span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="o">===</span><span class="mi">2</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;周二&#39;</span><span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="o">===</span><span class="mi">3</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;周三&#39;</span><span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="o">===</span><span class="mi">4</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;周四&#39;</span><span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="o">===</span><span class="mi">5</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;周五&#39;</span><span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="o">===</span><span class="mi">6</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;周六&#39;</span><span class="p">}</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr2</span><span class="p">)</span> 
<span class="c1">// [&#39;周日&#39;, &#39;周一&#39;, &#39;周二&#39;, &#39;周二&#39;, &#39;周三&#39;, &#39;周三&#39;, &#39;周三&#39;, &#39;周四&#39;, &#39;周四&#39;, &#39;周四&#39;, &#39;周四&#39;,&#39;周六&#39;]
</span></code></pre></td></tr></table>
</div>
</div><p>参考答案</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">i</span><span class="p">)=&gt;{</span>
  <span class="kr">const</span> <span class="nx">hash</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="o">:</span><span class="s1">&#39;周日&#39;</span><span class="p">,</span><span class="mi">1</span><span class="o">:</span><span class="s1">&#39;周一&#39;</span><span class="p">,</span><span class="mi">2</span><span class="o">:</span><span class="s1">&#39;周二&#39;</span><span class="p">,</span><span class="mi">3</span><span class="o">:</span><span class="s1">&#39;周三&#39;</span><span class="p">,</span><span class="mi">4</span><span class="o">:</span><span class="s1">&#39;周四&#39;</span><span class="p">,</span><span class="mi">5</span><span class="o">:</span><span class="s1">&#39;周五&#39;</span><span class="p">,</span><span class="mi">6</span><span class="o">:</span><span class="s1">&#39;周六&#39;</span><span class="p">}</span>
  <span class="k">return</span> <span class="nx">hash</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="第二题找出所有大于-60-分的成绩">第二题：找出所有大于 60 分的成绩</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">scores</span> <span class="o">=</span> <span class="p">[</span><span class="mi">95</span><span class="p">,</span><span class="mi">91</span><span class="p">,</span><span class="mi">59</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">42</span><span class="p">,</span><span class="mi">82</span><span class="p">,</span><span class="mi">72</span><span class="p">,</span><span class="mi">85</span><span class="p">,</span><span class="mi">67</span><span class="p">,</span><span class="mi">66</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">91</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">scores2</span> <span class="o">=</span> <span class="nx">scores</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">item</span><span class="p">=&gt;</span><span class="nx">item</span> <span class="o">&gt;</span> <span class="mi">60</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">scores2</span><span class="p">)</span> <span class="c1">// [95, 91, 82, 72, 85, 67, 66, 91]
</span></code></pre></td></tr></table>
</div>
</div><p>参考答案</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">scores</span> <span class="o">=</span> <span class="p">[</span><span class="mi">95</span><span class="p">,</span><span class="mi">91</span><span class="p">,</span><span class="mi">59</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">42</span><span class="p">,</span><span class="mi">82</span><span class="p">,</span><span class="mi">72</span><span class="p">,</span><span class="mi">85</span><span class="p">,</span><span class="mi">67</span><span class="p">,</span><span class="mi">66</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">91</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">scores2</span> <span class="o">=</span> <span class="nx">scores</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">n</span> <span class="p">=&gt;</span> <span class="nx">n</span><span class="o">&gt;=</span> <span class="mi">60</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">scores2</span><span class="p">)</span> <span class="c1">//  [95,91,82,72,85,67,66, 91]
</span></code></pre></td></tr></table>
</div>
</div><h3 id="第三题算出所有奇数之和">第三题：算出所有奇数之和</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">95</span><span class="p">,</span><span class="mi">91</span><span class="p">,</span><span class="mi">59</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">42</span><span class="p">,</span><span class="mi">82</span><span class="p">,</span><span class="mi">72</span><span class="p">,</span><span class="mi">85</span><span class="p">,</span><span class="mi">67</span><span class="p">,</span><span class="mi">66</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">91</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">sum</span><span class="p">,</span><span class="nx">n</span><span class="p">)=&gt;{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">0</span><span class="p">){</span><span class="k">return</span> <span class="nx">sum</span><span class="p">}</span>
  <span class="k">else</span><span class="p">{</span><span class="k">return</span> <span class="nx">sum</span><span class="o">+</span><span class="nx">n</span><span class="p">}</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">scores</span> <span class="o">=</span> <span class="p">[</span><span class="mi">95</span><span class="p">,</span><span class="mi">91</span><span class="p">,</span><span class="mi">59</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">42</span><span class="p">,</span><span class="mi">82</span><span class="p">,</span><span class="mi">72</span><span class="p">,</span><span class="mi">85</span><span class="p">,</span><span class="mi">67</span><span class="p">,</span><span class="mi">66</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">91</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">scores</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">sum</span><span class="p">,</span><span class="nx">n</span><span class="p">)=&gt;</span> <span class="nx">n</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">1</span> <span class="o">?</span> <span class="nx">sum</span><span class="o">+</span><span class="nx">n</span> <span class="o">:</span> <span class="nx">sum</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">)</span>  <span class="c1">// 598
</span></code></pre></td></tr></table>
</div>
</div><p>参考答案</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">scores</span> <span class="o">=</span> <span class="p">[</span><span class="mi">95</span><span class="p">,</span><span class="mi">91</span><span class="p">,</span><span class="mi">59</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">42</span><span class="p">,</span><span class="mi">82</span><span class="p">,</span><span class="mi">72</span><span class="p">,</span><span class="mi">85</span><span class="p">,</span><span class="mi">67</span><span class="p">,</span><span class="mi">66</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">91</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">scores</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">sum</span><span class="p">,</span> <span class="nx">n</span><span class="p">)=&gt;{</span>
  <span class="k">return</span> <span class="nx">n</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">0</span><span class="o">?</span><span class="nx">sum</span><span class="o">:</span><span class="nx">sum</span><span class="o">+</span><span class="nx">n</span>
<span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">)</span> <span class="c1">// 奇数之和：598
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="面试题">面试题</h2>
<h3 id="数据变换">数据变换</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span> 
  <span class="p">{</span><span class="nx">名称</span><span class="o">:</span> <span class="s1">&#39;动物&#39;</span><span class="p">,</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">parent</span><span class="o">:</span> <span class="kc">null</span><span class="p">},</span> 
  <span class="p">{</span><span class="nx">名称</span><span class="o">:</span> <span class="s1">&#39;狗&#39;</span><span class="p">,</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">parent</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> 
  <span class="p">{</span><span class="nx">名称</span><span class="o">:</span> <span class="s1">&#39;猫&#39;</span><span class="p">,</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">parent</span><span class="o">:</span> <span class="mi">1</span><span class="p">}</span>
<span class="p">]</span> 
<span class="c1">// 数组变成对象 
</span><span class="c1"></span><span class="p">{</span> 
  <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">名称</span><span class="err">：</span><span class="s1">&#39;动物&#39;</span><span class="p">,</span> <span class="nx">children</span><span class="o">:</span><span class="p">[</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">名称</span><span class="err">：</span><span class="s1">&#39;狗&#39;</span><span class="p">,</span> <span class="nx">children</span><span class="o">:</span> <span class="kc">null</span><span class="p">},</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">名称</span><span class="err">：</span><span class="s1">&#39;猫&#39;</span><span class="p">,</span> <span class="nx">children</span><span class="o">:</span> <span class="kc">null</span><span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>解</p>
<p>test-1，先想当然的试试</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">result</span><span class="p">,</span><span class="nx">item</span><span class="p">)=&gt;{</span>
  <span class="nx">result</span><span class="p">[</span><span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">item</span>
  <span class="k">return</span> <span class="nx">result</span>
<span class="p">},</span> <span class="p">{})</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>test-2，</p>
<p>如果在parent为null时，才往 result 添加 id，值为 item.id；parent不为空，就把 item 添加到 result.children数组中</p>
<p>初始化 result 把 id 和 children 加进去（注意children是数组）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">result</span><span class="p">,</span><span class="nx">item</span><span class="p">)=&gt;{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">parent</span> <span class="o">===</span> <span class="kc">null</span><span class="p">){</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span>
    <span class="nx">result</span><span class="p">[</span><span class="s1">&#39;名称&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">item</span><span class="p">[</span><span class="s1">&#39;名称&#39;</span><span class="p">]</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="k">delete</span> <span class="nx">item</span><span class="p">.</span><span class="nx">parent</span>
    <span class="nx">item</span><span class="p">.</span><span class="nx">children</span> <span class="o">=</span> <span class="kc">null</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">result</span>
<span class="p">},</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">children</span><span class="o">:</span> <span class="p">[]})</span>
</code></pre></td></tr></table>
</div>
</div><p>完。</p>]]></description>
</item><item>
    <title>JS 对象分类——原型 &amp; 类</title>
    <link>http://samrks.github.io/javascript-constructor-prototype-vs-class/</link>
    <pubDate>Mon, 07 Sep 2020 23:08:13 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-constructor-prototype-vs-class/</guid>
    <description><![CDATA[<p>「构造函数」「原型」「new 操作符」「类 class」</p>
<p>​</p>
<h2 id="对象需要分类吗">对象需要分类吗？</h2>
<blockquote>
<p>这是一个值得思考的问题</p>
</blockquote>
<p>我们来做一个小程序</p>
<ul>
<li>输出各种形状的面积和周长</li>
</ul>
<p>​</p>
<h2 id="一个正方形--square">一个正方形  Square</h2>
<p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">square</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="nx">width</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span> 
  <span class="nx">getArea</span><span class="p">(){</span> 
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>   <span class="c1">// 先简单的把this理解成当前对象，在「函数篇」会重新学习this 
</span><span class="c1"></span>  <span class="p">}</span><span class="err">，</span> 
  <span class="nx">getLength</span><span class="p">(){</span> 
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>分析</p>
<ul>
<li>声明一个「正方形」对象</li>
<li>「正方形」拥有三个属性：边长、面积、周长</li>
</ul>
<p>​</p>
<h2 id="一打正方形-">一打正方形 💡</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">square1</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="nx">width</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span> 
  <span class="nx">getArea</span><span class="p">(){</span> 
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
  <span class="p">}</span><span class="err">，</span> 
  <span class="nx">getLength</span><span class="p">(){</span> 
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">square2</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="nx">width</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span> 
  <span class="nx">getArea</span><span class="p">(){</span> 
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
  <span class="p">}</span><span class="err">，</span> 
  <span class="nx">getLength</span><span class="p">(){</span> 
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">square3</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
<span class="p">...</span>
<span class="kd">let</span> <span class="nx">square12</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>写12遍。这样写代码的，要么是新人，要么是傻子。</p>
<ul>
<li>这么写非常累，如果修改，需要逐个修改，非常非常麻烦</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="用-for-循环实现浪费内存">用 for 循环实现（浪费内存）</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">squareList</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">12</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>  <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>       <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>    <span class="nx">width</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nx">getArea</span><span class="p">(){</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
    <span class="p">},</span>
    <span class="nx">getLength</span><span class="p">(){</span> 
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>如果 width 不全是 5，怎么实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">squareList</span> <span class="o">=</span> <span class="p">[]</span>
<span class="kd">let</span> <span class="nx">widthList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>   <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">12</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">width</span><span class="o">:</span> <span class="nx">widthList</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span>  <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>    <span class="nx">getArea</span><span class="p">(){</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
    <span class="p">},</span>
    <span class="nx">getLength</span><span class="p">(){</span> 
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="分析">分析</h4>
<ul>
<li>虽然实现了需求，但上面写法仍属于「垃圾代码」，浪费了太多内存，自己画 <strong>内存图</strong> 就知道了</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">squareList</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">getArea</span> <span class="o">===</span> <span class="nx">squareList</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">getArea</span>   <span class="c1">// false
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">&lt;</span><span class="nx">img</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&#34;https://i.loli.net/2020/09/03/kQiTnhXL92HNabF.jpg&#34;</span> <span class="nx">alt</span><span class="o">=</span><span class="s2">&#34;内存图-循环过程&#34;</span> <span class="o">/&gt;</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>会画内存图的人， 比其他人理解的更好</p>
<ul>
<li>内存中，一共创建了 24 个函数，其中 22 个都是多余重复的</li>
</ul>
</blockquote>
<p></p>
<p>​</p>
<h3 id="借助原型-">借助原型 √</h3>
<blockquote>
<p>将12个正方形对象的共有属性放到原型里</p>
</blockquote>
<p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">squareList</span> <span class="o">=</span> <span class="p">[]</span> 
<span class="kd">let</span> <span class="nx">widthList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span> 
<span class="kd">let</span> <span class="nx">squarePrototype</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="nx">getArea</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="p">},</span> 
  <span class="nx">getLength</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span> <span class="p">}</span>
<span class="p">}</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">12</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
  <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">squarePrototype</span><span class="p">)</span> <span class="c1">// 每一个正方形都以squarePrototype为原型，共享方法
</span><span class="c1"></span>  <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">widthList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
<span class="p">}</span> 
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">squareList</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">getArea</span> <span class="o">===</span> <span class="nx">squareList</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">getArea</span>   <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p></p>
<h4 id="分析-1">分析</h4>
<blockquote>
<p>有人指出创建一个正方形的代码分散在两个地方很不优雅，于是我们用一个函数把这两部分联系起来</p>
</blockquote>
<ul>
<li>还是垃圾代码！创建square的代码太分散了！</li>
<li>在上面基础上，应该再把代码抽离到一个函数里，实现调用函数 就可以创建正方形 —— 封装函数</li>
</ul>
<p>​</p>
<h3 id="抽离到函数封装">抽离到函数（封装）⭐️</h3>
<blockquote>
<ul>
<li>将创建正方形的代码，整合到一个 function 中</li>
<li>直接调用 function 即可创建出对应个数的正方形对象</li>
</ul>
</blockquote>
<p>这种过程就叫做「封装」</p>
<ul>
<li>把细节写到一个函数里，调用函数、传参，就搞定了</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">squareList</span> <span class="o">=</span> <span class="p">[]</span>
<span class="kd">let</span> <span class="nx">widthList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span> 

<span class="kd">function</span> <span class="nx">createSquare</span><span class="p">(</span><span class="nx">width</span><span class="p">){</span> <span class="c1">// 此函数叫做「构造函数」详见一下版块
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">squarePrototype</span><span class="p">)</span>   <span class="c1">// 以 squarePrototype 为原型创建空对象 
</span><span class="c1"></span>  <span class="nx">obj</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span> 
  <span class="k">return</span> <span class="nx">obj</span> 
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">squarePrototype</span> <span class="o">=</span> <span class="p">{</span> 
  <span class="nx">getArea</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="p">}</span> 
  <span class="nx">getLength</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span> <span class="p">}</span> 
<span class="p">}</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">12</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
  <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">createSquare</span><span class="p">(</span><span class="nx">widthList</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>  <span class="c1">// 这下创建 square 很简单了吧！
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="构造函数-">构造函数 ⭐️</h2>
<ul>
<li>就是可以构造出对象的函数</li>
</ul>
<h3 id="函数和原型结合进一步封装">函数和原型结合（进一步封装）⭐️</h3>
<blockquote>
<p>进一步封装</p>
<ul>
<li>squarePrototype 原型 和 creatSquare 函数，还是分散的</li>
<li>能不能组合在一起？</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">squareList</span> <span class="o">=</span> <span class="p">[]</span> 
<span class="kd">let</span> <span class="nx">widthList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span> 
<span class="kd">function</span> <span class="nx">createSquare</span><span class="p">(</span><span class="nx">width</span><span class="p">){</span>  <span class="c1">// 构造函数：用于创建 square 对象
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">createSquare</span><span class="p">.</span><span class="nx">squarePrototype</span><span class="p">)</span> 
  <span class="c1">// 先使用后定义？NO，这里并未执行，执行时已经定义完了
</span><span class="c1"></span>  <span class="nx">obj</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span> 
  <span class="k">return</span> <span class="nx">obj</span> 
<span class="p">}</span>
<span class="nx">createSquare</span><span class="p">.</span><span class="nx">squarePrototype</span> <span class="o">=</span> <span class="p">{</span> <span class="c1">// 把原型放到构造函数上，结合够紧密了吗？
</span><span class="c1"></span>  <span class="nx">getArea</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="p">},</span>
  <span class="nx">getLength</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span> <span class="p">},</span> 
  <span class="nx">constructor</span><span class="o">:</span> <span class="nx">createSquare</span> <span class="c1">// 再把构造函数放到原型上，方便通过原型找到构造函数 
</span><span class="c1"></span>	<span class="c1">// 原型和构造函数互相引用，非常紧密
</span><span class="c1"></span>  <span class="c1">// 可以通过createSquare函数，找到原型squarePrototype。也可以拿到原型，方便的找到createSquare函数
</span><span class="c1"></span><span class="p">}</span> 
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">12</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
  <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">createSquare</span><span class="p">(</span><span class="nx">widthList</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">constructor</span><span class="p">)</span> <span class="c1">// ƒ createSquare(width){...}
</span><span class="c1"></span>  <span class="c1">// 打印 constructor 可以知道谁构造了 squareList[0→11] 对象：你妈是谁？
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>函数上面也可以用「点 . 」？</p>
<ul>
<li>因为函数属于对象</li>
</ul>
<blockquote>
<p>此时，代码已经没有进一步优化的空间了</p>
<ul>
<li>这段代码几乎完美</li>
<li>为什么不固定下来，让每个JS开发者直接用呢?</li>
<li>这时 JS 就有了 new 操作符 来帮我们实现</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="new-操作符-">new 操作符 ⭐️</h3>
<blockquote>
<p>让我们感受JS之父的爱</p>
<ul>
<li>JS 之父创建了 new 关键字，可以让我们可以再少写几行代码</li>
<li><a href="https://zhuanlan.zhihu.com/p/23987456" target="_blank" rel="noopener noreffer">JS 的 new 到底是干什么的？</a>⚡️⚡️⚡️⚡️（必读！！！）</li>
</ul>
</blockquote>
<h4 id="函数和原型结合重写">函数和原型结合（重写）⭐️⭐️</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">squareList</span> <span class="o">=</span> <span class="p">[]</span> 
<span class="kd">let</span> <span class="nx">widthList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span> 

<span class="kd">function</span> <span class="nx">Square</span><span class="p">(</span><span class="nx">width</span><span class="p">){</span>  <span class="c1">// 构造函数
</span><span class="c1"></span>  <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span> 
<span class="p">}</span>

<span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="p">}</span> 
<span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getLength</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span> <span class="p">}</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">12</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span> 
  <span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Square</span><span class="p">(</span><span class="nx">widthList</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> 
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">squareList</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">constructor</span><span class="p">)</span> 
<span class="p">}</span>
<span class="c1">// 多美，几乎没有一句多余的废话 
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>每个函数创建时，都自带有prototype属性，这是JS之父故意的</p>
</li>
<li>
<p>每个prototype都自带有constructor属性，也是故意的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(){}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">f1</span><span class="p">)</span>
<span class="nx">f1</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nx">f1</span>   <span class="c1">// true   // 函数原型上的constructor等于函数本身
</span></code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ul>
<p>​</p>
<h4 id="对比">对比</h4>
<p></p>
<ul>
<li>上面的代码被简化为下面的代码</li>
<li>唯一的区别是要用 new 来调用</li>
</ul>
<p></p>
<h4 id="细节">细节</h4>
<ul>
<li>
<p>creatSquare  =&gt;  Square 函数名变了</p>
</li>
<li>
<p>之前需要创建对象，让对象的原型指向拥有 getArea 和 getLength 的那个对象 。
现在这句话不用写了，new 会帮我们实现</p>
</li>
<li>
<p>用 this 代表新的对象（this 会指向临时对象）</p>
</li>
<li>
<p>return obj 也不用写了，new 会帮我们实现（函数原本三行，压缩成一行，其他 new 会帮我们实现）</p>
</li>
<li>
<p>现在，把 getArea 和 getLength 通过「点方法」挨个添加到 prototype 上，不能直接给 prototype 赋新值，会导致丢失原本的 constructor（可以用 Object.assign 批量添加）</p>
</li>
<li>
<p>最后，声明新对象时，用 new Square(width)</p>
</li>
</ul>
<p>​</p>
<h2 id="总结-">总结 ⚡️⚡️⚡️</h2>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/23987456" target="_blank" rel="noopener noreffer">JS 的 new 到底是干什么的？</a>⚡️⚡️⚡️⚡️（必读！！！）</p>
</blockquote>
<h3 id="new-x-自动做了四件事情">new X() 自动做了四件事情</h3>
<ol>
<li>
<p>自动创建空对象</p>
</li>
<li>
<p>自动为空对象关联原型，原型地址指定为 <code>X.prototype</code></p>
</li>
<li>
<p>自动将空对象作为 this 关键字运行构造函数</p>
<ul>
<li>this 就是我们new构造函数创建的对象</li>
</ul>
</li>
<li>
<p>自动 return this</p>
</li>
</ol>
<p>——这就是 JS 之父的爱</p>
<h3 id="构造函数-x">构造函数 X</h3>
<ul>
<li>X 函数本身负责给对象本身添加属性</li>
<li><code>X.prototype</code> 对象负责保存对象的共用属性</li>
</ul>
<h3 id="原型与共有属性的关系">原型与共有属性的关系</h3>
<blockquote>
<p>因为 JS 引擎按照「堆栈」来分配内存、存储数据
根据「堆栈」的规则，简单类型在「栈区 Stack」存储，复杂类型在「堆区 Heap」存储</p>
<ul>
<li>X.prototype 的值是，原型的地址
<ul>
<li>因为原型是一个对象，对象是以「堆」的形式存储，所以严格来说，X.prototype的值是：原型的地址</li>
</ul>
</li>
</ul>
<ul>
<li>这个地址，对应到计算机中的那一坨内存，才是原型本身</li>
<li>而原型中，有很多属性/方法：toString、valueOf … 它们就是「共有属性」（原创的词）</li>
<li>共有属性的集合就是原型</li>
</ul>
<blockquote>
<p>如果会画内存图，会理解的更清楚   ↓↓↓</p>
</blockquote>
</blockquote>
<p></p>
<p>​</p>
<p>​</p>
<h2 id="示例">示例</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">Dog</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span> 
	<span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>  
	<span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s1">&#39;white&#39;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">kind</span> <span class="o">=</span> <span class="s1">&#39;萨摩耶&#39;</span>    <span class="c1">// this 就是我们new构造函数创建的对象
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">Dog</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">say</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;汪汪&#39;</span><span class="p">)</span> <span class="p">}</span>    <span class="c1">// 共用函数
</span><span class="c1"></span><span class="nx">Dog</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">run</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;狗在跑&#39;</span><span class="p">)</span> <span class="p">}</span>

<span class="kd">let</span> <span class="nx">dog1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dog</span><span class="p">(</span><span class="s1">&#39;小白&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">Dog</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="s1">&#39;狗&#39;</span>   <span class="c1">// 共用的不一定都是函数, 也可以共用属性。
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">dog2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dog</span><span class="p">(</span><span class="s1">&#39;小黑&#39;</span><span class="p">)</span>
<span class="nx">dog1</span><span class="p">.</span><span class="nx">x</span> <span class="c1">// &#39;狗&#39;
</span><span class="c1"></span><span class="nx">dog2</span><span class="p">.</span><span class="nx">x</span> <span class="c1">// &#39;狗&#39;
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="题外话代码规范">题外话：代码规范</h2>
<h3 id="大小写">大小写</h3>
<ul>
<li>所有构造函数（专门用于创建对象的函数）首字母大写</li>
<li>所有被构造出来的对象，首字母小写</li>
</ul>
<h3 id="词性">词性</h3>
<ul>
<li>new 后面的函数（构造函数），使用名词形式。 如 <code>new Person()</code>、<code>new Object()</code></li>
<li>普通函数，一般使用动词开头。如 <code>createSquare(5)</code>、<code>createElement('div')</code></li>
<li>其他规则以后再说</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="总结一个非常重要的公式-">总结一个非常重要的公式 💋</h2>
<blockquote>
<p>也是 JS 里唯一的一个公式</p>
</blockquote>
<p>很多前端对于原型的理解是通过画图，实际上是可以通过公式来表示的
只有方方的课才能看到，若愚的课也没有</p>
<h3 id="如何确定一个对象的原型">如何确定一个对象的原型</h3>
<p>为什么</p>
<ul>
<li><code>let obj = new Object()</code>的原型是 <code>Object.prototype </code></li>
<li><code>let arr = new Array()</code>的原型是 <code>Array.prototype </code></li>
<li><code>let square = new Square()</code>的原型是 <code>Square.prototype </code></li>
<li><code>let fn = new Function()</code>的原型是 <code>Function.prototype</code></li>
</ul>
<blockquote>
<p>可以总结出，一个对象通过 new XXX 创建出来，那么 XXX.prototype 就是这个对象的原型</p>
</blockquote>
<p>因为 new 操作故意这么做的</p>
<p></p>
<p>​</p>
<h3 id="结论">结论</h3>
<blockquote>
<p>你是谁构造的
你的原型就是谁的 prototype 属性
对应的对象</p>
</blockquote>
<ul>
<li>很多前端会说 prototype 就是原型</li>
<li>实际上、严格来说，prototype 只是存了个地址，不是对象。</li>
<li>prototype 地址对应的那块内存、内存中所有共有属性的集合，才是原型对象本身</li>
</ul>
<blockquote>
<p>⚡️⚡️⚡️⚡️ 原型公式 ⚡️⚡️⚡️</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">对象</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">其构造函数</span><span class="p">.</span><span class="nx">prototype</span>
</code></pre></td></tr></table>
</div>
</div></blockquote>
<p>​</p>
<h3 id="例-">例 💋</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">X</span><span class="p">(</span><span class="nx">width</span><span class="p">){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span>
<span class="p">}</span>
<span class="nx">X</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="p">}</span>
<span class="nx">X</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getLength</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span> <span class="p">}</span>
<span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">X</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">X</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>构造函数的原型：<code>X.prototype </code> 是 #309</li>
<li>构造出的对象 a 和 b 的原型 ：<code> a.__proto__</code> 和 <code>b.__proto__</code> 也是 #309</li>
</ul>
<p></p>
<p>补充：#109 结构</p>
<p></p>
<p>​</p>
<h3 id="参考资料">参考资料</h3>
<p><a href="https://www.zhihu.com/question/56770432/answer/315342130" target="_blank" rel="noopener noreffer">JS 中 <code>__proto__</code> 和 <code>prototype</code> 存在的意义是什么？</a></p>
<p>​</p>
<h3 id="做几个题">做几个题</h3>
<blockquote>
<p>来理解公式：<strong><code>对象.__proto__ === 其构造函数.prototype</code></strong></p>
</blockquote>
<h4 id="难度1">难度1</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">{}</span>
</code></pre></td></tr></table>
</div>
</div><p>请问：</p>
<ol>
<li>
<p>x的原型是什么？  Object.prototype</p>
</li>
<li>
<p><code>x.__proto__</code>的值是什么？  Object.prototype</p>
</li>
<li>
<p>上面两个问题是等价的吗？</p>
</li>
<li>
<p>请用内存图画出x的所有属性</p>
</li>
</ol>
<p>答：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// x的原型
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// x.__proto__
</span><span class="c1"></span><span class="nx">x</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>   <span class="c1">// true  二者是等价的
</span><span class="c1"></span><span class="nx">x</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">window</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// true  「window.」可省略
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h4 id="难度2">难度2</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">Square</span><span class="p">(</span><span class="nx">width</span><span class="p">){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">square</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Square</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>  <span class="err">⚡️⚡️⚡️</span>
</code></pre></td></tr></table>
</div>
</div><p>请问：</p>
<ol>
<li>square的原型是什么？</li>
<li><code>square.__proto__</code>的值是什么？</li>
<li>请用内存图画出 square 的所有属性</li>
</ol>
<p>答：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// square的原型
</span><span class="c1"></span><span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// square.__proto__   
</span><span class="c1">// 1/2两个问题是等价的（带入公式理解）
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h4 id="难度3">难度3</h4>
<p>请问：</p>
<ol>
<li>Object.prototype 是哪个函数构造出来的？</li>
<li>Object.prototype 的原型是什么？</li>
<li><code>Object.prototype.__proto__</code> 值是什么?</li>
<li>请用内存图画出上述内容</li>
</ol>
<p>答：</p>
<ol>
<li>
<p>未知，Object.prototype 是默认就存在的，没有谁把它构造出来</p>
</li>
<li>
<p>没有原型</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="kc">null</span>   <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<p>​</p>
<p>​</p>
<h2 id="构造函数prototypenew">构造函数、prototype、new</h2>
<blockquote>
<p>通过 Square 的例子，已经可以基本理解了</p>
</blockquote>
<p><strong>构造函数</strong></p>
<ul>
<li>用来创建对象的函数，就是构造函数（特点：首字母大写）</li>
</ul>
<p>​</p>
<p><strong>prototype</strong></p>
<ul>
<li>
<p>不论构造函数、还是普通函数，每一个函数（对象）都有一个 prototype，用来存放共有属性</p>
</li>
<li>
<p>每个对象都有原型，但除了「根对象 Object.prototype」比较特殊，Object.prototype 这个对象的原型为空 null</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span><span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span><span class="p">}</span>
<span class="nx">add</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// 不仅是构造函数，普通函数也有 prototype
</span><span class="c1"></span><span class="k">delete</span> <span class="nx">add</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// false  而且删不掉，仍然存在
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<p><strong>new</strong>：会帮我们做四件事情（省略了很多代码）</p>
<ol>
<li>创建一个临时对象</li>
<li>把这个对象指向一个原型</li>
<li>把这个对象作为 this 来运行这个构造函数</li>
<li>return this</li>
</ol>
<p>​</p>
<h2 id="square-最终版存疑">Square 最终版（存疑）</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">Square</span><span class="p">(</span><span class="nx">width</span><span class="p">){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span>
<span class="p">}</span>
<span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
<span class="p">}</span>
<span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getLength</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">square</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Square</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="nx">square</span><span class="p">.</span><span class="nx">width</span>         <span class="c1">// 5
</span><span class="c1"></span><span class="nx">square</span><span class="p">.</span><span class="nx">getArea</span><span class="p">()</span>     <span class="c1">// 25
</span><span class="c1"></span><span class="nx">square</span><span class="p">.</span><span class="nx">getLength</span><span class="p">()</span>   <span class="c1">// 20
</span></code></pre></td></tr></table>
</div>
</div><p>为什么说存疑：因为还有一个更简化的版本，后面再讲</p>
<p>​</p>
<p>​</p>
<h2 id="圆形-circle">圆形 Circle</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">Circle</span><span class="p">(</span><span class="nx">radius</span><span class="p">){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span>
<span class="p">}</span>
<span class="nx">Circle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getLength</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span>
<span class="p">}</span>
<span class="nx">Circle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">c1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="nx">c1</span><span class="p">.</span><span class="nx">radius</span>        <span class="c1">// 10
</span><span class="c1"></span><span class="nx">c1</span><span class="p">.</span><span class="nx">getLength</span><span class="p">()</span>   <span class="c1">// 31.41592653589793
</span><span class="c1"></span><span class="nx">c1</span><span class="p">.</span><span class="nx">getArea</span><span class="p">()</span>     <span class="c1">// 314.1592653589793
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="长方形-rectangle">长方形 Rectangle</h2>
<p>两个参数：宽、高</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">Rect</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span>
<span class="p">}</span>
<span class="nx">Rect</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">height</span>
<span class="p">}</span>
<span class="nx">Rect</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getLength</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="k">return</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">r1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Rect</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="nx">r1</span><span class="p">.</span><span class="nx">width</span>
<span class="nx">r1</span><span class="p">.</span><span class="nx">height</span>
<span class="nx">r1</span><span class="p">.</span><span class="nx">getLength</span><span class="p">()</span>
<span class="nx">r1</span><span class="p">.</span><span class="nx">getArea</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h2 id="对象需要分类吗-1">对象需要分类吗？🧐</h2>
<blockquote>
<p>回到最初的问题</p>
</blockquote>
<blockquote>
<h3 id="答案是-需要分类">答案是 需要分类</h3>
</blockquote>
<p>因为不同的对象有不同的功能，某些对象具有相同功能，某些对象具有不同功能</p>
<h3 id="理由一">理由一</h3>
<ul>
<li>有很多对象拥有一样的属性和行为</li>
<li>需要把它们分为同一类</li>
<li>如 square1 和 square2
如 圆1、圆2、圆3，都是圆
如 长方形1、长方形2，都是长方形
…</li>
<li>这样创建类似对象的时候就很方便
<ul>
<li>直接 new 一个 Square、new Circle、new Rect … 然后传参，就能创建出相应图形的对象</li>
<li>就不需要【 <code>let square1 = {…}; let square2 = {…} </code> 然后把所有属性写一遍】，这样会很麻烦</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="理由二">理由二</h3>
<ul>
<li>
<p>但是还有很多对象拥有其他的属性和行为</p>
</li>
<li>
<p>所以就需要不同的分类</p>
</li>
<li>
<p>比如 Square / Circle / Rect 就是不同的分类</p>
</li>
<li>
<p>Array / Function 也是不同的分类</p>
</li>
<li>
<p>而 <strong>Object 创建出来的对象，是最没有特点的对象</strong>（没有什么额外更多的功能，相对比较普通）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">{}</span>   <span class="c1">// 等价于  let x = new Object()
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="类型-vs-类">类型 vs. 类</h2>
<blockquote>
<p>「 类型  &amp;  类 」有什么区别 ？</p>
</blockquote>
<h3 id="类型">类型</h3>
<ul>
<li>类型是 JS 数据的分类，有 7 种</li>
<li>四基两空一对象
<ol>
<li>string</li>
<li>number</li>
<li>boolean</li>
<li>symbol</li>
<li>null</li>
<li>undefined</li>
<li>object</li>
</ol>
</li>
</ul>
<h3 id="类">类</h3>
<ul>
<li><strong>类是针对于对象的分类，有无数种</strong>
<ul>
<li>Object 创建出来的对象，是最没有特点的对象</li>
<li>只要觉得需要再创建一个分类，就再写一个 构造函数，new 出来新的分类对象</li>
</ul>
</li>
<li><strong>常见的有 Array、Function、Date(日期)、RegExp(正则) 等</strong></li>
</ul>
<p>​</p>
<h2 id="有特色的类-">有特色的类 ⭐️</h2>
<blockquote>
<p>上面提到 Object 创建的的对象，是最没有特色的类</p>
<p>那什么是有特色的的类？举两个例子：数组对象、函数对象</p>
<p>（在其他语言中，数组、函数可能都不是对象，但在 JS 中，数组/函数 都属于对象）</p>
</blockquote>
<h3 id="数组对象">数组对象</h3>
<h4 id="定义一个数组">定义一个数组</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="c1">// 简写
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="c1">// 元素为 1,2,3  // arr [1,2,3]
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>  <span class="c1">// 长度为 3   // arr [empty×3]
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="数组对象的自身属性">数组对象的自身属性</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="c1">// arr的自身属性有 4 个： &#39;0&#39;/&#39;1&#39;/&#39;2&#39;/&#39;length&#39;
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注意，属性名没有数字，只有字符串</p>
</blockquote>
<ul>
<li>属性名：&lsquo;0&rsquo;/&lsquo;1&rsquo;/&lsquo;2&rsquo;  ，都是字符串</li>
<li>灰色属性，是不能被遍历到的：如 <code>length</code>、<code>__proto__</code></li>
</ul>
<p></p>
<p></p>
<h4 id="数组对象的共用属性">数组对象的共用属性</h4>
<blockquote>
<ol>
<li>共有属性非常多，都存储在数组对象的 <code>__proto__</code> 中</li>
</ol>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;push&#39;</span><span class="o">/</span><span class="s1">&#39;pop&#39;</span><span class="o">/</span><span class="s1">&#39;shift&#39;</span><span class="o">/</span><span class="s1">&#39;unshift&#39;</span><span class="o">/</span><span class="s1">&#39;join&#39;</span>  <span class="p">......</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<blockquote>
<ol start="2">
<li>数组对象 比 普通对象，多一层 原型</li>
</ol>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>            <span class="c1">// true
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span>     <span class="c1">// true
</span><span class="c1"></span>          
<span class="nx">arr</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<blockquote>
<ol start="3">
<li>调用共有属性时，采用<strong>就近原则</strong>
<ul>
<li>在 arr 自身的原型上找到这个属性时，就不会再去 对象原型 上找</li>
</ul>
</li>
</ol>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">arr</span><span class="p">.</span><span class="nx">toString</span> <span class="o">==</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">toString</span>  <span class="c1">// false
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">toString</span> <span class="o">==</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">toString</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<blockquote>
<ol start="4">
<li>各个【共有属性】，用法都在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array#" target="_blank" rel="noopener noreffer">MDN</a>，基本与其英文原意相关
<ul>
<li>后面会有单独课程 教这些 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener noreffer">API</a>。所谓的 API  就是【数组有哪些函数、对象有哪些函数】</li>
</ul>
</li>
</ol>
</blockquote>
<ul>
<li>推  push() 方法，将一个或多个元素添加到数的末尾，并返回该数组的新长度。</li>
<li>弹 pop()方法，从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。</li>
<li>提档 shift() 方法，从数组中删除第一个元素，并返回该元素的值。</li>
<li>降档 unshift() 方法，将一个或多个元素添加到数组的开头，并返回该数组的新长度。（修改原数组）</li>
<li>联结 join() 方法，将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。</li>
<li>联结 concat() 方法，用于<strong>合并两个或多个数组</strong>。此方法不会更改现有数组，而是<strong>返回一个新数组</strong>。</li>
<li>…</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> 
<span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="c1">// 4  返回数组的新长度
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1,2,3,0]
</span><span class="c1"></span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span>  <span class="c1">// 0   返回被删除的元素的值
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [1,2,3]
</span><span class="c1"></span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span>  <span class="c1">// 1   返回被删除的元素的值
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [2,3]
</span><span class="c1"></span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="c1">//  3   返回数组的新长度
</span><span class="c1"></span><span class="nx">arr</span> <span class="c1">// [0,2,3]
</span><span class="c1"></span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;哈&#39;</span><span class="p">)</span> <span class="c1">//  &#34;0哈2哈3&#34;  直接返回字符串
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="nx">arr3</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="nx">arr1</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">arr2</span><span class="p">)</span> <span class="c1">// [1, 1, 2, 2]
</span><span class="c1"></span><span class="nx">arr1</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">arr2</span><span class="p">,</span> <span class="nx">arr3</span><span class="p">)</span>  <span class="c1">// [1, 1, 2, 2, 3, 3]
</span><span class="c1"></span>
<span class="p">...</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="函数对象">函数对象</h3>
<h4 id="定义一个函数">定义一个函数</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span><span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span><span class="p">}</span>   <span class="c1">// 声明函数 fn
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">fn2</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span><span class="k">return</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span><span class="p">}</span>  <span class="c1">// 声明函数 fn，并赋给变量fn2
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">fn3</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span> 
<span class="kd">let</span> <span class="nx">fn4</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;return x+y&#39;</span><span class="p">)</span>  <span class="c1">// 声明的是匿名函数，并将它赋给 fn4
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn1</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;fn1&#39;</span><span class="p">}</span>   <span class="c1">// 声明函数 fn
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">fn2</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;fn2&#39;</span><span class="p">}</span>  <span class="c1">// 声明函数 fn，并赋给变量fn2
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">fn3</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="s1">&#39;fn3&#39;</span>  <span class="c1">// 声明函数 fn3
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">fn4</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;return `fn4`&#39;</span><span class="p">)</span> <span class="c1">// 声明的是匿名函数，并将它赋给 fn4
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="函数对象自身属性">函数对象自身属性</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;name&#39;</span> <span class="o">/</span> <span class="s1">&#39;length&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p></p>
<p>​</p>
<h4 id="函数对象共用属性">函数对象共用属性</h4>
<blockquote>
<p>共有属性非常多，都存储在函数对象的 <code>__proto__</code> 中</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;call&#39;</span> <span class="o">/</span> <span class="s1">&#39;apply&#39;</span> <span class="o">/</span> <span class="s1">&#39;bind&#39;</span>    <span class="nx">这三个属性是重点</span>
</code></pre></td></tr></table>
</div>
</div><p>后面会有单独课程介绍函数</p>
<p>​</p>
<p>​</p>
<h2 id="js-终极一问谁构造了ta">JS 终极一问：谁构造了ta</h2>
<h3 id="window-是谁构造的">window 是谁构造的</h3>
<ul>
<li>
<p>Window</p>
</li>
<li>
<p>可以通过 constructor 属性看出构造者</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nx">Window</span>           <span class="c1">// true
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">Window</span><span class="p">.</span><span class="nx">prototype</span>   <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ul>
<h3 id="windowobject-是谁构造的">window.Object 是谁构造的</h3>
<ul>
<li>
<p>window.Function</p>
</li>
<li>
<p>==<strong>因为所有函数都是 window.Function 构造的</strong>==</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nb">window</span><span class="p">.</span><span class="nb">Function</span>         <span class="c1">// true
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">window</span><span class="p">.</span><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ul>
<h3 id="windowfunction-是谁构造的">window.Function 是谁构造的</h3>
<ul>
<li>
<p>window.Function</p>
</li>
<li>
<p>因为所有函数都是 window.Function 构造的</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nb">Function</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nb">window</span><span class="p">.</span><span class="nb">Function</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>自己构造的自己？并不是这样，这是「上帝(浏览器)」的安排</p>
</li>
<li>
<p>浏览器构造了 Function，然后指定它的构造者是自己</p>
</li>
</ul>
<h2 id="es6-class-语法-">ES6 ：class 语法 💋</h2>
<blockquote>
<p>JS 构造对象目前有两种方式，一种是用【构造函数+prototype】，一种是用【class】</p>
</blockquote>
<h3 id="prototype-是过时的-">prototype 是过时的 ？</h3>
<blockquote>
<p>非常遗憾，下面代码（构造函数）被某些前端认为是过时的</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">Square</span><span class="p">(</span><span class="nx">width</span><span class="p">){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span>
<span class="p">}</span>
<span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getArea</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
<span class="p">}</span>
<span class="nx">Square</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getLength</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>学习资料：<a href="https://zhuanlan.zhihu.com/p/35279244" target="_blank" rel="noopener noreffer">你可以不会 class，但是一定要学会 prototype</a></p>
</blockquote>
<h3 id="es6-class-语法">ES6 ：class 语法</h3>
<blockquote>
<p>class 是用来声明一个类，类是用来创建对象的，不讲究什么内存共用</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">Square</span><span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">width</span><span class="p">){</span>   <span class="c1">// constructor中写对象里的属性
</span><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span>
  <span class="p">}</span>
  <span class="nx">getArea</span><span class="p">(){</span>    <span class="c1">// 对象里的函数
</span><span class="c1"></span>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
  <span class="p">}</span>
  <span class="nx">getLength</span><span class="p">(){</span>  <span class="c1">// 对象里的函数
</span><span class="c1"></span>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>注意：方法不能写成 <code>getLength: function(){ ... }</code>  这种形式</p>
<h3 id="class-语法引入了更多概念">class 语法引入了更多概念</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">Square</span><span class="p">{</span>
  <span class="kr">static</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span>   <span class="c1">// static表示x属于Square，调用需采用 Square.x 的写法 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>  <span class="nx">width</span> <span class="o">=</span> <span class="mi">0</span>      <span class="c1">// 初始化 width 的值 // &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">width</span><span class="p">){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span>
  <span class="p">}</span>
  <span class="nx">getArea</span><span class="p">(){</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
  <span class="p">}</span>
  <span class="nx">getLength</span><span class="p">(){</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="mi">4</span>
  <span class="p">}</span>
  <span class="nx">get</span> <span class="nx">area2</span><span class="p">(){</span>  <span class="c1">// 只读属性：调用时直接Square.area2就会执行，无需括号 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
</span><span class="c1"></span>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>class 引入更多的语法，这些语法多来自 Java世界 或 c#世界（跟 JS 以前的世界是格格不入的）</p>
<p>​</p>
<h3 id="用-class-重写-circle">用 class 重写 Circle</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">Circle</span><span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">radius</span><span class="p">){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">=</span> <span class="nx">radius</span>
  <span class="p">}</span>
  <span class="nx">getArea</span><span class="p">(){</span>
    <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span>
  <span class="p">}</span>
  <span class="nx">getLength</span><span class="p">(){</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="nx">circle</span><span class="p">.</span><span class="nx">radius</span>
<span class="nx">circle</span><span class="p">.</span><span class="nx">getArea</span><span class="p">()</span>
<span class="nx">circle</span><span class="p">.</span><span class="nx">getLength</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="用-class-重写-rectangle">用 class 重写 Rectangle</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">Rectangle</span><span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span>
  <span class="p">}</span>
  <span class="nx">getArea</span><span class="p">(){</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">height</span>
  <span class="p">}</span>
  <span class="nx">getLength</span><span class="p">(){</span>
    <span class="k">return</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">rect</span> <span class="o">=</span> <span class="nx">neww</span> <span class="nx">Rectangle</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="nx">rect</span><span class="p">.</span><span class="nx">width</span>
<span class="nx">rect</span><span class="p">.</span><span class="nx">height</span>
<span class="nx">rect</span><span class="p">.</span><span class="nx">getArea</span><span class="p">()</span>
<span class="nx">rect</span><span class="p">.</span><span class="nx">getLenght</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="易混淆语法">易混淆语法</h3>
<p><strong>语法1：</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">Person</span><span class="p">{</span>
  <span class="nx">sayHi</span><span class="p">(</span><span class="nx">name</span><span class="p">){}</span>
<span class="p">}</span>
<span class="c1">// 等价于
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">Person</span><span class="p">(){}</span>
<span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHi</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">){}</span>
</code></pre></td></tr></table>
</div>
</div><p><strong>语法2：</strong></p>
<p>注意冒号变成了等于号</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">class</span> <span class="nx">Person</span><span class="p">{</span>
  <span class="nx">sayHi</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">)=&gt;{}</span> <span class="c1">// 注意，一般我们不在这个语法里使用普通函数，多用箭头函数
</span><span class="c1"></span><span class="p">}</span>
<span class="c1">// 等价于
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">Person</span><span class="p">(){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">sayHi</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">)=&gt;{}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="不要强求完全转换成-es5">不要强求完全转换成 ES5</h3>
<p>大部分 class 语法都可以转为 ES5 语法，但并不是 100% 能转，有些 class 语法你意思理解就行，不需要强行转换为 ES5。</p>
<h2 id="原型好还是类好">原型好，还是类好？</h2>
<blockquote>
<p>都是用来给对象分类的</p>
</blockquote>
<p>目前，先推荐用 class</p>
<ul>
<li>
<p>但是 class 的语法知识比较复杂，还需要再多花点时间学习
（关于类和对象的新语法有 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="noopener noreffer">页面1</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer#ECMAScript_6%E6%96%B0%E6%A0%87%E8%AE%B0" target="_blank" rel="noopener noreffer">页面2</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener noreffer">页面3</a>）</p>
</li>
<li>
<p>原型的知识，上面👆已经全部讲过了</p>
</li>
</ul>]]></description>
</item><item>
    <title>JS 对象的基本用法</title>
    <link>http://samrks.github.io/javascript-crud-of-object-prototype/</link>
    <pubDate>Wed, 02 Sep 2020 21:50:44 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-crud-of-object-prototype/</guid>
    <description><![CDATA[<p>「增」「删」「改」「查」「原型」</p>
<h2 id="回顾">回顾</h2>
<h3 id="七种数据类型">七种数据类型</h3>
<ul>
<li>number、string、booleansymbol</li>
<li>undefined、null</li>
<li>object</li>
</ul>
<p>四基(本类型)两空一对象</p>
<p>(bigInt)</p>
<h3 id="五个-falsy-值">五个 falsy 值</h3>
<ul>
<li>null、undefined</li>
<li>0、NaN</li>
<li><code>''</code> （空字符串）</li>
</ul>
<p>​</p>
<h2 id="js-对象">JS 对象</h2>
<blockquote>
<p>是学习 JS 的三座大山之一</p>
<ul>
<li>
<p>对象（原型）</p>
</li>
<li>
<p>this</p>
</li>
<li>
<p>AJAX</p>
</li>
</ul>
</blockquote>
<p>​</p>
<h2 id="对象-object">对象 object</h2>
<blockquote>
<p>对象的基础知识</p>
</blockquote>
<blockquote>
<p>object ，是第七种数据类型，唯一 一种「复杂类型」</p>
<p>其他六种（numbe、string、boolean、symbol、null、undefined），叫做「简单类型」。因为这六种不包含其他任何东西，而 object 对象包含其他内容</p>
</blockquote>
<h3 id="定义">定义</h3>
<ul>
<li>无序的数据集合</li>
<li>键值对的集合</li>
</ul>
<h3 id="写法">写法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">对象名</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">key</span><span class="o">:</span> <span class="nx">value</span>    <span class="c1">// 属性名/键名 :  属性值
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>对象的写法，与 block（代码块）类似，只是碰巧都有 { } 。</li>
<li>要注意区分 { }  是对象，还是代码块</li>
</ul>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="o">:</span> <span class="mi">18</span> <span class="p">}</span>   <span class="c1">// 不论&#39;name&#39;/&#39;age&#39;(属性名)是否有引号，它都只能是字符串
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">({</span><span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">})</span>    <span class="c1">// 正规写法
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span> <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="o">:</span> <span class="mi">18</span> <span class="p">})</span>  <span class="c1">// 创建匿名对象
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>JS 既然可以通过<strong><code>字面量</code></strong>方式创建对象，为什么还要有第二种 <strong><code>new Object()</code></strong> 的方式创建 ?
<ul>
<li>实际上<strong>第二种 <code>new Object()</code> 才是正规创建对象的写法</strong>，第一种属于简化版</li>
<li>因为简化了代码，所以通常都是用第一种写法</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="细节">细节</h3>
<ul>
<li>
<p>==<strong>键名是字符串</strong>==，不是标识符，可以包含任意字符</p>
<blockquote>
<p>只要是<strong>字符串</strong>就行：空串、空格串、emoji 、数字字符串 … （任何一个 Unicode 能表达的串都 ok ）</p>
<p>标识符 规则：（变量）不能以数字开头</p>
</blockquote>
</li>
<li>
<p>属性名的引号可省略，省略之后需按照标识符的规则命名，特例：允许纯数字的键名</p>
</li>
<li>
<p><strong>就算引号省略了，键名也还是字符串（重要）</strong></p>
</li>
</ul>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;&#39;</span><span class="o">:</span> <span class="mi">1</span> <span class="p">}</span>
<span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">2</span><span class="o">:</span> <span class="mi">123</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;fff&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="o">:</span><span class="mi">12</span> <span class="p">}</span>
<span class="kd">var</span> <span class="nx">obj3</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;  &#39;</span><span class="o">:</span> <span class="mi">2</span> <span class="p">}</span>
<span class="kd">var</span> <span class="nx">obj4</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;👍&#39;</span><span class="o">:</span> <span class="s1">&#39;zan&#39;</span> <span class="p">}</span>


<span class="c1">// Object.keys(对象名)  获取对象中的 key名 组成的数组
</span><span class="c1"></span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj1</span><span class="p">)</span>  <span class="c1">// [&#34;&#34;] // 空串也是字符串，合法
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj2</span><span class="p">)</span>  <span class="c1">// [&#34;2&#34;, &#34;name&#34;, &#34;age&#34;]
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj3</span><span class="p">)</span>  <span class="c1">// [&#34;  &#34;]
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj4</span><span class="p">)</span>  <span class="c1">// [&#34;👍&#34;]
</span><span class="c1"></span>
<span class="c1">// 所以不论怎么写，key 都是字符串
</span></code></pre></td></tr></table>
</div>
</div><h4 id="属性名">属性名</h4>
<blockquote>
<p>每个 key 都是对象的属性名（property）</p>
</blockquote>
<h4 id="属性值">属性值</h4>
<blockquote>
<p>每个 value 都是对象的属性值</p>
</blockquote>
<p>​</p>
<h3 id="奇怪的属性名">奇怪的属性名</h3>
<p>所有属性名会自动变成字符串</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="mi">1</span><span class="o">:</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span>       <span class="c1">// &#34;1&#34;
</span><span class="c1"></span>  <span class="mf">3.2</span><span class="o">:</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span>     <span class="c1">// &#34;3.2&#34;
</span><span class="c1"></span>  <span class="mi">1</span><span class="nx">e2</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>    <span class="c1">// &#34;100&#34;
</span><span class="c1"></span>  <span class="mi">1</span><span class="nx">e</span><span class="o">-</span><span class="mi">2</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// &#34;0.01&#34;
</span><span class="c1"></span>  <span class="mf">.234</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>   <span class="c1">// &#34;0.234&#34;
</span><span class="c1"></span>  <span class="mh">0xFF</span><span class="o">:</span> <span class="kc">true</span>    <span class="c1">// &#34;255&#34;
</span><span class="c1"></span><span class="p">};</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// [&#34;1&#34;, &#34;100&#34;, &#34;255&#34;, &#34;3.2&#34;, &#34;0.01&#34;, &#34;0.234&#34;]
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>JS 可能会自动换算「属性名」，所以如果不想被自动换算，给属性名加上「引号」即可解决</p>
</blockquote>
<h4 id="细节-1">细节</h4>
<ul>
<li><strong><code>Object.keys(obj)</code></strong> 可以得到 obj 的所有 key 组成的数组</li>
<li>这个 API 需要会使用</li>
</ul>
<h4 id="变量作属性名">「变量」作属性名</h4>
<p>如何用变量做属性名</p>
<ul>
<li>
<p>之前都是用<strong>常量</strong>做属性名（所有不是变量的都是常量）</p>
</li>
<li>
<p><strong><code>let p1 = 'name'</code></strong></p>
</li>
<li>
<p><strong><code>let obj = { p1 : 'sam'}</code></strong> 这样写，属性名为 <strong><code>'p1'</code></strong></p>
</li>
<li>
<p><strong><code>let obj = { [p1] : 'sam' }</code></strong> 这样写，属性名为 <strong><code>'name'</code></strong>    （ ES 6 ）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">aa</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>  <span class="c1">// 想用变量a作为属性名
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">aa</span><span class="o">:</span> <span class="mi">1111</span> <span class="p">}</span>     <span class="c1">// {aa: 1111}
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;aa&#39;</span><span class="o">:</span> <span class="mi">1111</span> <span class="p">}</span>   <span class="c1">// {aa: 1111}
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="p">[</span><span class="nx">aa</span><span class="p">]</span><span class="o">:</span> <span class="mi">1111</span> <span class="p">}</span>   <span class="c1">// {xxx: 1111}  // ES6之后
</span></code></pre></td></tr></table>
</div>
</div><p>ES6之前，实现变量作属性名  ↓↓ ，需两行代码实现。ES6之后一行 ↑↑ 即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">aa</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span> 
<span class="nx">obj</span><span class="p">[</span><span class="nx">aa</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1111</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// {xxx: 1111}
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>对比</p>
<ul>
<li>
<p>不加 <i class="far fa-square fa-fw"></i> 的属性名会自动变成字符串</p>
</li>
<li>
<p>加了 <i class="far fa-square fa-fw"></i> 则会当做变量求值</p>
</li>
<li>
<p>值如果不是字符串，则会自动变成字符串</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">[</span><span class="mi">1</span><span class="o">+</span><span class="mi">2</span><span class="o">+</span><span class="mi">3</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">:</span> <span class="s1">&#39;十&#39;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// { 10: &#34;十&#34; }
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// [ &#34;10&#34; ]
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h3 id="对象的隐藏属性原型-">对象的隐藏属性（原型 💡）</h3>
<p>隐藏属性</p>
<ul>
<li>JS 中，每一个对象 都有一个 隐藏属性  <code>__proto__</code></li>
<li>这个隐藏属性，储存着其 <strong>共有属性组成的对象</strong>的地址</li>
<li>这个<strong>共有属性组成的对象</strong>，叫做原型</li>
<li>也就是说，隐藏属性 储存着 原型的地址
<ul>
<li><code>__proto__</code> 存储了一个地址，这个地址所代表的内存空间中的对象，叫做原型 / 共有属性</li>
</ul>
</li>
</ul>
<p>代码示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="c1">// 居然不报错
</span></code></pre></td></tr></table>
</div>
</div><p>因为 obj 的隐藏属性<strong>对应的对象</strong>（原型 / 共有属性）上有 toString()</p>
<p>​</p>
<blockquote>
<p>举个栗子：什么叫共有属性</p>
<ul>
<li>将共有的属性，提取出来单独存储成一个对象。最大的好处，就是<strong>省内存</strong></li>
<li>每次声明一个 chinese 时，无需重复写入：国籍、肤色、发色 … 等 chinese 公共的属性，直接用一个<strong>特定属性</strong>（–proto–），<strong>存储</strong>共有属性所在的<strong>内存地址</strong>即可</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">chinese1</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;小兰&#39;</span> <span class="p">}</span>
<span class="kd">var</span> <span class="nx">chinese2</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;小红&#39;</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<p>​</p>
<h3 id="超纲知识">超纲知识</h3>
<blockquote>
<p>前面提到，对象中所有的 key 都是字符串</p>
</blockquote>
<blockquote>
<p>实际上，ES 6 中稍微做了调整：<strong>除了字符串，symbol 也能做属性名</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">Symbol</span><span class="p">()</span>
<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这有什么用呢？</p>
<ul>
<li>目前，屁用都没用，很久很久以后可能会有用（方方从没用过）</li>
<li>在学习「迭代」时会用到（但前端不流行迭代，所以根本没机会用）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="增删改查">增删改查</h2>
<blockquote>
<p>「增删改查」对象的属性</p>
</blockquote>
<h3 id="删除属性">删除属性</h3>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete" target="_blank" rel="noopener noreffer">delete 操作符</a>：用于删除对象的某个属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">delete</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">xxx</span>
<span class="k">delete</span> <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;xxx&#39;</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>作用：删除 obj 的 xxx 属性</li>
<li>请区分「属性值为 undefined」和「不含属性名」</li>
</ul>
<h4 id="不含属性名">不含属性名</h4>
<p>直接删除属性名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">}</span>
<span class="k">delete</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">name</span>  <span class="c1">// 或 delete obj[&#39;name&#39;]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// {age: 18}
</span><span class="c1">// console.log(obj.name) // undefined
</span></code></pre></td></tr></table>
</div>
</div><p>判断是否删除成功</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;xxx&#39;</span> <span class="k">in</span> <span class="nx">obj</span> <span class="o">===</span> <span class="kc">false</span>   <span class="c1">// 返回 true 说明该属性名已被删除 
</span><span class="c1"></span><span class="err">（</span><span class="nx">不能省略引号</span><span class="err">）</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="含有属性名但是值为-undefined">含有属性名，但是值为 undefined</h4>
<p>仅删除属性值，保留属性名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;xxx&#39;</span> <span class="k">in</span> <span class="nx">obj</span> <span class="o">&amp;&amp;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">xxx</span> <span class="o">===</span> <span class="kc">undefined</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">}</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="kc">undefined</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// {name: undefined, age: 18}
</span><span class="c1">// console.log(obj.name) // undefined
</span></code></pre></td></tr></table>
</div>
</div><h4 id="注意-objxxx--undefined">注意 obj.xxx === undefined</h4>
<ul>
<li>
<p><code>obj.xxx === undefined</code> 不能断定 &lsquo;xxx&rsquo; 是否为 obj 的属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
<span class="kd">let</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="kc">undefined</span><span class="p">}</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">x</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="c1">// true
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">x</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="c1">// true   所以说 这句话无法判断出 x 到底是不是 obj 的属性
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>用 in 和 hasOwnProperty 可以判断</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
<span class="kd">let</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="kc">undefined</span><span class="p">}</span>
<span class="s1">&#39;x&#39;</span> <span class="k">in</span> <span class="nx">obj</span>   <span class="c1">// false
</span><span class="c1"></span><span class="s1">&#39;x&#39;</span> <span class="k">in</span> <span class="nx">obj2</span>  <span class="c1">// true
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">)</span>    <span class="c1">// false
</span><span class="c1"></span><span class="nx">obj2</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">)</span>   <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="类比">类比</h4>
<ul>
<li>你有没有卫生纸？</li>
<li>A: 没有 // 不含属性名</li>
<li>B: 有，但是没带 // 含有属性名，但是值为 undefined</li>
</ul>
<blockquote>
<h4 id="程序员就是这么严谨">程序员就是这么严谨</h4>
<ul>
<li>「没有」和「undefined」是两个概念</li>
<li>没有就是没有，undefined 就是 undefined</li>
<li>绝不含糊</li>
<li>需要细心，发现细微的区别</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="查看所有属性读属性">查看所有属性（读属性）</h3>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="查看自身所有属性">查看自身所有属性</h4>
<blockquote>
<p>无法打印【共有属性 <code>__proto__</code>】</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>     <span class="c1">// [&#34;name&#34;, &#34;age&#34;]
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>   <span class="c1">// [&#34;sam&#34;, 18] 
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">entries</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// [Array(2), Array(2)]  =&gt; 0:[&#34;name&#34;, &#34;sam&#34;]  1:[&#34;age&#34;, 18]
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="查看自身共有属性">查看自身+共有属性</h4>
<blockquote>
<p>dir 指以目录的形式，可以查看到【共有属性 <code>__proto__</code>】</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>   <span class="c1">// 查看 obj内容 及 共有属性 【推荐】
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span>      
<span class="c1">// 也可以直接打印共有属性（但不推荐此法，因为隐藏属性的命名是不固定的，不同浏览器可能规定不同）
</span></code></pre></td></tr></table>
</div>
</div><p>或者自己依次用 Object.keys 打印出 <code>obj.__proto__</code></p>
<h4 id="判断一个属性是自身的还是共有的">判断一个属性是自身的还是共有的</h4>
<blockquote>
<p>判断一个属性是否是某个对象的属性，可以用 <code>in</code>  ，但是 in 无法区分是自身的还是共有的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s2">&#34;name&#34;</span> <span class="k">in</span> <span class="nx">obj</span>      <span class="c1">// true
</span><span class="c1"></span><span class="s2">&#34;toString&#34;</span> <span class="k">in</span> <span class="nx">obj</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;toString&#39;</span><span class="p">)</span>   <span class="c1">// false
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span>       <span class="c1">// true
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;age&#39;</span><span class="p">)</span>        <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="原型">原型</h3>
<blockquote>
<p>原型，就是隐藏属性 所指向的对象</p>
</blockquote>
<h4 id="每个对象都有原型">每个对象都有原型</h4>
<ul>
<li>原型里存着对象的共有属性</li>
<li>比如 obj 的原型就是一个对象
<ul>
<li><code>obj.__proto__ </code>存着这个原型对象的地址</li>
<li>这个原型对象里有 toString / constructor / valueOf 等属性</li>
</ul>
</li>
</ul>
<h4 id="对象的原型也是对象">对象的原型也是对象</h4>
<blockquote>
<p>既然每个对象都有原型，且原型也是对象，那么可以推出：原型上也有原型</p>
</blockquote>
<ul>
<li>所以对象的原型上也有原型</li>
<li>obj = { } 空对象的原型即为所有对象的原型</li>
<li>这个原型包含所有对象的共有属性，是<strong>对象的根</strong></li>
<li>这个原型也有原型，<strong>是 null</strong>     【/nʌl/】
<ul>
<li>原型为 null 的对象，就是对象的根</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">)</span>  <span class="c1">// 原型对象（根对象）
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">)</span>   <span class="c1">// null  原型上的原型
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h3 id="查看属性">查看属性</h3>
<h4 id="两种方法查看属性">两种方法查看属性</h4>
<ul>
<li>
<p>**中括号语法：obj[&lsquo;key&rsquo;] **</p>
</li>
<li>
<p>点语法：obj.key</p>
</li>
<li>
<p>坑新人语法：obj[key]      // 中括号里是变量，【变量 key】 值一般不等于【字符串 &lsquo;key&rsquo;】</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">}</span>
<span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>   <span class="c1">// &#39;sam&#39;
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">name</span>      <span class="c1">// &#39;sam&#39;
</span><span class="c1"></span><span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>     <span class="c1">// undefined
</span><span class="c1"></span>    
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>   <span class="c1">// &#34;&#34;
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;age&#39;</span>
<span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>    <span class="c1">// 18   // 等同于 obj[&#39;age&#39;]
</span></code></pre></td></tr></table>
</div>
</div><p>变态</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;na&#39;</span><span class="o">+</span><span class="s1">&#39;me&#39;</span><span class="p">]</span>   <span class="c1">// &#39;sam&#39;
</span><span class="c1"></span>    
<span class="nx">obj</span><span class="p">[</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)]</span>   
<span class="c1">// name   // 先执行log命令，打印内容
</span><span class="c1">// undefined   // log 函数的返回值为 undefined，相当于执行 obj[undefined] =&gt; undefined
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h4 id="请优先使用中括号语法">请优先使用中括号语法</h4>
<ul>
<li>【点语法】会误导你，让你以为 key 不是字符串</li>
<li>等你确定不会弄混两种语法，再改用点语法</li>
</ul>
<blockquote>
<p>obj.name 等价于 obj[&lsquo;name&rsquo;]
obj.name 不等价于 obj[name]</p>
<p>简单来说，obj.name 这里的 <strong>name 是字符串，而不是变量</strong></p>
</blockquote>
<blockquote>
<p>let name = &lsquo;sam&rsquo;
此时 obj[name] 等价于 obj[&lsquo;sam&rsquo;] ，而不是 obj[&lsquo;name&rsquo;] 和 obj.name</p>
</blockquote>
<p>​</p>
<h4 id="考题">考题</h4>
<blockquote>
<p>区分变量<code> name</code> 和 常量字符串 <code>'name'</code></p>
</blockquote>
<p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">list</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;gender&#39;</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;sam&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span><span class="mi">18</span><span class="p">,</span> <span class="nx">gender</span><span class="o">:</span><span class="s1">&#39;man&#39;</span><span class="p">}</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="o">???</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 使得 person 的所有属性被打印出来
</span></code></pre></td></tr></table>
</div>
</div><p>选项</p>
<ol>
<li>console.log(person.name)      ✘          // sam sam sam</li>
<li><strong>console.log(person[name])</strong>    ✔     // sam 18 man</li>
</ol>
<blockquote>
<p>区分 name 和 &lsquo;name&rsquo; 为什么这么重要</p>
<ul>
<li>因为如果你现在不搞清楚，那么你在学 Vue 的时候，会更加迷惑</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="修改或增加属性写属性">修改或增加属性（写属性）</h3>
<h4 id="直接赋值">直接赋值</h4>
<blockquote>
<p>直接赋值，name 属性已存在，就相当于修改属性值；name 属性不存在，就会新增这个属性，值为 sam</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">}</span> <span class="c1">// name 是字符串
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span> <span class="c1">// name 是字符串 ✔
</span><span class="c1"></span><span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span>  <span class="c1">// ✔
</span><span class="c1"></span>
<span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span> <span class="c1">// 错，因name为变量，值不一定等于&#39;name&#39;
</span><span class="c1"></span>
<span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;na&#39;</span><span class="o">+</span><span class="s1">&#39;me&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span>  <span class="c1">// ✔
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">key</span> <span class="o">=</span> <span class="s1">&#39;name&#39;</span><span class="p">;</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span>
<span class="kd">let</span> <span class="nx">key</span> <span class="o">=</span> <span class="s1">&#39;name&#39;</span><span class="p">;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">key</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span> <span class="c1">// 错，因为obj.key等价于obj[&#39;key&#39;]，相当于给obj增加了key属性 值为sam
</span></code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="批量赋值">批量赋值</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span><span class="p">}</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;123&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span> <span class="nx">gender</span><span class="o">:</span> <span class="s1">&#39;man&#39;</span><span class="p">})</span> 
<span class="c1">// name 属性已存在，就相当于修改属性值；name 属性不存在，就会新增这个属性，值为&#39;123&#39;
</span><span class="c1"></span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// {name:&#39;123&#39;, age: 18, gender: &#39;man&#39;}
</span></code></pre></td></tr></table>
</div>
</div><p>assign ：赋值的意思</p>
<p>Object.assign() ：是 ES6 新出的 API</p>
<p>​</p>
<p>​</p>
<h3 id="修改或增加共有属性">修改或增加共有属性</h3>
<blockquote>
<p>JS 特性：</p>
<ul>
<li>读取时，可以读取到（原型上的）共有属性。</li>
<li>写入时，只写在自己身上，不会影响（原型）共有属性</li>
</ul>
</blockquote>
<h4 id="无法通过自身修改或增加共有属性">无法通过自身修改或增加共有属性</h4>
<blockquote>
<p>原型上的属性，无法通过自身直接修改</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{},</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1">// 共有 toString 方法
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>    <span class="c1">// 只会在改 obj 自身属性，不会覆盖共用的 toString 方法
</span><span class="c1"></span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">toString</span>     <span class="c1">// &#39;xxx&#39;
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>   <span class="c1">// 报错 obj.toString is not a function
</span><span class="c1"></span>
<span class="nx">obj2</span><span class="p">.</span><span class="nx">toString</span>    <span class="c1">// ƒ toString() { [native code] }   还是在原型上的方法
</span><span class="c1"></span><span class="nx">obj2</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>  <span class="c1">// &#34;[object Object]&#34;
</span></code></pre></td></tr></table>
</div>
</div><h4 id="偏要修改或增加原型上的属性">偏要修改或增加原型上的属性</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span> <span class="c1">// 不推荐用 __proto__
</span><span class="c1"></span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span> 
<span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">toString</span><span class="p">)</span>

<span class="c1">// obj.__proto__ 存的地址，等价于 window.Object.prototype 存的地址
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">window</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>这是 JS 非常危险的特型，一旦修改，会使得原型上的属性非常不可信 —— JS 的脆弱性</li>
<li><strong>一般来说，不要修改原型</strong>，会引起很多问题：代码崩溃/异常…</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="修改隐藏属性">修改隐藏属性</h3>
<h4 id="不推荐使用--__proto__-修改原型">不推荐使用 <code> __proto__</code> 修改原型</h4>
<p>例1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;sam&#39;</span><span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>   <span class="c1">// {name:&#34;sam&#34;, __proto__: Object}
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="kc">null</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>   <span class="c1">// {name:&#34;sam&#34;}    没有proto原型了，变成非常纯净的对象，不能调用任何功能
</span></code></pre></td></tr></table>
</div>
</div><p>例2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;sam&#39;</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">person2</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;jack&#39;</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">common</span> <span class="o">=</span> <span class="p">{</span><span class="nx">kind</span><span class="o">:</span> <span class="s1">&#39;human&#39;</span><span class="p">,</span> <span class="s1">&#39;国籍&#39;</span><span class="o">:</span> <span class="s1">&#39;中国&#39;</span><span class="err">，</span> <span class="nx">hairColor</span><span class="o">:</span> <span class="s1">&#39;black&#39;</span><span class="p">}</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">common</span>
<span class="nx">person2</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">common</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<blockquote>
<p>上述，使用 <code> __proto__</code> 直接修改原型，不推荐，性能非常低</p>
</blockquote>
<p>​</p>
<h4 id="推荐使用-objectcreate-修改对象的原型">推荐使用 Object.create 修改对象的原型</h4>
<blockquote>
<p>规范的修改对象的原型，使用 Object.create  【功能：用于指定原型】</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;sam&#39;</span><span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// { __proto__:{name:&#39;sam&#39;} } 
</span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>用法 ↓</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">common</span> <span class="o">=</span> <span class="p">{</span><span class="nx">kind</span><span class="o">:</span> <span class="s1">&#39;human&#39;</span><span class="p">,</span> <span class="s1">&#39;国籍&#39;</span><span class="o">:</span> <span class="s1">&#39;中国&#39;</span><span class="err">，</span> <span class="nx">hairColor</span><span class="o">:</span> <span class="s1">&#39;black&#39;</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">common</span><span class="p">)</span>  <span class="c1">// 以common为原型对象，创建obj
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;sam&#39;</span> <span class="c1">// 点方法，挨个添加属性，或 批量修改/添加属性 Object.assign(obj,{ ... })
</span><span class="c1"></span><span class="p">...</span> 
</code></pre></td></tr></table>
</div>
</div><p>Object.create()  第二个参数，写法比较麻烦</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">common</span><span class="p">,</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="p">{</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;sam&#39;</span> <span class="p">}</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>  <span class="c1">// {name:&#39;sam&#39;, __proto__: Object}  =&gt; 
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>规范的写法：大概是，要改就一开始就改；别后来再改，如<code>person.__proto__ = common</code>  影响性能</p>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="总结">总结</h2>
<h3 id="删">删</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">delete</span> <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
<span class="s1">&#39;name&#39;</span> <span class="k">in</span> <span class="nx">obj</span> <span class="c1">// false  // in 用于判断某个对象中是否含这个属性，缺点：无法区分是自身的，还是原型上共有的
</span><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span>  <span class="c1">// false  // 只有对象自身含有这个属性，才会返回 true
</span></code></pre></td></tr></table>
</div>
</div><h3 id="查">查</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  <span class="c1">// 目录形式，详细
</span><span class="c1"></span><span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="c1">// 记住这里的 name 是字符串
</span><span class="c1"></span><span class="nx">obj</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>  <span class="c1">// 记住这里的 name 是变量
</span></code></pre></td></tr></table>
</div>
</div><h3 id="改">改</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">改自身</span> <span class="nx">obj</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;jack&#39;</span>
<span class="nx">批量改自身</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span><span class="nx">age</span><span class="o">:</span><span class="mi">18</span><span class="p">,</span> <span class="p">...})</span>
                          
<span class="nx">改某个共有属性</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">[</span><span class="s1">&#39;toString&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>  <span class="c1">// 强烈不推荐
</span><span class="c1"></span><span class="nx">改某个共有属性</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="s1">&#39;toString&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;xxx&#39;</span>

<span class="nx">换原型</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">common</span>  <span class="c1">// 强烈不推荐
</span><span class="c1"></span><span class="nx">换原型</span> <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">common</span><span class="p">)</span>

<span class="c1">// 注：所有 proto 代码都是强烈不推荐写的。学习时可以用用，但是工作中不要用
</span></code></pre></td></tr></table>
</div>
</div><h3 id="增">增</h3>
<p>基本同上，已有属性则改；没有属性则增。</p>
<blockquote>
<ul>
<li>查：属于读，可以读到原型链</li>
<li>改 和 增：属于写，只能改自身，不能改到原型</li>
</ul>
</blockquote>]]></description>
</item><item>
    <title>JS 的数据类型🧐</title>
    <link>http://samrks.github.io/javascript-something-about-data-type/</link>
    <pubDate>Thu, 27 Aug 2020 01:45:54 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-something-about-data-type/</guid>
    <description><![CDATA[<p>「如何存数字&amp;字符」「JS 的数据类型」「64位浮点数 」「变量声明 var / let / const」「类型转换」</p>
<p>​</p>
<h2 id="数据为什么需要类型">数据为什么需要类型</h2>
<h3 id="数字与字符串">数字与字符串</h3>
<blockquote>
<p>都是一，为什么要分 <code>1</code> 和 <code>'1'</code></p>
</blockquote>
<p>功能不同</p>
<ul>
<li>数字是数字，字符串是字符串，要严谨</li>
<li>数字能加减乘除，字符串不行</li>
<li>字符串能表示电话号码，数字不行</li>
</ul>
<p>存储形式不同</p>
<ul>
<li><strong>JS中，数字 number 是用64位浮点数的形式存储的</strong></li>
<li>JS中，字符串是用类似 UTF8 形式存储的（UCS-2)</li>
</ul>
<h2 id="如何存数字">如何存数字</h2>
<blockquote>
<p>进制转二进制即可</p>
</blockquote>
<h3 id="二进制">二进制</h3>
<p>10转2</p>
<ul>
<li>31变成二进制：</li>
<li>经过一番尝试：</li>
<li>所以31（十进制）= 01111（二进制）</li>
<li>不是套公式吗？程序员从来不套公式 🙃</li>
</ul>
<p>2转10</p>
<ul>
<li>
<p>100011变成十进制</p>
</li>
<li>
<p>每一位乘以2的N次方，然后加起来即可</p>
<p></p>
</li>
</ul>
<h3 id="用十六进制表示二进制">用十六进制表示二进制</h3>
<ul>
<li>
<p>为什么用十六进制，因为二进制写起来太慢了：011110001011010</p>
</li>
<li>
<p>记住 8 4 2 1 对应 X X X X</p>
</li>
<li>
<p><strong>从右往左</strong>每四位改写成一位：<font color="red">011</font><font color="green">1100</font><font color="orange">0101</font><font color="blue">1010</font></p>
<p></p>
</li>
<li>
<p>得到 3，12，5，10；</p>
</li>
<li>
<p>16进制中，把大于9的数字改为ABCDEF</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">0123456789</span> <span class="nx">A</span>  <span class="nx">B</span>  <span class="nx">C</span>  <span class="nx">D</span>  <span class="nx">E</span>  <span class="nx">F</span>
           <span class="mi">10</span> <span class="mi">11</span> <span class="mi">12</span> <span class="mi">13</span> <span class="mi">14</span> <span class="mi">15</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>于是得到 3C5A，你也可以用计算器的程序员模式</p>
<p></p>
</li>
<li>
<p>HEX表示16进制，BIN表示2进制</p>
</li>
<li>
<p>OCT表示8进制，DEC表示10进制</p>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="如何存字符">如何存字符</h2>
<blockquote>
<p>转成数字即可（但字符有几万个，数字只有0-9），解决办法就是把所有字符都编号</p>
<p>注意，<code>&quot;1&quot;</code> 不能用 <code>1</code> 来表示</p>
</blockquote>
<h3 id="用-0--127-表示所有符号">用 0 ~ 127 表示所有符号</h3>
<p>（2^7^ = 128）</p>
<ul>
<li>0 表示结束字符</li>
<li>10 表示换行</li>
<li>13 表示回车</li>
<li>32 表示空格</li>
<li>33 到 47 表示标点</li>
<li><strong>48 到 57 表示数字符号</strong>（存 0 用 48 表示）</li>
<li>65 到 90 表示大写字母（存 A 用 65 表示）</li>
<li>97 到 122 表示小写字母（存 a 用 97 表示）</li>
<li>127 表示删除键</li>
</ul>
<p></p>
<h3 id="中文怎么表示">中文怎么表示？</h3>
<blockquote>
<p>1990-1995年左右，中国开始有人买得起电脑了</p>
</blockquote>
<p>简单，还是编号</p>
<p><em><strong>中国国家标准局</strong></em>来编，名称为「国标23121」</p>
<p>​</p>
<h4 id="用-0000--ffff-表示汉字">用 0000 ~ FFFF 表示汉字</h4>
<blockquote>
<p>用两个字节，表示一个汉字（一个字节是8个0/1位）</p>
</blockquote>
<ul>
<li>一个 16 进制数是4个0/1位</li>
<li>FFFF 就是 4x4=16 位，也就是两个字节</li>
<li>最多收录 2^16=65536 个字符</li>
<li>但只收录了6000多常用汉字、西文字母和日文假名（没有收录生僻字、繁体字、韩文…）
<ul>
<li>
<p>「你」的 GB2312 编号为 C4E3</p>
</li>
<li>
<p>「牛」的 GB2312 编号为 C5A3</p>
<p></p>
</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="生僻字">生僻字</h3>
<blockquote>
<p>随着计算机的普及，政府、学习开始采用计算机管理录入信息</p>
</blockquote>
<p><strong>中国人的名字里有生僻字！</strong></p>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">李瓛</span> <span class="p">=&gt;</span> <span class="nx">李</span><span class="o">*</span>
<span class="nx">陶喆</span> <span class="p">=&gt;</span> <span class="nx">陶吉吉</span>
</code></pre></td></tr></table>
</div>
</div><p>怎么表示生僻字、繁体字、韩文呢，之前的忘了编进去</p>
<blockquote>
<p>微软出手了，推出了一个国标扩展，简称 GBK</p>
</blockquote>
<p>​</p>
<h4 id="gbk-国标扩httpszhwikipediaorgwikie6b189e5ad97e58685e7a081e689a9e5b195e8a784e88c83">GBK <a href="https://zh.wikipedia.org/wiki/%E6%B1%89%E5%AD%97%E5%86%85%E7%A0%81%E6%89%A9%E5%B1%95%E8%A7%84%E8%8C%83" target="_blank" rel="noopener noreffer">国标扩</a></h4>
<ul>
<li>含 21886 个汉字和图形符号</li>
<li>收录了中日韩使用的几乎所有汉字</li>
<li>完全兼容 GB2312</li>
</ul>
<p>依然使用 16 位（两字节）</p>
<ul>
<li>后来国标局推出 GB18030 想取代 GBK</li>
<li>但 GB18030 不兼容 GB2312，导致没人使用 GB18030，而是一直使用国标扩</li>
</ul>
<p></p>
<p>​</p>
<h3 id="泰文藏文">泰文、藏文</h3>
<p></p>
<blockquote>
<p>继续编号，这回一次性解决全世界需求</p>
<p>—— 推出 万国码 Unicode 字符集</p>
</blockquote>
<p>​</p>
<h3 id="万国码-unicode">万国码 Unicode</h3>
<p>优点</p>
<ul>
<li>
<p>已收录13万字符（大于16位），全世界通用</p>
</li>
<li>
<p>以后还会继续扩充，不会停止</p>
</li>
<li>
<p>最新版(2019)只添加了一个字 —— 令和的合体字 （日本的新元号）</p>
<ul>
<li>
<p>日文有很多合体字。如，「株式会社」被合成一个字；元号也都被合成一个字</p>
<p></p>
</li>
</ul>
</li>
</ul>
<p>缺点</p>
<ul>
<li>两个字节不够用，每个字符要用三个及以上字节</li>
<li>这样所有文件都扩大50%，不划算</li>
<li>那怎么办？
<ul>
<li>虽然用Unicode，但存的时候偷懒，这样行不行</li>
<li>UTF-8 就被发明出来了，还真行</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="utf-8">UTF-8</h3>
<blockquote>
<p>Unicode 是字符集，UTF-8是编码形式</p>
</blockquote>
<h4 id="鸡贼的存法">鸡贼的存法</h4>
<blockquote>
<p>英文用 1 个字节存，中文用 3 个字节存</p>
</blockquote>
<p>存储「a」</p>
<ul>
<li>a 对应的 Unicode 编号为 97，十六进制为61</li>
<li>Unicode 直接存：<font color="blue">00000000</font><font color="red">000000000</font>1100001</li>
<li>UTF-8 偷懒存法：01100001</li>
<li>UTF-8 使得所有字母，从三字节变一字节，比 GBK 还省</li>
</ul>
<p>存储「你」</p>
<ul>
<li>你 对应的 Unicode 编号为 4F60（16位）</li>
<li>Unicode 直接存：<font color="blue">00000000</font><font color="red">01001111</font>01100000</li>
<li>UTF-8 偷懒存法：<font color="blue">11100100</font><font color="red">10111101</font>10100000</li>
<li>还是三字节，没有省，但是字母都能省一点</li>
</ul>
<p>UTF-8 中的 8 的意思是</p>
<ul>
<li>最少可用 8 位，存一个字符。（可能用 8/16/24 位存一个字符）</li>
</ul>
<h4 id="utf-8-的规则">UTF-8 的规则</h4>
<blockquote>
<p>这一块看不懂就跳过，反正不考。记住去餐馆排队的比喻即可</p>
</blockquote>
<p>以「你a」为例</p>
<ul>
<li>11100100 10111101 10100000 01100001</li>
<li>如何知道上述内容表示什么字符？</li>
<li>读 8 位信息 1110<font color="orange">0100</font></li>
<li><strong>发现开头有3个1，就认为这个字符有3个八位</strong></li>
<li>于是再往后读两个 8 位信息 10<font color="orange">111101</font> 10<font color="orange">100000</font>
<ul>
<li>10 表示当前这8位是跟着前面一起的</li>
</ul>
</li>
<li>前面的 10 不要，其他合起来，得 <font color="orange">0100 111101 100000</font></li>
<li><strong>前面补8个0</strong>，这就还原为 Unicode 的「你」了：
00000000<font color="red">01001111</font><font color="green">01100000</font></li>
<li>再读 8 位信息 01100001</li>
<li><strong>发现开头是 0，就认为这个字符只占 8 位</strong></li>
<li><strong>前面补16个0</strong>，这就还原为 Unicode 的「a」 了：
0000000000000000<font color="red">01100001</font></li>
</ul>
<blockquote>
<p>上面 4 个字节，存了两个字符。UTF-8 平均每个字符需要 2 个字节</p>
<p>Unicode 每个字符至少占 3 个字节，UTF-8 的存储方法更节省空间</p>
</blockquote>
<p>​</p>
<h3 id="终于搞清如何存字符了">终于搞清如何存字符了</h3>
<blockquote>
<p>全世界的字符，都是先把字符进行编号，然后存下编号（10进制变2进制）</p>
</blockquote>
<p>​</p>
<h2 id="数字1-和-字符1-的区别">数字1 和 字符1 的区别</h2>
<blockquote>
<p>功能不同：数字1 可以进行运算，加减乘除…  （ 字符只能相加 =&gt; 拼接字符 ）</p>
<p>存储形式不同：数字是转为二进制直接存储，字符需要经过编码变成数字再存储</p>
</blockquote>
<p>数字1 ，最终存的是 1    </p>
<p>字符1 ，最终存的是 49</p>
<p>​</p>
<blockquote>
<p>既然字符也是存的数字，那么计算机怎么知道存的是字符还是数字呢？</p>
</blockquote>
<p>答：计算机并不知道这段0/1是字符还是数字。</p>
<ul>
<li>但计算机可以通过看文件格式判断，如果是 .txt 那就全都是字符串，如果在 Excel 中存一个1 ，就是数字1</li>
<li>计算机并不知道用户存的0/1到底什么意思，但可以通过其他辅助信息得知（如后缀）或者其他方式约定（比如在文件开头约定：0表示数字，1表示字符串，2表示布尔值…这种方式）。</li>
<li>http 只支持字符串，在 html 中写一个1，就是字符串1</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="js-中的数据类型-">JS 中的数据类型 💡</h2>
<p>7 种（大小写无所谓）</p>
<ol>
<li>数字 number</li>
<li>字符串 string</li>
<li>布尔 bool</li>
<li>符号 symbol（JS 从 ruby 抄的，基本没人用）</li>
<li>空 undefined</li>
<li>空 null</li>
<li>对象 object</li>
</ol>
<ul>
<li><strong>总结：四基两空一对象</strong></li>
<li>bigint（新增第8种）</li>
</ul>
<p>以下不是数据类型</p>
<ul>
<li>数组、函数、日期、正则…</li>
<li>它们都是特殊的对象 object，所以它们都属于object</li>
</ul>
<p>​</p>
<h3 id="数字-number">数字 number</h3>
<blockquote>
<p>number 是由64位(0/1)浮点数组成的</p>
<ul>
<li>JS 的 number 全都是以小数（浮点数）的形式存储的，没有单独的整数</li>
</ul>
</blockquote>
<h4 id="写法">写法</h4>
<ul>
<li>整数写法 1</li>
<li>小数写法 0.1</li>
<li>科学计数法 1.23e4  （1.23×10^4^ ）</li>
<li>八进制写法（用得少）
<ul>
<li>0 或 00 或 0o 开头，就是 8进制</li>
<li>0123 或 00123 或 0o123</li>
</ul>
</li>
<li>十六进制写法  0x3F 或 0X3F （用得少）
<ul>
<li>0x 或 0X 开头</li>
</ul>
</li>
<li>二进制写法  0b11 或 0B11（用得少）
<ul>
<li>0b 或 0B 开头</li>
</ul>
</li>
</ul>
<h4 id="特殊值">特殊值</h4>
<ol>
<li>
<p>正0和负0</p>
<ul>
<li>
<p>0分三种：0、+0、-0</p>
</li>
<li>
<p>都是 0，基本没什么区别</p>
</li>
<li>
<p>只在一种情况有区别（要严谨）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">1</span><span class="o">/</span><span class="mi">0</span> <span class="nx">或</span> <span class="mi">1</span><span class="o">/+</span><span class="mi">0</span>   <span class="p">=&gt;</span> <span class="kc">Infinity</span>
<span class="mi">1</span><span class="o">/-</span><span class="mi">0</span>          <span class="p">=&gt;</span> <span class="o">-</span><span class="kc">Infinity</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>无穷大</p>
<ul>
<li>Infinity、+Infinity、-Infinity</li>
</ul>
</li>
<li>
<p>无法表示的数字</p>
<ul>
<li>
<p>NaN (Not a Number)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">0</span><span class="o">/</span><span class="mi">0</span>  <span class="p">=&gt;</span>  <span class="kc">NaN</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>但 NaN 仍是一个数字</p>
</li>
<li>
<p>NaN 永远不会和另一个 NaN 相等</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kc">NaN</span> <span class="o">==</span> <span class="kc">NaN</span>    <span class="c1">// false
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ol>
<h4 id="64位浮点数">64位浮点数</h4>
<blockquote>
<h4 id="网道教程httpswangdoccomjavascripttypesnumberhtml"><a href="https://wangdoc.com/javascript/types/number.html" target="_blank" rel="noopener noreffer">网道教程</a></h4>
<p>JavaScript 内部，<strong>所有数字</strong>都是以64位浮点数形式储存，即使整数也是如此。所以，1与1.0是相同的，是同一个数。 <strong><code>1 === 1.0 // true</code></strong></p>
<p>这就是说，JavaScript 语言的底层根本没有整数，所有数字都是小数（64位浮点数）。容易造成混淆的是，某些运算只有整数才能完成，此时 JavaScript 会自动把64位浮点数，转成32位整数，然后再进行运算，参见《运算符》一章的“位运算”部分。</p>
<p>由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mf">0.1</span> <span class="o">+</span> <span class="mf">0.2</span> <span class="o">===</span> <span class="mf">0.3</span>
<span class="c1">// false
</span><span class="c1"></span>
<span class="mf">0.3</span> <span class="o">/</span> <span class="mf">0.1</span>
<span class="c1">// 2.9999999999999996
</span><span class="c1"></span>
<span class="p">(</span><span class="mf">0.3</span> <span class="o">-</span> <span class="mf">0.2</span><span class="p">)</span> <span class="o">===</span> <span class="p">(</span><span class="mf">0.2</span> <span class="o">-</span> <span class="mf">0.1</span><span class="p">)</span>
<span class="c1">// false
</span></code></pre></td></tr></table>
</div>
</div><p>根据国际标准 IEEE 754，JavaScript 浮点数的64个二进制位，从最左边开始，是这样组成的。</p>
<ul>
<li>第1位：符号位，0表示正数，1表示负数
第2位到第12位（共11位）：指数部分
第13位到第64位（共52位）：小数部分（即有效数字）</li>
</ul>
<p>符号位决定了一个数的正负，指数部分决定了数值的大小，小数部分决定了数值的精度。</p>
<p>&hellip;</p>
</blockquote>
<blockquote>
<p>为什么说【 number 是由 64位(0/1)浮点数组成的】 ？</p>
<p>（看↓图）一共（1+11+52）64 位，就可以表示 js 中的所有数字，包括小数、NaN …</p>
</blockquote>
<p>JS数字的存储形式</p>
<ul>
<li>浮点就是浮动的点，意思就是小数点会乱动</li>
<li>123.456  可以表示为  1.23456 × 10^2^  ，也可以表示为  12345.6 × 10^-2^（0.01）</li>
<li>如果小数点可以浮动，那就是<strong>浮点数</strong></li>
<li>也有<u>定点数</u>，就是指 有效数位、指数数位 都是固定的（少用）</li>
</ul>
<p>​</p>
<p></p>
<p>​</p>
<p>64位存储一个 number</p>
<ul>
<li>符号占1位
<ul>
<li>浮点数的第一位，0表示正号，1表示负号。「+0」的第一位是 0，「-0」的第一位是 1</li>
</ul>
</li>
<li>指数占11位
<ul>
<li>指的是 10 的 n 次方，把这个 n 存到这11位里（11位可以存2048，因为有正负所以范围是 -1023~1024）</li>
</ul>
</li>
<li>有效数字占52位（开头的 1. 省略）
<ul>
<li>10进制的小数，第一位永远可以为 1.xxx  ，如 0.123  =&gt; 1.23 × 10^-1^</li>
</ul>
</li>
</ul>
<p>​</p>
<p>例：存 0.5</p>
<ul>
<li>
<p>先将0.5转为二进制（看0.5是多少个二分之一，凑）=&gt;  <font color="red">1.0 × 2^-1^  </font></p>
</li>
<li>
<p>0.5是1个二分之一，所以 0.5 的二进制是 <font color="red">0.1</font></p>
</li>
<li>
<p>0.1存成64位形式  =&gt;   <font color="red">1.0 × 2^-1^ </font></p>
<table>
<thead>
<tr>
<th>正：0，负：1</th>
<th>指数部分（有正负）</th>
<th>有效数字（省掉第一个1.）</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>-1</td>
<td>0</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>​</p>
<p>例：存 0.625</p>
<ul>
<li>
<p>看0.625有多少个二分之一（转为二进制，凑一下）</p>
</li>
<li>
<p>0.625 = 0.5 + 0.125 = 1/2 + 1/8 = <font color="red">1×2^-1^ + 1×2^-3^ </font></p>
</li>
<li>
<p>所以 0.625 表示成 二进制就是 <font color="red">0.101</font></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mf">0.101</span>
  <span class="err">↑</span> <span class="err">↑</span>
 <span class="o">-</span><span class="mi">1</span> <span class="o">-</span><span class="mi">3</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>0.101存成 64位形式  =&gt;  <font color="red">1.01 × 2^-1^ </font></p>
<table>
<thead>
<tr>
<th>正：0，负：1</th>
<th>指数部分（有正负）</th>
<th>有效数字（省掉第一个1.）</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>-1</td>
<td>01</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>​</p>
<h4 id="范围和精度">范围和精度</h4>
<p>范围（忽略符号位）</p>
<ul>
<li>指数拉满、有效数字拉满，得到最大二进制数字</li>
<li>Number.MAX_VALUE: 1.7976931348623157e+308</li>
<li>指数负方向拉满、有效数字最小 1，得到最小值</li>
<li>Number.MIN_VALUE: 5e-324</li>
</ul>
<p>精度（有效数字）</p>
<ul>
<li>最多只能到 52 + 1 个二进制位表示有效数字</li>
<li>2^53^ 对应的十进制是 9 后面 15 个零</li>
<li>所以 15 位有效数字都能精确表示</li>
<li>16 位有效数字如果小于 90 开头，也能精确表示</li>
<li>9110000000000001 就存不下来</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="字符串-string">字符串 string</h3>
<blockquote>
<p>字符串 string 在 JS 中，每个字符占两个字节（定长）。是阉割版的 UTF8。</p>
<ul>
<li>因为 1995 年发布 JS ，当时 Unicode 并未流行，甚至还没有推出第一个可用版本。</li>
</ul>
</blockquote>
<h4 id="写法-1">写法</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">-</span> <span class="nx">单引号</span> <span class="s1">&#39;你好&#39;</span>
<span class="o">-</span> <span class="nx">双引号</span> <span class="s2">&#34;你好&#34;</span>
<span class="o">-</span> <span class="nx">反引号</span> <span class="sb">`你好`</span>  <span class="p">(</span><span class="nx">ES6</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>注意</p>
<ul>
<li>引号不属于字符串的一部分，就像书名号不属于书名的一部分一样</li>
<li>如果要在单引号里面包含单引号怎么办?</li>
</ul>
<p><strong>错误写法</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;it&#39;</span><span class="nx">s</span> <span class="nx">ok</span><span class="err">&#39;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>JS 引擎会认为  <code>'it'</code>  就结束了，后面的看不懂，可能就会报错</li>
<li>Chrome 中这种写法如果不报错，那就是 Chrome 的误导💩🤬</li>
</ul>
<p><strong>正确写法</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;it\&#39;s ok&#39;</span>  <span class="c1">// 这就是转义
</span><span class="c1"></span><span class="s2">&#34;it&#39;s ok&#34;</span>
<span class="sb">`it&#39;s ok`</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="转义">转义</h4>
<p>用另一种写法表示你想要的东西</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">\&#39;       表示 &#39;
\&#34;       表示 &#34;
\n       表示 换行
\r       表示 回车
\t       表示 tab制表符
\\       表示 \
\uFFFF   表示对应的 Unicode 字符
\xFF     表示前256个 Unicode 字符（16进制）
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;\u4f60&#39;</span>  <span class="p">=&gt;</span>  <span class="s2">&#34;你&#34;</span>
<span class="s1">&#39;\x31&#39;</span>    <span class="p">=&gt;</span>  <span class="s2">&#34;1&#34;</span>   <span class="err">（</span><span class="mi">10</span><span class="nx">进制的49转16进制为</span> <span class="mi">31</span><span class="err">）</span>
<span class="s1">&#39;\x32&#39;</span>    <span class="p">=&gt;</span>  <span class="s2">&#34;2&#34;</span>
<span class="s1">&#39;\x33&#39;</span>    <span class="p">=&gt;</span>  <span class="s2">&#34;3&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h4 id="多行字符串">多行字符串</h4>
<p>如果你想要在字符串里<strong>回车</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">s</span><span class="o">=</span><span class="sb">`这样是
</span><span class="sb">可以的
</span><span class="sb">用【反引号】很容易做到`</span>
</code></pre></td></tr></table>
</div>
</div><p>以前没有反引号的时候</p>
<ul>
<li>写起来很麻烦，是比较古老的知识，想了解可以看<a href="https://wangdoc.com/javascript/types/string.html" target="_blank" rel="noopener noreffer">阮一峰的网道教程</a></li>
</ul>
<p>​</p>
<h4 id="字符串的属性">字符串的属性</h4>
<blockquote>
<p>“ 等等，对象才有属性，为什么字符串也有属性 ”</p>
<ul>
<li>记住一点：只有对象才有属性，字符串、数字、布尔是没有属性这么一说的</li>
<li>那为什么这里讲「字符串的属性」？（源于对象，学完对象才能解答）</li>
</ul>
</blockquote>
<h5 id="字符串的长度">字符串的长度</h5>
<ul>
<li>
<p>string.length</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="s1">&#39;123&#39;</span><span class="p">.</span><span class="nx">length</span>    <span class="c1">// 3 
</span><span class="c1"></span><span class="s1">&#39;\n\t\r&#39;</span><span class="p">.</span><span class="nx">length</span> <span class="c1">// 3 （1个换行、1个tab、1个回车）
</span><span class="c1"></span><span class="s1">&#39;\\\\\\&#39;</span><span class="p">.</span><span class="nx">length</span> <span class="c1">// 3 （2个反斜杠表示1个\）
</span><span class="c1"></span><span class="s1">&#39;&#39;</span><span class="p">.</span><span class="nx">length</span>       <span class="c1">// 0 （空字符串）
</span><span class="c1"></span><span class="s1">&#39; &#39;</span><span class="p">.</span><span class="nx">length</span>      <span class="c1">// 1 （1个空格字符串）
</span><span class="c1"></span><span class="s1">&#39;  &#39;</span><span class="p">.</span><span class="nx">length</span>     <span class="c1">// 2 （2个空格字符串）
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h5 id="字符串的下标">字符串的下标</h5>
<p>通过下标读取字符</p>
<ul>
<li>
<p>string[index]</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">s</span><span class="o">=</span><span class="s1">&#39;hello&#39;</span>
<span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  <span class="c1">// &#34;h&#34;
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>注意 index 从0开始</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="nx">是第一个字符</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>注意 index 不到 length</p>
<p>一个字符串的最大 index 为 length - 1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">s</span><span class="o">=</span><span class="s1">&#39;hello&#39;</span>
<span class="nx">s</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="c1">// undefined  居然不报错 
</span><span class="c1"></span><span class="nx">s</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="c1">// &#39;o&#39;
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h4 id="base64-转码">base64 转码</h4>
<p>window.btoa</p>
<ul>
<li>正常字符串转为Base64编码的字符串</li>
</ul>
<p>window.atob</p>
<ul>
<li>Base64 编码的字符串转为原来的字符串</li>
</ul>
<p>一般用来隐藏招聘启事里的简历</p>
<ul>
<li>
<p>邮箱：YWJjZGVmZ0BnbWFpbC5jb20=</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">编码</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">btoa</span><span class="p">(</span><span class="s1">&#39;abcdefg@gmail.com&#39;</span><span class="p">)</span>   <span class="c1">// YWJjZGVmZ0BnbWFpbC5jb20=
</span><span class="c1"></span><span class="nx">解码</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">atob</span><span class="p">(</span><span class="s1">&#39;YWJjZGVmZ0BnbWFpbC5jb20=&#39;</span><span class="p">)</span>  <span class="c1">// abcdefg@gmail.com
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>有时候也用来自欺欺人</p>
<ul>
<li>所谓的「加密」，也就能骗过一部分外行</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="布尔-boolean">布尔 boolean</h3>
<blockquote>
<p>真或假</p>
<p>只有两个值：true /  false   （全都小写）</p>
</blockquote>
<h4 id="下列运算符会得到-bool-值">下列运算符会得到 bool 值</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">否定运算</span>  <span class="o">!</span><span class="nx">value</span>
<span class="nx">相等运算</span>  <span class="mi">1</span><span class="o">==</span><span class="mi">2</span><span class="err">、</span><span class="mi">1</span><span class="o">!=</span><span class="mi">2</span><span class="err">、</span><span class="mi">3</span><span class="o">===</span><span class="mi">4</span><span class="err">、</span><span class="mi">3</span><span class="o">!==</span><span class="mi">4</span>
<span class="nx">比较运算</span>  <span class="mi">1</span><span class="o">&gt;</span><span class="mi">2</span><span class="err">、</span><span class="mi">1</span><span class="o">&gt;=</span><span class="mi">2</span><span class="err">、</span><span class="mi">3</span><span class="o">&lt;</span><span class="mi">4</span><span class="err">、</span><span class="mi">3</span><span class="o">&lt;=</span><span class="mi">4</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="if-配-bool">if 配 bool</h4>
<p>if 语句常常需要判断真假</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nx">value</span><span class="p">){...}</span> <span class="k">else</span> <span class="p">{...}</span>
</code></pre></td></tr></table>
</div>
</div><p>问题来了</p>
<ul>
<li>如果 value 是 bool 值还好说</li>
<li>如果 value 不是 bool 值咋办，谁真谁假
<ul>
<li>1 是真还是假，0 是真还是假</li>
<li><code>'1' </code>是真还是假，<code>'0'</code> 是真还是假</li>
</ul>
</li>
</ul>
<h4 id="五个-falsy-值">五个 falsy 值</h4>
<p>falsy 就是相当于 false，但又不是 false 的值</p>
<p>分别是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kc">undefined</span> 
<span class="kc">null</span>  
<span class="mi">0</span>  
<span class="kc">NaN</span>
<span class="s1">&#39;&#39;</span>     <span class="c1">// &#39;&#39;和&#39; &#39;不是一个玩意再次声明，请保持严谨  
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>整个 JavaScript 中，除了上述 5 个 falsy 值 和 false 本身（6个假值）之外</p>
<p>其他任何值都是【真值】，包括数组、函数、对象…</p>
</blockquote>
<p>​</p>
<p>​</p>
<h3 id="undefined-和-null">undefined 和 null</h3>
<blockquote>
<p>两种空类型，空空如也</p>
</blockquote>
<h4 id="为什么有两个空">为什么有两个空</h4>
<ul>
<li>这就是 JS 的原创（💩）之处</li>
<li>其他任何一种语言，都只有一个空类型</li>
</ul>
<h4 id="区别">区别</h4>
<p>没有本质区别</p>
<p>细节一</p>
<ul>
<li>如果一个变量声明了，但没有赋值，那么默认值就是 undefined，而不是 null</li>
</ul>
<p>细节二</p>
<ul>
<li>如果一个函数，没有写 return，那么默认 return undefined，而不是 null</li>
</ul>
<p>细节三</p>
<ul>
<li>前端程序员习惯上，把非对象的空值写为 undefined，把对象的空值写为 null</li>
<li>但仅仅是习惯上而已</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="symbol-符号">symbol 符号</h3>
<blockquote>
<p>不怎么常用的数据类型（大概率完全不会用到）</p>
<p>直接看<a href="https://zhuanlan.zhihu.com/p/22652486" target="_blank" rel="noopener noreffer">文章</a>吧</p>
</blockquote>
<p>更详细更权威的知识参考下面的自学链接。</p>
<p>自学链接：</p>
<p>MDN： <a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="noopener noreffer">Symbol - JavaScript</a></p>
<p>阮一峰：<a href="https://link.zhihu.com/?target=http%3A//es6.ruanyifeng.com/%23docs/symbol" target="_blank" rel="noopener noreffer">ECMAScript 6入门</a></p>
<p>​</p>
<p>​</p>
<h3 id="bigint-20206-新增">bigint （2020.6 新增）</h3>
<blockquote>
<p>2020 年 6 月 JS 新增了一种类型：bigint</p>
<p>关于 bigint 的详细介绍，请看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt" target="_blank" rel="noopener noreffer">MDN</a>。</p>
</blockquote>
<p>目前 bigint 用得很少。面试也基本不考，工作中也较少用到。因为太新了。</p>
<p>​</p>
<p>​</p>
<h2 id="变量声明-var--let--const--">变量声明 var / let / const  ⭐️</h2>
<blockquote>
<p>强烈推荐阅读：《<a href="https://zhuanlan.zhihu.com/p/28140450" target="_blank" rel="noopener noreffer">我用了两个月的时间才理解 let</a>》</p>
</blockquote>
<h3 id="三种声明方式">三种声明方式</h3>
<ol>
<li><code>var a=1</code></li>
<li><code>let a=1</code></li>
<li><code>const a=1</code></li>
<li><code>a=1</code></li>
</ol>
<h4 id="区别-1">区别</h4>
<ol>
<li>var 是过时的、不好用的方式</li>
<li>let 是新的，更合理的方式</li>
<li>const 是声明时必须赋值，且不能再改的方式</li>
<li>最后这种方式是错误的，不准这样声明</li>
</ol>
<h4 id="var-变量提升">var 变量提升</h4>
<ul>
<li>押题时再讲，有兴趣可以提前看<a href="https://wangdoc.com/javascript/basic/grammar.html#%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87" target="_blank" rel="noopener noreffer">网道教程</a></li>
</ul>
<p>​</p>
<h3 id="var-声明">var 声明</h3>
<p>直接跳过</p>
<ul>
<li>我们写代码不用 var</li>
<li>面试押题前单独讲解</li>
</ul>
<p>​</p>
<h3 id="let-声明">let 声明</h3>
<p>规则（特点）</p>
<ol>
<li>遵循<strong>块作用域</strong>，即：使用范围不能超出 { }</li>
<li>不能重复申明</li>
<li>可以赋值，也可以不赋值</li>
<li>必须先声明，再使用。否则报错</li>
<li>全局声明的 let 变量，不会变成 window 的属性</li>
<li>for 循环配合 let 有奇效</li>
</ol>
<p>例 1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 遵循块作用域，使用范围不能超出{}
</span><span class="c1"></span><span class="p">{</span>
  <span class="kd">let</span> <span class="nx">b</span><span class="o">=</span><span class="mi">1</span>  <span class="c1">// let声明的b只能作用在声明的这个{}里面
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>   <span class="c1">// 1
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>   <span class="c1">// Uncaught ReferenceError: b is not defined // 报错：b未被定义
</span></code></pre></td></tr></table>
</div>
</div><p>例 2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">2</span> <span class="c1">// Uncaught SyntaxError: Identifier &#39;a&#39; has already been declared  // 报错：标识符a已被声明
</span></code></pre></td></tr></table>
</div>
</div><p>不能重复声明：在同一个作用域，只能有一个 a</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="p">{</span>
  <span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">2</span>   <span class="c1">// 这样是可以的。因为a是在{}中的，与{}块外面的a不算重复声明
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>例 3</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">a</span>   <span class="c1">// 声明时可以赋值，也可以不赋值
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>  <span class="c1">// undefined
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="kc">true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>  <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div><p>例 4</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 必须先声明，再使用，否则报错
</span><span class="c1"></span><span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>  <span class="c1">// Uncaught ReferenceError: Cannot access &#39;b&#39; before initialization
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">b</span><span class="o">=</span><span class="mi">1</span>
<span class="p">}</span>
<span class="c1">// 报错：不能访问 b 在初始化之前
</span></code></pre></td></tr></table>
</div>
</div><p>例 5</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 全局声明的 let 变量，不会变成 window 的属性
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">abc</span><span class="o">=</span><span class="s1">&#39;abc&#39;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">abc</span><span class="p">)</span>  <span class="c1">// undefined
</span><span class="c1"></span>
<span class="kd">var</span> <span class="nx">abc</span> <span class="o">=</span> <span class="s1">&#39;abc&#39;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">abc</span><span class="p">)</span>  <span class="c1">// &#39;abc&#39;  
</span><span class="c1">// 这其实是 var 的 bug 。为什么声明变量会变成 window 上的属性？这是var强加的
</span><span class="c1">// let就改掉这个bug了，let就是单纯声明变量，不做多余操作
</span></code></pre></td></tr></table>
</div>
</div><p>例 6</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="mi">0</span><span class="p">)</span>   <span class="c1">// 5 5 5 5 5
</span><span class="c1"></span><span class="p">}</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="mi">0</span><span class="p">)</span>   <span class="c1">// 0 1 2 3 4 
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<h3 id="const-声明">const 声明</h3>
<p>规则</p>
<ul>
<li>
<p>跟 let 相同的点</p>
<ul>
<li>遵循 { } 块作用域</li>
<li>不能重复声明</li>
<li>先声明后使用</li>
<li>不会变成 window 属性</li>
</ul>
</li>
<li>
<p>跟 let 只有一条不同：<strong>声明时就要赋值，赋值后不能改</strong></p>
<p>const 声明的是一个 只读变量，也叫做「常量」</p>
</li>
</ul>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// const声明变量，声明时不赋值，就会报错
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">i</span>  
<span class="c1">// Uncaught SyntaxError: Missing initializer in const declaration // 报错：const声明中缺少初始化
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 声明后，又重新赋值，会报错
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="mi">100</span> 
<span class="nx">i</span><span class="o">=</span><span class="mi">101</span> <span class="c1">// Uncaught TypeError: Assignment to constant variable // 报错：赋值给常量
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// for循环中，修改变量值，会报错
</span><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="kr">const</span> <span class="nx">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// Uncaught TypeError: Assignment to constant variable // 报错：赋值给常量
</span><span class="c1"></span>  <span class="nx">setTimeout</span><span class="p">(()=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="mi">0</span><span class="p">)</span>  <span class="c1">// 2
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>​</p>
<h3 id="指定值同时也指定了类型">指定值，同时也指定了类型</h3>
<blockquote>
<p>变量声明</p>
<ul>
<li>指定了<strong>值</strong>，同时也指定了<strong>类型</strong></li>
<li>但是值和类型都可以随意变化</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>  <span class="c1">// number类型
</span><span class="c1"></span><span class="nx">a</span><span class="o">=</span><span class="mi">2</span>
<span class="nx">a</span><span class="o">=</span><span class="s1">&#39;字符串&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>​</p>
<p>​</p>
<h2 id="name-和-name-的区别">name 和 &lsquo;name&rsquo; 的区别</h2>
<h3 id="name-是变量">name 是变量</h3>
<ul>
<li>变量，意味着「值」「类型」可变，可能是 &lsquo;name&rsquo;，也可能是 &lsquo;hello&rsquo;</li>
<li>变量，存在内存的「不知道什么区」</li>
</ul>
<h3 id="name-是字符串常量">&lsquo;name&rsquo; 是字符串、常量</h3>
<ul>
<li>「常量」就是不变量</li>
<li>&lsquo;name&rsquo; 只能是 &lsquo;name&rsquo; ，不能是其他值</li>
<li>字符串，存在「Stack 区」</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="类型转换--">类型转换  ⚡️</h2>
<h3 id="number--string">number =&gt; string</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">String</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>  <span class="c1">// 前端通常不会用这种写法，太麻烦了
</span><span class="c1"></span><span class="nx">n</span> <span class="o">+</span> <span class="s1">&#39;&#39;</span>     <span class="c1">// 前端都是用这种
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nx">n</span><span class="p">))</span>  <span class="c1">// 1 [黑色字符串]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span>       <span class="c1">// 1 [黑色字符串]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="o">+</span><span class="nx">n</span><span class="p">)</span>       <span class="c1">// 1 [黑色字符串]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>          <span class="c1">// 1 [蓝色数字]
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>JS bug</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">String</span><span class="p">(</span><span class="mi">1000000</span><span class="p">)</span>  <span class="c1">// &#34;1000000&#34;
</span><span class="c1"></span><span class="nb">String</span><span class="p">(</span><span class="mi">1000000000000</span><span class="p">)</span>  <span class="c1">// &#34;1000000000000&#34;
</span><span class="c1"></span><span class="nb">String</span><span class="p">(</span><span class="mi">1000000000000000000000000</span><span class="p">)</span>   <span class="c1">// &#34;1e+24&#34; （0变多，就变成科学计数法的字符串了）
</span><span class="c1">// 后来JS补救了：即使0变多，也不会转成科学计数法
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h3 id="string--number">string =&gt; number</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Number</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
<span class="nb">parseInt</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="o">/</span>  <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
<span class="nx">s</span><span class="o">-</span><span class="mi">0</span> <span class="o">/</span> <span class="o">+</span><span class="nx">s</span>    <span class="c1">// 前端都是用这种最省事的写法
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="s1">&#39;123&#39;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Number</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span>     <span class="c1">// 123 [蓝色数字] 
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span>   <span class="c1">// 123 [蓝色数字] 虽然显示的是整数，实际上是小数，number只有一种64位浮点数
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span> <span class="c1">// 123 [蓝色数字]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s</span><span class="o">-</span><span class="mi">0</span><span class="p">)</span>           <span class="c1">// 123 [蓝色数字]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">+</span><span class="nx">s</span><span class="p">)</span>            <span class="c1">// 123 [蓝色数字]
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>             <span class="c1">// 123 [黑色字符串]
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>JS bug</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// ES6之前，parseInt()自动识别：看到0开头就认为是8进制
</span><span class="c1"></span><span class="nb">parseInt</span><span class="p">(</span><span class="s1">&#39;0123&#39;</span><span class="p">)</span>  <span class="c1">// 83  (8进制的0123转为10进制 =&gt; 83)  // 1*8^2+2*8^1+3*8^0=83
</span><span class="c1"></span>    
<span class="c1">// ES6之后，parseInt()默认就是10进制
</span><span class="c1"></span><span class="nb">parseInt</span><span class="p">(</span><span class="s1">&#39;0123&#39;</span><span class="p">)</span>  <span class="c1">// 123
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h3 id="x--bool">x =&gt; bool</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">Boolean</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
<span class="o">!!</span><span class="nx">x</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 把1/0变成布尔类型
</span><span class="c1"></span><span class="nb">Boolean</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>   <span class="c1">// true
</span><span class="c1"></span><span class="nb">Boolean</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>   <span class="c1">// false
</span><span class="c1"></span>    
<span class="c1">// 上述方法，前端从来不用，太麻烦
</span><span class="c1">// 前端直接用 !! （两次取反） 这种方法因为比较装B，所以在前端界比较流行
</span><span class="c1"></span>    
<span class="o">!!</span><span class="mi">1</span>          <span class="c1">// true
</span><span class="c1"></span><span class="o">!!</span><span class="s1">&#39;aaa&#39;</span>      <span class="c1">// true      （ !!aaa 不加引号就是变量，这里变量需要先声明才能使用）
</span><span class="c1"></span>    
<span class="kd">var</span> <span class="nx">obj</span><span class="o">=</span><span class="p">{};</span> <span class="o">!!</span><span class="nx">obj</span>        <span class="c1">// true
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">foo</span><span class="p">(){};</span> <span class="o">!!</span><span class="nx">foo</span>  <span class="c1">// true
</span><span class="c1"></span>    
    
<span class="o">!!</span><span class="mi">0</span>          <span class="c1">// false
</span><span class="c1"></span><span class="o">!!</span><span class="kc">NaN</span>        <span class="c1">// false
</span><span class="c1"></span><span class="o">!!</span><span class="s1">&#39;&#39;</span>         <span class="c1">// false
</span><span class="c1"></span><span class="o">!!</span><span class="kc">null</span>       <span class="c1">// false
</span><span class="c1"></span><span class="o">!!</span><span class="kc">undefined</span>  <span class="c1">// false
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">!!</span><span class="nx">abc</span>  <span class="c1">// abc is not defined
</span><span class="c1"></span>    
<span class="kd">var</span> <span class="nx">abc</span>
<span class="o">!!</span><span class="nx">abc</span>   <span class="c1">// false
</span><span class="c1"></span>    
<span class="kd">var</span> <span class="nx">abc</span><span class="o">=</span><span class="mi">123</span>
<span class="o">!!</span><span class="nx">abc</span>   <span class="c1">// true
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h3 id="x--string">x =&gt; string</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nb">String</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> 
<span class="nx">x</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kc">true</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>   <span class="c1">// &#34;true&#34;
</span><span class="c1"></span><span class="kc">false</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>  <span class="c1">// &#34;false&#34;
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>JS bug</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mf">1.</span><span class="nx">toString</span><span class="p">()</span>   <span class="c1">// 报错，js读到「1.」认为这是个小数，后面应该跟着数字，结果读到「t」，就直接报错
</span><span class="c1">// 解决办法
</span><span class="c1"></span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">()</span>   <span class="c1">// &#34;1&#34;
</span><span class="c1"></span><span class="mi">1</span> <span class="p">.</span><span class="nx">toString</span><span class="p">()</span>    <span class="c1">// &#34;1&#34;
</span><span class="c1"></span><span class="mf">1.</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>    <span class="c1">// &#34;1&#34;   // 合法。js读到「1.」认为是 1.0
</span><span class="c1"></span><span class="mf">1.0</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>   <span class="c1">// &#34;1&#34;
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>​</p>
<h3 id="补充js-秘密花园">补充：JS 秘密花园</h3>
<blockquote>
<p>Google 搜索 「<a href="https://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="noopener noreffer">JS 秘密花园</a>」，里面就讲了 JS 的各种奇葩事情</p>
</blockquote>]]></description>
</item><item>
    <title>JS 的基本语法🤓</title>
    <link>http://samrks.github.io/javascript-basic-syntax/</link>
    <pubDate>Mon, 24 Aug 2020 22:15:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-basic-syntax/</guid>
    <description><![CDATA[<p>内容包括「什么是表达式和语句」「标识符的规则」「 if else 语句」「 while for 语句」「 label 」</p>
<h2 id="推荐书籍">推荐书籍</h2>
<ol>
<li>适合入门《<a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener noreffer">网道 JavaScript 教程</a>》</li>
<li>适合进阶《<a href="https://book.douban.com/subject/26351021/" target="_blank" rel="noopener noreffer">你不知道的 JavaScript（上卷）</a>》</li>
</ol>
<h2 id="js-语法-">JS 语法 ⭐️</h2>
<blockquote>
<p>开始学习</p>
</blockquote>
<h3 id="表达式与语句">表达式与语句</h3>
<p>表达式</p>
<ul>
<li>1+2 表达式的值为 3</li>
<li>add(1,2) 表达式的值为函数的<strong>返回值</strong></li>
<li>console.log 表达式的值为函数本身（因为没加括号）</li>
<li>console.log(3) 表达式的值为多少？（<strong>面试</strong>)
<ul>
<li>表达式的值就是函数的返回值 ，log函数的返回值为 undefined</li>
<li>所以 console.log(3) 表达式的值为 undefined</li>
</ul>
</li>
</ul>
<p>语句</p>
<ul>
<li>var a=1 是一个语句</li>
</ul>
<p>二者的区别</p>
<ul>
<li>表达式一般都有值，语句可能有也可能没有</li>
<li>语句一般会改变环境（声明、赋值）</li>
<li>上面两句话并不是绝对的</li>
</ul>
<h3 id="大小写敏感">大小写敏感</h3>
<p>不要写错</p>
<ul>
<li>var a 和 var A 是不同的</li>
<li>object 和 Object 是不同的</li>
<li>function 和 Function 是不同的</li>
<li>具体含义后面说</li>
</ul>
<h3 id="空格">空格</h3>
<p>大部分空格没有实际意义</p>
<ul>
<li>
<p><code>var    a    =    1</code> 和 <code>var a=1</code> 没有区别</p>
</li>
<li>
<p>加回车，大部分时候也不影响</p>
</li>
<li>
<p>只有一个地方不能加回车，那就是 return 后面</p>
<ul>
<li>
<p>return 后面不加东西，js 会自动补充成  return undefined</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="k">return</span> <span class="mi">3</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="k">return</span> <span class="p">[</span><span class="kc">undefined</span><span class="p">]</span>    <span class="c1">// return 和 3 之间加了一个回车，js会自动补充为 return undefined
</span><span class="c1"></span>  <span class="mi">3</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>  </p>
</li>
</ul>
<ul>
<li>唯独 return 后面不能加回车，其他多离谱的回车都没问题</li>
</ul>
</li>
</ul>
<h3 id="标识符">标识符</h3>
<h4 id="规则">规则</h4>
<ul>
<li>
<p>第一个字符，可以是 <code>Unicode 字母</code> /  <code>$</code> / <code>_</code>  /  <code>中文</code></p>
</li>
<li>
<p>后面的字符，除了上面所说，还可以有数字</p>
</li>
<li>
<p>注意，首位不能是数字</p>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="mi">9</span><span class="nx">$</span>
<span class="nx">Uncaught</span> <span class="nx">SyntaxError</span><span class="o">:</span> <span class="nx">Invalid</span> <span class="nx">or</span> <span class="nx">unexpected</span> <span class="nx">token</span> <span class="c1">// SyntaxError意为语法错误，token理解成字符串
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="变量名是标识符">变量名是标识符</h4>
<p>以下都是合法的标识符用法</p>
<ul>
<li><code>var _ = 1 </code></li>
<li><code>var $ = 2 </code></li>
<li><code>var ______= 6 </code></li>
<li><code>var 你好 = 'hi'</code></li>
<li>其他标识符用到再说</li>
</ul>
<h3 id="注释">注释</h3>
<blockquote>
<p>谣言：“ 写代码要多写注释。”</p>
<p>注释，分为：好的注释、不好的注释</p>
</blockquote>
<h4 id="不好的注释">不好的注释</h4>
<blockquote>
<p>不好的注释：告诉别人我写了什么</p>
</blockquote>
<ol>
<li>
<p>把代码翻译成中文</p>
<p>可能埋没了重要的注释。有用的信息和噪音的比例（信噪比）要低</p>
<p></p>
</li>
<li>
<p>过时的注释</p>
</li>
<li>
<p>发泄不满的注释</p>
</li>
</ol>
<h4 id="好的注释">好的注释</h4>
<blockquote>
<p>好的注释：告诉别人为什么我要这么写</p>
</blockquote>
<ol>
<li>
<p>踩坑注解</p>
</li>
<li>
<p>为什么代码会写得这么奇怪，遇到什么 bug</p>
<ul>
<li>遇到某个 bug，代码非得这么奇怪的写，才能避开这个 bug（这种也需要注释出来）</li>
</ul>
</li>
</ol>
<h3 id="区块-block">区块 block</h3>
<ul>
<li>
<p>把代码包在一起</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="kd">let</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
  <span class="kd">let</span> <span class="nx">b</span><span class="o">=</span><span class="mi">2</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>常常与 if / for / while 合用</p>
</li>
</ul>
<h2 id="if-语句">if 语句</h2>
<blockquote>
<p>如果 … 那么 …</p>
</blockquote>
<h3 id="语法">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span><span class="nx">语句1</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">语句2</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>{ } 在语句只有一句的时候可以省略，不建议这样做</li>
</ul>
<h3 id="变态情况">变态情况</h3>
<ul>
<li>
<p>(表达式) 里可以非常变态，如 a=1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">2</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a是1&#39;</span><span class="p">)</span>   <span class="c1">// 最终打印这句，因为 = 是赋值，=== 才是判断是否相等
</span><span class="c1"></span><span class="p">}</span><span class="k">else</span><span class="p">{</span>
  <span class="nx">console</span><span class="mf">.1</span><span class="nx">og</span><span class="p">(</span><span class="s1">&#39;a不是1&#39;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>语句1 里可以非常变态，如嵌套的 if else</p>
</li>
<li>
<p>语句2 里可以非常变态，如嵌套的 if else</p>
</li>
<li>
<p>缩进也可以很变态，如面试题常常下套</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>上述代码执行结果为：</p>
<p>因为不写 { } 时，只默认<strong>第一个语句</strong>是跟随 if 条件的，有一个**无形的 { } **括住了第一句，相当于下面效果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>注：<strong>js 中是没有【行】的概念</strong>，即使两句写在一行，结果不变，仍是只括住<strong>第一个语句</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">);</span> <span class="p">}</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>如果用 逗号分隔呢？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">),</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a等于2&#39;</span><span class="p">)</span> <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a???&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li>逗号，表示这句话没结束。所以默认两个 console 就变成一个语句了（效果如上）</li>
<li>分号；表示这句话结束了。</li>
</ul>
</li>
</ul>
<h3 id="使用最没有歧义的写法">使用最没有歧义的写法</h3>
<h4 id="最推荐使用的写法">最推荐使用的写法</h4>
<blockquote>
<p>永远不要省略花括号 { }，即使只有一个语句。这是最不会产生歧义的写法</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
	<span class="nx">语句</span>
<span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
  <span class="nx">语句</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
  <span class="nx">语句</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="次推荐使用的写法">次推荐使用的写法</h4>
<blockquote>
<p>该写法，只在函数里有用</p>
<p>基于函数 return 的特点：执行 return ，函数就结束了，不再往下执行</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">表达式</span>
  <span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">表达式</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">表达式</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">表达式</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="switch-语句">switch 语句</h2>
<blockquote>
<p>if…else…升级版</p>
<p>JS 的 switch 语句设计的不算精致，但确实在某些情况时，比 if…else… 好用</p>
</blockquote>
<h3 id="语法-1">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">switch</span><span class="p">(</span><span class="nx">fruit</span><span class="p">){</span> 
  <span class="k">case</span> <span class="s2">&#34;banana&#34;</span><span class="err">：</span>
    <span class="c1">//...
</span><span class="c1"></span>    <span class="k">break</span><span class="err">；</span> 
  <span class="k">case</span> <span class="s2">&#34;apple&#34;</span><span class="o">:</span>
    <span class="c1">//...
</span><span class="c1"></span>    <span class="k">break</span><span class="err">；</span> 
  <span class="k">default</span><span class="o">:</span>
    <span class="c1">//...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="break">break</h3>
<ol>
<li>
<p>**大部分时候，省略 break 你就完蛋了 **</p>
<ul>
<li>当条件符合 banana 时，执行某些语句 …  ，遇到 break 跳出 switch</li>
<li>如果没有 break，就会向下跳过<code>case 'apple'</code>，直接执行 apple 的语句 …</li>
<li>看起来很鸡肋</li>
</ul>
</li>
<li>
<p><strong>少部分时候，可以利用 break</strong></p>
<ul>
<li>
<p>最早为什么这么设计 break 呢？</p>
</li>
<li>
<p>是为了方便「 满足多个条件（case）时 」的判断</p>
<ul>
<li>如下，case 1 可以默认贯穿到 case 3  （初衷是好的）</li>
</ul>
<p>​       </p>
</li>
</ul>
</li>
<li>
<p><a href="https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html" target="_blank" rel="noopener noreffer">Swift</a> 的 switch case 语句设计，完爆 JS 的 switch case  （apple 出的语言）</p>
<ul>
<li>执行完一个 case，默认跳出，无需 break</li>
<li>多条件判断：可以直接在一个 case 下写多个条件句 ，无需去掉 break 来表示贯穿</li>
<li>综上，JS 出现的太早了，没有抄到一个好的 switch case</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">switch</span> <span class="nx">some</span> <span class="nx">value</span> <span class="nx">to</span> <span class="nx">consider</span> <span class="p">{</span>
<span class="k">case</span> <span class="nx">value</span> <span class="mi">1</span><span class="o">:</span>
    <span class="nx">respond</span> <span class="nx">to</span> <span class="nx">value</span> <span class="mi">1</span>
<span class="k">case</span> <span class="nx">value</span> <span class="mi">2</span><span class="p">,</span>
     <span class="nx">value</span> <span class="mi">3</span><span class="o">:</span>
    <span class="nx">respond</span> <span class="nx">to</span> <span class="nx">value</span> <span class="mi">2</span> <span class="nx">or</span> <span class="mi">3</span>
<span class="k">default</span><span class="o">:</span>
    <span class="nx">otherwise</span><span class="p">,</span> <span class="k">do</span> <span class="nx">something</span> <span class="k">else</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ol>
<h2 id="问号冒号三元表达式">问号冒号（三元）表达式</h2>
<blockquote>
<p><strong><code>表达式1 ? 表达式2 : 表达式3 </code></strong>    表达式</p>
<p>最简单的 if…else… 的写法，能用问号冒号就不用 if…else…</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 求两个数的最大值
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">)</span> <span class="k">return</span> <span class="nx">a</span><span class="p">;</span>
  <span class="k">else</span> <span class="k">return</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">a</span><span class="o">&gt;</span><span class="nx">b</span> <span class="o">?</span> <span class="nx">a</span><span class="o">:</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="c1">// 求绝对值
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">abs</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">n</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">?</span> <span class="nx">n</span><span class="o">:</span> <span class="o">-</span><span class="nx">n</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="-短路逻辑">&amp;&amp; 短路逻辑</h2>
<p>与运算</p>
<blockquote>
<ul>
<li>A &amp;&amp; B &amp;&amp; C &amp;&amp; D
<ul>
<li>取第一个假值，后面就不看了</li>
<li>如果ABC都为真，就取 D。</li>
</ul>
</li>
<li>一般整句表达式的值，不会出现取 true / false，而是取 ABCD 中的一个</li>
<li>只要整个表达式中，有一个是假，整个式子就是假</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">b</span>
<span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span>  <span class="c1">// 理解：a&amp;&amp;b 等价于，如果a是真，就执行b，否则就什么都不执行
</span><span class="c1"></span>  <span class="nx">b</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span> 
  
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">5</span> <span class="o">&amp;&amp;</span> <span class="mi">5</span>
<span class="kc">false</span>
<span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">5</span>
<span class="mi">5</span>
<span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;前面全对了&#39;</span><span class="p">)</span>
<span class="nx">前面全对了</span>
<span class="mi">3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">2</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="mi">4</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="mi">5</span><span class="o">&lt;</span><span class="mi">0</span>
<span class="kc">false</span>
</code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">f1</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;f1存在&#39;</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 上下效果等价：如果 window.f1为 true ，就会执行 conosole.log(&#39;f1存在&#39;)
</span><span class="c1"></span><span class="nb">window</span><span class="p">.</span><span class="nx">f1</span> <span class="o">&amp;&amp;</span> <span class="nx">conosole</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;f1存在&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>前端中，如果能写成 &amp;&amp; 的语句，就不写 if…else… 语句</p>
</blockquote>
<h3 id="最常见的用法">最常见的用法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">fn</span> <span class="o">&amp;&amp;</span> <span class="nx">fn</span><span class="p">()</span>  <span class="c1">// 如果 fn 存在就执行 fn
</span></code></pre></td></tr></table>
</div>
</div><p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span>  
<span class="c1">// 如果console存在，就判断console.log是否存在，也存在，就执行打印 hi
</span><span class="c1"></span><span class="cm">/* 这么写有什么意义？
</span><span class="cm">   因为 IE 没有 console，如果用 IE 就不执行 console，不然 IE 会报错 */</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="-短路逻辑-1">|| 短路逻辑</h2>
<p>或运算</p>
<blockquote>
<ul>
<li>
<p>A || B || C || D</p>
<ul>
<li>
<p>取第一个真值，后面就都不看了。</p>
</li>
<li>
<p>如果ABC都为假，就取 D</p>
</li>
</ul>
</li>
<li>
<p>一般整句表达式的值，不会出现取 true / false，而是取 ABCD 中的一个</p>
</li>
<li>
<p>只要整个表达式中，有一个是真，整个式子就是 真</p>
</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">a</span><span class="o">||</span><span class="nx">b</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">){</span>  <span class="c1">// 理解：a||b 等价于，如果a不是真，就执行b，否则就什么都不执行
</span><span class="c1"></span>  <span class="nx">b</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
  
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>如果能写成 || 的语句，就不写 if…else…</p>
</blockquote>
<h3 id="最常见的用法-1">最常见的用法</h3>
<p>例：前端中经常有一个种写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">||</span> <span class="mi">100</span> 

<span class="c1">// 理解：如果a存在就什么都不做，否则 a=100
</span><span class="c1"></span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span>  <span class="c1">// 自己赋给自己，相当于什么都不做
</span><span class="c1"></span><span class="p">}</span><span class="k">else</span><span class="p">{</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="mi">100</span>  <span class="c1">// 保底值
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="总结条件语句">总结：条件语句</h2>
<ul>
<li>if … else…
<ul>
<li>if…else…的逻辑是最常用的，但是很多情况并不使用它。代码简短时，会用更简便的代码替代这种写法</li>
</ul>
</li>
<li>switch case
<ul>
<li>不能少了 break</li>
</ul>
</li>
<li>A ? B : C
<ul>
<li>相当常用（A若为真，执行B，A若为假，执行C）</li>
</ul>
</li>
<li>A &amp;&amp; B
<ul>
<li>相当常用，举例：fn &amp;&amp; fn()    （ fn 存在就执行 fn ）</li>
</ul>
</li>
<li>A || B
<ul>
<li>相当常用，举例： A = A || B    （A 存在时就什么都不执行，A 不存在时 B 就是 A 的保底值）</li>
</ul>
</li>
</ul>
<h2 id="while-循环">while 循环</h2>
<blockquote>
<p>用的不多</p>
</blockquote>
<h3 id="语法-2">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">while</span> <span class="p">(</span><span class="nx">表达式</span><span class="p">)</span> <span class="p">{</span> <span class="nx">语句</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>判断表达式的真假</li>
<li>当表达式为真，执行语句，执行完再判断表达式的真假</li>
<li>直到遇到表达式为假，跳出循环，执行后面的语句</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1">// 初始化
</span><span class="c1"></span><span class="k">while</span><span class="p">(</span><span class="nx">a</span> <span class="o">!==</span> <span class="mi">10</span><span class="p">){</span>   <span class="c1">// 判断条件
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>   <span class="c1">// 循环体
</span><span class="c1"></span>  <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span><span class="o">+</span><span class="mi">1</span>  <span class="c1">// 增长(为最终能跳出循环)
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>共需要四部分： 1. 初始化  2. 判断条件  3. 循环体  4. 增长</li>
</ul>
<h3 id="其他">其他</h3>
<ul>
<li>do &hellip; while 用得不多，自行了解</li>
</ul>
<h3 id="while-变态情况死循环">while 变态情况：死循环</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">while</span><span class="p">(</span><span class="nx">a</span><span class="o">!==</span><span class="mi">1</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
  <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="mf">0.1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>原因：浮点数不精确，导致死循环</p>
<p></p>
<h2 id="for-循环">for 循环</h2>
<blockquote>
<p>for循环 是 while循环 的语法糖</p>
</blockquote>
<h3 id="语法糖">语法糖</h3>
<ul>
<li>for 是 while 循环的方便写法
<ul>
<li>写 while 时需要四部分： 1. 初始化  2. 判断条件  3. 循环体  4. 增长</li>
<li>for 将 while 的写法升级、整合，如下
<ol>
<li>语句1 是用来初始化的</li>
<li>表达式2  是判断条件</li>
<li>语句3 是自增</li>
<li>循环体</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="语法-3">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="nx">语句1</span><span class="p">;</span><span class="nx">表达式2</span><span class="p">;</span><span class="nx">语句3</span><span class="p">){</span>
  <span class="nx">循环体</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ol>
<li>先执行语句1</li>
<li>然后判断表达式2
<ul>
<li>如果为真，执行循环体，然后再执行语句3</li>
<li>如果为假，直接退出循环，执行后面的语句</li>
</ul>
</li>
</ol>
<p>例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>   <span class="c1">// 0 1 2 3 4
</span><span class="c1"></span><span class="p">}</span>
<span class="c1">// i 5
</span></code></pre></td></tr></table>
</div>
</div><h3 id="变态">变态</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// 5 5 5 5 5
</span><span class="c1"></span>    <span class="c1">// console.log(i + &#39;随机数&#39; + Math.random())  
</span><span class="c1"></span>  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// i 5
</span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>9 是 Chrome 的 bug。</p>
<p>5个5是正解。</p>
<p>每轮循环触发 setTimeout 相当于设置一个闹钟命令：过一会再执行 setTimeout 中的语句。而过一会之后，for循环已经走完，i 变为 5。然后闹钟到点，依次执行每轮触发的 setTimeout 中的语句，也就是执行 5轮 <code>console.log( i )</code> ，就会打印 5 个 5</p>
<h4 id="解决">解决</h4>
<p>把 var 替换成 let</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// 0 1 2 3 4 
</span><span class="c1"></span>  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="语法变形">语法变形</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="nx">语句1</span><span class="p">;</span><span class="nx">表达式2</span><span class="p">;</span><span class="nx">语句3</span><span class="p">){</span>
  <span class="nx">循环体</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>省略 语句 1 ，可在 for 循环外面定义变量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>    <span class="c1">// 0 1 2 3 4
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>省略 表达式 2 ，会进入死循环</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(;</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>    <span class="c1">// 0 1 2 3 4 5 6...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>省略 语句 2 &amp; 3 ，会进入死循环</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(;</span> <span class="p">;</span> <span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>    <span class="c1">// 0 0 0 0 0 0 0...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="break-和-continue">break 和 continue</h3>
<blockquote>
<p>break 退出所有循环</p>
<p>continue 退出当前一次循环</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">1</span><span class="p">){</span> <span class="c1">// 遇到奇数轮次，退出整个for循环
</span><span class="c1"></span>    <span class="k">break</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 1
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">%</span><span class="mi">2</span><span class="o">===</span><span class="mi">1</span><span class="p">){</span> <span class="c1">// 遇到奇数轮次，跳过当次循环
</span><span class="c1"></span>    <span class="k">continue</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>  <span class="c1">// 0 2 4 6 8
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="label-语法">label 语法</h2>
<blockquote>
<p>用的很少，面试会考（概率5%）</p>
<p>这个知识点，除了用来做面试题之外，毫无用处</p>
</blockquote>
<h3 id="语法-4">语法</h3>
<p>label 语法：在任何情况下，写一个[标识符](# 标识符)，后面写一个代码块 { }（通常包含多句代码），或一句代码</p>
<h4 id="代码块">代码块</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">foo</span><span class="o">:</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">break</span> <span class="nx">foo</span><span class="p">;</span>   <span class="c1">// 跳出foo这个代码块
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;本行不会输出&#39;</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="一句代码">一句代码</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">foo</span><span class="o">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="面试">面试</h3>
<p>1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>   <span class="c1">// 表示代码块只有一行，叫做 1
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>3</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>  <span class="c1">// 一个代码块，第一行是一个标签，标签内容是 1，没有什么实际意义
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>问上面是什么</p>
<p>答： 是一个代码块（属于 label 语法），里面有一个标签 foo，语句就是一个 1</p>
<p>为什么不是一个对象？</p>
<p>答：如果写成下面形式，a 就是对象了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>如果单纯写一个代码块（如下），那就是一个 label，语句为 1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nx">foo</span><span class="o">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>JavaScript 的发展历史</title>
    <link>http://samrks.github.io/javascript-history/</link>
    <pubDate>Wed, 12 Aug 2020 21:13:23 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/javascript-history/</guid>
    <description><![CDATA[<p>简单了解「学 JS 的基本要求」，重点了解「JS 的诞生与历史」</p>
<p>​</p>
<h2 id="一些链接">一些链接</h2>
<ul>
<li>《<a href="https://www.bilibili.com/video/av15989846/" target="_blank" rel="noopener noreffer">Code Rush</a>》纪录片，记录了 Firefox 开源的过程，里面有 JS 之父的采访</li>
<li><a href="https://www.bilibili.com/video/av3745910/" target="_blank" rel="noopener noreffer">Chrome 的广告</a>，让你了解 Chrome 有多快</li>
<li><a href="https://www.jianshu.com/p/4eb60e47b4bf" target="_blank" rel="noopener noreffer">淘宝天猫不再支持 IE 6/7</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/24091492" target="_blank" rel="noopener noreffer">淘宝天猫不再支持 IE 8</a></li>
<li><a href="http://index.baidu.com/v2/main/index.html#/trend/%e5%89%8d%e7%ab%af?words=%e5%89%8d%e7%ab%af" target="_blank" rel="noopener noreffer">百度指数</a></li>
</ul>
<p>【JavaScript 诞生】相关文章：</p>
<ol>
<li><a href="https://zh.wikipedia.org/wiki/JavaScript#%e5%8e%86%e5%8f%b2" target="_blank" rel="noopener noreffer">JavaScript 的历史</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html" target="_blank" rel="noopener noreffer">JavaScript 诞生记</a>⭐</li>
<li><a href="http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html" target="_blank" rel="noopener noreffer">JavaScript 的10个设计缺陷</a></li>
</ol>
<p>​</p>
<h2 id="前端的门槛">前端的门槛</h2>
<blockquote>
<p>从 JavaScript 开始，你需要绞尽脑汁了</p>
</blockquote>
<p>​</p>
<h2 id="学-js-的基本要求">学 JS 的基本要求</h2>
<h3 id="软要求">软要求</h3>
<blockquote>
<p>对大脑的要求</p>
</blockquote>
<h4 id="一逻辑能力">一、逻辑能力</h4>
<p>逻辑分很多种：抽象逻辑、符号逻辑、三段论逻辑（最常用）…</p>
<p><strong>三段论逻辑</strong></p>
<p>示例</p>
<ul>
<li>JS的数据类型有 number / string / null / undefined / bool / symbol / object 【大前提】</li>
<li>JS的函数不是  number / string / null / undefined / bool / symbol 中的任意一种</li>
<li>所以，JS的函数是object 【根据前两句话，能推出第三句】</li>
</ul>
<p>好处</p>
<ul>
<li>写代码基本就是在<strong>编写逻辑</strong></li>
</ul>
<p>​</p>
<h4 id="二质疑自己的能力">二、质疑自己的能力</h4>
<blockquote>
<p>程序员不要相信人类，包括你自己</p>
</blockquote>
<p>质疑自己、推翻自己</p>
<p></p>
<ul>
<li>出现 bug ，先质疑自己、再质疑机器</li>
<li>大脑中有6个知识点，通过这6个知识点，写出一个bug，可能某个知识点记错了，不要纠结，不要认死理，懂得质疑和推翻自己。直接把错误的知识点从大脑中擦掉，灌入正确的知识点，来更新你的知识</li>
</ul>
<p><strong>回想一下</strong></p>
<p>你犯了多少错误</p>
<ul>
<li>拼错单词</li>
<li>多写了空格、少写了空格</li>
<li>把 O 看成 0，把 0 写成 O</li>
<li>把 iOS 写成 IOS 或者 ios</li>
</ul>
<blockquote>
<p>这不是粗心大意，这是人类不可克服的问题，通过 <strong>double check</strong> 可以缓解</p>
<ul>
<li>正着核对一遍，再反着核对一遍</li>
</ul>
</blockquote>
<p>​</p>
<h4 id="三抽象思维">三、抽象思维</h4>
<blockquote>
<p>高级程序员必备能力</p>
</blockquote>
<p><strong>什么是抽象能力</strong></p>
<p>举例</p>
<ul>
<li>
<p>你订了一份报纸</p>
</li>
<li>
<p>你关注了偶像明星蔡徐坤的微博</p>
</li>
<li>
<p>你用JS监听了一个按钮的点击事件</p>
<blockquote>
<p>对程序员来说，这三件事是一件事，拥有共同的模式：发布订阅模式。</p>
<p>这就是抽象，<strong>把事物的特征进行快速总结</strong>。</p>
<p>多练，初级程序员至少锻炼1年，才能具备这种抽象思维。</p>
<p>具备看到一个事物，就能把它抽离成代码示例的能力。</p>
</blockquote>
</li>
</ul>
<p>好处</p>
<ul>
<li>抽象思维，使你的代码能解决更多的问题</li>
<li>而不是兵来将挡、水来土掩，一个一个解决
<ul>
<li>新手程序员，遇到一个问题就写一段代码</li>
<li>高级程序员，将所有可能问题汇总，写一大坨代码解决全部问题</li>
<li>比如 Vue 和 React 的作者（一套框架解决问题）</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="硬要求">硬要求</h3>
<blockquote>
<p>客观上的要求</p>
</blockquote>
<h4 id="一足够的代码量">一、足够的代码量</h4>
<ul>
<li>达到 1000 行 - 新手</li>
<li>达到 10000 行 - 熟手（至少做过1个比较复杂的项目，常规项目都能做）</li>
<li>达到 50000 行 - 专业选手（至少做过2-3个比较复杂的项目，可能3-5年，看996时间积累）</li>
<li><strong>只能靠时间积累</strong></li>
</ul>
<p><strong>如何统计自己的代码行数</strong></p>
<ul>
<li>安装 <code>yarn global add cloc</code></li>
<li><code>cloc --vcs=git .</code></li>
<li>可以用来统计一个仓库里的有效代码</li>
</ul>
<p>注意</p>
<ul>
<li>如果仓库里有 node_modules 目录等不相关内容</li>
<li>需要把 /node_modules/ 写入 .gitignore 文件</li>
</ul>
<p>​</p>
<h4 id="二了解足够多的概念">二、了解足够多的概念</h4>
<blockquote>
<p>不仅要会写，还要会<del>扯</del>说（面试）</p>
</blockquote>
<p><strong>概览</strong></p>
<p>常用常考</p>
<ul>
<li>
<p>闭包、原型类、继承、MVC、Flux、高阶函数、前端工程化</p>
<blockquote>
<p>只会用，不会说，面试就完了</p>
</blockquote>
</li>
</ul>
<p>如何积累</p>
<ul>
<li>在课程中提炼
<ul>
<li>就是记笔记</li>
<li>面试如果能完整说出来，就是满分。新手能说出一般也达到要求了，面试新手就看思路对不对，不需要百分百实现</li>
</ul>
</li>
<li>在大脑中思考
<ul>
<li>JS需要思考清楚，这些代码到底是在做什么。为什么这样设计、为什么这样用</li>
<li>学JS，必须把疑问直接搞定，不能一直留着，不然会有越来越多的 bug</li>
</ul>
</li>
<li>在博客上总结
<ul>
<li>思考清楚了，一定要总结、记下来</li>
<li>用于面试</li>
</ul>
</li>
<li>在代码中实践</li>
</ul>
<p>​</p>
<h4 id="三有足够的踩坑经验">三、有足够的踩坑经验</h4>
<blockquote>
<p>你以为是工作经验吗？</p>
</blockquote>
<p><strong>踩坑经验</strong></p>
<p>何谓专家</p>
<ul>
<li>**“ 该领域内所有的错误都犯完的人，就是专家 ” **</li>
</ul>
<p>如何踩坑</p>
<ul>
<li>做项目，而且是个人项目</li>
<li>个人项目的意思是<strong>所有代码都是你一个人写的</strong>
<ul>
<li>团队合作的大项目，基本上只有两个人做，其他人都是打酱油的</li>
</ul>
</li>
<li>这样你才能<strong>全方位踩坑</strong></li>
</ul>
<p>​</p>
<h3 id="总结">总结</h3>
<p>软要求</p>
<ul>
<li>逻辑能力</li>
<li>质疑自己的能力</li>
<li>抽象能力</li>
</ul>
<p>硬要求</p>
<ul>
<li>足够多的代码（至少5000行，大项目1000-2000行，小项目200行左右）</li>
<li>足够多的概念</li>
<li>足够多的踩坑经验（记下来自己遇到过什么坑）</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="javascript-的历史">JavaScript 的历史</h2>
<blockquote>
<p>历史和特点</p>
</blockquote>
<h3 id="发明人">发明人</h3>
<p>李爵士发明 HTML</p>
<p>赖先生发明 CSS</p>
<p><strong>布兰登发明 JS</strong></p>
<p>​</p>
<h4 id="布兰登的生平">布兰登的生平</h4>
<p></p>
<ul>
<li>生平1961年生于美国</li>
<li>物理学转数学与计算机学位</li>
<li>工作七年，负责操作系统与网络开发</li>
<li>又工作三年，负责微内核与电子信号处理相关工作</li>
<li>1995年进入网景公司，为其浏览器开发了 JS 功能</li>
<li>1998年协助成立 Mozilla.org，担任首席架构师</li>
<li>网景死亡（被收购）后，他成立了 Mozilla 基金会，Firefox 就是这个基金会维护的，有<a href="https://www.bilibili.com/video/av15989846/" target="_blank" rel="noopener noreffer">纪录片</a>记录了这一过程</li>
<li>2014年晋升为 Mozilla 的 CEO，十天后，被赶下台
<ul>
<li>原因是他曾捐助过反同性恋的法案（只有异性可结婚）</li>
</ul>
</li>
<li>2015年成立 Brave 公司，开发保护用户隐私的浏览器</li>
</ul>
<p>​</p>
<h3 id="总结-1">总结</h3>
<p>牛逼的程序员</p>
<ul>
<li>从来不会只学一门编程语言</li>
<li>不怕被辞退，总能找到事做</li>
<li>很容易创业，比外行人靠谱得多</li>
<li>可以干到 50 岁以上（基本上都是创办公司或很有钱了）</li>
</ul>
<p>JavaScript</p>
<ul>
<li>诞生之初，只是一个不起眼的小功能</li>
<li>同时 JS 有很多 bug，我们学习的时候要注意辨别</li>
</ul>
<p>​</p>
<h3 id="javascript-的诞生">JavaScript 的诞生</h3>
<p>布莱登临危受命</p>
<ul>
<li>公司要求给浏览器添加一个脚本功能</li>
<li>公司要求这个脚本必须蹭 Java 的流量</li>
<li>布莱登花十天设计了 JS 的最初版本（不是实现）</li>
</ul>
<p>JS的命名</p>
<ul>
<li>Mocha 摩卡 =&gt; LiveScript =&gt; JavaScript</li>
<li>Java 既是编程语言，也是一种咖啡</li>
<li>浏览器一开始同时就支持 Java 和 JavaScript</li>
<li>后来，JS 胜了（在浏览器上），Java就逐渐退出了浏览器平台</li>
</ul>
<p>​</p>
<h3 id="浏览器大战">浏览器大战</h3>
<blockquote>
<p>背景：1995年，网景推出 JS 功能，用户纷纷叫好，因为可以在页面上节省流量。</p>
<ul>
<li>当时的网速非常慢 2~3k/s，用户填写一个表单，点击提交按钮，等待一分钟才刷新页面，反馈结果。</li>
<li>有了 JS 功能之后，点击按钮，马上反馈用户表单信息是否正确，所以用户非常喜欢。</li>
<li>注意：此时的 JavaScript 只是网景提供的一个<strong>功能</strong>，并不是语言</li>
</ul>
</blockquote>
<p>微软的跟进</p>
<ul>
<li>1996年8月 IE 3 发布，支持 JScript（微软实现的JS）</li>
<li>浏览器大战开始，每家浏览器的脚本不太一样</li>
</ul>
<p>网景的反击</p>
<ul>
<li>1996年11月，网景向 ECMA 提交语言标准，由于版权问题，JS 语言标准不叫 JavaScript，叫 ECMAScript</li>
<li>ECMA 发音：ai ke ma</li>
</ul>
<p>​</p>
<h3 id="网景之死">网景之死</h3>
<p>被收购</p>
<ul>
<li>微软的 IE 浏览器由于捆绑进了 Windows，很快超越</li>
<li>1998年，网景浏览器节节败退，公司陷入内忧外患</li>
<li>同年，公司打算搏一搏，将浏览器<strong>开源</strong>（Firefox）</li>
<li>最终，市场并没有因为开源而重新青睐网景</li>
<li>年底，[美国在线 AOL] 宣布开始收购网景</li>
<li>收购后，网景团队里的程序员纷纷被解雇</li>
<li>布莱登在之后一直协助维护 Firefox 的运营</li>
</ul>
<p>​</p>
<h3 id="ie-6-如日中天">IE 6 如日中天</h3>
<p>你想象不到 IE 6 多么火</p>
<ul>
<li>2001年，IE 6 随着 Windows XP 一起发布</li>
<li>2004年，IE 6 全球市场占用率 80% 以上</li>
<li>然而，这款浏览器却不兼容 W3C 标准（主要是 CSS)</li>
<li>IE 6 也不断爆出安全漏洞</li>
<li>Firefox 打算涅槃重生，重新打败 IE</li>
<li>2005年，IE 7 发布，但打不过 IE 6</li>
<li>2006年，主流浏览器为 IE 6 和 Firefox</li>
<li>2010年，中国的大部分浏览器还是 IE 6</li>
<li>由于盗版 Windows XP 在中国的风行，在很多年里，IE 6 始终占据中国浏览器市场，是前端开发者的恶魔</li>
</ul>
<p>​</p>
<h3 id="ie-6-神奇的-bug">IE 6 神奇的 bug</h3>
<p>下面代码会让 IE 6 直接崩溃，当场死机</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span> 
  <span class="o">*</span> <span class="p">{</span> <span class="k">position</span><span class="p">:</span> <span class="kc">relative</span> <span class="p">}</span> 
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span> 
<span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span> 
  <span class="p">&lt;</span><span class="nt">input</span><span class="p">&gt;</span> 
<span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>补充：</p>
<ul>
<li>「<code>*{  }</code> 星号性能低下」的谣言，就是从 IE6 这个 bug ，开始传出来的</li>
<li>实际上星号没有这个问题，这是 IE6 自己有问题</li>
<li>如果现在还有人说「星号性能低下」，不要反驳他，八九年前的事情现在还在说
<ul>
<li>星号套星号…可能有问题，但是<strong>一个星号，是绝对不会有问题的</strong></li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="chrome-横空出世">Chrome 横空出世</h3>
<p>微软的懈怠</p>
<ul>
<li>由于 IE6 的巨大成功，微软觉得再花费精力不值得，而且没有竞争对手，所以直接解散了 IE6 开发团队</li>
<li>Firefox 的出现让微软重新组建 IE 团队，但不是同一队人，造成 IE7、8 一直问题不断</li>
</ul>
<p>谷歌抓住机会</p>
<ul>
<li>2004年，谷歌雇用了一些 Firefox 和 IE 的开发者</li>
<li><strong>2008年</strong>，Chrome 终于发布，迅速拿下 1% 份额</li>
<li>2011年，Chrome 份额超过 Firefox</li>
<li><strong>2016年</strong>，Chrome 全球份额 62%</li>
<li>欣赏一支 <a href="https://www.bilibili.com/video/av3745910/" target="_blank" rel="noopener noreffer">Chrome 的广告</a></li>
</ul>
<p>​</p>
<h3 id="移动市场兴起">移动市场兴起</h3>
<p>智能手机崛起</p>
<ul>
<li>2010年，iPhone 4 发布</li>
<li>2011年，微软 和 Nokia 联合起来，打算搞一波事情</li>
<li>后来的事情大家都知道，Nokia 手机业务完了</li>
<li>也就是说，手机上基本没有 IE 了</li>
<li>前端程序员表示欣喜若狂，IE 终于快要死了</li>
<li>2016年，淘宝天猫宣布<a href="https://www.jianshu.com/p/4eb60e47b4bf" target="_blank" rel="noopener noreffer">不再支持 IE6、IE7</a></li>
<li>同年年底，宣布<a href="https://zhuanlan.zhihu.com/p/24091492" target="_blank" rel="noopener noreffer">不再支持 IE 8</a></li>
<li>移动市场的兴起，让中国前端摆脱 IE 十年的恐怖支配</li>
<li>从此，前端快速，不对，是极速发展</li>
</ul>
<p>​</p>
<h3 id="ecmascript-标准的制定">ECMAScript 标准的制定</h3>
<p>时间</p>
<ul>
<li>1997年6月，第一版 ECMAScript 发布</li>
<li>1999年12月，<strong>第三版</strong>发布，这个版本使用最广（IE6支持）</li>
<li>第四版，流产。</li>
<li>2009年12月，第五版发布，增加了一些功能</li>
<li><strong>2015年</strong>6月，<strong>第六版</strong>发布，新浏览器都支持这一版</li>
<li>之后每年发布一版，版本号以年份命名</li>
</ul>
<h4 id="js-与-ecmascript-的关系">JS 与 ECMAScript 的关系</h4>
<ul>
<li>ECMAScript 是纸上的标准，JS 是浏览器的实现</li>
<li>纸上标准往往落后于浏览器，先实现，再写进标准
<ul>
<li>ECMA 只总结，不预演，这样就不会再导致标准流产（写进标准但没浏览器使用的情况）</li>
</ul>
</li>
</ul>
<p>​</p>
<h3 id="javascript-兴起">JavaScript 兴起</h3>
<h4 id="杀手级应用-gmail">杀手级应用 Gmail</h4>
<ul>
<li>2004年愚人节，谷歌发布 Gmail 在线网页</li>
<li>当时的人们认为网页只能用来看新闻和图片</li>
<li>Gmail 的发布让用户和开发者（后端、客户端）眼前一亮</li>
<li>2005年，Jesse 将谷歌用到的技术命名为 AJAX</li>
<li><strong>从此，前端技术正式出现</strong></li>
<li>在此之前的网页开发，都是由 后端 和 设计师 完成</li>
<li>2006年，jQuery 发布，是目前最长寿的 JS 库</li>
<li>后来的十年，jQuery 大发异彩，直到 IE 不行了，jQuery 才稍微没有那么火</li>
</ul>
<p>​</p>
<h3 id="中国前端的发展">中国前端的发展</h3>
<p>正式出现时间</p>
<ul>
<li>
<p>2010年左右，中国才有专门的前端岗位</p>
<p><a href="http://index.baidu.com/v2/main/index.html#/trend/%E5%89%8D%E7%AB%AF?words=%E5%89%8D%E7%AB%AF,java,python,php" target="_blank" rel="noopener noreffer">百度搜索指数</a></p>
<p></p>
<p></p>
</li>
</ul>
<p>前端的来源</p>
<ul>
<li>一部分来自自学的<strong>后端</strong>程序员，他们把 Java 的思想代入 JavaScript，<strong>面向对象</strong>成了JS的主流思想</li>
<li>一部分来自<strong>设计师</strong>，他们开始学习 CSS，并独创了「重构工程师」岗位（现已没落）
<ul>
<li>比如张鑫旭，专门研究CSS</li>
</ul>
</li>
<li>上面这两种来源，一种赶鸭子上架，一种不够专业，导致前端特别缺人</li>
</ul>
<p>缺人</p>
<ul>
<li>最应该产出前端人才的大学，迟迟没有相关课程</li>
<li>由于早期前端工资比不上后端，所以大部分人选后者</li>
<li>就如同现在很多高材生选择机器学习一样</li>
<li>一些不小心进入前端领域的科班生成长非常迅速</li>
</ul>
<p>​</p>
<h3 id="javascript-爆发">JavaScript 爆发</h3>
<p>V8 快如闪电</p>
<ul>
<li>
<p>Chrome 的 JS 引擎叫做 V8（V1到V7是啥)</p>
</li>
<li>
<p>2009年，Ryan 基于 V8 创建了 Node.js</p>
</li>
<li>
<p>2010年，Isaac 基于 Node.js 写出了 npm</p>
</li>
<li>
<p>前端工程师可以在浏览器之外执行 JS 了，Node.js 快速风靡</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">例：node demo.js
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>同年，TJ 受 Sinatra 启发，发布了 Express.js</p>
</li>
<li>
<p>从此，前端工程师可以愉快地写后端应用了！</p>
</li>
</ul>
<p>爆发</p>
<ul>
<li>这期间出来的技术太多，以后慢慢介绍：gulp、grunt、yeoman、requirejs、webpack、Angular、React、Vue等</li>
<li>这些技术很多也已经过时了</li>
</ul>
<p>​</p>
<h3 id="总结-2">总结</h3>
<h4 id="js-是历史的选择">JS 是历史的选择</h4>
<ul>
<li>一开始浏览器支持很多东西：Java、Flash、VBScript</li>
<li>只有 JS 活到最后</li>
</ul>
<h4 id="js-的低开高走">JS 的低开高走</h4>
<ul>
<li>一开始 JS 就是一个玩具语言</li>
<li>但是 JS 每次都走对了风口
<ol>
<li>JS 推出标准</li>
<li>Gmail 的出现（当时的网站只能看新闻，用户第一次体验到输入网址就能打开一个工具）</li>
<li>移动端</li>
<li>node.js</li>
</ol>
</li>
</ul>
<h4 id="学习-js-时需要注意">学习 JS 时需要注意</h4>
<ul>
<li>JS 最初也很混乱，旧的、过时的东西了解就好，考前记忆一些</li>
<li>跟 IE 相关的知识一律忽略</li>
</ul>
<blockquote>
<p>前端是进入互联网行业的捷径</p>
</blockquote>]]></description>
</item><item>
    <title>前端也得懂点儿 HTTP (下) </title>
    <link>http://samrks.github.io/http-2/</link>
    <pubDate>Mon, 10 Aug 2020 18:49:11 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/http-2/</guid>
    <description><![CDATA[<p>🤞🏻 “Nobody knows HTTP better than me !! ” 🤥</p>
<p>​</p>
<h2 id="先导">先导</h2>
<ul>
<li>安装 Node.js 8+</li>
<li>理解 IP 和 端口</li>
<li>理解 URL 路径和查询参数</li>
</ul>
<p>​</p>
<h2 id="演示-nodejs-server-">演示 Node.js Server ⭐</h2>
<h3 id="请求与响应模型">请求与响应模型</h3>
<p></p>
<ul>
<li>服务器，就是没有显示器的电脑</li>
</ul>
<p>​</p>
<h3 id="如何发请求">如何发请求</h3>
<p>方法</p>
<ul>
<li>用 Chrome 地址栏</li>
<li>用 curl 命令</li>
</ul>
<p>概念</p>
<ul>
<li>帮你发请求的工具叫做「用户代理」
<ul>
<li>如果使用 Chrome 地址栏发送请求，那么 Chrome 就是我们的「用户代理」</li>
<li>如果使用 curl 命令发送请求，那么 curl 就是我们的「用户代理」</li>
</ul>
</li>
<li>「用户代理」 英文名 User Agent</li>
</ul>
<p>​</p>
<h3 id="如何做出一个响应-">如何做出一个响应 ⭐</h3>
<blockquote>
<p>用 Chrome 地址栏 或 用 curl 命令 ，可以发出一个请求</p>
<ul>
<li>那么如何做出一个响应呢？（演示自己发请求-自己响应的过程）</li>
</ul>
</blockquote>
<p>需要用到编程</p>
<ul>
<li>
<p>Node.js 有一个 http 模块可以做到</p>
</li>
<li>
<p>新建项目目录 node-demo / server.js，将下面代码粘入  ⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐</p>
<blockquote>
<p>代码细节先不管，直接复制使用。（注意这块目的不是学 nodejs，而是搞清楚 http 的请求和响应）</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
    
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">port</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;请指定端口号好不啦？\nnode server.js 8888 这样不会吗？&#39;</span><span class="p">)</span>
  <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="p">}</span>
    
<span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">parsedUrl</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
  <span class="kd">var</span> <span class="nx">pathWithQuery</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">url</span>
  <span class="kd">var</span> <span class="nx">queryString</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">pathWithQuery</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;?&#39;</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="nx">queryString</span> <span class="o">=</span> <span class="nx">pathWithQuery</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">pathWithQuery</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;?&#39;</span><span class="p">))</span> <span class="p">}</span>
  <span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">parsedUrl</span><span class="p">.</span><span class="nx">pathname</span>
  <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">parsedUrl</span><span class="p">.</span><span class="nx">query</span>
  <span class="kd">var</span> <span class="nx">method</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">method</span>
    
  <span class="cm">/******** 从这里开始看，上面不要看 ************/</span>
    
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;有个傻子发请求过来啦！路径（带查询参数）为：&#39;</span> <span class="o">+</span> <span class="nx">pathWithQuery</span><span class="p">)</span>
    
  <span class="k">if</span> <span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/html;charset=utf-8&#39;</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`二哈`</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="s1">&#39;/x&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/css;charset=utf-8&#39;</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`body{color: red;}`</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">404</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/html;charset=utf-8&#39;</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`你输入的路径不存在对应的内容`</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span>
    
  <span class="cm">/******** 代码结束，下面不要看 ************/</span>
<span class="p">})</span>
    
<span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;监听 &#39;</span> <span class="o">+</span> <span class="nx">port</span> <span class="o">+</span> <span class="s1">&#39; 成功\n请在空中转体720度然后用电饭煲打开 http://localhost:&#39;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>注意事项</p>
<ul>
<li>这些代码就是服务器代码，一般放在服务器上</li>
<li>path 是不带查询参数的路径 /x</li>
<li>query 是查询参数的对象形式 {a:1}</li>
<li>queryString 是查询参数的字符串形式 ?a=1</li>
<li>pathWithQuery 是带查询参数的路径，一般不用</li>
<li>request 是请求对象</li>
<li>response 是响应对象</li>
<li>\n 表示回车</li>
</ul>
<p>​</p>
<h4 id="运行机制">运行机制⭐</h4>
<ol>
<li>
<p>在终端中启动应用：</p>
<ol>
<li>运行 <code>node server.js</code>  未指定<strong>端口号</strong>，会有提示</li>
<li>按照提示执行即可  <code>node server.js 8888</code>  或者  <code>node server 8888</code>  这句话就意味着我们的电脑会开一个端口 8888，这个端口被 server.js 监听着</li>
<li>这时候只要有人请求了8888 端口，就会走入 server.js 的代码中，我们注释的那段代码就会运行一遍。每接收到一次请求，就运行一遍</li>
</ol>
</li>
<li>
<p>用 curl 发出请求 <code>curl http://127.0.0.1:8080/xxxx</code>。server.js 接收到请求，会做出响应。</p>
<p></p>
<p></p>
<ul>
<li>如果响应内容乱码，可能是 windows 系统的关系</li>
</ul>
</li>
<li>
<p>添加路由</p>
<ol>
<li>
<p>编辑 server.js 文件，添加 if else（限定条件，访问某个路径，响应对应内容）</p>
</li>
<li>
<p>重新运行 node server.js 8888（修改服务代码，需要重启）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="k">if</span> <span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;有人访问/了&#39;</span><span class="p">)</span>
  <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;这就是访问/，响应的内容\n&#39;</span><span class="p">)</span>   <span class="c1">// 回车\n
</span><span class="c1"></span><span class="p">}</span> 
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>下面是，server.js 监听到 curl 命令 请求根路径时 执行的 console.log(…)</p>
<p></p>
</li>
</ol>
</li>
<li>
<p>后台启动应用：</p>
<ol>
<li>
<p><code>touch log </code>  创建一个 log 文件</p>
</li>
<li>
<p><code>node server.js 8888 &gt;log log 2&gt;&amp;1 &amp;</code></p>
<p>返回的数字1144就是这个<strong>进程的 ID</strong>（目前这个进程已经在后台运行了）</p>
</li>
</ol>
<p></p>
<ul>
<li>运行后，服务器在后台启动，不占用当前终端</li>
<li>怎么关闭这个后台进程呢？
<ul>
<li>执行 <code>kill -9 xxxx</code>   xxxx为后台进程的 id数字</li>
<li>kill -9 是最厉害的杀进程的方法</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>​</p>
<h4 id="代码逻辑">代码逻辑</h4>
<p>语法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="sb">`这种字符串`</span> <span class="nx">里面可以回车</span>
<span class="s1">&#39;这种字符串&#39;</span> <span class="nx">里面要回车</span><span class="err">，</span><span class="nx">只能用</span> <span class="err">\</span><span class="nx">n</span> <span class="nx">表示</span>
</code></pre></td></tr></table>
</div>
</div><p>逻辑</p>
<ol>
<li>
<p>每次收到请求都会把中间的代码执行一遍</p>
</li>
<li>
<p>用 if else 判断路径，并返回响应</p>
</li>
<li>
<p>如果是已知路径，一律返回 200</p>
</li>
<li>
<p>如果是未知路径，一律返回 404</p>
</li>
<li>
<p>Content-Type 表示内容的「类型/语法」（省略后缀，程序员从来不看后缀😎，后缀只是用来告诉计算机要用什么软件打开文件）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="sb">`text/html`</span><span class="err">、</span><span class="sb">`text/css`</span>
<span class="nx">path</span> <span class="nx">不写</span> <span class="o">/</span><span class="nx">x</span><span class="p">.</span><span class="nx">css</span> <span class="nx">而写</span> <span class="o">/</span><span class="nx">x</span><span class="err">，</span><span class="nx">因为</span> <span class="nx">content</span><span class="o">-</span><span class="nx">type</span> <span class="nx">中已经声明了类型</span><span class="o">/</span><span class="nx">语法</span><span class="err">，</span><span class="nx">所以可省略后缀</span> <span class="p">.</span><span class="nx">css</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>response.write() 可以填写返回的内容（写入响应内容）</p>
</li>
<li>
<p>调用 response.end() 表示响应可以发给用户了（调用 response.end() ，就会将响应发送给浏览器）</p>
<p>（ 以前不写 end 就会一直等待，现在可能优化了可以不写 end，严谨起见还是都写完整，明确告知可以响应给用户了 ）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"> <span class="k">if</span> <span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`
</span><span class="sb">        &lt;!DOCTYPE html&gt;
</span><span class="sb">        &lt;head&gt;
</span><span class="sb">                &lt;meta charset=&#34;UTF-8&#34;&gt;
</span><span class="sb">            &lt;link rel=&#34;stylesheet&#34; href=&#34;http://samrks.github.io/x&#34;&gt;  // &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 将 html 和 css 结合起来
</span><span class="sb">        &lt;/head&gt;
</span><span class="sb">        &lt;body&gt;
</span><span class="sb">                &lt;h1&gt;标题&lt;/h1&gt;
</span><span class="sb">            &lt;/body&gt;
</span><span class="sb">    `</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="s1">&#39;/x&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/css;charset=utf-8&#39;</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`body{color: red;}`</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li>
<p>如上图就是，通过 link 把 html 和 css 联系起来，成为一个网页，把这个网页通过 http 传送到浏览器上的整个过程：一个路径返回 html 字符串，一个路径响应 css  字符串。</p>
</li>
<li>
<p>这就是李爵士发明的 URL + HTTP + HTML</p>
</li>
</ul>
</li>
</ol>
<p>​</p>
<h4 id="注意符号-">注意符号 ``</h4>
<blockquote>
<p>反引号 ``  可以识别回车、语法</p>
<p>单引号 ‘’   不能识别回车语法，仅作为字符串</p>
</blockquote>
<p></p>
<p>​</p>
<p>​</p>
<h3 id="遥想当年李爵士">遥想当年李爵士</h3>
<p><strong>世界上第一个服务器程序</strong></p>
<ul>
<li>我们也写一个服务器程序</li>
</ul>
<p><strong>世界上第一个网页</strong></p>
<ul>
<li>
<p>我们在 / 路径返回一个 HTML 内容</p>
</li>
<li>
<p>然后在 /x 路径返回一个 CSS 内容</p>
</li>
<li>
<p>然后再 /y 路径返回一个 JS 内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"> <span class="k">if</span> <span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`
</span><span class="sb">        &lt;!DOCTYPE html&gt;
</span><span class="sb">        &lt;head&gt;
</span><span class="sb">                &lt;meta charset=&#34;UTF-8&#34;&gt;
</span><span class="sb">            &lt;link rel=&#34;stylesheet&#34; href=&#34;http://samrks.github.io/x&#34;&gt;   ←←←←←←←←←←←←←← 引入 css
</span><span class="sb">        &lt;/head&gt;
</span><span class="sb">        &lt;body&gt;
</span><span class="sb">                &lt;h1&gt;标题&lt;/h1&gt;
</span><span class="sb">                &lt;script src=&#34;http://samrks.github.io/y&#34;&gt;&lt;script&gt;   ←←←←←←←←←←←←←←← 引入 js
</span><span class="sb">            &lt;/body&gt;
</span><span class="sb">    `</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="s1">&#39;/x&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/css;charset=utf-8&#39;</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`body{color: red;}`</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="s2">&#34;/y&#34;</span><span class="p">){</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s2">&#34;Content-Type&#34;</span><span class="p">,</span> <span class="s2">&#34;text/javascript;charset=utf-8&#34;</span><span class="p">);</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`console.log(&#39;这是JS内容&#39;)`</span><span class="p">;</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">404</span><span class="p">;</span>
        <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/html;charset=utf-8&#39;</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`你输入的路径不存在对应的内容`</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p><strong>注意事项</strong></p>
<ul>
<li>关于后缀
<ul>
<li>即使写成 <code>path === &quot;/y.css&quot;</code> ，但如果在 Content-Type 中规定是 js 类型，就会按照 js 解析。所以，URL里的css 后缀卵用没有</li>
<li><strong>Content-Type 才是决定文件类型的关键</strong></li>
</ul>
</li>
</ul>
<p>​</p>
<h2 id="体系化学习-http">体系化学习 HTTP</h2>
<p>必须学会什么</p>
<ul>
<li>基础概念（有哪些是必会的）
<ul>
<li>请求、响应</li>
</ul>
</li>
<li>如何调试（用的是 Node.js，可以用 log / debugger )
<ul>
<li>本质是学习 HTTP，所以不要在 Nodejs 花费太多时间，只需要搞懂 nodejs 怎么调试即可</li>
</ul>
</li>
<li>在哪查资料（用的是 Node.js，所以看 Node.js 文档）</li>
<li>标准制定者是谁（ HTTP 规格文档：<a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener noreffer">RFC2616</a>（<a href="https://cloud.tencent.com/developer/chapter/13544" target="_blank" rel="noopener noreffer">中文</a>）等）</li>
</ul>
<p>如何学</p>
<ul>
<li>Copy-抄文档、抄老师</li>
<li>Run-放在自己的机器上运行成功</li>
<li>Modify-加入一点自己的想法，然后重新运行</li>
</ul>
<p>​</p>
<h2 id="http-基础概念">HTTP 基础概念</h2>
<blockquote>
<ul>
<li>
<p>必须点击 view source ，才能看到完整的请求、响应</p>
<p></p>
</li>
</ul>
</blockquote>
<h3 id="请求">请求</h3>
<p></p>
<ul>
<li><font color="redorage"><strong>请求动词 路径加查询参数 协议名/版本</strong></font>（所有请求都按照这个格式，简化版）例：<code>GET   /x?wd=hi   HTTP/1.1</code></li>
</ul>
<ul>
<li>
<p><font color="darkorange">Host: 就是域名或  IP</font>（包括端口号）</p>
</li>
<li>
<p><font color="darkorange">Accept: text/html</font>（表示浏览器想接收什么内容）</p>
<ul>
<li>
<p>测：根据 accept 返回不同内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">accept</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">headers</span><span class="p">[</span><span class="s1">&#39;accept&#39;</span><span class="p">];</span>  <span class="c1">// 获取请求头中的 accept 的值，赋给变量
</span><span class="c1"></span><span class="k">if</span><span class="p">(</span><span class="nx">accept</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;xml&#39;</span><span class="p">)){</span>
  <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;我知道你想访问 XML 内容&#39;</span><span class="p">)</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
  <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="sb">`&lt;!DOCTYPE html&gt;&lt;html&gt;...&lt;/html&gt;`</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>浏览器可接收的内容：accept。（大多来说浏览器就是接收 html）</p>
<p>默认先找 html，如果没有 html，可以接收 xhtml、xml、webp、png、igned-exchange（如下）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p><font color="darkorange">Content-Type: 表示请求体的格式</font>（例：text/javascript;charset=utf-8）</p>
</li>
<li>
<p><font color="grey">回车</font>（划分请求头、请求体的界线）</p>
</li>
<li>
<p><font color="redr">请求体（也就是上传内容）</font></p>
</li>
</ul>
<h4 id="细节">细节</h4>
<ul>
<li>
<p>请求有三部分，用回车隔开，分别是：（与 ↑↑ 对应颜色）</p>
<ul>
<li><font color="redorage">请求行</font>（因为只有一行，所以叫请求行）<code>GET   /x?wd=hi   HTTP/1.1</code></li>
<li><font color="darkorange">请求头</font></li>
<li><font color="redr">请求体</font>（请求体的格式，是在 content-type 中指定的）</li>
</ul>
</li>
<li>
<p>请求动词有 GET / POST / PUT / PATCH / DELETE 等</p>
<ul>
<li>
<p>GET 用于获取内容</p>
</li>
<li>
<p>POST 用于上传内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">发送post请求：curl -v -X POST --data &#39;上传内容&#39; http://localhost:8888/
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ul>
</li>
<li>
<p>请求体在 GET 请求中一般为空</p>
<ul>
<li>因为get请求通常用于获取内容，而请求体表示要上传的内容，所以GET请求一般没有请求体</li>
</ul>
</li>
<li>
<p>文档位于 <a href="https://tools.ietf.org/html/rfc2616#page-35" target="_blank" rel="noopener noreffer">RFC2616 第五章</a></p>
</li>
<li>
<p>大小写不敏感（随意），最好照着我的写</p>
</li>
</ul>
<p>​</p>
<h3 id="响应">响应</h3>
<p></p>
<ul>
<li><strong><font color="redorage">协议名/版本 状态码 状态字符串</font></strong></li>
<li><font color="darkorange">Content-Type: 响应体的格式</font></li>
<li><font color="gray">回车</font></li>
<li><font color="redr">响应体</font>（也就是下载内容）</li>
</ul>
<h4 id="细节-1">细节</h4>
<ul>
<li>响应有三部分，用回车隔开，分别是：
<ul>
<li><font color="redorage">状态行</font>（Status LIne）</li>
<li><font color="darkorange">响应头</font></li>
<li><font color="redr">响应体</font>（响应体的格式，在Content-Type中指定）</li>
</ul>
</li>
<li>常见的状态码是<strong>考点</strong>
<ul>
<li>200 成功</li>
<li>404 找不到</li>
</ul>
</li>
<li>文档位于 <a href="https://tools.ietf.org/html/rfc2616#page-39" target="_blank" rel="noopener noreffer">RFC2616 第六章</a></li>
</ul>
<p>​</p>
<h2 id="用-curl-构造请求">用 curl 构造请求</h2>
<h3 id="curl-用法">curl 用法</h3>
<blockquote>
<p>curl 可以用来改请求动词、查询参数，还可以改第二部分的请求头、第三部分的请求内容…</p>
<ul>
<li>什么都可以改，请求的东西都可以由自己觉得</li>
<li>只不过需要按照 http 的标准来写</li>
</ul>
</blockquote>
<blockquote>
<p>前提条件：server 要处于开启的状态：node server.js 8888</p>
</blockquote>
<p>例：<strong><code>curl -v http://localhost:8888</code></strong></p>
<blockquote>
<p>设置请求动词</p>
</blockquote>
<ul>
<li><code>-X POST</code></li>
<li>例：<strong><code>curl -v -X POST http://localhost:8888</code></strong>  设置为post请求</li>
<li>注意大小写</li>
</ul>
<blockquote>
<p>设置路径和查询参数</p>
</blockquote>
<ul>
<li>直接在 url 后面加</li>
<li>例：<strong><code>curl -v -X POST http://localhost:8888/xxx?id=xxx</code></strong></li>
<li>注：在 url 后添加 # 锚点是不会发送到服务器的</li>
</ul>
<blockquote>
<p>设置请求头</p>
</blockquote>
<ul>
<li><code>-H 'Name: Value' </code> 或者  <code>--header 'Name: Value'</code></li>
<li>例：<strong><code>curl -v -X POST -H 'Accept: text/html' http://localhost:8888</code></strong></li>
</ul>
<blockquote>
<p>设置请求体</p>
</blockquote>
<ul>
<li><code>-d '内容'</code>  或者  <code>--data '内容'</code></li>
</ul>
<ul>
<li>
<p><strong><code>curl -v -X POST -H 'ABC: abc' -H 'Content-Type: text/plain;charset=utf-8' -d '请求体内容' http://localhost:8888</code></strong></p>
<p>在请求体中设置一个 ABC: abc，没有实际意义但是成立的。</p>
<p>text/plain 表示上传的内容是纯文本，编码是 utf-8（中文），内容是&rsquo;请求体内容&rsquo;这5个字（每个字占2bytes）</p>
<p></p>
</li>
</ul>
<blockquote>
<p>总结：可以使用 curl 随心所欲的构造一个请求</p>
</blockquote>
<p>​</p>
<h3 id="用-nodejs-读取请求">用 Node.js 读取请求</h3>
<p>读取请求动词</p>
<ul>
<li>
<p><strong><code>request.method</code></strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;method:&#39;</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">method</span><span class="p">)</span>   <span class="c1">// method: GET ...
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>读取路径</p>
<ul>
<li>
<p><strong><code>request.url</code></strong> 路径，带查询参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;路径：&#39;</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">)</span> <span class="c1">// 路径：/xxxx?wd=hihihi
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong><code>path</code></strong> 纯路径，不带查询参数</p>
</li>
<li>
<p><strong><code>query</code></strong> 只有查询参数</p>
</li>
</ul>
<p>读取请求头</p>
<ul>
<li>
<p>**<code>request.headers['Accept']</code> **    读取请求头中的 Accept 值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;请求头：&#34;</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">headers</span><span class="p">)</span>  <span class="c1">// 请求头：{ host:xxx, ???:???, ... }
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>读取请求体</p>
<ul>
<li>比较复杂，先不讲</li>
</ul>
<p>​</p>
<h3 id="用-nodejs-设置响应">用 Node.js 设置响应</h3>
<p>设置响应状态码</p>
<ul>
<li><strong><code>response.statusCode = 200 </code></strong></li>
<li>状态码可以任意设置，状态字符串会根据设置的状态码自动改变</li>
<li>但是状态码是有统一的使用规则的，如 200 规定就是表示请求成功时返回的状态码，所以不要随意改变</li>
<li>404 表示请求的网页不存在 。404 页面就是一个普通页面，是 Chrome 提供的，当访问页面不存在时提醒用户</li>
</ul>
<p>设置响应头</p>
<ul>
<li><strong><code>response.setHeader(&quot;Content-Type&quot;, &quot;text/html&quot;); </code></strong></li>
</ul>
<p>设置响应体</p>
<ul>
<li>
<p><strong><code>response.write(&quot;内容&quot;） </code></strong></p>
</li>
<li>
<p>可追加内容</p>
</li>
</ul>
<p>​</p>
<h3 id="curl-的作用是什么">curl 的作用是什么</h3>
<blockquote>
<p>不单单是用来测试 http 的请求和响应。</p>
<p>curl 可以完成 Chrome 的大多基本功能，但 curl 通过命令行执行，所以不具有可视化能力</p>
</blockquote>
<ol>
<li>
<p>下载图片</p>
<p><code>curl 图片路径.jpg &gt; xxx.jpg</code>  （ 在命令行开启的目录中，下载图片并重命名为 xxx ）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">curl https://i.loli.net/2020/07/15/Q2dnHSgxCcbfhZW.jpg &gt; 3.jpg
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
<li>
<p>测试 请求和响应</p>
</li>
<li>
<p>…</p>
<p>curl 功能很强大，Chrome 的基本功能都可以实现，但不具有可视化</p>
</li>
</ol>
<p>​</p>
<h2 id="html--css--js-的本质都是字符串">HTML / CSS / JS 的本质都是字符串</h2>
<blockquote>
<p>HTML / CSS / JS 的<strong>本质都是字符串，不是文件</strong></p>
<ul>
<li>本质上我们看到的网页，都是通过 html字符串 渲染的，html字符串 里面请求了 css字符串、js字符串</li>
<li>从演示的 server.js 中就能体现这一点</li>
</ul>
</blockquote>
<p>​</p>
<p>​</p>
<h2 id="consolelog-调试大法">console.log 调试大法</h2>
<blockquote>
<p>console.log（打印）这种调试方法，是在所有编程语言中都适用的</p>
<p>JS（console.log）、Java（print）、Python（print）、PHP（echo）…  语言/写法不一样，但原理相同</p>
</blockquote>
<ul>
<li>把可能有问题的代码，打印看看</li>
<li>debug 就是在不断质疑自己的过程</li>
<li>不要过分相信自己，而要相信 console.log() 可以告诉你对错</li>
<li>程序员每天都在问自己错在哪里</li>
</ul>]]></description>
</item><item>
    <title>前端也得懂点儿 HTTP (上) ：浅析 URL</title>
    <link>http://samrks.github.io/http-1-url/</link>
    <pubDate>Tue, 04 Aug 2020 23:58:43 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://samrks.github.io/http-1-url/</guid>
    <description><![CDATA[<p>本文主要围绕 URL ，为学 HTTP 做个铺垫。</p>
<p>​</p>
<h2 id="先导">先导</h2>
<h3 id="英语protocol">英语：protocol</h3>
<blockquote>
<p>protocol       /ˈproʊtəkɑːl/     协议、礼节、约定</p>
</blockquote>
<h3 id="李爵士发明的三样东西">李爵士发明的三样东西</h3>
<blockquote>
<p>WWW = URL + HTTP + HTML</p>
</blockquote>
<p>HTML 前面已经学了，html + css 本质就是网页</p>
<p>再认识了 URL 和 HTTP ，那么 WWW 我们就基本了解了（ URL 是为 HTTP 做铺垫）</p>
<p>​</p>
<h2 id="什么是-ip">什么是 IP</h2>
<blockquote>
<p>要学习 URL 、HTTP，得先从 IP 讲起（⭐剧透：HTTP 的 P  和  IP 的 P 之间有重要联系）</p>
</blockquote>
<p>IP：</p>
<ul>
<li>
<p>Internet（因特网==互联网，整个人类组成的网络就叫互联网，比WWW更加底层）protocol（协议）</p>
</li>
<li>
<p>由此可见 IP 也是非常底层的，没有 IP 就不能上网</p>
</li>
</ul>
<p>Internet Protocal 主要约定了两件事：</p>
<ul>
<li>一、<strong>如何定位一台设备</strong></li>
<li>二、如何封装数据报文，以跟其他设备交流
<ul>
<li>具体内容我们不关心</li>
</ul>
</li>
</ul>
<blockquote>
<p>只要你在互联网中，你就有至少一个独特的IP</p>
</blockquote>
<p>​</p>
<h3 id="ip-分为内网和外网">IP 分为内网和外网</h3>
<blockquote>
<p>内网和外网是不能直接相通的，只能通过路由器作为网关，来连通</p>
</blockquote>
<p></p>
<p>路由器：是一个非常重要的设备，连通了内网和外网</p>
<p>例：比如你在玩 LOL，按了一下Q键（第一个技能），怎么让网线那头的对手被Q到？</p>
<ul>
<li>Q 通过键盘传到路由器，路由器通过电信服务器传到 QQ 的游戏服务器， QQ 的游戏服务器接收到 Q 键后，就将 Q 键发送到对手那里，对手就被 Q 到了</li>
<li>整个过程是非常复杂的，但非常快，按下Q键立马响应，因为这个复杂的过程是以光速的形式来运行的，所以用户感受不到</li>
</ul>
<p>​</p>
<h3 id="如何获取外网-ip">如何获取外网 IP</h3>
<blockquote>
<p>必须有 外网IP 才能和小伙伴打 LOL、王者荣耀…</p>
</blockquote>
<ol>
<li>
<p>首先，你得从电信租用带宽，一年一千多。</p>
<p>（然后需要有个猫（调制解调器），猫是用来把信号转换成路由器能理解的信号。现在普遍是光猫，把光信号变成电信号，变成路由器能理解的网络信号）</p>
</li>
<li>
<p>你买了一个路由器，然后用电脑和手机分别连接路由器广播出来的无线 WIFl。</p>
<ul>
<li>有线连接和无线WiFi在本质上没有不同，但在实际使用中，无线可能慢于有线连接</li>
<li>有线连接的下载速度可能超过 10M/s，但无线WIFI连接的设备的下载速度可能无法超过 10M/s</li>
</ul>
</li>
<li>
<p>只要路由器连上电信的服务器，那么路由器就会有一个「外网 IP」 ，比如 [ 14.17.32.211 ] 就是一个外网 IP。这就是你在互联网中的地址。</p>
<ul>
<li>访问 <a href="https://ip138.com/">https://ip138.com/</a> 查看当前外网 IP（通常外网IP不要告诉别人，可以准确定位你的位置）</li>
<li>那么你的所有设备，就全都是这一个 外网 IP</li>
<li>那么如何区分是手机设备…还是笔记本呢？这就依靠「内网 IP」来区分了</li>
</ul>
</li>
<li>
<p>但是如果你重启路由器，那么你很有「可能」被重新分配一个「外网 IP」，也就是说你的路由器没有「固定的外网 IP」</p>
<ul>
<li>如果想固定外网IP ，需要花钱每个月五六千，可以得到一个固定的外网IP（在国内购买这些网络资源通常贵于国外）</li>
</ul>
</li>
<li>
<p>但是有个问题，你的路由器的外网 IP 如果是 14.17.32.211，那么你的手机和电脑的 IP 又是什么呢？答案是「内网IP」</p>
</li>
</ol>
<p>​</p>
<h3 id="内网-ip">内网 IP</h3>
<ol>
<li>
<p>路由器会在你家里创建一个内网，内网中的设备使用内网IP，一般来说这个IP的格式都是192.168.xxx.xxx。</p>
<ul>
<li>
<p>命令行：ipconfig ，查看当前设备的内网 IP  ：192.168.101.10</p>
<p></p>
<p>默认网关中的 IP：192.168.101.1  是路由器的 IP</p>
</li>
<li>
<p>如果你家足够大，路由器可能功率不够，覆盖不了整个家，用户可能需要买电力猫或再买一个小路由器做中介器之类的手段，来扩大覆盖范围到整个家。</p>
</li>
<li>
<p>如果家里五六十平米，那路由器基本可以全覆盖。</p>
</li>
</ul>
</li>
<li>
<p>一般路由会给自己分配一个好记的内网IP，如 192.168.1.1</p>
<ul>
<li>小米路由器的 IP ，一般都是 192.168.31.1，为了让出一个位置给光猫的 IP</li>
</ul>
</li>
<li>
<p>然后路由会给每一个内网中的设备分配一个不同的内网 IP，如电脑是 192.168.1.2，手机是 192.168.1.3，以此类推。</p>
</li>
</ol>
<p>​</p>
<h3 id="路由器的功能">路由器的功能</h3>
<blockquote>
<p>把内网的请求，路由到外部，把外部的响应，路由到内部。具有双向路由的功能，所以也被称为网关</p>
</blockquote>
<ol>
<li>现在路由器有两个 IP，一个外网 IP（电信分配的）和一个内网 IP（自己分配给自己的）</li>
<li>内网中的设备可以互相访问，但是不能直接访问外网</li>
<li>内网设备想要访问外网，就必须经过路由器中转</li>
<li>外网中的设备可以互相访问，但是无法访问你的内网</li>
<li>外网设备想要把内容送到内网，也必须通过路由器
<ul>
<li>想从网上（外网）下载内容，会先把内容下载到路由器，路由器再把内容下载到用户的设备上</li>
</ul>
</li>
<li>也就是说内网和外网就像两个隔绝的空间，无法互通，唯一的联通点就是路由器</li>
<li>所以路由器有时候也被叫做「网关]
<ul>
<li>一夫当关，万夫莫开。一旦把路由器拔了，那就与网络世界断联了</li>
</ul>
</li>
</ol>
<p>​</p>
<blockquote>
<p>用 http-server 可以创建一个服务</p>
<ul>
<li>
<p>命令行：http-server . -c-1</p>
<p></p>
</li>
<li>
<p>第一个地址 192.168.xxx.xxx:8080 ，是给手机访问的（需要手机端调试内容时，就可以使用）</p>
</li>
<li>
<p>第二个地址 127.0.0.1:8080 ，是给电脑访问的</p>
</li>
</ul>
</blockquote>
<p>​</p>
<h3 id="几个特殊的-ip">几个特殊的 IP</h3>
<p>分别是</p>
<ol>
<li>127.0.0.1 表示自己（规定死的）</li>
<li>localhost 通过 <a href="C:%5cWindows%5cSystem32%5cdrivers%5cetc" rel="">hosts</a> 指定为自己</li>
<li>0.0.0.0 不表示任何设备</li>
</ol>
<p>​</p>
<h4 id="问hosts-文件在哪">问：hosts 文件在哪？</h4>
<blockquote>
<p>答： 在 Windows 系统中，hosts 位于 C:\Windows\System32\drivers\etc\hosts 。在 macOS / Linux系统中，hosts 位于 /etc/hosts</p>
</blockquote>
<p>hosts 文件，用于指定本机 IP （表示自己）</p>
<ul>
<li>127.0.0.1 / localhost  是 hosts 中默认的 （表示自己）</li>
<li>也可以在 hosts 文件中添加自定义 <strong>任何字符串</strong> 来表示自己（文件中的#内容均为注释，可删）
<ul>
<li>写法如下，定义后，就可以使用这些字符串来访问本地服务</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">+ 127.0.0.1 sam
+ 127.0.0.1 ryuuks
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注意：需要通过 http-server 开启本地服务后，下述地址才可以使用</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">http://localhost:8080/index.html
http://127.0.0.1:8080/index.html
http://sam:8080/index.html
http://ryuuks:8080/index.html
</code></pre></td></tr></table>
</div>
</div><p>上述地址，均可以访问到 index.html</p>
<p>​</p>
<p>​</p>
<h2 id="端口">端口</h2>
<blockquote>
<p>IP 有了，还需要什么？ 端口</p>
</blockquote>
<p>WWW（万维网）= URL + HTTP + HTML</p>
<ul>
<li>URL 就是用来定位服务器的，例如，定位百度的服务器 baidu.com</li>
</ul>
<blockquote>
<p>一台机器可以提供很多服务</p>
<p>每个服务一个号码，这个号码就叫端口号port</p>
</blockquote>
<h3 id="端口-port">端口 port</h3>
<h4 id="一个比喻">一个比喻</h4>
<ul>
<li>麦当劳提供两个窗口，一号快餐，二号咖啡</li>
<li>你去快餐窗口点咖啡会被拒绝，让你去另一个窗口</li>
<li>你去咖啡窗口点快餐结果一样</li>
</ul>
<blockquote>
<p>在计算机世界也是这样，你要提供不同的服务，就需要有不同的窗口。这个窗口，就是端口 port</p>
</blockquote>
<h4 id="一台机器可以提供不同服务">一台机器可以提供不同服务</h4>
<ul>
<li>要提供 HTTP 服务最好使用 80 端口</li>
<li>要提供 HTTPS 服务最好使用 443 端口</li>
<li>要提供 FTP 服务最好使用 21 端口</li>
<li>一共有 65535 个端口（基本够用）</li>
</ul>
<p>​</p>
<h3 id="我怎么知道应该用什么端口">我怎么知道应该用什么端口</h3>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/TCP/UDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8#0%E5%88%B01023%E5%8F%B7%E7%AB%AF%E5%8F%A3" target="_blank" rel="noopener noreffer">维基百科</a>一个一个列出来了，需要的时候就对应查找：每个端口用来做什么</p>
</blockquote>
<table>
<thead>
<tr>
<th>端口</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>80/TCP,UDP</td>
<td><a href="https://zh.wikipedia.org/wiki/%e8%b6%85%e6%96%87%e6%9c%ac%e4%bc%a0%e8%be%93%e5%8d%8f%e8%ae%ae" target="_blank" rel="noopener noreffer">超文本传输协议</a>（HTTP）或 <a href="https://zh.wikipedia.org/wiki/%e5%bf%ab%e9%80%9fUDP%e7%bd%91%e7%bb%9c%e8%bf%9e%e6%8e%a5" target="_blank" rel="noopener noreffer">快速UDP网络连接</a>- 用于传输网页</td>
</tr>
<tr>
<td></td>
<td>例如：百度服务器要给用户传输一个网页，那就必须用80端口，用其他端口会有问题</td>
</tr>
<tr>
<td>443/TCP</td>
<td><a href="https://zh.wikipedia.org/wiki/%e8%b6%85%e6%96%87%e6%9c%ac%e4%bc%a0%e8%be%93%e5%ae%89%e5%85%a8%e5%8d%8f%e8%ae%ae" target="_blank" rel="noopener noreffer">超文本传输安全协议</a>（HTTPS）或<a href="https://zh.wikipedia.org/wiki/QUIC" target="_blank" rel="noopener noreffer">QUIC</a></td>
</tr>
<tr>
<td></td>
<td>HTTPS 协议传输就必须用 443 端口，用其他端口也会有问题</td>
</tr>
<tr>
<td>21/TCP,UDP</td>
<td><a href="https://zh.wikipedia.org/wiki/%e6%96%87%e4%bb%b6%e4%bc%a0%e8%be%93%e5%8d%8f%e8%ae%ae" target="_blank" rel="noopener noreffer">文件传输协议</a>（FTP） - 控制端口</td>
</tr>
<tr>
<td></td>
<td>80后和早期的90后应该在学校见过FTP协议，传文件都是通过 FTP。95后00后可能没见过FTP了</td>
</tr>
</tbody>
</table>
<p>​</p>
<h3 id="端口使用还有什么规则">端口使用还有什么规则</h3>
<ol>
<li>0 到 1023（2的10次方减1）号端口是留给系统使用的
<ul>
<li>普通用户绝对不能使用</li>
<li>即使是管理员有使用权限，但也需要输入额外的密码才能使用这些端口，所以也不推荐管理员使用</li>
<li>通常使用 8080 端口做开发，真正部署服务器时，拥有服务器权限才能用 80 端口…</li>
</ul>
</li>
<li>你只有拥有了管理员权限后，才能使用这 1024 个端口</li>
<li>其他端口可以给普通用户使用</li>
<li>比如 http-server 默认使用 8080 端口</li>
<li>一个端口如果被占用，你就只能换一个端口</li>
</ol>
<h4 id="在其他端口开启服务">在其他端口开启服务</h4>
<ol>
<li>
<p>在 1234 端口开启服务</p>
<p>命令行：<code>hs -c-1 -p 1234</code>（hs：http-server 简写）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">http</span><span class="o">:</span><span class="c1">//192.168.101.10:1234
</span><span class="c1"></span><span class="nx">http</span><span class="o">:</span><span class="c1">//127.0.0.1:1234
</span></code></pre></td></tr></table>
</div>
</div><p>通过访问 http://localhost:1234/index.html 就可以浏览本地页面</p>
</li>
<li>
<p>可否强行使用 80 端口，开启服务呢？🉑</p>
<blockquote>
<p>仅在 windows 上能直接使用这个端口号，在 Linus 和 Mac 中都必须输入密码才能使用，不推荐</p>
</blockquote>
<p>命令行：<code>hs -c-1 -p 80</code>  （在 80 端口开启服务）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">http</span><span class="o">:</span><span class="c1">//192.168.101.10:80
</span><span class="c1"></span><span class="nx">http</span><span class="o">:</span><span class="c1">//127.0.0.1:80
</span></code></pre></td></tr></table>
</div>
</div><p>通过访问 http://localhost/index.html 就可以浏览本地页面（80 是默认端口，可省略）</p>
</li>
<li>
<p>端口被占用的情况，会有如下报错，换个其他的端口号即可（六万多个端口）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">hs</span> <span class="o">-</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span> <span class="o">-</span><span class="nx">p</span> <span class="mi">80</span>
<span class="p">=&gt;</span>  <span class="nb">Error</span><span class="o">:</span> <span class="nx">listen</span> <span class="nx">EADDRINUSE</span> <span class="mf">0.0.0.0</span><span class="o">:</span><span class="mi">80</span> <span class="c1">// EADDRINUSE: error address in use 错误地址正在使用中
</span><span class="c1"></span>    
<span class="nx">hs</span> <span class="o">-</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span> <span class="o">-</span><span class="nx">p</span> <span class="mi">1234</span>
<span class="p">=&gt;</span>  <span class="nb">Error</span><span class="o">:</span> <span class="nx">listen</span> <span class="nx">EADDRINUSE</span> <span class="mf">0.0.0.0</span><span class="o">:</span><span class="mi">1234</span> <span class="c1">// error address in use
</span><span class="c1"></span>    
<span class="nx">hs</span> <span class="o">-</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span> <span class="o">-</span><span class="nx">p</span> <span class="mi">2233</span>
<span class="p">=&gt;</span>  <span class="nx">http</span><span class="o">:</span><span class="c1">//192.168.101.10:2233
</span><span class="c1"></span><span class="p">=&gt;</span>  <span class="nx">http</span><span class="o">:</span><span class="c1">//127.0.0.1:2233
</span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<p>​</p>
<p>​</p>
<h2 id="ip-和端口缺一不可">IP 和端口缺一不可</h2>
<blockquote>
<p>总而言之：<strong>IP 和 端口 缺一不可</strong> （记住这句话）</p>
</blockquote>
<ul>
<li>IP 是用来定位一个<strong>设备</strong>。</li>
<li>端口是用来定位一个设备的<strong>服务。</strong></li>
<li>有了 IP 和端口，就可以定位一个设备提供的服务了。</li>
<li>例如：百度设备提供的网页服务。腾讯设备提供的聊天服务。淘宝设备提供的支付服务</li>
<li>这些服务都可以通过 IP + 端口 ，实现唯一确定</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="域名是什么">域名是什么</h2>
<blockquote>
<p>域名就是对 IP 起一个友好的名字。</p>
<p>域名是以 .com  .net  .org  …  结尾的字符串，仅此而已。需要花钱购买</p>
<p>如：qq.com</p>
</blockquote>
<ul>
<li>
<p>在前面搭建个人博客时，已经注册过域名。</p>
</li>
<li>
<p>我没有自己的服务器，而是将这个域名映射到（指向） github 的服务器上</p>
</li>
<li>
<p>github 给我 4 个 IP。用户访问时，会访问到这4台中的任何一台服务器。访问的内容都是一样的</p>
</li>
</ul>
<p>​</p>
<p>补充：</p>
<ul>
<li>.com 域名，比较便宜，一年50-80</li>
<li>t.tt，曾经是锤子手机的域名，转手价50W。访问 t.tt 跳转至锤子手机官网：smartisan.com</li>
<li>蔡文胜，2000年抢注十多万个域名，倒手生意。 qiyi.com 是百度旗下爱奇艺的域名</li>
<li>为什么我们需要向国外的人购买域名？发域名的机构也很赚钱。这就是美国人欧洲人赚钱的思维，我发明一套东西，用户都需要使用的，那使用一次就要交一次钱。
<ul>
<li>比如苹果有很多手机专利。谷歌买了摩托罗拉，摩托罗拉也有很多手机专利。谷歌发明了安卓系统，手机厂商用到安卓系统里面的谷歌服务，也需要给谷歌钱。</li>
<li>中国的 5G 出来了，如果以后世界的 5G 应用是由中国主导，关键技术是中国的，那么中国就可以躺着赚钱。如果中国的 5G 搞起来了，那就不单是 5G，周边的所有产业都会全面超过其他国家（所以川普联合各国抵制）</li>
</ul>
</li>
</ul>
<blockquote>
<p>在互联网，每一个新东西出来，都蕴藏着巨大的商机。  如5G</p>
</blockquote>
<p>​</p>
<h3 id="域名就是对-ip-的别称">域名就是对 IP 的别称</h3>
<p>baidu.com 对应什么 IP</p>
<ul>
<li>
<p>命令行：ping baidu.com</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="mf">220.181.38.148</span>  <span class="c1">// 也有 39.156.69.79
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>qq.com 对应什么 IP</p>
<ul>
<li>
<p>命令行：ping qq.com</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">125.39.52.26
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>知识点</p>
<blockquote>
<p>先总结：IP 和 域名 之间，没有什么必然的一对一关系</p>
</blockquote>
<ol>
<li>
<p>一个域名可以对应不同 IP（这个叫 <strong>负载均衡</strong>）</p>
<ul>
<li>这个叫做均衡负载，防止一台机器扛不住</li>
</ul>
</li>
<li>
<p>一个 IP 可以对应不同域名（这个叫 <strong>共享主机</strong>）</p>
<ul>
<li>比如6个人合买一台主机，这台主机服务6个域名</li>
</ul>
<ul>
<li>就叫做共享主机，穷开发者会这么做</li>
<li>或者一个公司提供不同的网站，但不想买两台服务器，就把两个网站（两个域名）放在同一台主机上</li>
</ul>
</li>
</ol>
<p>​</p>
<blockquote>
<p>通常 ping 同一个域名，不一定会得到同一个 IP。这里涉及 <strong>负载均衡</strong> 的问题。</p>
<ul>
<li>假如，一万人同时访问百度，如果只有一个服务器，就要同时接纳一万人。</li>
<li>如果有100万人同时访问，，即使每人只分配1k内存，也需要 100万 k，那么这台服务器肯定容纳不了</li>
<li>解决方法，把这个域名绑定到4个不同的 IP 上，4个 IP 分别位于 华中、华南、华东、华北。</li>
<li>电信有全国服务器，告诉电信，如果用户来自华中，就访问华中服务器…（1/4分流）</li>
<li>如此实现负载均衡。分散负担，不至于让某个服务器因承受不了而宕机。（网站优化策略）</li>
</ul>
</blockquote>
<p>​</p>
<p>补充：</p>
<ul>
<li>
<p>ping 的作者写的一篇文章：<a href="https://ftp.arl.army.mil/~mike/ping.html" target="_blank" rel="noopener noreffer">The Story of the PING Program</a></p>
</li>
<li>
<p>皮卡丘站起来，是皮卡兵。皮卡丘跑起来是什么？<a href="%e7%9a%ae%e5%8d%a1%e4%b9%92%e3%80%81%e7%9a%ae%e5%8d%a1%e4%b9%93" rel="">答案</a> 😂</p>
</li>
</ul>
<p>​</p>
<h3 id="域名和-ip-是怎么对应起来的">域名和 IP 是怎么对应起来的</h3>
<blockquote>
<p>通过 DNS</p>
<ul>
<li>Domain Name System （域名系统、域名服务）</li>
</ul>
</blockquote>
<h4 id="当你输入-baiducom">当你输入 baidu.com</h4>
<p><strong>过程</strong></p>
<ol>
<li>
<p>你的 Chrome 浏览器会向电信/联通提供的 DNS 服务器询问 baidu.com 对应什么IP</p>
</li>
<li>
<p>电信/联通会回答一个 IP（具体过程很复杂，不研究）</p>
<ul>
<li>
<p>这个过程可以用 nslookup 模拟（ns域名，lookup寻找）命令行：nslookup baidu.com</p>
<p></p>
</li>
</ul>
</li>
<li>
<p>然后 Chrome 才会向对应 IP 的 80 / 443 端口发送请求</p>
</li>
<li>
<p>请求内容是查看 baidu.com 的首页</p>
<ul>
<li>baidu 收到请求，就会把你请求的页面的 index.html 发送给你，index.html 中又会请求 css 、js，加载完css、js，就可以看到 baidu.com 的完整页面</li>
</ul>
</li>
</ol>
<p>​</p>
<p><strong>在 network 中可以查看全部请求</strong></p>
<ul>
<li>
<p>Request URL:    <a href="https://www.baidu.com/">https://www.baidu.com/</a>（末尾的 / 表示请求的是baidu的根目录）</p>
<p></p>
</li>
<li>
<p>Response：[得到一个<code>&lt;html&gt;…&lt;/html&gt;</code>]，浏览器就会把这一串 html 渲染出来（中间遇到 link 会请求对应的图片、css、js等文件）</p>
</li>
</ul>
<p>​</p>
<p><strong>为什么是 80 或 443 端口？</strong></p>
<blockquote>
<p>因为这是规定。</p>
</blockquote>
<p>我们在地址栏输入 baidu.com 时，为什么不用写端口号？如 <code>baidu.com:443</code> （ IP 和端口不是缺一不可吗！）</p>
<ul>
<li>
<p>服务器默认用 80 提供 http 服务</p>
</li>
<li>
<p>服务器默认用 443 提供 https 服务</p>
</li>
<li>
<p>你可以在开发者工具里看到具体的端口</p>
<p>61.135.168.125:443  （ 前面就是服务器 IP ，后面就是网页服务的端口）</p>
<p></p>
<p>访问 http 就是 80，访问 https 就是 443</p>
</li>
</ul>
<p>​</p>
<h3 id="题外话">题外话</h3>
<blockquote>
<p>前端需要懂点域名知识</p>
</blockquote>
<h4 id="www">www</h4>
<ul>
<li><a href="http://www.baidu.com">www.baidu.com</a> 和 baidu.com</li>
<li>是同一个域名吗？不是</li>
</ul>
<h4 id="他们是什么关系">他们是什么关系</h4>
<blockquote>
<p><a href="http://www.baidu.com">www.baidu.com</a> 和 baidu.com</p>
</blockquote>
<ul>
<li>com 是顶级域名（com 全写 company 公司，org 非营利性组织）</li>
<li>baidu.com 是二级域名（俗称一级域名）父域名</li>
<li><a href="http://www.baidu.com">www.baidu.com</a> 是三级域名（俗称二级）子域名</li>
<li>他们是父子关系</li>
<li>github.io 把子域名 xxx.github.io 免费给你使用
<ul>
<li>所以 github.io（github公司）和 xxx.github.io（个人网站） 可能不是同一家公司，之间没什么关系</li>
</ul>
</li>
<li>所以你应该知道 <a href="http://www.baidu.com">www.baidu.com</a> 和 baidu.com 可以不是同一家公司，也可以是</li>
<li>www 是多余的吗？是的，非常多余。
<ul>
<li>早期人们为了表明自己是 www 而加的，实际上没有必要加，因为所有域名本身就存在与 万维网www中，写上www前缀反倒多此一举</li>
</ul>
</li>
</ul>
<p>​</p>
<h2 id="如何请求不同的页面">如何请求不同的页面</h2>
<p>访问不同的<strong>路径</strong>，就请求到不同的页面，如下（注意：路径后面不加后缀）</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">https://developer.mozilla.org/zh-CN/docs/Web/HTML</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">https://developer.mozilla.org/zh-CN/docs/Web/CSS</a></li>
</ul>
<p>工具</p>
<ul>
<li>使用 Chrome 开发者工具 Network 面板看看区别
<ul>
<li>只有 Request URL 不同</li>
</ul>
</li>
</ul>
<p>​</p>
<h2 id="同一个页面不同内容">同一个页面，不同内容</h2>
<p>不同的<strong>查询参数</strong>，返回不同的内容</p>
<ul>
<li><a href="http://www.baidu.com/s?wd=hi">www.baidu.com/s?wd=hi</a></li>
<li><a href="http://www.baidu.com/s?wd=hello">www.baidu.com/s?wd=hello</a></li>
</ul>
<p>​</p>
<h2 id="同一个内容不同位置">同一个内容，不同位置</h2>
<p><strong>锚点</strong>可以做到</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS#">https://developer.mozilla.org/zh-CN/docs/Web/CSS#</a>参考书</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS#">https://developer.mozilla.org/zh-CN/docs/Web/CSS#</a>教程</li>
</ul>
<p>注意</p>
<ul>
<li>锚点看起来有中文，实际不支持中文</li>
<li><code>#参考书</code> 会变成 <code>#%E5%8F%82%E8%80%83%E4%B9%A6</code>  重新编码</li>
<li>锚点是无法在 Network 面板看到的，因为锚点不会传给服务器。
<ul>
<li># 井号后面的内容会被浏览器直接吃掉，并不会传到服务器中</li>
<li>锚点仍在当前页面中，只是位置不同而已，并不需要重新请求数据</li>
<li><strong>注意</strong>：一定不要把用户传参拼接到 # 后面，会被浏览器当做锚点内容直接吃掉，服务器就无法获取到参数</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="一个-url-的完整内容">一个 URL 的完整内容</h2>
<blockquote>
<p><strong>协议  +  域名 或 IP  +  端口号  +  路径  +  查询字符串  +  锚点</strong></p>
</blockquote>
<ul>
<li>协议：分 HTTP 和 HTTPS</li>
<li>域名：用来表示IP对应的名称的字符串</li>
<li>IP ：用来定位一个设备的字符串（分为4段，最大值255）</li>
<li>端口号：提供一个服务，就要有对用端口号（有六万多个）</li>
<li>路径：就是一个字符串，用来判断用户访问什么网页</li>
<li>查询参数：就是这个网页中，用户要具体看什么内容，可能有分页</li>
<li>锚点：内容已经获取到了，通过锚点定位到用户想要具体查看的内容的位置（实现文档内部的定位）</li>
</ul>
<p>把上述全部加起来，就是 李爵士发明的 URL （统一资源定位符）</p>
<blockquote>
<p>URL</p>
<ul>
<li>
<p>U：Uniform 统一。国际化标准的</p>
</li>
<li>
<p>R：Resouce 资源。图片、网页…都是资源</p>
</li>
<li>
<p>L：Locator 定位符。</p>
</li>
</ul>
</blockquote>
<p>例：</p>
<ul>
<li>就算没写，你也应该知道端口
<ul>
<li>HTTPS 默认端口 443、HTTP 默认端口 80</li>
</ul>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="http协议">HTTP（协议）</h2>
<blockquote>
<p>前面讲了 IP 协议：是用于表示每个设备的地址</p>
<p>而 HTTP 协议：是用来表示如何传输网页的</p>
<ul>
<li>HTTP协议，是基于 TCP 和 IP 两个协议</li>
<li>先有 TCP、IP，李爵士基于前人发明的这两个协议，发明了新的 HTTP 协议</li>
</ul>
</blockquote>
<p>​</p>
<h2 id="curl-命令">curl 命令</h2>
<ul>
<li>curl    /kɜːrl/     使…卷曲</li>
</ul>
<blockquote>
<p>如何用 curl 命令，发出 HTTP 的请求？</p>
</blockquote>
<h3 id="用-curl-可以发-http-请求">用 curl 可以发 HTTP 请求</h3>
<p><strong>示例1：</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl https://www.baidu.com
</code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li>执行命令，获取到整个文档。（中文默认 utf-8 编码，而控制台默认 GBK  所以中文会乱码）</li>
<li>我们在 Chrome 的地址栏中输入上述网址，Chrome 也是做了同样的事情，获取到这个html文档并解析</li>
</ul>
<p>​</p>
<p><strong>示例2：</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl -v http://baidu.com    只有域名没有路径
</code></pre></td></tr></table>
</div>
</div><ul>
<li>-v ： verbose   /vɜːrˈboʊs/   啰嗦（效果：会显示更多内容）</li>
</ul>
<p></p>
<blockquote>
<p>请求的内容</p>
</blockquote>
<ol>
<li>
<p>我们发出的 HTTP 请求中，只有域名没有路径，则默认请求根路径，会自动补全根路径的斜杠 /</p>
</li>
<li>
<p>开启代理，使用了一些代理的功能（非必须）</p>
</li>
<li>
<p>问了DNS：获取到 baidu.com 的 IP</p>
</li>
<li>
<p>获取到 IP 后，就开始启动 TCP</p>
</li>
<li>
<p>开始连接到 baidu.com（ 220.181.38.148 这个 IP） 的 80 端口</p>
</li>
<li>
<p>连接成功，往 baidu.com 发送了这5行内容</p>
<ol>
<li>GET请求，请求/根路径，使用 HTTP 协议 1.1 版本</li>
<li>因为一个IP（220.181.38.148）可能对应多个域名，说明需要访问的是这个IP上的 baidu.com 这个域名</li>
<li>说明我是用什么来访问的：用 curl 的 7.61.1 版本来访问的</li>
<li>期待返回什么内容：*/*    表示所有内容我都接收</li>
<li>空行（发送一个回车）   表示请求头部分结束</li>
</ol>
</li>
</ol>
<blockquote>
<p>返回的内容</p>
</blockquote>
<ul>
<li>
<p>响应头：先忽略 😂</p>
</li>
<li>
<p><code>&lt;html&gt; &lt;meta …&gt;  &lt;/html&gt;</code> meta 中内容，意为请重新访问 <a href="http://www.baidu.com">http://www.baidu.com</a></p>
<ul>
<li>说明 <a href="http://baidu.com">http://baidu.com</a> 这个 URL 被弃用了，只使用这个最早就有的 URL <a href="http://www.baidu.com">www.baidu.com</a></li>
<li>通常直接使用 baidu.com 访问百度的人，基本都是程序员，将程序员的流量导到 www 上</li>
</ul>
</li>
</ul>
<blockquote>
<p>上面请求失败，发起第二次请求   <code>curl -v http://www.baidu.com</code></p>
</blockquote>
<p></p>
<p>​</p>
<p><strong>示例3：</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl -s -v -- https://www.baidu.com
</code></pre></td></tr></table>
</div>
</div><ul>
<li>会比上面显示的内容更详细</li>
</ul>
<p>​</p>
<h3 id="需要理解以下流程">需要理解以下流程</h3>
<ul>
<li>url 会被 curl 工具重写，先请求 DNS 获得 IP</li>
<li>先进行 TCP 连接，TCP 连接成功后，开始发送 HTTP 请求</li>
<li>请求内容看一眼</li>
<li>响应内容看一眼</li>
<li>响应结束后，关闭TCP连接（curl 中没有直接写出来）</li>
<li>真正结束（只有TCP结束才是真正的结束）</li>
</ul>
<p>​</p>
<h3 id="http">HTTP</h3>
<blockquote>
<p>HTTP 到底做了什么</p>
<ul>
<li>规定请求的格式是什么，响应的格式是什么</li>
</ul>
</blockquote>
<p>HTTP 规定了请求怎么写： 如何写第6步中的5行请求</p>
<p>HTTP 规定了响应怎么写： 如何写下面响应的内容</p>
<p>​</p>
<blockquote>
<p>那么 HTTP 到底是怎么规定请求格式和响应格式的？  下回分解 ✋</p>
</blockquote>
<p>​</p>
<p>​</p>
<h2 id="习题">习题</h2>
<blockquote>
<p>关于 <a href="http://www.baidu.com">www.baidu.com</a> 和 baidu.com，正确的有（多选）<a href="2,3" rel="">答案</a></p>
</blockquote>
<ol>
<li>是同一个域名</li>
<li>是不同的域名</li>
<li>它们还有相同的一级域名 baidu.com</li>
</ol>
<blockquote>
<p>关于 hosts 文件，正确的有（多选） <a href="1,2,4" rel="">答案</a></p>
</blockquote>
<ol>
<li>hosts 文件中以 # 开头的表示注释</li>
<li>hosts 中可以添加一行 127.0.0.1 sam，让 sam 成为 127.0.0.1 的别称</li>
<li>hosts 中可以添加一行 sam 127.0.0.1，让 sam 成为 127.0.0.1 的别称</li>
<li>hosts 一般需要用管理员权限才能编辑</li>
</ol>
<blockquote>
<p>HTTP 的英文全称是 <strong>____</strong>（注意大小写不要错了）</p>
</blockquote>
<ul>
<li>HyperText Transfer Protocol</li>
</ul>
<blockquote>
<p>DNS 的英文全称是 <strong>____</strong>（注意大小写不要错了）</p>
</blockquote>
<ul>
<li>Domain Name System</li>
</ul>
<blockquote>
<p>URL 包含哪些部分？（多选）<a href="1,2,3,4,5,6" rel="">答案</a></p>
</blockquote>
<ol>
<li>协议</li>
<li>域名或IP</li>
<li>端口</li>
<li>路径</li>
<li>查询参数</li>
<li>锚点</li>
<li>get 或 post</li>
</ol>]]></description>
</item></channel>
</rss>
